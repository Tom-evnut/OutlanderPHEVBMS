
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\7C8AEEB66DC228D48A8A52C58CBD2DFB/OutlanderBMSV2.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:

/*
  Reading the status of the board to identify any flags, will be more useful when implementing a sleep cycle
*/
void BMSModule::readStatus()
{
       0:	00 80 00 20 bd 01 00 00 21 a5 00 00 dd a4 00 00     ... ....!.......
  uint8_t payload[3];
  uint8_t buff[8];
  payload[0] = moduleAddress << 1; //adresss
      10:	dd a4 00 00 dd a4 00 00 dd a4 00 00 dd a4 00 00     ................
  payload[1] = REG_ALERT_STATUS;//Alert Status start
      20:	dd a4 00 00 dd a4 00 00 dd a4 00 00 21 a5 00 00     ............!...
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
      30:	21 a5 00 00 dd a4 00 00 a9 98 00 00 ad 98 00 00     !...............
        SERIALBMS.write(addrByte);
        SERIALBMS.write(&data[1], dataLen - 1);  //assumes that there are at least 2 bytes sent every time. There should be, addr and cmd at the least.
        data[0] = addrByte;
        if (isWrite) SERIALBMS.write(genCRC(data, dataLen));        

        if (Logger::isDebug())
      40:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
    }

    static int getReply(uint8_t *data, int maxLen)
    { 
        int numBytes = 0; 
        if (Logger::isDebug()) SERIALCONSOLE.print("Reply: ");
      50:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
            data[numBytes] = SERIALBMS.read();
            if (Logger::isDebug()) {
                SERIALCONSOLE.print(data[numBytes], HEX);
                SERIALCONSOLE.print(" ");
            }
            numBytes++;
      60:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
            data[numBytes] = SERIALBMS.read();
      70:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
      80:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      90:	b5 7e 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     .~..!...!...!...
        }
        if (maxLen == numBytes)
        {
            while (SERIALBMS.available()) SERIALBMS.read();
        }
        if (Logger::isDebug()) SERIALCONSOLE.println();
      a0:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
  payload[2] = 0x04;
  BMSUtil::sendDataWithReply(payload, 3, false, buff, 7);
  alerts = buff[3];
  faults = buff[4];
      b0:	21 a5 00 00 8d 8e 00 00 99 8e 00 00 9d 8e 00 00     !...............
      c0:	a9 8e 00 00 ad 8e 00 00 b1 8e 00 00 21 a5 00 00     ............!...
  COVFaults = buff[5];
  CUVFaults = buff[6];
}
      d0:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
    //match the correct comm speed so sometimes there are data glitches.
    static int sendDataWithReply(uint8_t *data, uint8_t dataLen, bool isWrite, uint8_t *retData, int retLen)
    {
        int attempts = 1;
        int returnedLength;
        while (attempts < 4)
      e0:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
      f0:	21 a5 00 00 21 a5 00 00 21 a5 00 00 59 b3 00 00     !...!...!...Y...
     100:	21 a5 00 00 81 ba 00 00 21 a5 00 00 21 a5 00 00     !.......!...!...
     110:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
     120:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
     130:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
            SERIALCONSOLE.println();
     140:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
        {
            sendData(data, dataLen, isWrite);
            delay(2 * ((retLen / 8) + 1));
            returnedLength = getReply(retData, retLen);
            if (returnedLength == retLen) return returnedLength;
     150:	81 9c 00 00 99 9c 00 00 b1 9c 00 00 c9 9c 00 00     ................
        }
        if (alerts & 0x10)
        {
          Logger::console("    Test Alert");
        }
        if (alerts & 0x20)
     160:	21 a5 00 00 81 bd 00 00 21 a5 00 00 21 a5 00 00     !.......!...!...
  for (int y = 1; y < 63; y++)
     170:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
        }
      }
      if (faults > 0 || alerts > 0) SERIALCONSOLE.println();
    }
  }
}
     180:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
        if (faults & 2)
     190:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
        if (faults & 0x20)
     1a0:	21 a5 00 00 21 a5 00 00 21 a5 00 00 21 a5 00 00     !...!...!...!...
      if (alerts > 0)
     1b0:	21 a5 00 00 21 a5 00 00 21 a5 00 00                 !...!...!...

000001bc <ResetHandler>:
          Logger::console("    Test fault active");
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
          Logger::console("    Power on reset has occurred");
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c2:	b510      	push	{r4, lr}
     1c4:	81da      	strh	r2, [r3, #14]
          Logger::console("    CRC error in received packet");
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	81da      	strh	r2, [r3, #14]
     1cc:	bf00      	nop
          Logger::console("    GROUP3 Regs Invalid");
     1ce:	bf00      	nop
     1d0:	f00a f9aa 	bl	a528 <startup_early_hook>
        if (alerts & 0x80)
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
          Logger::console("    Address not registered");
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
          Logger::console("    OTP EPROM Uncorrectable Error");
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
          Logger::console("    Test Alert");
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
     1ee:	6153      	str	r3, [r2, #20]
          Logger::console("    Thermal shutdown active");
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
          Logger::console("    Sleep mode active");
     1f8:	789a      	ldrb	r2, [r3, #2]
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
          Logger::console("    Over temperature on TS2");
     200:	f042 0208 	orr.w	r2, r2, #8
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
          Logger::console("    Over temperature on TS1");
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
     20a:	222a      	movs	r2, #42	; 0x2a
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
     21a:	4299      	cmp	r1, r3
            if (CUV & (1 << i))
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
     222:	f00a f887 	bl	a334 <memcpy>
          for (int i = 0; i < 8; i++)
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
            if (CUV & (1 << i))
     22a:	1cda      	adds	r2, r3, #3
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
	size_t print(int n)				{ return print((long)n); }
     234:	4299      	cmp	r1, r3
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
          for (int i = 0; i < 8; i++)
     23c:	f00e f9d6 	bl	e5ec <memset>
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
     248:	f00a f874 	bl	a334 <memcpy>
          SERIALCONSOLE.println();
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
     252:	f803 1b01 	strb.w	r1, [r3], #1
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
            if (COV & (1 << i))
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
          for (int i = 0; i < 8; i++)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
            if (COV & (1 << i))
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
     27c:	799a      	ldrb	r2, [r3, #6]
          for (int i = 0; i < 8; i++)
     27e:	06d4      	lsls	r4, r2, #27
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
          SERIALCONSOLE.println();
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f00a f9da 	bl	a690 <_init_Teensyduino_internal_>
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f00a f9c7 	bl	a678 <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f00a f9b8 	bl	a678 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     30c:	f00a f912 	bl	a534 <startup_late_hook>
	__libc_init_array();
     310:	f00e fa62 	bl	e7d8 <__libc_init_array>

	main();
     314:	f00a f806 	bl	a324 <main>
	
	while (1) ;
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
     33c:	1fff8f90 	.word	0x1fff8f90
     340:	000160ec 	.word	0x000160ec
     344:	1fffc900 	.word	0x1fffc900
     348:	1fff8f90 	.word	0x1fff8f90
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	645d65db 	.word	0x645d65db
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff8f90 	.word	0x1fff8f90
     42c:	1fff8f90 	.word	0x1fff8f90
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff8f90 	.word	0x1fff8f90
     454:	000160e4 	.word	0x000160e4

00000458 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     458:	b538      	push	{r3, r4, r5, lr}
    cellVolt[i] = 0.0f;
     45a:	2520      	movs	r5, #32
BMSModule::BMSModule()
     45c:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     45e:	462a      	mov	r2, r5
     460:	2100      	movs	r1, #0
     462:	f00e f8c3 	bl	e5ec <memset>
    lowestCellVolt[i] = 5.0f;
     466:	4b14      	ldr	r3, [pc, #80]	; (4b8 <BMSModule::BMSModule()+0x60>)
     468:	6223      	str	r3, [r4, #32]
     46a:	6263      	str	r3, [r4, #36]	; 0x24
     46c:	62a3      	str	r3, [r4, #40]	; 0x28
     46e:	62e3      	str	r3, [r4, #44]	; 0x2c
     470:	6323      	str	r3, [r4, #48]	; 0x30
     472:	6363      	str	r3, [r4, #52]	; 0x34
     474:	63a3      	str	r3, [r4, #56]	; 0x38
     476:	63e3      	str	r3, [r4, #60]	; 0x3c
    highestCellVolt[i] = 0.0f;
     478:	462a      	mov	r2, r5
     47a:	2100      	movs	r1, #0
     47c:	f104 0040 	add.w	r0, r4, #64	; 0x40
     480:	f00e f8b4 	bl	e5ec <memset>
  timeout = 30000; //milliseconds before comms timeout;
     484:	f247 5030 	movw	r0, #30000	; 0x7530
  moduleAddress = 0;
     488:	2200      	movs	r2, #0
  timeout = 30000; //milliseconds before comms timeout;
     48a:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
  highestTemperature = -100.0f;
     48e:	480b      	ldr	r0, [pc, #44]	; (4bc <BMSModule::BMSModule()+0x64>)
  lowestTemperature = 200.0f;
     490:	490b      	ldr	r1, [pc, #44]	; (4c0 <BMSModule::BMSModule()+0x68>)
  highestTemperature = -100.0f;
     492:	6760      	str	r0, [r4, #116]	; 0x74
  moduleVolt = 0.0f;
     494:	2300      	movs	r3, #0
  IgnoreCell = 2.0;
     496:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  moduleAddress = 0;
     49a:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
  IgnoreCell = 2.0;
     49e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  moduleVolt = 0.0f;
     4a2:	6623      	str	r3, [r4, #96]	; 0x60
  temperatures[0] = 0.0f;
     4a4:	6663      	str	r3, [r4, #100]	; 0x64
  temperatures[1] = 0.0f;
     4a6:	66a3      	str	r3, [r4, #104]	; 0x68
  temperatures[2] = 0.0f;
     4a8:	66e3      	str	r3, [r4, #108]	; 0x6c
  lowestTemperature = 200.0f;
     4aa:	6721      	str	r1, [r4, #112]	; 0x70
  lowestModuleVolt = 200.0f;
     4ac:	67a1      	str	r1, [r4, #120]	; 0x78
  highestModuleVolt = 0.0f;
     4ae:	67e3      	str	r3, [r4, #124]	; 0x7c
  exists = false;
     4b0:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
}
     4b4:	4620      	mov	r0, r4
     4b6:	bd38      	pop	{r3, r4, r5, pc}
     4b8:	40a00000 	.word	0x40a00000
     4bc:	c2c80000 	.word	0xc2c80000
     4c0:	43480000 	.word	0x43480000

000004c4 <BMSModule::getFaults()>:

uint8_t BMSModule::getFaults()
{
  return faults;
}
     4c4:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop

000004cc <BMSModule::getAlerts()>:

uint8_t BMSModule::getAlerts()
{
  return alerts;
}
     4cc:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
     4d0:	4770      	bx	lr
     4d2:	bf00      	nop

000004d4 <BMSModule::getCOVCells()>:

uint8_t BMSModule::getCOVCells()
{
  return COVFaults;
}
     4d4:	f890 0090 	ldrb.w	r0, [r0, #144]	; 0x90
     4d8:	4770      	bx	lr
     4da:	bf00      	nop

000004dc <BMSModule::getCUVCells()>:

uint8_t BMSModule::getCUVCells()
{
  return CUVFaults;
}
     4dc:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
     4e0:	4770      	bx	lr
     4e2:	bf00      	nop

000004e4 <BMSModule::getCellVoltage(int)>:

float BMSModule::getCellVoltage(int cell)
{
  if (cell < 0 || cell > 8) return 0.0f;
     4e4:	2908      	cmp	r1, #8
  return cellVolt[cell];
     4e6:	bf94      	ite	ls
     4e8:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (cell < 0 || cell > 8) return 0.0f;
     4ec:	2000      	movhi	r0, #0
}
     4ee:	4770      	bx	lr

000004f0 <BMSModule::getLowCellV()>:

float BMSModule::getLowCellV()
{
     4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     4f4:	4e0c      	ldr	r6, [pc, #48]	; (528 <BMSModule::getLowCellV()+0x38>)
{
     4f6:	4680      	mov	r8, r0
     4f8:	1f05      	subs	r5, r0, #4
     4fa:	f100 071c 	add.w	r7, r0, #28
  for (int i = 0; i < 8; i++)
  {
    if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell)
     4fe:	f855 4f04 	ldr.w	r4, [r5, #4]!
     502:	4631      	mov	r1, r6
     504:	4620      	mov	r0, r4
     506:	f00d f987 	bl	d818 <__aeabi_fcmplt>
     50a:	4603      	mov	r3, r0
     50c:	4620      	mov	r0, r4
     50e:	b12b      	cbz	r3, 51c <BMSModule::getLowCellV()+0x2c>
     510:	f8d8 1080 	ldr.w	r1, [r8, #128]	; 0x80
     514:	f00d f99e 	bl	d854 <__aeabi_fcmpgt>
     518:	b100      	cbz	r0, 51c <BMSModule::getLowCellV()+0x2c>
    {
      lowVal = cellVolt[i];
     51a:	4626      	mov	r6, r4
  for (int i = 0; i < 8; i++)
     51c:	42bd      	cmp	r5, r7
     51e:	d1ee      	bne.n	4fe <BMSModule::getLowCellV()+0xe>
    }
  }
  return lowVal;
}
     520:	4630      	mov	r0, r6
     522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     526:	bf00      	nop
     528:	41200000 	.word	0x41200000

0000052c <BMSModule::getHighCellV()>:

float BMSModule::getHighCellV()
{
     52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float hiVal = 0.0f;
  for (int i = 0; i < 8; i++)
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     530:	f8d0 8080 	ldr.w	r8, [r0, #128]	; 0x80
     534:	4f0f      	ldr	r7, [pc, #60]	; (574 <BMSModule::getHighCellV()+0x48>)
  float hiVal = 0.0f;
     536:	f04f 0900 	mov.w	r9, #0
     53a:	1f05      	subs	r5, r0, #4
     53c:	f100 061c 	add.w	r6, r0, #28
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     540:	f855 4f04 	ldr.w	r4, [r5, #4]!
     544:	4641      	mov	r1, r8
     546:	4620      	mov	r0, r4
     548:	f00d f984 	bl	d854 <__aeabi_fcmpgt>
     54c:	4603      	mov	r3, r0
     54e:	4639      	mov	r1, r7
     550:	4620      	mov	r0, r4
     552:	b14b      	cbz	r3, 568 <BMSModule::getHighCellV()+0x3c>
     554:	f00d f960 	bl	d818 <__aeabi_fcmplt>
     558:	4603      	mov	r3, r0
    {
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     55a:	4649      	mov	r1, r9
     55c:	4620      	mov	r0, r4
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     55e:	b11b      	cbz	r3, 568 <BMSModule::getHighCellV()+0x3c>
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     560:	f00d f978 	bl	d854 <__aeabi_fcmpgt>
     564:	b100      	cbz	r0, 568 <BMSModule::getHighCellV()+0x3c>
     566:	46a1      	mov	r9, r4
  for (int i = 0; i < 8; i++)
     568:	42b5      	cmp	r5, r6
     56a:	d1e9      	bne.n	540 <BMSModule::getHighCellV()+0x14>
    }
  return hiVal;
}
     56c:	4648      	mov	r0, r9
     56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     572:	bf00      	nop
     574:	42700000 	.word	0x42700000

00000578 <BMSModule::getAverageV()>:

float BMSModule::getAverageV()
{
     578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int x = 0;
  float avgVal = 0.0f;
  for (int i = 0; i < 8; i++)
  {
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     57c:	f8d0 9080 	ldr.w	r9, [r0, #128]	; 0x80
     580:	4f15      	ldr	r7, [pc, #84]	; (5d8 <BMSModule::getAverageV()+0x60>)
{
     582:	4683      	mov	fp, r0
  float avgVal = 0.0f;
     584:	2600      	movs	r6, #0
     586:	1f05      	subs	r5, r0, #4
     588:	f100 081c 	add.w	r8, r0, #28
  int x = 0;
     58c:	f04f 0a00 	mov.w	sl, #0
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     590:	f855 4f04 	ldr.w	r4, [r5, #4]!
     594:	4649      	mov	r1, r9
     596:	4620      	mov	r0, r4
     598:	f00d f95c 	bl	d854 <__aeabi_fcmpgt>
     59c:	4603      	mov	r3, r0
     59e:	4639      	mov	r1, r7
     5a0:	4620      	mov	r0, r4
     5a2:	b14b      	cbz	r3, 5b8 <BMSModule::getAverageV()+0x40>
     5a4:	f00d f938 	bl	d818 <__aeabi_fcmplt>
     5a8:	b130      	cbz	r0, 5b8 <BMSModule::getAverageV()+0x40>
    {
      x++;
      avgVal += cellVolt[i];
     5aa:	4630      	mov	r0, r6
     5ac:	4621      	mov	r1, r4
     5ae:	f00c fe8d 	bl	d2cc <__addsf3>
      x++;
     5b2:	f10a 0a01 	add.w	sl, sl, #1
      avgVal += cellVolt[i];
     5b6:	4606      	mov	r6, r0
  for (int i = 0; i < 8; i++)
     5b8:	45a8      	cmp	r8, r5
     5ba:	d1e9      	bne.n	590 <BMSModule::getAverageV()+0x18>
    }
  }

  if (x != 0)
     5bc:	f1ba 0f00 	cmp.w	sl, #0
     5c0:	d001      	beq.n	5c6 <BMSModule::getAverageV()+0x4e>
  {
    scells = x;
     5c2:	f8cb a0a0 	str.w	sl, [fp, #160]	; 0xa0
  }
  avgVal /= x;
     5c6:	4650      	mov	r0, sl
     5c8:	f00c ff34 	bl	d434 <__aeabi_i2f>
     5cc:	4601      	mov	r1, r0
     5ce:	4630      	mov	r0, r6
     5d0:	f00d f838 	bl	d644 <__aeabi_fdiv>
  return avgVal;
}
     5d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5d8:	42700000 	.word	0x42700000

000005dc <BMSModule::getscells()>:

int BMSModule::getscells()
{
  return scells;
}
     5dc:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
     5e0:	4770      	bx	lr
     5e2:	bf00      	nop

000005e4 <BMSModule::getLowTemp()>:
  return lowestTemperature;
}

float BMSModule::getLowTemp()
{
  if (sensor == 0)
     5e4:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
{
     5e8:	b570      	push	{r4, r5, r6, lr}
     5ea:	4604      	mov	r4, r0
  if (sensor == 0)
     5ec:	b973      	cbnz	r3, 60c <BMSModule::getLowTemp()+0x28>
  {
    if (temperatures[0] < temperatures[1])
     5ee:	6e86      	ldr	r6, [r0, #104]	; 0x68
     5f0:	6e45      	ldr	r5, [r0, #100]	; 0x64
     5f2:	4631      	mov	r1, r6
     5f4:	4628      	mov	r0, r5
     5f6:	f00d f90f 	bl	d818 <__aeabi_fcmplt>
     5fa:	b1c0      	cbz	r0, 62e <BMSModule::getLowTemp()+0x4a>
      return (temperatures[1]);
    }
  }
  if (sensor == 2)
  {
    if (temperatures[0] < temperatures[2])
     5fc:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
     5fe:	4628      	mov	r0, r5
     600:	4621      	mov	r1, r4
     602:	f00d f909 	bl	d818 <__aeabi_fcmplt>
     606:	b320      	cbz	r0, 652 <BMSModule::getLowTemp()+0x6e>
  }
  if (sensor == 13)
  {
    return (temperatures[1]);
  }
}
     608:	4628      	mov	r0, r5
     60a:	bd70      	pop	{r4, r5, r6, pc}
  if (sensor == 1)
     60c:	3b01      	subs	r3, #1
     60e:	2b16      	cmp	r3, #22
     610:	d822      	bhi.n	658 <BMSModule::getLowTemp()+0x74>
     612:	e8df f003 	tbb	[pc, r3]
     616:	2927      	.short	0x2927
     618:	21212116 	.word	0x21212116
     61c:	21212121 	.word	0x21212121
     620:	21232521 	.word	0x21232521
     624:	21212121 	.word	0x21212121
     628:	21212121 	.word	0x21212121
     62c:	21          	.byte	0x21
     62d:	00          	.byte	0x00
      if (temperatures[1] < temperatures[2])
     62e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
     630:	4630      	mov	r0, r6
     632:	4629      	mov	r1, r5
     634:	f00d f8f0 	bl	d818 <__aeabi_fcmplt>
     638:	2800      	cmp	r0, #0
     63a:	d0e5      	beq.n	608 <BMSModule::getLowTemp()+0x24>
        return (temperatures[1]);
     63c:	4635      	mov	r5, r6
}
     63e:	4628      	mov	r0, r5
     640:	bd70      	pop	{r4, r5, r6, pc}
    if (temperatures[0] < temperatures[1])
     642:	6e45      	ldr	r5, [r0, #100]	; 0x64
     644:	6ea4      	ldr	r4, [r4, #104]	; 0x68
     646:	4628      	mov	r0, r5
     648:	4621      	mov	r1, r4
     64a:	f00d f8e5 	bl	d818 <__aeabi_fcmplt>
     64e:	2800      	cmp	r0, #0
     650:	d1da      	bne.n	608 <BMSModule::getLowTemp()+0x24>
      return (temperatures[1]);
     652:	4625      	mov	r5, r4
}
     654:	4628      	mov	r0, r5
     656:	bd70      	pop	{r4, r5, r6, pc}
    return (temperatures[0]);
     658:	6e45      	ldr	r5, [r0, #100]	; 0x64
     65a:	e7d5      	b.n	608 <BMSModule::getLowTemp()+0x24>
    return (temperatures[1]);
     65c:	6e85      	ldr	r5, [r0, #104]	; 0x68
     65e:	e7d3      	b.n	608 <BMSModule::getLowTemp()+0x24>
    return (temperatures[2]);
     660:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
     662:	e7d1      	b.n	608 <BMSModule::getLowTemp()+0x24>
    if (temperatures[2] < temperatures[1])
     664:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
     666:	e7ed      	b.n	644 <BMSModule::getLowTemp()+0x60>
    if (temperatures[0] < temperatures[2])
     668:	6e45      	ldr	r5, [r0, #100]	; 0x64
     66a:	e7c7      	b.n	5fc <BMSModule::getLowTemp()+0x18>

0000066c <BMSModule::getHighTemp()>:

float BMSModule::getHighTemp()
{
  if (sensor == 0)
     66c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
{
     670:	b570      	push	{r4, r5, r6, lr}
     672:	4604      	mov	r4, r0
  if (sensor == 0)
     674:	b973      	cbnz	r3, 694 <BMSModule::getHighTemp()+0x28>
  {
    if (temperatures[0] > temperatures[1])
     676:	6e86      	ldr	r6, [r0, #104]	; 0x68
     678:	6e45      	ldr	r5, [r0, #100]	; 0x64
     67a:	4631      	mov	r1, r6
     67c:	4628      	mov	r0, r5
     67e:	f00d f8e9 	bl	d854 <__aeabi_fcmpgt>
     682:	b1c0      	cbz	r0, 6b6 <BMSModule::getHighTemp()+0x4a>
      return (temperatures[1]);
    }
  }
  if (sensor == 2)
  {
    if (temperatures[0] > temperatures[2])
     684:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
     686:	4628      	mov	r0, r5
     688:	4621      	mov	r1, r4
     68a:	f00d f8e3 	bl	d854 <__aeabi_fcmpgt>
     68e:	b320      	cbz	r0, 6da <BMSModule::getHighTemp()+0x6e>
  }
  if (sensor == 13)
  {
    return (temperatures[1]);
  }
}
     690:	4628      	mov	r0, r5
     692:	bd70      	pop	{r4, r5, r6, pc}
  if (sensor == 1)
     694:	3b01      	subs	r3, #1
     696:	2b16      	cmp	r3, #22
     698:	d822      	bhi.n	6e0 <BMSModule::getHighTemp()+0x74>
     69a:	e8df f003 	tbb	[pc, r3]
     69e:	2927      	.short	0x2927
     6a0:	21212116 	.word	0x21212116
     6a4:	21212121 	.word	0x21212121
     6a8:	21232521 	.word	0x21232521
     6ac:	21212121 	.word	0x21212121
     6b0:	21212121 	.word	0x21212121
     6b4:	21          	.byte	0x21
     6b5:	00          	.byte	0x00
      if (temperatures[1] > temperatures[2])
     6b6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
     6b8:	4630      	mov	r0, r6
     6ba:	4629      	mov	r1, r5
     6bc:	f00d f8ca 	bl	d854 <__aeabi_fcmpgt>
     6c0:	2800      	cmp	r0, #0
     6c2:	d0e5      	beq.n	690 <BMSModule::getHighTemp()+0x24>
        return (temperatures[1]);
     6c4:	4635      	mov	r5, r6
}
     6c6:	4628      	mov	r0, r5
     6c8:	bd70      	pop	{r4, r5, r6, pc}
    if (temperatures[0] > temperatures[1])
     6ca:	6e45      	ldr	r5, [r0, #100]	; 0x64
     6cc:	6ea4      	ldr	r4, [r4, #104]	; 0x68
     6ce:	4628      	mov	r0, r5
     6d0:	4621      	mov	r1, r4
     6d2:	f00d f8bf 	bl	d854 <__aeabi_fcmpgt>
     6d6:	2800      	cmp	r0, #0
     6d8:	d1da      	bne.n	690 <BMSModule::getHighTemp()+0x24>
      return (temperatures[1]);
     6da:	4625      	mov	r5, r4
}
     6dc:	4628      	mov	r0, r5
     6de:	bd70      	pop	{r4, r5, r6, pc}
    return (temperatures[0]);
     6e0:	6e45      	ldr	r5, [r0, #100]	; 0x64
     6e2:	e7d5      	b.n	690 <BMSModule::getHighTemp()+0x24>
    return (temperatures[1]);
     6e4:	6e85      	ldr	r5, [r0, #104]	; 0x68
     6e6:	e7d3      	b.n	690 <BMSModule::getHighTemp()+0x24>
    return (temperatures[2]);
     6e8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
     6ea:	e7d1      	b.n	690 <BMSModule::getHighTemp()+0x24>
    if (temperatures[2] > temperatures[1])
     6ec:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
     6ee:	e7ed      	b.n	6cc <BMSModule::getHighTemp()+0x60>
    if (temperatures[0] > temperatures[2])
     6f0:	6e45      	ldr	r5, [r0, #100]	; 0x64
     6f2:	e7c7      	b.n	684 <BMSModule::getHighTemp()+0x18>

000006f4 <BMSModule::decodecan(int, CAN_message_t&)>:
{
     6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (Id)
     6f6:	2902      	cmp	r1, #2
{
     6f8:	b085      	sub	sp, #20
     6fa:	4606      	mov	r6, r0
     6fc:	4614      	mov	r4, r2
  switch (Id)
     6fe:	f000 811f 	beq.w	940 <BMSModule::decodecan(int, CAN_message_t&)+0x24c>
     702:	2903      	cmp	r1, #3
     704:	f000 80b6 	beq.w	874 <BMSModule::decodecan(int, CAN_message_t&)+0x180>
     708:	2901      	cmp	r1, #1
     70a:	f000 8081 	beq.w	810 <BMSModule::decodecan(int, CAN_message_t&)+0x11c>
  if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     70e:	4630      	mov	r0, r6
     710:	f7ff ff68 	bl	5e4 <BMSModule::getLowTemp()>
     714:	6f31      	ldr	r1, [r6, #112]	; 0x70
     716:	4604      	mov	r4, r0
     718:	f00d f87e 	bl	d818 <__aeabi_fcmplt>
     71c:	b100      	cbz	r0, 720 <BMSModule::decodecan(int, CAN_message_t&)+0x2c>
     71e:	6734      	str	r4, [r6, #112]	; 0x70
  if (getHighTemp() > highestTemperature) highestTemperature = getHighTemp();
     720:	4630      	mov	r0, r6
     722:	f7ff ffa3 	bl	66c <BMSModule::getHighTemp()>
     726:	6f71      	ldr	r1, [r6, #116]	; 0x74
     728:	4604      	mov	r4, r0
     72a:	f00d f893 	bl	d854 <__aeabi_fcmpgt>
     72e:	b100      	cbz	r0, 732 <BMSModule::decodecan(int, CAN_message_t&)+0x3e>
     730:	6774      	str	r4, [r6, #116]	; 0x74
     732:	1f34      	subs	r4, r6, #4
     734:	f106 071c 	add.w	r7, r6, #28
    if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell)
     738:	6a60      	ldr	r0, [r4, #36]	; 0x24
     73a:	f854 5f04 	ldr.w	r5, [r4, #4]!
     73e:	4629      	mov	r1, r5
     740:	f00d f888 	bl	d854 <__aeabi_fcmpgt>
     744:	4603      	mov	r3, r0
     746:	4628      	mov	r0, r5
     748:	b12b      	cbz	r3, 756 <BMSModule::decodecan(int, CAN_message_t&)+0x62>
     74a:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
     74e:	f00d f877 	bl	d840 <__aeabi_fcmpge>
     752:	b100      	cbz	r0, 756 <BMSModule::decodecan(int, CAN_message_t&)+0x62>
      lowestCellVolt[i] = cellVolt[i];
     754:	6225      	str	r5, [r4, #32]
    if (highestCellVolt[i] < cellVolt[i])
     756:	6c21      	ldr	r1, [r4, #64]	; 0x40
     758:	4628      	mov	r0, r5
     75a:	f00d f87b 	bl	d854 <__aeabi_fcmpgt>
     75e:	b100      	cbz	r0, 762 <BMSModule::decodecan(int, CAN_message_t&)+0x6e>
      highestCellVolt[i] = cellVolt[i];
     760:	6425      	str	r5, [r4, #64]	; 0x40
  for (int i = 0; i < 8; i++)
     762:	42bc      	cmp	r4, r7
     764:	d1e8      	bne.n	738 <BMSModule::decodecan(int, CAN_message_t&)+0x44>
  if (cmuerror == 0)
     766:	f896 30ac 	ldrb.w	r3, [r6, #172]	; 0xac
     76a:	b93b      	cbnz	r3, 77c <BMSModule::decodecan(int, CAN_message_t&)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     76c:	4bab      	ldr	r3, [pc, #684]	; (a1c <BMSModule::decodecan(int, CAN_message_t&)+0x328>)
     76e:	681b      	ldr	r3, [r3, #0]
     770:	9300      	str	r3, [sp, #0]
	return ret;
     772:	9b00      	ldr	r3, [sp, #0]
    lasterror = millis();
     774:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
}
     778:	b005      	add	sp, #20
     77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     77c:	4ca7      	ldr	r4, [pc, #668]	; (a1c <BMSModule::decodecan(int, CAN_message_t&)+0x328>)
    if (millis() - lasterror < timeout)
     77e:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
     782:	6822      	ldr	r2, [r4, #0]
     784:	9201      	str	r2, [sp, #4]
	return ret;
     786:	9a01      	ldr	r2, [sp, #4]
     788:	f8b6 10ae 	ldrh.w	r1, [r6, #174]	; 0xae
     78c:	1ad2      	subs	r2, r2, r3
     78e:	428a      	cmp	r2, r1
     790:	d232      	bcs.n	7f8 <BMSModule::decodecan(int, CAN_message_t&)+0x104>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     792:	6822      	ldr	r2, [r4, #0]
     794:	9202      	str	r2, [sp, #8]
	return ret;
     796:	9a02      	ldr	r2, [sp, #8]
      if (lasterror + timeout - millis() < 5000)
     798:	1a9b      	subs	r3, r3, r2
     79a:	440b      	add	r3, r1
     79c:	f241 3287 	movw	r2, #4999	; 0x1387
     7a0:	4293      	cmp	r3, r2
     7a2:	d8e9      	bhi.n	778 <BMSModule::decodecan(int, CAN_message_t&)+0x84>
     7a4:	2102      	movs	r1, #2
     7a6:	489e      	ldr	r0, [pc, #632]	; (a20 <BMSModule::decodecan(int, CAN_message_t&)+0x32c>)
     7a8:	f00b ffb2 	bl	c710 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7ac:	489d      	ldr	r0, [pc, #628]	; (a24 <BMSModule::decodecan(int, CAN_message_t&)+0x330>)
     7ae:	f009 fae1 	bl	9d74 <Print::println()>
     7b2:	2106      	movs	r1, #6
     7b4:	489c      	ldr	r0, [pc, #624]	; (a28 <BMSModule::decodecan(int, CAN_message_t&)+0x334>)
     7b6:	f00b ffab 	bl	c710 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     7ba:	f896 109c 	ldrb.w	r1, [r6, #156]	; 0x9c
     7be:	4899      	ldr	r0, [pc, #612]	; (a24 <BMSModule::decodecan(int, CAN_message_t&)+0x330>)
     7c0:	2300      	movs	r3, #0
     7c2:	220a      	movs	r2, #10
     7c4:	f009 faee 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     7c8:	2119      	movs	r1, #25
     7ca:	4898      	ldr	r0, [pc, #608]	; (a2c <BMSModule::decodecan(int, CAN_message_t&)+0x338>)
     7cc:	f00b ffa0 	bl	c710 <usb_serial_write>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7d0:	6823      	ldr	r3, [r4, #0]
     7d2:	9303      	str	r3, [sp, #12]
	return ret;
     7d4:	9903      	ldr	r1, [sp, #12]
        SERIALCONSOLE.println(lasterror + timeout - millis() );
     7d6:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
     7da:	f8b6 40ae 	ldrh.w	r4, [r6, #174]	; 0xae
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     7de:	4891      	ldr	r0, [pc, #580]	; (a24 <BMSModule::decodecan(int, CAN_message_t&)+0x330>)
     7e0:	1a59      	subs	r1, r3, r1
     7e2:	220a      	movs	r2, #10
     7e4:	2300      	movs	r3, #0
     7e6:	4421      	add	r1, r4
     7e8:	f009 fadc 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     7ec:	488d      	ldr	r0, [pc, #564]	; (a24 <BMSModule::decodecan(int, CAN_message_t&)+0x330>)
}
     7ee:	b005      	add	sp, #20
     7f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     7f4:	f009 babe 	b.w	9d74 <Print::println()>
        cellVolt[i] = 0.0f;
     7f8:	2220      	movs	r2, #32
     7fa:	2100      	movs	r1, #0
     7fc:	4630      	mov	r0, r6
     7fe:	f00d fef5 	bl	e5ec <memset>
      moduleVolt = 0.0f;
     802:	2300      	movs	r3, #0
     804:	6633      	str	r3, [r6, #96]	; 0x60
      temperatures[0] = 0.0f;
     806:	6673      	str	r3, [r6, #100]	; 0x64
      temperatures[1] = 0.0f;
     808:	66b3      	str	r3, [r6, #104]	; 0x68
      temperatures[2] = 0.0f;
     80a:	66f3      	str	r3, [r6, #108]	; 0x6c
}
     80c:	b005      	add	sp, #20
     80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      balstat = msg.buf[0];
     810:	7a13      	ldrb	r3, [r2, #8]
      temperatures[0] = (msg.buf[2] * 256 + msg.buf[3]) * tempconv + tempoff;
     812:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
      balstat = msg.buf[0];
     816:	f886 30a4 	strb.w	r3, [r6, #164]	; 0xa4
      temperatures[0] = (msg.buf[2] * 256 + msg.buf[3]) * tempconv + tempoff;
     81a:	f00c fe0b 	bl	d434 <__aeabi_i2f>
     81e:	7ae3      	ldrb	r3, [r4, #11]
     820:	f8d6 70b0 	ldr.w	r7, [r6, #176]	; 0xb0
     824:	4605      	mov	r5, r0
     826:	7aa0      	ldrb	r0, [r4, #10]
     828:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     82c:	f00c fe02 	bl	d434 <__aeabi_i2f>
     830:	4639      	mov	r1, r7
     832:	f00c fe53 	bl	d4dc <__aeabi_fmul>
     836:	4629      	mov	r1, r5
     838:	f00c fd48 	bl	d2cc <__addsf3>
     83c:	6670      	str	r0, [r6, #100]	; 0x64
      temperatures[1] = (msg.buf[4] * 256 + msg.buf[5]) * tempconv + tempoff;
     83e:	7b63      	ldrb	r3, [r4, #13]
     840:	7b20      	ldrb	r0, [r4, #12]
     842:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     846:	f00c fdf5 	bl	d434 <__aeabi_i2f>
     84a:	4639      	mov	r1, r7
     84c:	f00c fe46 	bl	d4dc <__aeabi_fmul>
     850:	4629      	mov	r1, r5
     852:	f00c fd3b 	bl	d2cc <__addsf3>
     856:	66b0      	str	r0, [r6, #104]	; 0x68
      temperatures[2] = (msg.buf[6] * 256 + msg.buf[7]) * tempconv + tempoff;
     858:	7be3      	ldrb	r3, [r4, #15]
     85a:	7ba0      	ldrb	r0, [r4, #14]
     85c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     860:	f00c fde8 	bl	d434 <__aeabi_i2f>
     864:	4639      	mov	r1, r7
     866:	f00c fe39 	bl	d4dc <__aeabi_fmul>
     86a:	4629      	mov	r1, r5
     86c:	f00c fd2e 	bl	d2cc <__addsf3>
     870:	66f0      	str	r0, [r6, #108]	; 0x6c
      break;
     872:	e74c      	b.n	70e <BMSModule::decodecan(int, CAN_message_t&)+0x1a>
      if (float((msg.buf[0] * 256 + msg.buf[1]) * 0.001) > IgnoreCell && float((msg.buf[0] * 256 + msg.buf[1]) * 0.001) < 60.0)
     874:	7a10      	ldrb	r0, [r2, #8]
     876:	7a53      	ldrb	r3, [r2, #9]
     878:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     87c:	f00c fdda 	bl	d434 <__aeabi_i2f>
     880:	496b      	ldr	r1, [pc, #428]	; (a30 <BMSModule::decodecan(int, CAN_message_t&)+0x33c>)
     882:	f00c fe2b 	bl	d4dc <__aeabi_fmul>
     886:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
     88a:	4629      	mov	r1, r5
     88c:	4607      	mov	r7, r0
     88e:	f00c ffe1 	bl	d854 <__aeabi_fcmpgt>
     892:	b140      	cbz	r0, 8a6 <BMSModule::decodecan(int, CAN_message_t&)+0x1b2>
     894:	4967      	ldr	r1, [pc, #412]	; (a34 <BMSModule::decodecan(int, CAN_message_t&)+0x340>)
     896:	4638      	mov	r0, r7
     898:	f00c ffbe 	bl	d818 <__aeabi_fcmplt>
     89c:	b118      	cbz	r0, 8a6 <BMSModule::decodecan(int, CAN_message_t&)+0x1b2>
        cmuerror = 0;
     89e:	2300      	movs	r3, #0
        cellVolt[4] = float((msg.buf[0] * 256 + msg.buf[1]) * 0.001);
     8a0:	6137      	str	r7, [r6, #16]
        cmuerror = 0;
     8a2:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
      if (float((msg.buf[2] * 256 + msg.buf[3]) * 0.001) > IgnoreCell && float((msg.buf[2] * 256 + msg.buf[3]) * 0.001) < 60.0)
     8a6:	7ae3      	ldrb	r3, [r4, #11]
     8a8:	7aa0      	ldrb	r0, [r4, #10]
     8aa:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     8ae:	f00c fdc1 	bl	d434 <__aeabi_i2f>
     8b2:	495f      	ldr	r1, [pc, #380]	; (a30 <BMSModule::decodecan(int, CAN_message_t&)+0x33c>)
     8b4:	f00c fe12 	bl	d4dc <__aeabi_fmul>
     8b8:	4607      	mov	r7, r0
     8ba:	4601      	mov	r1, r0
     8bc:	4628      	mov	r0, r5
     8be:	f00c ffab 	bl	d818 <__aeabi_fcmplt>
     8c2:	b140      	cbz	r0, 8d6 <BMSModule::decodecan(int, CAN_message_t&)+0x1e2>
     8c4:	495b      	ldr	r1, [pc, #364]	; (a34 <BMSModule::decodecan(int, CAN_message_t&)+0x340>)
     8c6:	4638      	mov	r0, r7
     8c8:	f00c ffa6 	bl	d818 <__aeabi_fcmplt>
     8cc:	b118      	cbz	r0, 8d6 <BMSModule::decodecan(int, CAN_message_t&)+0x1e2>
        cmuerror = 0;
     8ce:	2300      	movs	r3, #0
        cellVolt[5] = float((msg.buf[2] * 256 + msg.buf[3]) * 0.001);
     8d0:	6177      	str	r7, [r6, #20]
        cmuerror = 0;
     8d2:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
      if (float((msg.buf[4] * 256 + msg.buf[5]) * 0.001) > IgnoreCell && float((msg.buf[4] * 256 + msg.buf[5]) * 0.001) < 60.0)
     8d6:	7b63      	ldrb	r3, [r4, #13]
     8d8:	7b20      	ldrb	r0, [r4, #12]
     8da:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     8de:	f00c fda9 	bl	d434 <__aeabi_i2f>
     8e2:	4953      	ldr	r1, [pc, #332]	; (a30 <BMSModule::decodecan(int, CAN_message_t&)+0x33c>)
     8e4:	f00c fdfa 	bl	d4dc <__aeabi_fmul>
     8e8:	4607      	mov	r7, r0
     8ea:	4601      	mov	r1, r0
     8ec:	4628      	mov	r0, r5
     8ee:	f00c ff93 	bl	d818 <__aeabi_fcmplt>
     8f2:	b140      	cbz	r0, 906 <BMSModule::decodecan(int, CAN_message_t&)+0x212>
     8f4:	494f      	ldr	r1, [pc, #316]	; (a34 <BMSModule::decodecan(int, CAN_message_t&)+0x340>)
     8f6:	4638      	mov	r0, r7
     8f8:	f00c ff8e 	bl	d818 <__aeabi_fcmplt>
     8fc:	b118      	cbz	r0, 906 <BMSModule::decodecan(int, CAN_message_t&)+0x212>
        cmuerror = 0;
     8fe:	2300      	movs	r3, #0
        cellVolt[6] = float((msg.buf[4] * 256 + msg.buf[5]) * 0.001);
     900:	61b7      	str	r7, [r6, #24]
        cmuerror = 0;
     902:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
      if (float((msg.buf[6] * 256 + msg.buf[7]) * 0.001) > IgnoreCell && float((msg.buf[6] * 256 + msg.buf[7]) * 0.001) < 60.0)
     906:	7be3      	ldrb	r3, [r4, #15]
     908:	7ba0      	ldrb	r0, [r4, #14]
     90a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     90e:	f00c fd91 	bl	d434 <__aeabi_i2f>
     912:	4947      	ldr	r1, [pc, #284]	; (a30 <BMSModule::decodecan(int, CAN_message_t&)+0x33c>)
     914:	f00c fde2 	bl	d4dc <__aeabi_fmul>
     918:	4604      	mov	r4, r0
     91a:	4601      	mov	r1, r0
     91c:	4628      	mov	r0, r5
     91e:	f00c ff7b 	bl	d818 <__aeabi_fcmplt>
     922:	2800      	cmp	r0, #0
     924:	f43f aef3 	beq.w	70e <BMSModule::decodecan(int, CAN_message_t&)+0x1a>
     928:	4942      	ldr	r1, [pc, #264]	; (a34 <BMSModule::decodecan(int, CAN_message_t&)+0x340>)
     92a:	4620      	mov	r0, r4
     92c:	f00c ff74 	bl	d818 <__aeabi_fcmplt>
     930:	2800      	cmp	r0, #0
     932:	f43f aeec 	beq.w	70e <BMSModule::decodecan(int, CAN_message_t&)+0x1a>
        cmuerror = 0;
     936:	2300      	movs	r3, #0
        cellVolt[7] = float((msg.buf[6] * 256 + msg.buf[7]) * 0.001);
     938:	61f4      	str	r4, [r6, #28]
        cmuerror = 0;
     93a:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
     93e:	e6e6      	b.n	70e <BMSModule::decodecan(int, CAN_message_t&)+0x1a>
      if (float((msg.buf[0] * 256 + msg.buf[1]) * 0.001) > IgnoreCell && float((msg.buf[0] * 256 + msg.buf[1]) * 0.001) < 60.0)
     940:	7a10      	ldrb	r0, [r2, #8]
     942:	7a53      	ldrb	r3, [r2, #9]
     944:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     948:	f00c fd74 	bl	d434 <__aeabi_i2f>
     94c:	4938      	ldr	r1, [pc, #224]	; (a30 <BMSModule::decodecan(int, CAN_message_t&)+0x33c>)
     94e:	f00c fdc5 	bl	d4dc <__aeabi_fmul>
     952:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
     956:	4629      	mov	r1, r5
     958:	4607      	mov	r7, r0
     95a:	f00c ff7b 	bl	d854 <__aeabi_fcmpgt>
     95e:	2800      	cmp	r0, #0
     960:	d14f      	bne.n	a02 <BMSModule::decodecan(int, CAN_message_t&)+0x30e>
     962:	2301      	movs	r3, #1
        cmuerror = 0;
     964:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
      if (float((msg.buf[2] * 256 + msg.buf[3]) * 0.001) > IgnoreCell && float((msg.buf[2] * 256 + msg.buf[3]) * 0.001) < 60.0)
     968:	7ae3      	ldrb	r3, [r4, #11]
     96a:	7aa0      	ldrb	r0, [r4, #10]
     96c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     970:	f00c fd60 	bl	d434 <__aeabi_i2f>
     974:	492e      	ldr	r1, [pc, #184]	; (a30 <BMSModule::decodecan(int, CAN_message_t&)+0x33c>)
     976:	f00c fdb1 	bl	d4dc <__aeabi_fmul>
     97a:	4607      	mov	r7, r0
     97c:	4601      	mov	r1, r0
     97e:	4628      	mov	r0, r5
     980:	f00c ff4a 	bl	d818 <__aeabi_fcmplt>
     984:	2800      	cmp	r0, #0
     986:	d059      	beq.n	a3c <BMSModule::decodecan(int, CAN_message_t&)+0x348>
     988:	492a      	ldr	r1, [pc, #168]	; (a34 <BMSModule::decodecan(int, CAN_message_t&)+0x340>)
     98a:	4638      	mov	r0, r7
     98c:	f00c ff44 	bl	d818 <__aeabi_fcmplt>
     990:	2800      	cmp	r0, #0
     992:	d053      	beq.n	a3c <BMSModule::decodecan(int, CAN_message_t&)+0x348>
        cellVolt[1] = float((msg.buf[2] * 256 + msg.buf[3]) * 0.001);
     994:	6077      	str	r7, [r6, #4]
        cmuerror = 0;
     996:	2300      	movs	r3, #0
     998:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
      if (float((msg.buf[4] * 256 + msg.buf[5]) * 0.001) > IgnoreCell && float((msg.buf[4] * 256 + msg.buf[5]) * 0.001) < 60.0)
     99c:	7b63      	ldrb	r3, [r4, #13]
     99e:	7b20      	ldrb	r0, [r4, #12]
     9a0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     9a4:	f00c fd46 	bl	d434 <__aeabi_i2f>
     9a8:	4921      	ldr	r1, [pc, #132]	; (a30 <BMSModule::decodecan(int, CAN_message_t&)+0x33c>)
     9aa:	f00c fd97 	bl	d4dc <__aeabi_fmul>
     9ae:	4607      	mov	r7, r0
     9b0:	4601      	mov	r1, r0
     9b2:	4628      	mov	r0, r5
     9b4:	f00c ff30 	bl	d818 <__aeabi_fcmplt>
     9b8:	2800      	cmp	r0, #0
     9ba:	d03d      	beq.n	a38 <BMSModule::decodecan(int, CAN_message_t&)+0x344>
     9bc:	491d      	ldr	r1, [pc, #116]	; (a34 <BMSModule::decodecan(int, CAN_message_t&)+0x340>)
     9be:	4638      	mov	r0, r7
     9c0:	f00c ff2a 	bl	d818 <__aeabi_fcmplt>
     9c4:	2800      	cmp	r0, #0
     9c6:	d037      	beq.n	a38 <BMSModule::decodecan(int, CAN_message_t&)+0x344>
        cellVolt[2] = float((msg.buf[4] * 256 + msg.buf[5]) * 0.001);
     9c8:	60b7      	str	r7, [r6, #8]
        cmuerror = 0;
     9ca:	2300      	movs	r3, #0
     9cc:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
      if (float((msg.buf[6] * 256 + msg.buf[7]) * 0.001) > IgnoreCell && float((msg.buf[6] * 256 + msg.buf[7]) * 0.001) < 60.0)
     9d0:	7be3      	ldrb	r3, [r4, #15]
     9d2:	7ba0      	ldrb	r0, [r4, #14]
     9d4:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     9d8:	f00c fd2c 	bl	d434 <__aeabi_i2f>
     9dc:	4914      	ldr	r1, [pc, #80]	; (a30 <BMSModule::decodecan(int, CAN_message_t&)+0x33c>)
     9de:	f00c fd7d 	bl	d4dc <__aeabi_fmul>
     9e2:	4604      	mov	r4, r0
     9e4:	4601      	mov	r1, r0
     9e6:	4628      	mov	r0, r5
     9e8:	f00c ff16 	bl	d818 <__aeabi_fcmplt>
     9ec:	b190      	cbz	r0, a14 <BMSModule::decodecan(int, CAN_message_t&)+0x320>
     9ee:	4911      	ldr	r1, [pc, #68]	; (a34 <BMSModule::decodecan(int, CAN_message_t&)+0x340>)
     9f0:	4620      	mov	r0, r4
     9f2:	f00c ff11 	bl	d818 <__aeabi_fcmplt>
     9f6:	b168      	cbz	r0, a14 <BMSModule::decodecan(int, CAN_message_t&)+0x320>
        cmuerror = 0;
     9f8:	2300      	movs	r3, #0
        cellVolt[3] = float((msg.buf[6] * 256 + msg.buf[7]) * 0.001);
     9fa:	60f4      	str	r4, [r6, #12]
        cmuerror = 0;
     9fc:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
     a00:	e685      	b.n	70e <BMSModule::decodecan(int, CAN_message_t&)+0x1a>
      if (float((msg.buf[0] * 256 + msg.buf[1]) * 0.001) > IgnoreCell && float((msg.buf[0] * 256 + msg.buf[1]) * 0.001) < 60.0)
     a02:	490c      	ldr	r1, [pc, #48]	; (a34 <BMSModule::decodecan(int, CAN_message_t&)+0x340>)
     a04:	4638      	mov	r0, r7
     a06:	f00c ff07 	bl	d818 <__aeabi_fcmplt>
     a0a:	2800      	cmp	r0, #0
     a0c:	d0a9      	beq.n	962 <BMSModule::decodecan(int, CAN_message_t&)+0x26e>
        cellVolt[0] = float((msg.buf[0] * 256 + msg.buf[1]) * 0.001);
     a0e:	6037      	str	r7, [r6, #0]
        cmuerror = 0;
     a10:	2300      	movs	r3, #0
     a12:	e7a7      	b.n	964 <BMSModule::decodecan(int, CAN_message_t&)+0x270>
        cmuerror = 1;
     a14:	2301      	movs	r3, #1
     a16:	f886 30ac 	strb.w	r3, [r6, #172]	; 0xac
     a1a:	e678      	b.n	70e <BMSModule::decodecan(int, CAN_message_t&)+0x1a>
     a1c:	1fffc3b4 	.word	0x1fffc3b4
     a20:	000155bc 	.word	0x000155bc
     a24:	1fff8824 	.word	0x1fff8824
     a28:	00014214 	.word	0x00014214
     a2c:	0001421c 	.word	0x0001421c
     a30:	3a83126f 	.word	0x3a83126f
     a34:	42700000 	.word	0x42700000
     a38:	2301      	movs	r3, #1
     a3a:	e7c7      	b.n	9cc <BMSModule::decodecan(int, CAN_message_t&)+0x2d8>
     a3c:	2301      	movs	r3, #1
     a3e:	e7ab      	b.n	998 <BMSModule::decodecan(int, CAN_message_t&)+0x2a4>

00000a40 <BMSModule::getAvgTemp()>:

float BMSModule::getAvgTemp()
{
  if (sensor == 0)
     a40:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
{
     a44:	b510      	push	{r4, lr}
     a46:	4604      	mov	r4, r0
  if (sensor == 0)
     a48:	b183      	cbz	r3, a6c <BMSModule::getAvgTemp()+0x2c>
  {
    return ((temperatures[0] + temperatures[1] + temperatures[2]) / 3);
  }
  if (sensor == 1)
     a4a:	3b01      	subs	r3, #1
     a4c:	2b16      	cmp	r3, #22
     a4e:	d81a      	bhi.n	a86 <BMSModule::getAvgTemp()+0x46>
     a50:	e8df f003 	tbb	[pc, r3]
     a54:	192d241b 	.word	0x192d241b
     a58:	19191919 	.word	0x19191919
     a5c:	36191919 	.word	0x36191919
     a60:	19191917 	.word	0x19191917
     a64:	19191919 	.word	0x19191919
     a68:	1919      	.short	0x1919
     a6a:	19          	.byte	0x19
     a6b:	00          	.byte	0x00
    return ((temperatures[0] + temperatures[1] + temperatures[2]) / 3);
     a6c:	6e81      	ldr	r1, [r0, #104]	; 0x68
     a6e:	6e40      	ldr	r0, [r0, #100]	; 0x64
     a70:	f00c fc2c 	bl	d2cc <__addsf3>
     a74:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
     a76:	f00c fc29 	bl	d2cc <__addsf3>
     a7a:	4912      	ldr	r1, [pc, #72]	; (ac4 <BMSModule::getAvgTemp()+0x84>)
     a7c:	f00c fde2 	bl	d644 <__aeabi_fdiv>
  if (sensor == 13)
  {
    return (temperatures[1]);
  }

}
     a80:	bd10      	pop	{r4, pc}
    return (temperatures[1]);
     a82:	6e80      	ldr	r0, [r0, #104]	; 0x68
}
     a84:	bd10      	pop	{r4, pc}
    return (temperatures[0]);
     a86:	6e40      	ldr	r0, [r0, #100]	; 0x64
}
     a88:	bd10      	pop	{r4, pc}
    return ((temperatures[1] + temperatures[2]) * 0.5);
     a8a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
     a8c:	6e80      	ldr	r0, [r0, #104]	; 0x68
     a8e:	f00c fc1d 	bl	d2cc <__addsf3>
     a92:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     a96:	f00c fd21 	bl	d4dc <__aeabi_fmul>
}
     a9a:	bd10      	pop	{r4, pc}
    return ((temperatures[0] + temperatures[2]) * 0.5);
     a9c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
     a9e:	6e40      	ldr	r0, [r0, #100]	; 0x64
     aa0:	f00c fc14 	bl	d2cc <__addsf3>
     aa4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     aa8:	f00c fd18 	bl	d4dc <__aeabi_fmul>
}
     aac:	bd10      	pop	{r4, pc}
    return ((temperatures[0] + temperatures[1]) * 0.5);
     aae:	6e81      	ldr	r1, [r0, #104]	; 0x68
     ab0:	6e40      	ldr	r0, [r0, #100]	; 0x64
     ab2:	f00c fc0b 	bl	d2cc <__addsf3>
     ab6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     aba:	f00c fd0f 	bl	d4dc <__aeabi_fmul>
}
     abe:	bd10      	pop	{r4, pc}
    return (temperatures[2]);
     ac0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
}
     ac2:	bd10      	pop	{r4, pc}
     ac4:	40400000 	.word	0x40400000

00000ac8 <BMSModule::getModuleVoltage()>:

float BMSModule::getModuleVoltage()
{
     ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  moduleVolt = 0;
     acc:	2600      	movs	r6, #0
  for (int I; I < 8; I++)
  {
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     ace:	f8d0 9080 	ldr.w	r9, [r0, #128]	; 0x80
     ad2:	4f10      	ldr	r7, [pc, #64]	; (b14 <BMSModule::getModuleVoltage()+0x4c>)
  moduleVolt = 0;
     ad4:	6606      	str	r6, [r0, #96]	; 0x60
{
     ad6:	4682      	mov	sl, r0
     ad8:	4605      	mov	r5, r0
     ada:	f100 0820 	add.w	r8, r0, #32
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     ade:	f855 4b04 	ldr.w	r4, [r5], #4
     ae2:	4649      	mov	r1, r9
     ae4:	4620      	mov	r0, r4
     ae6:	f00c feb5 	bl	d854 <__aeabi_fcmpgt>
     aea:	4603      	mov	r3, r0
     aec:	4639      	mov	r1, r7
     aee:	4620      	mov	r0, r4
     af0:	b153      	cbz	r3, b08 <BMSModule::getModuleVoltage()+0x40>
     af2:	f00c fe91 	bl	d818 <__aeabi_fcmplt>
     af6:	4603      	mov	r3, r0
    {
      moduleVolt = moduleVolt + cellVolt[I];
     af8:	4621      	mov	r1, r4
     afa:	4630      	mov	r0, r6
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     afc:	b123      	cbz	r3, b08 <BMSModule::getModuleVoltage()+0x40>
      moduleVolt = moduleVolt + cellVolt[I];
     afe:	f00c fbe5 	bl	d2cc <__addsf3>
     b02:	4606      	mov	r6, r0
     b04:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
  for (int I; I < 8; I++)
     b08:	4545      	cmp	r5, r8
     b0a:	d1e8      	bne.n	ade <BMSModule::getModuleVoltage()+0x16>
    }
  }
  return moduleVolt;
}
     b0c:	4630      	mov	r0, r6
     b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b12:	bf00      	nop
     b14:	42700000 	.word	0x42700000

00000b18 <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 2) return 0.0f;
     b18:	2902      	cmp	r1, #2
  return temperatures[temp];
     b1a:	bf9a      	itte	ls
     b1c:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
     b20:	6e40      	ldrls	r0, [r0, #100]	; 0x64
  if (temp < 0 || temp > 2) return 0.0f;
     b22:	2000      	movhi	r0, #0
}
     b24:	4770      	bx	lr
     b26:	bf00      	nop

00000b28 <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR) return;
     b28:	293e      	cmp	r1, #62	; 0x3e
  moduleAddress = newAddr;
     b2a:	bf98      	it	ls
     b2c:	f880 109c 	strbls.w	r1, [r0, #156]	; 0x9c
}
     b30:	4770      	bx	lr
     b32:	bf00      	nop

00000b34 <BMSModule::getBalStat()>:
}

uint8_t BMSModule::getBalStat()
{
  return balstat;
}
     b34:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <BMSModule::isExisting()>:

bool BMSModule::isExisting()
{
  return exists;
}
     b3c:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
     b40:	4770      	bx	lr
     b42:	bf00      	nop

00000b44 <BMSModule::isReset()>:

bool BMSModule::isReset()
{
  return reset;
}
     b44:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
     b48:	4770      	bx	lr
     b4a:	bf00      	nop

00000b4c <BMSModule::settempsensor(int)>:

void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     b4c:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
}
     b50:	4770      	bx	lr
     b52:	bf00      	nop

00000b54 <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     b54:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
}
     b58:	4770      	bx	lr
     b5a:	bf00      	nop

00000b5c <BMSModule::setReset(bool)>:

void BMSModule::setReset(bool ex)
{
  reset = ex;
     b5c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
}
     b60:	4770      	bx	lr
     b62:	bf00      	nop

00000b64 <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
     b64:	b510      	push	{r4, lr}
  IgnoreCell = Ignore;
     b66:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
{
     b6a:	b082      	sub	sp, #8
  Serial.print(Ignore);
     b6c:	4608      	mov	r0, r1
     b6e:	f00c fa91 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b72:	4c07      	ldr	r4, [pc, #28]	; (b90 <BMSModule::setIgnoreCell(float)+0x2c>)
     b74:	460b      	mov	r3, r1
     b76:	2102      	movs	r1, #2
     b78:	4602      	mov	r2, r0
     b7a:	9100      	str	r1, [sp, #0]
     b7c:	4620      	mov	r0, r4
     b7e:	f009 f91b 	bl	9db8 <Print::printFloat(double, unsigned char)>
  Serial.println();
     b82:	4620      	mov	r0, r4
}
     b84:	b002      	add	sp, #8
     b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println();
     b8a:	f009 b8f3 	b.w	9d74 <Print::println()>
     b8e:	bf00      	nop
     b90:	1fff8824 	.word	0x1fff8824

00000b94 <BMSModule::setTempconv(float, int)>:

void BMSModule::setTempconv(float tempconvin, int tempoffin)
{
  tempconv = tempconvin;
     b94:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
  tempoff = tempoffin;
     b98:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
}
     b9c:	4770      	bx	lr
     b9e:	bf00      	nop

00000ba0 <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     ba0:	b570      	push	{r4, r5, r6, lr}
     ba2:	f500 5536 	add.w	r5, r0, #11648	; 0x2d80
     ba6:	4606      	mov	r6, r0
     ba8:	f100 043c 	add.w	r4, r0, #60	; 0x3c
     bac:	3504      	adds	r5, #4
     bae:	4620      	mov	r0, r4
     bb0:	34b8      	adds	r4, #184	; 0xb8
     bb2:	f7ff fc51 	bl	458 <BMSModule::BMSModule()>
     bb6:	42ac      	cmp	r4, r5
     bb8:	d1f9      	bne.n	bae <BMSModuleManager::BMSModuleManager()+0xe>
     bba:	f106 05f4 	add.w	r5, r6, #244	; 0xf4
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     bbe:	2401      	movs	r4, #1
    modules[i].setExists(false);
     bc0:	4628      	mov	r0, r5
     bc2:	2100      	movs	r1, #0
     bc4:	f7ff ffc6 	bl	b54 <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     bc8:	4621      	mov	r1, r4
     bca:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     bcc:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     bce:	f7ff ffab 	bl	b28 <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     bd2:	2c3f      	cmp	r4, #63	; 0x3f
     bd4:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
     bd8:	d1f2      	bne.n	bc0 <BMSModuleManager::BMSModuleManager()+0x20>
  lowestPackVolt = 1000.0f;
     bda:	4a1a      	ldr	r2, [pc, #104]	; (c44 <BMSModuleManager::BMSModuleManager()+0xa4>)
     bdc:	6272      	str	r2, [r6, #36]	; 0x24
  lowestPackTemp = 200.0f;
     bde:	4a1a      	ldr	r2, [pc, #104]	; (c48 <BMSModuleManager::BMSModuleManager()+0xa8>)
     be0:	62f2      	str	r2, [r6, #44]	; 0x2c
  isFaulted = false;
     be2:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
  highestPackTemp = -100.0f;
     be6:	4a19      	ldr	r2, [pc, #100]	; (c4c <BMSModuleManager::BMSModuleManager()+0xac>)
     be8:	6332      	str	r2, [r6, #48]	; 0x30
  isFaulted = false;
     bea:	2400      	movs	r4, #0
  highestPackVolt = 0.0f;
     bec:	2100      	movs	r1, #0
  MeasurementStep = 0.001;
     bee:	4a18      	ldr	r2, [pc, #96]	; (c50 <BMSModuleManager::BMSModuleManager()+0xb0>)
  highestPackVolt = 0.0f;
     bf0:	62b1      	str	r1, [r6, #40]	; 0x28
    avgcell[y] = 0;
     bf2:	f506 5036 	add.w	r0, r6, #11648	; 0x2d80
  isFaulted = false;
     bf6:	f883 4d90 	strb.w	r4, [r3, #3472]	; 0xd90
    avgcell[y] = 0;
     bfa:	3028      	adds	r0, #40	; 0x28
  LowCellVoltsmooth = 0;
     bfc:	6171      	str	r1, [r6, #20]
  HighCellVoltsmooth = 0;
     bfe:	61f1      	str	r1, [r6, #28]
  MeasurementStep = 0.001;
     c00:	6232      	str	r2, [r6, #32]
  avgtotal = 0;
     c02:	f8c3 1dc8 	str.w	r1, [r3, #3528]	; 0xdc8
  lowtotal = 0;
     c06:	f8c3 1df0 	str.w	r1, [r3, #3568]	; 0xdf0
  hightotal = 0;
     c0a:	f8c3 1e18 	str.w	r1, [r3, #3608]	; 0xe18
  avgindex = 0;
     c0e:	f8c3 4dcc 	str.w	r4, [r3, #3532]	; 0xdcc
  lowindex = 0;
     c12:	f8c3 4df4 	str.w	r4, [r3, #3572]	; 0xdf4
  highindex = 0;
     c16:	f8c3 4e1c 	str.w	r4, [r3, #3612]	; 0xe1c
    avgcell[y] = 0;
     c1a:	4621      	mov	r1, r4
     c1c:	2220      	movs	r2, #32
     c1e:	f00d fce5 	bl	e5ec <memset>
    lowcell[y] = 0;
     c22:	f506 5037 	add.w	r0, r6, #11712	; 0x2dc0
     c26:	4621      	mov	r1, r4
     c28:	2220      	movs	r2, #32
     c2a:	3010      	adds	r0, #16
     c2c:	f00d fcde 	bl	e5ec <memset>
    highcell [y] = 0;
     c30:	f506 5037 	add.w	r0, r6, #11712	; 0x2dc0
     c34:	2220      	movs	r2, #32
     c36:	4621      	mov	r1, r4
     c38:	3038      	adds	r0, #56	; 0x38
     c3a:	f00d fcd7 	bl	e5ec <memset>
}
     c3e:	4630      	mov	r0, r6
     c40:	bd70      	pop	{r4, r5, r6, pc}
     c42:	bf00      	nop
     c44:	447a0000 	.word	0x447a0000
     c48:	43480000 	.word	0x43480000
     c4c:	c2c80000 	.word	0xc2c80000
     c50:	3a83126f 	.word	0x3a83126f

00000c54 <BMSModuleManager::clearmodules()>:
{
     c54:	b538      	push	{r3, r4, r5, lr}
     c56:	f100 04f4 	add.w	r4, r0, #244	; 0xf4
  for (int y = 1; y < 63; y++)
     c5a:	2501      	movs	r5, #1
     c5c:	e004      	b.n	c68 <BMSModuleManager::clearmodules()+0x14>
     c5e:	3501      	adds	r5, #1
     c60:	2d3f      	cmp	r5, #63	; 0x3f
     c62:	f104 04b8 	add.w	r4, r4, #184	; 0xb8
     c66:	d011      	beq.n	c8c <BMSModuleManager::clearmodules()+0x38>
    if (modules[y].isExisting())
     c68:	4620      	mov	r0, r4
     c6a:	f7ff ff67 	bl	b3c <BMSModule::isExisting()>
     c6e:	2800      	cmp	r0, #0
     c70:	d0f5      	beq.n	c5e <BMSModuleManager::clearmodules()+0xa>
      modules[y].setExists(false);
     c72:	4620      	mov	r0, r4
     c74:	2100      	movs	r1, #0
     c76:	f7ff ff6d 	bl	b54 <BMSModule::setExists(bool)>
      modules[y].setAddress(y);
     c7a:	4629      	mov	r1, r5
     c7c:	4620      	mov	r0, r4
  for (int y = 1; y < 63; y++)
     c7e:	3501      	adds	r5, #1
      modules[y].setAddress(y);
     c80:	f7ff ff52 	bl	b28 <BMSModule::setAddress(int)>
  for (int y = 1; y < 63; y++)
     c84:	2d3f      	cmp	r5, #63	; 0x3f
     c86:	f104 04b8 	add.w	r4, r4, #184	; 0xb8
     c8a:	d1ed      	bne.n	c68 <BMSModuleManager::clearmodules()+0x14>
}
     c8c:	bd38      	pop	{r3, r4, r5, pc}
     c8e:	bf00      	nop

00000c90 <BMSModuleManager::checkcomms()>:
{
     c90:	b570      	push	{r4, r5, r6, lr}
     c92:	f500 5636 	add.w	r6, r0, #11648	; 0x2d80
     c96:	f100 04f4 	add.w	r4, r0, #244	; 0xf4
     c9a:	3604      	adds	r6, #4
  int g = 0;
     c9c:	2500      	movs	r5, #0
     c9e:	e007      	b.n	cb0 <BMSModuleManager::checkcomms()+0x20>
      g = 1;
     ca0:	2501      	movs	r5, #1
    modules[y].setReset(false);
     ca2:	4620      	mov	r0, r4
     ca4:	2100      	movs	r1, #0
  for (int y = 1; y < 63; y++)
     ca6:	34b8      	adds	r4, #184	; 0xb8
    modules[y].setReset(false);
     ca8:	f7ff ff58 	bl	b5c <BMSModule::setReset(bool)>
  for (int y = 1; y < 63; y++)
     cac:	42b4      	cmp	r4, r6
     cae:	d00b      	beq.n	cc8 <BMSModuleManager::checkcomms()+0x38>
    if (modules[y].isExisting())
     cb0:	4620      	mov	r0, r4
     cb2:	f7ff ff43 	bl	b3c <BMSModule::isExisting()>
     cb6:	4603      	mov	r3, r0
      if (modules[y].isReset())
     cb8:	4620      	mov	r0, r4
    if (modules[y].isExisting())
     cba:	2b00      	cmp	r3, #0
     cbc:	d0f1      	beq.n	ca2 <BMSModuleManager::checkcomms()+0x12>
      if (modules[y].isReset())
     cbe:	f7ff ff41 	bl	b44 <BMSModule::isReset()>
     cc2:	2800      	cmp	r0, #0
     cc4:	d1ec      	bne.n	ca0 <BMSModuleManager::checkcomms()+0x10>
}
     cc6:	bd70      	pop	{r4, r5, r6, pc}
  if ( g == 0)
     cc8:	4628      	mov	r0, r5
}
     cca:	bd70      	pop	{r4, r5, r6, pc}

00000ccc <BMSModuleManager::seriescells()>:
{
     ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
     cce:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
     cd2:	2500      	movs	r5, #0
     cd4:	f500 5636 	add.w	r6, r0, #11648	; 0x2d80
     cd8:	f8c7 5d94 	str.w	r5, [r7, #3476]	; 0xd94
  for (int y = 1; y < 63; y++)
     cdc:	f100 04f4 	add.w	r4, r0, #244	; 0xf4
     ce0:	3604      	adds	r6, #4
      spack = spack + modules[y].getscells();
     ce2:	4620      	mov	r0, r4
     ce4:	f7ff fc7a 	bl	5dc <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
     ce8:	34b8      	adds	r4, #184	; 0xb8
      spack = spack + modules[y].getscells();
     cea:	4405      	add	r5, r0
  for (int y = 1; y < 63; y++)
     cec:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
     cee:	f8c7 5d94 	str.w	r5, [r7, #3476]	; 0xd94
  for (int y = 1; y < 63; y++)
     cf2:	d1f6      	bne.n	ce2 <BMSModuleManager::seriescells()+0x16>
}
     cf4:	4628      	mov	r0, r5
     cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000cf8 <BMSModuleManager::decodecan(CAN_message_t&)>:
{
     cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((msg.id & 0x80000000) == 0x80000000)
     cfa:	680f      	ldr	r7, [r1, #0]
    CMU = (((msg.id & 0x00000FF0) - 0x600) >> 4);
     cfc:	f407 657f 	and.w	r5, r7, #4080	; 0xff0
  if ((msg.id & 0x80000000) == 0x80000000)
     d00:	2f00      	cmp	r7, #0
{
     d02:	460e      	mov	r6, r1
     d04:	4604      	mov	r4, r0
    CMU = (((msg.id & 0x00000FF0) - 0x600) >> 4);
     d06:	f5a5 65c0 	sub.w	r5, r5, #1536	; 0x600
  if ((msg.id & 0x80000000) == 0x80000000)
     d0a:	db15      	blt.n	d38 <BMSModuleManager::decodecan(CAN_message_t&)+0x40>
    Id = msg.id & 0x00F;
     d0c:	f007 070f 	and.w	r7, r7, #15
    CMU = (((msg.id & 0xFF0) - 0x600) >> 4);
     d10:	092d      	lsrs	r5, r5, #4
  modules[CMU].setExists(true);
     d12:	23b8      	movs	r3, #184	; 0xb8
     d14:	fb03 4405 	mla	r4, r3, r5, r4
     d18:	343c      	adds	r4, #60	; 0x3c
     d1a:	4620      	mov	r0, r4
     d1c:	2101      	movs	r1, #1
     d1e:	f7ff ff19 	bl	b54 <BMSModule::setExists(bool)>
  modules[CMU].setReset(true);
     d22:	4620      	mov	r0, r4
     d24:	2101      	movs	r1, #1
     d26:	f7ff ff19 	bl	b5c <BMSModule::setReset(bool)>
  modules[CMU].decodecan(Id, msg);
     d2a:	4632      	mov	r2, r6
     d2c:	4639      	mov	r1, r7
     d2e:	4620      	mov	r0, r4
}
     d30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  modules[CMU].decodecan(Id, msg);
     d34:	f7ff bcde 	b.w	6f4 <BMSModule::decodecan(int, CAN_message_t&)>
    Serial.println();
     d38:	480a      	ldr	r0, [pc, #40]	; (d64 <BMSModuleManager::decodecan(CAN_message_t&)+0x6c>)
     d3a:	f009 f81b 	bl	9d74 <Print::println()>
     d3e:	2112      	movs	r1, #18
     d40:	4809      	ldr	r0, [pc, #36]	; (d68 <BMSModuleManager::decodecan(CAN_message_t&)+0x70>)
     d42:	f00b fce5 	bl	c710 <usb_serial_write>
    Serial.print(msg.id & 0x80000000);
     d46:	6831      	ldr	r1, [r6, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     d48:	4806      	ldr	r0, [pc, #24]	; (d64 <BMSModuleManager::decodecan(CAN_message_t&)+0x6c>)
     d4a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4e:	2300      	movs	r3, #0
     d50:	220a      	movs	r2, #10
     d52:	f009 f827 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    Serial.println();
     d56:	4803      	ldr	r0, [pc, #12]	; (d64 <BMSModuleManager::decodecan(CAN_message_t&)+0x6c>)
    CMU = (((msg.id & 0x00000FF0) - 0x600) >> 4);
     d58:	092d      	lsrs	r5, r5, #4
    Id = msg.id & 0x00F;
     d5a:	f007 070f 	and.w	r7, r7, #15
    Serial.println();
     d5e:	f009 f809 	bl	9d74 <Print::println()>
     d62:	e7d6      	b.n	d12 <BMSModuleManager::decodecan(CAN_message_t&)+0x1a>
     d64:	1fff8824 	.word	0x1fff8824
     d68:	00014238 	.word	0x00014238

00000d6c <BMSModuleManager::getLowCellVolt()>:
{
     d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d70:	f100 04f4 	add.w	r4, r0, #244	; 0xf4
     d74:	f500 5636 	add.w	r6, r0, #11648	; 0x2d80
      LowCellVolt = 5.0;
     d78:	f8df 8054 	ldr.w	r8, [pc, #84]	; dd0 <BMSModuleManager::getLowCellVolt()+0x64>
{
     d7c:	4607      	mov	r7, r0
     d7e:	3604      	adds	r6, #4
     d80:	4625      	mov	r5, r4
    if (modules[x].isExisting())
     d82:	4628      	mov	r0, r5
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d84:	35b8      	adds	r5, #184	; 0xb8
    if (modules[x].isExisting())
     d86:	f7ff fed9 	bl	b3c <BMSModule::isExisting()>
     d8a:	b108      	cbz	r0, d90 <BMSModuleManager::getLowCellVolt()+0x24>
      LowCellVolt = 5.0;
     d8c:	f8c7 8010 	str.w	r8, [r7, #16]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d90:	42b5      	cmp	r5, r6
     d92:	d1f6      	bne.n	d82 <BMSModuleManager::getLowCellVolt()+0x16>
    if (modules[x].isExisting())
     d94:	4620      	mov	r0, r4
     d96:	f7ff fed1 	bl	b3c <BMSModule::isExisting()>
     d9a:	b938      	cbnz	r0, dac <BMSModuleManager::getLowCellVolt()+0x40>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d9c:	34b8      	adds	r4, #184	; 0xb8
     d9e:	42b4      	cmp	r4, r6
     da0:	d013      	beq.n	dca <BMSModuleManager::getLowCellVolt()+0x5e>
    if (modules[x].isExisting())
     da2:	4620      	mov	r0, r4
     da4:	f7ff feca 	bl	b3c <BMSModule::isExisting()>
     da8:	2800      	cmp	r0, #0
     daa:	d0f7      	beq.n	d9c <BMSModuleManager::getLowCellVolt()+0x30>
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
     dac:	4620      	mov	r0, r4
     dae:	f7ff fb9f 	bl	4f0 <BMSModule::getLowCellV()>
     db2:	6939      	ldr	r1, [r7, #16]
     db4:	f00c fd30 	bl	d818 <__aeabi_fcmplt>
     db8:	2800      	cmp	r0, #0
     dba:	d0ef      	beq.n	d9c <BMSModuleManager::getLowCellVolt()+0x30>
     dbc:	4620      	mov	r0, r4
     dbe:	f7ff fb97 	bl	4f0 <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dc2:	34b8      	adds	r4, #184	; 0xb8
     dc4:	42b4      	cmp	r4, r6
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
     dc6:	6138      	str	r0, [r7, #16]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dc8:	d1eb      	bne.n	da2 <BMSModuleManager::getLowCellVolt()+0x36>
}
     dca:	6978      	ldr	r0, [r7, #20]
     dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dd0:	40a00000 	.word	0x40a00000

00000dd4 <BMSModuleManager::getHighCellVolt()>:
{
     dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     dd8:	f100 04f4 	add.w	r4, r0, #244	; 0xf4
     ddc:	f500 5636 	add.w	r6, r0, #11648	; 0x2d80
     de0:	4607      	mov	r7, r0
      HighCellVolt = 0.0;
     de2:	f04f 0800 	mov.w	r8, #0
     de6:	3604      	adds	r6, #4
{
     de8:	4625      	mov	r5, r4
    if (modules[x].isExisting())
     dea:	4628      	mov	r0, r5
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dec:	35b8      	adds	r5, #184	; 0xb8
    if (modules[x].isExisting())
     dee:	f7ff fea5 	bl	b3c <BMSModule::isExisting()>
     df2:	b108      	cbz	r0, df8 <BMSModuleManager::getHighCellVolt()+0x24>
      HighCellVolt = 0.0;
     df4:	f8c7 8018 	str.w	r8, [r7, #24]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     df8:	42b5      	cmp	r5, r6
     dfa:	d1f6      	bne.n	dea <BMSModuleManager::getHighCellVolt()+0x16>
    if (modules[x].isExisting())
     dfc:	4620      	mov	r0, r4
     dfe:	f7ff fe9d 	bl	b3c <BMSModule::isExisting()>
     e02:	b938      	cbnz	r0, e14 <BMSModuleManager::getHighCellVolt()+0x40>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e04:	34b8      	adds	r4, #184	; 0xb8
     e06:	42b4      	cmp	r4, r6
     e08:	d013      	beq.n	e32 <BMSModuleManager::getHighCellVolt()+0x5e>
    if (modules[x].isExisting())
     e0a:	4620      	mov	r0, r4
     e0c:	f7ff fe96 	bl	b3c <BMSModule::isExisting()>
     e10:	2800      	cmp	r0, #0
     e12:	d0f7      	beq.n	e04 <BMSModuleManager::getHighCellVolt()+0x30>
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
     e14:	4620      	mov	r0, r4
     e16:	f7ff fb89 	bl	52c <BMSModule::getHighCellV()>
     e1a:	69b9      	ldr	r1, [r7, #24]
     e1c:	f00c fd1a 	bl	d854 <__aeabi_fcmpgt>
     e20:	2800      	cmp	r0, #0
     e22:	d0ef      	beq.n	e04 <BMSModuleManager::getHighCellVolt()+0x30>
     e24:	4620      	mov	r0, r4
     e26:	f7ff fb81 	bl	52c <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e2a:	34b8      	adds	r4, #184	; 0xb8
     e2c:	42b4      	cmp	r4, r6
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
     e2e:	61b8      	str	r0, [r7, #24]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e30:	d1eb      	bne.n	e0a <BMSModuleManager::getHighCellVolt()+0x36>
}
     e32:	69f8      	ldr	r0, [r7, #28]
     e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000e38 <BMSModuleManager::getAllVoltTemp()>:
{
     e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e3c:	4606      	mov	r6, r0
     e3e:	b087      	sub	sp, #28
  getLowCellVolt();
     e40:	f7ff ff94 	bl	d6c <BMSModuleManager::getLowCellVolt()>
  getHighCellVolt();
     e44:	4630      	mov	r0, r6
     e46:	f7ff ffc5 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
  if (HighCellVoltsmooth == 0 && LowCellVoltsmooth == 0)
     e4a:	69f7      	ldr	r7, [r6, #28]
     e4c:	2100      	movs	r1, #0
     e4e:	4638      	mov	r0, r7
     e50:	f00c fcd8 	bl	d804 <__aeabi_fcmpeq>
     e54:	2800      	cmp	r0, #0
     e56:	f040 8100 	bne.w	105a <BMSModuleManager::getAllVoltTemp()+0x222>
    HighCellVoltsmooth = HighCellVolt;
     e5a:	69b5      	ldr	r5, [r6, #24]
    LowCellVoltsmooth = LowCellVolt;
     e5c:	f8d6 a010 	ldr.w	sl, [r6, #16]
  if (HighCellVoltsmooth == 0 && LowCellVoltsmooth == 0)
     e60:	f8d6 9014 	ldr.w	r9, [r6, #20]
  if (abs(LowCellVoltsmooth - LowCellVolt) > MeasurementStep)
     e64:	4651      	mov	r1, sl
     e66:	4648      	mov	r0, r9
     e68:	f00c fa2e 	bl	d2c8 <__aeabi_fsub>
     e6c:	2100      	movs	r1, #0
     e6e:	4604      	mov	r4, r0
     e70:	f00c fcf0 	bl	d854 <__aeabi_fcmpgt>
     e74:	b908      	cbnz	r0, e7a <BMSModuleManager::getAllVoltTemp()+0x42>
     e76:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
     e7a:	f8d6 8020 	ldr.w	r8, [r6, #32]
     e7e:	4621      	mov	r1, r4
     e80:	4640      	mov	r0, r8
     e82:	f00c fcc9 	bl	d818 <__aeabi_fcmplt>
     e86:	b158      	cbz	r0, ea0 <BMSModuleManager::getAllVoltTemp()+0x68>
    if (LowCellVoltsmooth > LowCellVolt)
     e88:	4650      	mov	r0, sl
     e8a:	4649      	mov	r1, r9
     e8c:	f00c fcc4 	bl	d818 <__aeabi_fcmplt>
     e90:	2800      	cmp	r0, #0
     e92:	f000 811b 	beq.w	10cc <BMSModuleManager::getAllVoltTemp()+0x294>
      LowCellVoltsmooth = LowCellVoltsmooth - MeasurementStep;
     e96:	4648      	mov	r0, r9
     e98:	4641      	mov	r1, r8
     e9a:	f00c fa15 	bl	d2c8 <__aeabi_fsub>
     e9e:	4682      	mov	sl, r0
  if (abs(HighCellVoltsmooth - HighCellVolt) > MeasurementStep)
     ea0:	4629      	mov	r1, r5
      LowCellVoltsmooth = LowCellVoltsmooth + MeasurementStep;
     ea2:	f8c6 a014 	str.w	sl, [r6, #20]
  if (abs(HighCellVoltsmooth - HighCellVolt) > MeasurementStep)
     ea6:	4638      	mov	r0, r7
     ea8:	f00c fa0e 	bl	d2c8 <__aeabi_fsub>
     eac:	2100      	movs	r1, #0
     eae:	4604      	mov	r4, r0
     eb0:	f00c fcd0 	bl	d854 <__aeabi_fcmpgt>
     eb4:	b908      	cbnz	r0, eba <BMSModuleManager::getAllVoltTemp()+0x82>
     eb6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
     eba:	4621      	mov	r1, r4
     ebc:	4640      	mov	r0, r8
     ebe:	f00c fcab 	bl	d818 <__aeabi_fcmplt>
     ec2:	b158      	cbz	r0, edc <BMSModuleManager::getAllVoltTemp()+0xa4>
    if (HighCellVoltsmooth > HighCellVolt)
     ec4:	4639      	mov	r1, r7
     ec6:	4628      	mov	r0, r5
     ec8:	f00c fca6 	bl	d818 <__aeabi_fcmplt>
     ecc:	2800      	cmp	r0, #0
     ece:	f000 80f7 	beq.w	10c0 <BMSModuleManager::getAllVoltTemp()+0x288>
      HighCellVoltsmooth = HighCellVoltsmooth - MeasurementStep;
     ed2:	4641      	mov	r1, r8
     ed4:	4638      	mov	r0, r7
     ed6:	f00c f9f7 	bl	d2c8 <__aeabi_fsub>
     eda:	4605      	mov	r5, r0
  if (avg > 0 && avg < 10)
     edc:	68b4      	ldr	r4, [r6, #8]
      HighCellVoltsmooth = HighCellVoltsmooth + MeasurementStep;
     ede:	61f5      	str	r5, [r6, #28]
  if (avg > 0 && avg < 10)
     ee0:	2100      	movs	r1, #0
     ee2:	4620      	mov	r0, r4
     ee4:	f00c fcb6 	bl	d854 <__aeabi_fcmpgt>
     ee8:	b130      	cbz	r0, ef8 <BMSModuleManager::getAllVoltTemp()+0xc0>
     eea:	4980      	ldr	r1, [pc, #512]	; (10ec <BMSModuleManager::getAllVoltTemp()+0x2b4>)
     eec:	4620      	mov	r0, r4
     eee:	f00c fc93 	bl	d818 <__aeabi_fcmplt>
     ef2:	2800      	cmp	r0, #0
     ef4:	f040 80c0 	bne.w	1078 <BMSModuleManager::getAllVoltTemp()+0x240>
     ef8:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
     efc:	9305      	str	r3, [sp, #20]
  packVolt = 0.0f;
     efe:	4634      	mov	r4, r6
     f00:	2300      	movs	r3, #0
     f02:	f844 3bf4 	str.w	r3, [r4], #244
      Logger::debug("");
     f06:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 10f0 <BMSModuleManager::getAllVoltTemp()+0x2b8>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
     f0a:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 10f4 <BMSModuleManager::getAllVoltTemp()+0x2bc>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
     f0e:	4f7a      	ldr	r7, [pc, #488]	; (10f8 <BMSModuleManager::getAllVoltTemp()+0x2c0>)
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     f10:	2501      	movs	r5, #1
     f12:	e004      	b.n	f1e <BMSModuleManager::getAllVoltTemp()+0xe6>
     f14:	3501      	adds	r5, #1
     f16:	2d3f      	cmp	r5, #63	; 0x3f
     f18:	f104 04b8 	add.w	r4, r4, #184	; 0xb8
     f1c:	d06b      	beq.n	ff6 <BMSModuleManager::getAllVoltTemp()+0x1be>
    if (modules[x].isExisting())
     f1e:	4620      	mov	r0, r4
     f20:	f7ff fe0c 	bl	b3c <BMSModule::isExisting()>
     f24:	2800      	cmp	r0, #0
     f26:	d0f5      	beq.n	f14 <BMSModuleManager::getAllVoltTemp()+0xdc>
      Logger::debug("");
     f28:	4648      	mov	r0, r9
     f2a:	f000 fd9b 	bl	1a64 <Logger::debug(char*, ...)>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
     f2e:	4629      	mov	r1, r5
     f30:	4640      	mov	r0, r8
     f32:	f000 fd97 	bl	1a64 <Logger::debug(char*, ...)>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
     f36:	4620      	mov	r0, r4
     f38:	f7ff fdc6 	bl	ac8 <BMSModule::getModuleVoltage()>
     f3c:	f00c f8aa 	bl	d094 <__aeabi_f2d>
     f40:	4602      	mov	r2, r0
     f42:	460b      	mov	r3, r1
     f44:	4638      	mov	r0, r7
     f46:	f000 fd8d 	bl	1a64 <Logger::debug(char*, ...)>
      Logger::debug("Lowest Cell V: %f     Highest Cell V: %f", modules[x].getLowCellV(), modules[x].getHighCellV());
     f4a:	4620      	mov	r0, r4
     f4c:	f7ff fad0 	bl	4f0 <BMSModule::getLowCellV()>
     f50:	4682      	mov	sl, r0
     f52:	4620      	mov	r0, r4
     f54:	f7ff faea 	bl	52c <BMSModule::getHighCellV()>
     f58:	4683      	mov	fp, r0
     f5a:	4650      	mov	r0, sl
     f5c:	f00c f89a 	bl	d094 <__aeabi_f2d>
     f60:	4602      	mov	r2, r0
     f62:	460b      	mov	r3, r1
     f64:	4658      	mov	r0, fp
     f66:	e9cd 2302 	strd	r2, r3, [sp, #8]
     f6a:	f00c f893 	bl	d094 <__aeabi_f2d>
     f6e:	468b      	mov	fp, r1
     f70:	4682      	mov	sl, r0
     f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f76:	e9cd ab00 	strd	sl, fp, [sp]
     f7a:	4860      	ldr	r0, [pc, #384]	; (10fc <BMSModuleManager::getAllVoltTemp()+0x2c4>)
     f7c:	f000 fd72 	bl	1a64 <Logger::debug(char*, ...)>
      Logger::debug("Temp1: %f       Temp2: %f", modules[x].getTemperature(0), modules[x].getTemperature(1));
     f80:	2100      	movs	r1, #0
     f82:	4620      	mov	r0, r4
     f84:	f7ff fdc8 	bl	b18 <BMSModule::getTemperature(int)>
     f88:	2101      	movs	r1, #1
     f8a:	4682      	mov	sl, r0
     f8c:	4620      	mov	r0, r4
     f8e:	f7ff fdc3 	bl	b18 <BMSModule::getTemperature(int)>
     f92:	4683      	mov	fp, r0
     f94:	4650      	mov	r0, sl
     f96:	f00c f87d 	bl	d094 <__aeabi_f2d>
     f9a:	4602      	mov	r2, r0
     f9c:	4658      	mov	r0, fp
     f9e:	4692      	mov	sl, r2
     fa0:	468b      	mov	fp, r1
     fa2:	f00c f877 	bl	d094 <__aeabi_f2d>
     fa6:	4652      	mov	r2, sl
     fa8:	e9cd 0100 	strd	r0, r1, [sp]
     fac:	465b      	mov	r3, fp
     fae:	4854      	ldr	r0, [pc, #336]	; (1100 <BMSModuleManager::getAllVoltTemp()+0x2c8>)
     fb0:	f000 fd58 	bl	1a64 <Logger::debug(char*, ...)>
      packVolt += modules[x].getModuleVoltage();
     fb4:	4620      	mov	r0, r4
     fb6:	f7ff fd87 	bl	ac8 <BMSModule::getModuleVoltage()>
     fba:	4601      	mov	r1, r0
     fbc:	6830      	ldr	r0, [r6, #0]
     fbe:	f00c f985 	bl	d2cc <__addsf3>
     fc2:	6030      	str	r0, [r6, #0]
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
     fc4:	4620      	mov	r0, r4
     fc6:	f7ff fb0d 	bl	5e4 <BMSModule::getLowTemp()>
     fca:	6af1      	ldr	r1, [r6, #44]	; 0x2c
     fcc:	f00c fc24 	bl	d818 <__aeabi_fcmplt>
     fd0:	2800      	cmp	r0, #0
     fd2:	d134      	bne.n	103e <BMSModuleManager::getAllVoltTemp()+0x206>
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
     fd4:	4620      	mov	r0, r4
     fd6:	f7ff fb49 	bl	66c <BMSModule::getHighTemp()>
     fda:	6b31      	ldr	r1, [r6, #48]	; 0x30
     fdc:	f00c fc3a 	bl	d854 <__aeabi_fcmpgt>
     fe0:	2800      	cmp	r0, #0
     fe2:	d097      	beq.n	f14 <BMSModuleManager::getAllVoltTemp()+0xdc>
     fe4:	4620      	mov	r0, r4
     fe6:	f7ff fb41 	bl	66c <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     fea:	3501      	adds	r5, #1
     fec:	2d3f      	cmp	r5, #63	; 0x3f
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
     fee:	6330      	str	r0, [r6, #48]	; 0x30
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ff0:	f104 04b8 	add.w	r4, r4, #184	; 0xb8
     ff4:	d193      	bne.n	f1e <BMSModuleManager::getAllVoltTemp()+0xe6>
  packVolt = packVolt / Pstring;
     ff6:	6870      	ldr	r0, [r6, #4]
     ff8:	f00c fa1c 	bl	d434 <__aeabi_i2f>
     ffc:	4601      	mov	r1, r0
     ffe:	6830      	ldr	r0, [r6, #0]
    1000:	f00c fb20 	bl	d644 <__aeabi_fdiv>
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    1004:	6ab1      	ldr	r1, [r6, #40]	; 0x28
  packVolt = packVolt / Pstring;
    1006:	6030      	str	r0, [r6, #0]
    1008:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    100a:	f00c fc23 	bl	d854 <__aeabi_fcmpgt>
    100e:	b100      	cbz	r0, 1012 <BMSModuleManager::getAllVoltTemp()+0x1da>
    1010:	62b4      	str	r4, [r6, #40]	; 0x28
  if (packVolt < lowestPackVolt) lowestPackVolt = packVolt;
    1012:	6a71      	ldr	r1, [r6, #36]	; 0x24
    1014:	4620      	mov	r0, r4
    1016:	f00c fbff 	bl	d818 <__aeabi_fcmplt>
    101a:	b100      	cbz	r0, 101e <BMSModuleManager::getAllVoltTemp()+0x1e6>
    101c:	6274      	str	r4, [r6, #36]	; 0x24
  if (digitalRead(11) == LOW) {
    101e:	200b      	movs	r0, #11
    1020:	f009 fd2a 	bl	aa78 <digitalRead>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    1024:	9b05      	ldr	r3, [sp, #20]
    1026:	f893 3d90 	ldrb.w	r3, [r3, #3472]	; 0xd90
  if (digitalRead(11) == LOW) {
    102a:	b968      	cbnz	r0, 1048 <BMSModuleManager::getAllVoltTemp()+0x210>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    102c:	2b00      	cmp	r3, #0
    102e:	d058      	beq.n	10e2 <BMSModuleManager::getAllVoltTemp()+0x2aa>
    isFaulted = true;
    1030:	9a05      	ldr	r2, [sp, #20]
    1032:	2301      	movs	r3, #1
    1034:	f882 3d90 	strb.w	r3, [r2, #3472]	; 0xd90
}
    1038:	b007      	add	sp, #28
    103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
    103e:	4620      	mov	r0, r4
    1040:	f7ff fad0 	bl	5e4 <BMSModule::getLowTemp()>
    1044:	62f0      	str	r0, [r6, #44]	; 0x2c
    1046:	e7c5      	b.n	fd4 <BMSModuleManager::getAllVoltTemp()+0x19c>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    1048:	2b00      	cmp	r3, #0
    104a:	d145      	bne.n	10d8 <BMSModuleManager::getAllVoltTemp()+0x2a0>
    isFaulted = false;
    104c:	2300      	movs	r3, #0
    isFaulted = true;
    104e:	9a05      	ldr	r2, [sp, #20]
    1050:	f882 3d90 	strb.w	r3, [r2, #3472]	; 0xd90
}
    1054:	b007      	add	sp, #28
    1056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (HighCellVoltsmooth == 0 && LowCellVoltsmooth == 0)
    105a:	f8d6 9014 	ldr.w	r9, [r6, #20]
    105e:	2100      	movs	r1, #0
    1060:	4648      	mov	r0, r9
    1062:	f00c fbcf 	bl	d804 <__aeabi_fcmpeq>
    HighCellVoltsmooth = HighCellVolt;
    1066:	69b5      	ldr	r5, [r6, #24]
    LowCellVoltsmooth = LowCellVolt;
    1068:	f8d6 a010 	ldr.w	sl, [r6, #16]
  if (HighCellVoltsmooth == 0 && LowCellVoltsmooth == 0)
    106c:	2800      	cmp	r0, #0
    106e:	f43f aef9 	beq.w	e64 <BMSModuleManager::getAllVoltTemp()+0x2c>
    HighCellVoltsmooth = HighCellVolt;
    1072:	462f      	mov	r7, r5
    1074:	46d1      	mov	r9, sl
    1076:	e6f5      	b.n	e64 <BMSModuleManager::getAllVoltTemp()+0x2c>
    avgtotal = avgtotal - avgcell[avgindex];
    1078:	f506 5800 	add.w	r8, r6, #8192	; 0x2000
    107c:	f8cd 8014 	str.w	r8, [sp, #20]
    1080:	f8d8 5dcc 	ldr.w	r5, [r8, #3532]	; 0xdcc
    1084:	f8d8 0dc8 	ldr.w	r0, [r8, #3528]	; 0xdc8
    1088:	eb06 0785 	add.w	r7, r6, r5, lsl #2
    108c:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
    avgindex = avgindex + 1;
    1090:	3501      	adds	r5, #1
    avgtotal = avgtotal - avgcell[avgindex];
    1092:	f8d7 1da8 	ldr.w	r1, [r7, #3496]	; 0xda8
    1096:	f00c f917 	bl	d2c8 <__aeabi_fsub>
    avgcell[avgindex] = avg;
    109a:	f8c7 4da8 	str.w	r4, [r7, #3496]	; 0xda8
    avgtotal = avgtotal - avgcell[avgindex];
    109e:	4601      	mov	r1, r0
    avgtotal = avgtotal + avg;
    10a0:	4620      	mov	r0, r4
    10a2:	f00c f913 	bl	d2cc <__addsf3>
      avgindex = 0;
    10a6:	2d08      	cmp	r5, #8
    10a8:	bfa8      	it	ge
    10aa:	2500      	movge	r5, #0
    avgtotal = avgtotal + avg;
    10ac:	f8c8 0dc8 	str.w	r0, [r8, #3528]	; 0xdc8
    avgsmooth = avgtotal / 8;
    10b0:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
    10b4:	f8c8 5dcc 	str.w	r5, [r8, #3532]	; 0xdcc
    10b8:	f00c fa10 	bl	d4dc <__aeabi_fmul>
    10bc:	60f0      	str	r0, [r6, #12]
    10be:	e71e      	b.n	efe <BMSModuleManager::getAllVoltTemp()+0xc6>
      HighCellVoltsmooth = HighCellVoltsmooth + MeasurementStep;
    10c0:	4639      	mov	r1, r7
    10c2:	4640      	mov	r0, r8
    10c4:	f00c f902 	bl	d2cc <__addsf3>
    10c8:	4605      	mov	r5, r0
    10ca:	e707      	b.n	edc <BMSModuleManager::getAllVoltTemp()+0xa4>
      LowCellVoltsmooth = LowCellVoltsmooth + MeasurementStep;
    10cc:	4649      	mov	r1, r9
    10ce:	4640      	mov	r0, r8
    10d0:	f00c f8fc 	bl	d2cc <__addsf3>
    10d4:	4682      	mov	sl, r0
    10d6:	e6e3      	b.n	ea0 <BMSModuleManager::getAllVoltTemp()+0x68>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    10d8:	480a      	ldr	r0, [pc, #40]	; (1104 <BMSModuleManager::getAllVoltTemp()+0x2cc>)
    10da:	f000 fcd5 	bl	1a88 <Logger::info(char*, ...)>
    isFaulted = false;
    10de:	2300      	movs	r3, #0
    10e0:	e7b5      	b.n	104e <BMSModuleManager::getAllVoltTemp()+0x216>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    10e2:	4809      	ldr	r0, [pc, #36]	; (1108 <BMSModuleManager::getAllVoltTemp()+0x2d0>)
    10e4:	f000 fce4 	bl	1ab0 <Logger::error(char*, ...)>
    10e8:	e7a2      	b.n	1030 <BMSModuleManager::getAllVoltTemp()+0x1f8>
    10ea:	bf00      	nop
    10ec:	41200000 	.word	0x41200000
    10f0:	000148f4 	.word	0x000148f4
    10f4:	0001424c 	.word	0x0001424c
    10f8:	00014288 	.word	0x00014288
    10fc:	0001429c 	.word	0x0001429c
    1100:	000142c8 	.word	0x000142c8
    1104:	0001431c 	.word	0x0001431c
    1108:	000142e4 	.word	0x000142e4

0000110c <BMSModuleManager::getPackVoltage()>:
}
    110c:	6800      	ldr	r0, [r0, #0]
    110e:	4770      	bx	lr

00001110 <BMSModuleManager::setPstrings(int)>:
  Pstring = Pstrings;
    1110:	6041      	str	r1, [r0, #4]
}
    1112:	4770      	bx	lr

00001114 <BMSModuleManager::setSensors(int, float, float, int)>:
{
    1114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1118:	461e      	mov	r6, r3
  tempsens = sensor;
    111a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
{
    111e:	f8dd 9020 	ldr.w	r9, [sp, #32]
  tempsens = sensor;
    1122:	f8c3 1d9c 	str.w	r1, [r3, #3484]	; 0xd9c
  ignorevolt = Ignore;
    1126:	f500 5536 	add.w	r5, r0, #11648	; 0x2d80
{
    112a:	4682      	mov	sl, r0
    112c:	4688      	mov	r8, r1
    112e:	4617      	mov	r7, r2
  ignorevolt = Ignore;
    1130:	f8c3 2d98 	str.w	r2, [r3, #3480]	; 0xd98
  tempconv = tempconvin;
    1134:	f8c3 6da0 	str.w	r6, [r3, #3488]	; 0xda0
  tempoff = tempoffin;
    1138:	f8c3 9da4 	str.w	r9, [r3, #3492]	; 0xda4
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    113c:	3504      	adds	r5, #4
    113e:	f100 04f4 	add.w	r4, r0, #244	; 0xf4
    1142:	e002      	b.n	114a <BMSModuleManager::setSensors(int, float, float, int)+0x36>
    1144:	34b8      	adds	r4, #184	; 0xb8
    1146:	42ac      	cmp	r4, r5
    1148:	d014      	beq.n	1174 <BMSModuleManager::setSensors(int, float, float, int)+0x60>
    if (modules[x].isExisting())
    114a:	4620      	mov	r0, r4
    114c:	f7ff fcf6 	bl	b3c <BMSModule::isExisting()>
    1150:	2800      	cmp	r0, #0
    1152:	d0f7      	beq.n	1144 <BMSModuleManager::setSensors(int, float, float, int)+0x30>
      modules[x].settempsensor(sensor);
    1154:	4620      	mov	r0, r4
    1156:	4641      	mov	r1, r8
    1158:	f7ff fcf8 	bl	b4c <BMSModule::settempsensor(int)>
      modules[x].setIgnoreCell(Ignore);
    115c:	4620      	mov	r0, r4
    115e:	4639      	mov	r1, r7
    1160:	f7ff fd00 	bl	b64 <BMSModule::setIgnoreCell(float)>
      modules[x].setTempconv(tempconvin, tempoffin);
    1164:	4620      	mov	r0, r4
    1166:	464a      	mov	r2, r9
    1168:	4631      	mov	r1, r6
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    116a:	34b8      	adds	r4, #184	; 0xb8
      modules[x].setTempconv(tempconvin, tempoffin);
    116c:	f7ff fd12 	bl	b94 <BMSModule::setTempconv(float, int)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1170:	42ac      	cmp	r4, r5
    1172:	d1ea      	bne.n	114a <BMSModuleManager::setSensors(int, float, float, int)+0x36>
  getLowCellVolt();
    1174:	4650      	mov	r0, sl
    1176:	f7ff fdf9 	bl	d6c <BMSModuleManager::getLowCellVolt()>
  LowCellVoltsmooth = LowCellVolt;
    117a:	f8da 3010 	ldr.w	r3, [sl, #16]
    117e:	f8ca 3014 	str.w	r3, [sl, #20]
}
    1182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1186:	bf00      	nop

00001188 <BMSModuleManager::getAvgTemperature()>:
{
    1188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  numFoundModules = 0;
    118c:	f500 5600 	add.w	r6, r0, #8192	; 0x2000
  lowTemp = 999.0f;
    1190:	4a38      	ldr	r2, [pc, #224]	; (1274 <BMSModuleManager::getAvgTemperature()+0xec>)
  highTemp = -999.0f;
    1192:	4b39      	ldr	r3, [pc, #228]	; (1278 <BMSModuleManager::getAvgTemperature()+0xf0>)
  lowTemp = 999.0f;
    1194:	6382      	str	r2, [r0, #56]	; 0x38
  numFoundModules = 0;
    1196:	2700      	movs	r7, #0
    1198:	f500 5536 	add.w	r5, r0, #11648	; 0x2d80
  highTemp = -999.0f;
    119c:	6343      	str	r3, [r0, #52]	; 0x34
      if (modules[x].getAvgTemp() > -70)
    119e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 127c <BMSModuleManager::getAvgTemperature()+0xf4>
  numFoundModules = 0;
    11a2:	f8c6 7d88 	str.w	r7, [r6, #3464]	; 0xd88
{
    11a6:	b082      	sub	sp, #8
    11a8:	4681      	mov	r9, r0
    11aa:	f100 04f4 	add.w	r4, r0, #244	; 0xf4
    11ae:	3504      	adds	r5, #4
  float avgtemp = 0.0f;
    11b0:	f04f 0800 	mov.w	r8, #0
    11b4:	e002      	b.n	11bc <BMSModuleManager::getAvgTemperature()+0x34>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    11b6:	34b8      	adds	r4, #184	; 0xb8
    11b8:	42a5      	cmp	r5, r4
    11ba:	d015      	beq.n	11e8 <BMSModuleManager::getAvgTemperature()+0x60>
    if (modules[x].isExisting())
    11bc:	4620      	mov	r0, r4
    11be:	f7ff fcbd 	bl	b3c <BMSModule::isExisting()>
    11c2:	2800      	cmp	r0, #0
    11c4:	d0f7      	beq.n	11b6 <BMSModuleManager::getAvgTemperature()+0x2e>
      numFoundModules++;
    11c6:	f8d6 3d88 	ldr.w	r3, [r6, #3464]	; 0xd88
    11ca:	3301      	adds	r3, #1
      if (modules[x].getAvgTemp() > -70)
    11cc:	4620      	mov	r0, r4
      numFoundModules++;
    11ce:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
      if (modules[x].getAvgTemp() > -70)
    11d2:	f7ff fc35 	bl	a40 <BMSModule::getAvgTemp()>
    11d6:	4651      	mov	r1, sl
    11d8:	f00c fb3c 	bl	d854 <__aeabi_fcmpgt>
    11dc:	bb20      	cbnz	r0, 1228 <BMSModuleManager::getAvgTemperature()+0xa0>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    11de:	34b8      	adds	r4, #184	; 0xb8
    11e0:	42a5      	cmp	r5, r4
        y++;
    11e2:	f107 0701 	add.w	r7, r7, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    11e6:	d1e9      	bne.n	11bc <BMSModuleManager::getAvgTemperature()+0x34>
  avgtemp = avgtemp / (float)(numFoundModules - y);
    11e8:	f8d6 5d88 	ldr.w	r5, [r6, #3464]	; 0xd88
    11ec:	1be8      	subs	r0, r5, r7
    11ee:	f00c f921 	bl	d434 <__aeabi_i2f>
    11f2:	4601      	mov	r1, r0
    11f4:	4640      	mov	r0, r8
    11f6:	f00c fa25 	bl	d644 <__aeabi_fdiv>
  if (numFoundModules != numFoundModulesOLD)
    11fa:	f8d6 3d8c 	ldr.w	r3, [r6, #3468]	; 0xd8c
    11fe:	429d      	cmp	r5, r3
  avgtemp = avgtemp / (float)(numFoundModules - y);
    1200:	4604      	mov	r4, r0
  if (numFoundModules != numFoundModulesOLD)
    1202:	d00d      	beq.n	1220 <BMSModuleManager::getAvgTemperature()+0x98>
    setSensors(tempsens, ignorevolt, tempconv, tempoff);
    1204:	f8d6 3da4 	ldr.w	r3, [r6, #3492]	; 0xda4
    numFoundModulesOLD = numFoundModules;
    1208:	f8c6 5d8c 	str.w	r5, [r6, #3468]	; 0xd8c
    setSensors(tempsens, ignorevolt, tempconv, tempoff);
    120c:	9300      	str	r3, [sp, #0]
    120e:	f8d6 3da0 	ldr.w	r3, [r6, #3488]	; 0xda0
    1212:	f8d6 2d98 	ldr.w	r2, [r6, #3480]	; 0xd98
    1216:	f8d6 1d9c 	ldr.w	r1, [r6, #3484]	; 0xd9c
    121a:	4648      	mov	r0, r9
    121c:	f7ff ff7a 	bl	1114 <BMSModuleManager::setSensors(int, float, float, int)>
}
    1220:	4620      	mov	r0, r4
    1222:	b002      	add	sp, #8
    1224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        avgtemp += modules[x].getAvgTemp();
    1228:	4620      	mov	r0, r4
    122a:	f7ff fc09 	bl	a40 <BMSModule::getAvgTemp()>
    122e:	4601      	mov	r1, r0
    1230:	4640      	mov	r0, r8
    1232:	f00c f84b 	bl	d2cc <__addsf3>
    1236:	4680      	mov	r8, r0
        if (modules[x].getHighTemp() > highTemp)
    1238:	4620      	mov	r0, r4
    123a:	f7ff fa17 	bl	66c <BMSModule::getHighTemp()>
    123e:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
    1242:	f00c fb07 	bl	d854 <__aeabi_fcmpgt>
    1246:	b970      	cbnz	r0, 1266 <BMSModuleManager::getAvgTemperature()+0xde>
        if (modules[x].getLowTemp() < lowTemp)
    1248:	4620      	mov	r0, r4
    124a:	f7ff f9cb 	bl	5e4 <BMSModule::getLowTemp()>
    124e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
    1252:	f00c fae1 	bl	d818 <__aeabi_fcmplt>
    1256:	2800      	cmp	r0, #0
    1258:	d0ad      	beq.n	11b6 <BMSModuleManager::getAvgTemperature()+0x2e>
          lowTemp = modules[x].getLowTemp();
    125a:	4620      	mov	r0, r4
    125c:	f7ff f9c2 	bl	5e4 <BMSModule::getLowTemp()>
    1260:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
    1264:	e7a7      	b.n	11b6 <BMSModuleManager::getAvgTemperature()+0x2e>
          highTemp = modules[x].getHighTemp();
    1266:	4620      	mov	r0, r4
    1268:	f7ff fa00 	bl	66c <BMSModule::getHighTemp()>
    126c:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
    1270:	e7ea      	b.n	1248 <BMSModuleManager::getAvgTemperature()+0xc0>
    1272:	bf00      	nop
    1274:	4479c000 	.word	0x4479c000
    1278:	c479c000 	.word	0xc479c000
    127c:	c28c0000 	.word	0xc28c0000

00001280 <BMSModuleManager::getHighTemperature()>:
}
    1280:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1282:	4770      	bx	lr

00001284 <BMSModuleManager::getNumModules()>:
  return numFoundModules;
    1284:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
}
    1288:	f8d0 0d88 	ldr.w	r0, [r0, #3464]	; 0xd88
    128c:	4770      	bx	lr
    128e:	bf00      	nop

00001290 <BMSModuleManager::getLowTemperature()>:
}
    1290:	6b80      	ldr	r0, [r0, #56]	; 0x38
    1292:	4770      	bx	lr

00001294 <BMSModuleManager::getAvgCellVolt()>:
{
    1294:	b570      	push	{r4, r5, r6, lr}
  avg = 0.0f;
    1296:	2300      	movs	r3, #0
    1298:	f500 5536 	add.w	r5, r0, #11648	; 0x2d80
{
    129c:	4606      	mov	r6, r0
  avg = 0.0f;
    129e:	6083      	str	r3, [r0, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    12a0:	f100 04f4 	add.w	r4, r0, #244	; 0xf4
    12a4:	3504      	adds	r5, #4
    12a6:	e002      	b.n	12ae <BMSModuleManager::getAvgCellVolt()+0x1a>
    12a8:	34b8      	adds	r4, #184	; 0xb8
    12aa:	42a5      	cmp	r5, r4
    12ac:	d00f      	beq.n	12ce <BMSModuleManager::getAvgCellVolt()+0x3a>
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    12ae:	4620      	mov	r0, r4
    12b0:	f7ff fc44 	bl	b3c <BMSModule::isExisting()>
    12b4:	2800      	cmp	r0, #0
    12b6:	d0f7      	beq.n	12a8 <BMSModuleManager::getAvgCellVolt()+0x14>
    12b8:	4620      	mov	r0, r4
    12ba:	f7ff f95d 	bl	578 <BMSModule::getAverageV()>
    12be:	4601      	mov	r1, r0
    12c0:	68b0      	ldr	r0, [r6, #8]
    12c2:	f00c f803 	bl	d2cc <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    12c6:	34b8      	adds	r4, #184	; 0xb8
    12c8:	42a5      	cmp	r5, r4
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    12ca:	60b0      	str	r0, [r6, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    12cc:	d1ef      	bne.n	12ae <BMSModuleManager::getAvgCellVolt()+0x1a>
  avg = avg / (float)numFoundModules;
    12ce:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    12d2:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	; 0xd88
    12d6:	f00c f8ad 	bl	d434 <__aeabi_i2f>
    12da:	4601      	mov	r1, r0
    12dc:	68b0      	ldr	r0, [r6, #8]
    12de:	f00c f9b1 	bl	d644 <__aeabi_fdiv>
    12e2:	60b0      	str	r0, [r6, #8]
}
    12e4:	68f0      	ldr	r0, [r6, #12]
    12e6:	bd70      	pop	{r4, r5, r6, pc}

000012e8 <BMSModuleManager::printPackDetails(int, bool)>:

void BMSModuleManager::printPackDetails(int digits, bool showbal)
{
    12e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12ec:	b095      	sub	sp, #84	; 0x54
    12ee:	4605      	mov	r5, r0
  uint8_t COV;
  uint8_t CUV;
  uint8_t bal;
  int cellNum = 0;

  Logger::console("");
    12f0:	48a5      	ldr	r0, [pc, #660]	; (1588 <BMSModuleManager::printPackDetails(int, bool)+0x2a0>)
{
    12f2:	9112      	str	r1, [sp, #72]	; 0x48
    12f4:	9213      	str	r2, [sp, #76]	; 0x4c
  Logger::console("");
  Logger::console("");
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    12f6:	f505 5900 	add.w	r9, r5, #8192	; 0x2000
  Logger::console("");
    12fa:	f000 fb59 	bl	19b0 <Logger::console(char*, ...)>
  Logger::console("");
    12fe:	48a2      	ldr	r0, [pc, #648]	; (1588 <BMSModuleManager::printPackDetails(int, bool)+0x2a0>)
    1300:	f000 fb56 	bl	19b0 <Logger::console(char*, ...)>
  Logger::console("");
    1304:	48a0      	ldr	r0, [pc, #640]	; (1588 <BMSModuleManager::printPackDetails(int, bool)+0x2a0>)
    1306:	f000 fb53 	bl	19b0 <Logger::console(char*, ...)>
  spack = 0;
    130a:	2700      	movs	r7, #0
    130c:	f105 06f4 	add.w	r6, r5, #244	; 0xf4
    1310:	f505 5436 	add.w	r4, r5, #11648	; 0x2d80
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1314:	f8d9 8d88 	ldr.w	r8, [r9, #3464]	; 0xd88
  spack = 0;
    1318:	f8c9 7d94 	str.w	r7, [r9, #3476]	; 0xd94
  for (int y = 1; y < 63; y++)
    131c:	3404      	adds	r4, #4
  spack = 0;
    131e:	46b2      	mov	sl, r6
      spack = spack + modules[y].getscells();
    1320:	4650      	mov	r0, sl
    1322:	f7ff f95b 	bl	5dc <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    1326:	f10a 0ab8 	add.w	sl, sl, #184	; 0xb8
      spack = spack + modules[y].getscells();
    132a:	4407      	add	r7, r0
  for (int y = 1; y < 63; y++)
    132c:	4554      	cmp	r4, sl
      spack = spack + modules[y].getscells();
    132e:	f8c9 7d94 	str.w	r7, [r9, #3476]	; 0xd94
  for (int y = 1; y < 63; y++)
    1332:	d1f5      	bne.n	1320 <BMSModuleManager::printPackDetails(int, bool)+0x38>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1334:	6828      	ldr	r0, [r5, #0]
    1336:	f00b fead 	bl	d094 <__aeabi_f2d>
    133a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVoltsmooth, HighCellVoltsmooth, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    133e:	4628      	mov	r0, r5
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1340:	f8d5 a004 	ldr.w	sl, [r5, #4]
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVoltsmooth, HighCellVoltsmooth, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1344:	f7ff ffa6 	bl	1294 <BMSModuleManager::getAvgCellVolt()>
    1348:	4681      	mov	r9, r0
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    134a:	6968      	ldr	r0, [r5, #20]
    134c:	f00b fea2 	bl	d094 <__aeabi_f2d>
    1350:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1354:	69e8      	ldr	r0, [r5, #28]
    1356:	f00b fe9d 	bl	d094 <__aeabi_f2d>
    135a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVoltsmooth, HighCellVoltsmooth, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    135e:	6929      	ldr	r1, [r5, #16]
    1360:	69a8      	ldr	r0, [r5, #24]
    1362:	f00b ffb1 	bl	d2c8 <__aeabi_fsub>
    1366:	4989      	ldr	r1, [pc, #548]	; (158c <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
    1368:	f00c f8b8 	bl	d4dc <__aeabi_fmul>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    136c:	f00b fe92 	bl	d094 <__aeabi_f2d>
    1370:	4602      	mov	r2, r0
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVoltsmooth, HighCellVoltsmooth, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1372:	4628      	mov	r0, r5
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1374:	4614      	mov	r4, r2
    1376:	460d      	mov	r5, r1
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVoltsmooth, HighCellVoltsmooth, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1378:	f7ff ff06 	bl	1188 <BMSModuleManager::getAvgTemperature()>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    137c:	f00b fe8a 	bl	d094 <__aeabi_f2d>
    1380:	e9cd 4508 	strd	r4, r5, [sp, #32]
    1384:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
    1388:	e9cd 3406 	strd	r3, r4, [sp, #24]
    138c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
    1390:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1394:	4648      	mov	r0, r9
    1396:	e9cd 3404 	strd	r3, r4, [sp, #16]
    139a:	f00b fe7b 	bl	d094 <__aeabi_f2d>
    139e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    13a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    13a6:	463a      	mov	r2, r7
    13a8:	e9cd 3400 	strd	r3, r4, [sp]
    13ac:	4878      	ldr	r0, [pc, #480]	; (1590 <BMSModuleManager::printPackDetails(int, bool)+0x2a8>)
	size_t print(int n)				{ return print((long)n); }
    13ae:	4f79      	ldr	r7, [pc, #484]	; (1594 <BMSModuleManager::printPackDetails(int, bool)+0x2ac>)
    13b0:	4653      	mov	r3, sl
    13b2:	4641      	mov	r1, r8
    13b4:	f000 fafc 	bl	19b0 <Logger::console(char*, ...)>
  Logger::console("");
    13b8:	4873      	ldr	r0, [pc, #460]	; (1588 <BMSModuleManager::printPackDetails(int, bool)+0x2a0>)
    13ba:	f000 faf9 	bl	19b0 <Logger::console(char*, ...)>
  int cellNum = 0;
    13be:	2300      	movs	r3, #0
    13c0:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    13c4:	930e      	str	r3, [sp, #56]	; 0x38
  for (int y = 1; y < 63; y++)
    13c6:	f04f 0b01 	mov.w	fp, #1
    13ca:	e007      	b.n	13dc <BMSModuleManager::printPackDetails(int, bool)+0xf4>
    13cc:	f10b 0b01 	add.w	fp, fp, #1
    13d0:	f1bb 0f3f 	cmp.w	fp, #63	; 0x3f
    13d4:	f106 06b8 	add.w	r6, r6, #184	; 0xb8
    13d8:	f000 80c6 	beq.w	1568 <BMSModuleManager::printPackDetails(int, bool)+0x280>
  {
    if (modules[y].isExisting())
    13dc:	4630      	mov	r0, r6
    13de:	f7ff fbad 	bl	b3c <BMSModule::isExisting()>
    13e2:	2800      	cmp	r0, #0
    13e4:	d0f2      	beq.n	13cc <BMSModuleManager::printPackDetails(int, bool)+0xe4>
    {
      faults = modules[y].getFaults();
    13e6:	4630      	mov	r0, r6
    13e8:	f7ff f86c 	bl	4c4 <BMSModule::getFaults()>
      alerts = modules[y].getAlerts();
    13ec:	4630      	mov	r0, r6
    13ee:	f7ff f86d 	bl	4cc <BMSModule::getAlerts()>
      COV = modules[y].getCOVCells();
    13f2:	4630      	mov	r0, r6
    13f4:	f7ff f86e 	bl	4d4 <BMSModule::getCOVCells()>
      CUV = modules[y].getCUVCells();
    13f8:	4630      	mov	r0, r6
    13fa:	f7ff f86f 	bl	4dc <BMSModule::getCUVCells()>
      bal = modules[y].getBalStat();
    13fe:	4630      	mov	r0, r6
    1400:	f7ff fb98 	bl	b34 <BMSModule::getBalStat()>
    1404:	2108      	movs	r1, #8
    1406:	4603      	mov	r3, r0
    1408:	4863      	ldr	r0, [pc, #396]	; (1598 <BMSModuleManager::printPackDetails(int, bool)+0x2b0>)
    140a:	930c      	str	r3, [sp, #48]	; 0x30
    140c:	f00b f980 	bl	c710 <usb_serial_write>
    1410:	4659      	mov	r1, fp
    1412:	4638      	mov	r0, r7
    1414:	f008 fca6 	bl	9d64 <Print::print(long)>

      SERIALCONSOLE.print("Module #");
      SERIALCONSOLE.print(y);
      if (y < 10) SERIALCONSOLE.print(" ");
    1418:	f1bb 0f09 	cmp.w	fp, #9
    141c:	f340 80af 	ble.w	157e <BMSModuleManager::printPackDetails(int, bool)+0x296>
    1420:	2102      	movs	r1, #2
    1422:	485e      	ldr	r0, [pc, #376]	; (159c <BMSModuleManager::printPackDetails(int, bool)+0x2b4>)
    1424:	f00b f974 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print("  ");
      SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
    1428:	4630      	mov	r0, r6
    142a:	f7ff fb4d 	bl	ac8 <BMSModule::getModuleVoltage()>
    142e:	f00b fe31 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1432:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    1436:	f8cd 8000 	str.w	r8, [sp]
    143a:	460b      	mov	r3, r1
    143c:	4602      	mov	r2, r0
    143e:	4638      	mov	r0, r7
    1440:	f008 fcba 	bl	9db8 <Print::printFloat(double, unsigned char)>
    1444:	4856      	ldr	r0, [pc, #344]	; (15a0 <BMSModuleManager::printPackDetails(int, bool)+0x2b8>)
    1446:	2101      	movs	r1, #1
    1448:	f00b f962 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print("V");
      for (int i = 0; i < 8; i++)
    144c:	4633      	mov	r3, r6
    144e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1450:	4646      	mov	r6, r8
    1452:	2500      	movs	r5, #0
    1454:	f04f 0a01 	mov.w	sl, #1
    1458:	4698      	mov	r8, r3
    145a:	e02e      	b.n	14ba <BMSModuleManager::printPackDetails(int, bool)+0x1d2>
    145c:	2106      	movs	r1, #6
    145e:	4851      	ldr	r0, [pc, #324]	; (15a4 <BMSModuleManager::printPackDetails(int, bool)+0x2bc>)
    1460:	f00b f956 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1464:	4621      	mov	r1, r4
    1466:	4638      	mov	r0, r7
    1468:	f008 fc7c 	bl	9d64 <Print::print(long)>
    146c:	2102      	movs	r1, #2
    146e:	484e      	ldr	r0, [pc, #312]	; (15a8 <BMSModuleManager::printPackDetails(int, bool)+0x2c0>)
    1470:	f00b f94e 	bl	c710 <usb_serial_write>
      {
        if (cellNum < 10) SERIALCONSOLE.print(" ");
        SERIALCONSOLE.print("  Cell");
        SERIALCONSOLE.print(cellNum++);
        SERIALCONSOLE.print(": ");
        SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    1474:	4629      	mov	r1, r5
    1476:	4640      	mov	r0, r8
    1478:	f7ff f834 	bl	4e4 <BMSModule::getCellVoltage(int)>
    147c:	f00b fe0a 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1480:	9600      	str	r6, [sp, #0]
    1482:	460b      	mov	r3, r1
    1484:	4602      	mov	r2, r0
    1486:	4638      	mov	r0, r7
    1488:	f008 fc96 	bl	9db8 <Print::printFloat(double, unsigned char)>
    148c:	2101      	movs	r1, #1
    148e:	4844      	ldr	r0, [pc, #272]	; (15a0 <BMSModuleManager::printPackDetails(int, bool)+0x2b8>)
        SERIALCONSOLE.print(cellNum++);
    1490:	440c      	add	r4, r1
    1492:	f00b f93d 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print("V");
        if (showbal == 1)
        {
          if ((bal & (0x1 << i)) > 0)
    1496:	fa0a f305 	lsl.w	r3, sl, r5
        if (showbal == 1)
    149a:	f1b9 0f00 	cmp.w	r9, #0
    149e:	d009      	beq.n	14b4 <BMSModuleManager::printPackDetails(int, bool)+0x1cc>
          if ((bal & (0x1 << i)) > 0)
    14a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14a2:	4842      	ldr	r0, [pc, #264]	; (15ac <BMSModuleManager::printPackDetails(int, bool)+0x2c4>)
    14a4:	4213      	tst	r3, r2
    14a6:	f04f 0102 	mov.w	r1, #2
    14aa:	bf04      	itt	eq
    14ac:	4840      	ldreq	r0, [pc, #256]	; (15b0 <BMSModuleManager::printPackDetails(int, bool)+0x2c8>)
    14ae:	2102      	moveq	r1, #2
    14b0:	f00b f92e 	bl	c710 <usb_serial_write>
      for (int i = 0; i < 8; i++)
    14b4:	3501      	adds	r5, #1
    14b6:	2d08      	cmp	r5, #8
    14b8:	d006      	beq.n	14c8 <BMSModuleManager::printPackDetails(int, bool)+0x1e0>
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    14ba:	2c09      	cmp	r4, #9
    14bc:	dcce      	bgt.n	145c <BMSModuleManager::printPackDetails(int, bool)+0x174>
    14be:	2101      	movs	r1, #1
    14c0:	483c      	ldr	r0, [pc, #240]	; (15b4 <BMSModuleManager::printPackDetails(int, bool)+0x2cc>)
    14c2:	f00b f925 	bl	c710 <usb_serial_write>
    14c6:	e7c9      	b.n	145c <BMSModuleManager::printPackDetails(int, bool)+0x174>
          {
            SERIALCONSOLE.print(" -");
          }
        }
      }
      SERIALCONSOLE.println();
    14c8:	4638      	mov	r0, r7
    14ca:	f008 fc53 	bl	9d74 <Print::println()>
    14ce:	2109      	movs	r1, #9
    14d0:	4839      	ldr	r0, [pc, #228]	; (15b8 <BMSModuleManager::printPackDetails(int, bool)+0x2d0>)
    14d2:	f00b f91d 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print(" Temp 1: ");
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    14d6:	2100      	movs	r1, #0
    14d8:	4640      	mov	r0, r8
    14da:	f7ff fb1d 	bl	b18 <BMSModule::getTemperature(int)>
    14de:	f00b fdd9 	bl	d094 <__aeabi_f2d>
    14e2:	2402      	movs	r4, #2
    14e4:	4602      	mov	r2, r0
    14e6:	460b      	mov	r3, r1
    14e8:	9400      	str	r4, [sp, #0]
    14ea:	4638      	mov	r0, r7
    14ec:	f008 fc64 	bl	9db8 <Print::printFloat(double, unsigned char)>
    14f0:	210a      	movs	r1, #10
    14f2:	4832      	ldr	r0, [pc, #200]	; (15bc <BMSModuleManager::printPackDetails(int, bool)+0x2d4>)
    14f4:	f00b f90c 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print("C Temp 2: ");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    14f8:	2101      	movs	r1, #1
    14fa:	4640      	mov	r0, r8
    14fc:	f7ff fb0c 	bl	b18 <BMSModule::getTemperature(int)>
    1500:	f00b fdc8 	bl	d094 <__aeabi_f2d>
    1504:	9400      	str	r4, [sp, #0]
    1506:	4602      	mov	r2, r0
    1508:	460b      	mov	r3, r1
    150a:	4638      	mov	r0, r7
    150c:	f008 fc54 	bl	9db8 <Print::printFloat(double, unsigned char)>
    1510:	210a      	movs	r1, #10
    1512:	482b      	ldr	r0, [pc, #172]	; (15c0 <BMSModuleManager::printPackDetails(int, bool)+0x2d8>)
    1514:	f00b f8fc 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print("C Temp 3: ");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    1518:	4621      	mov	r1, r4
    151a:	4640      	mov	r0, r8
    151c:	f7ff fafc 	bl	b18 <BMSModule::getTemperature(int)>
    1520:	f00b fdb8 	bl	d094 <__aeabi_f2d>
    1524:	460b      	mov	r3, r1
        SERIALCONSOLE.print(cellNum++);
    1526:	990e      	ldr	r1, [sp, #56]	; 0x38
    1528:	9400      	str	r4, [sp, #0]
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    152a:	4602      	mov	r2, r0
        SERIALCONSOLE.print(cellNum++);
    152c:	3108      	adds	r1, #8
    152e:	4638      	mov	r0, r7
      SERIALCONSOLE.println();
    1530:	4646      	mov	r6, r8
        SERIALCONSOLE.print(cellNum++);
    1532:	910e      	str	r1, [sp, #56]	; 0x38
    1534:	f008 fc40 	bl	9db8 <Print::printFloat(double, unsigned char)>

      if (showbal == 1)
    1538:	f1b9 0f00 	cmp.w	r9, #0
    153c:	d017      	beq.n	156e <BMSModuleManager::printPackDetails(int, bool)+0x286>
    153e:	210d      	movs	r1, #13
    1540:	4820      	ldr	r0, [pc, #128]	; (15c4 <BMSModuleManager::printPackDetails(int, bool)+0x2dc>)
    1542:	f00b f8e5 	bl	c710 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1546:	990c      	ldr	r1, [sp, #48]	; 0x30
    1548:	2300      	movs	r3, #0
    154a:	4622      	mov	r2, r4
    154c:	4638      	mov	r0, r7
    154e:	f008 fc29 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  for (int y = 1; y < 63; y++)
    1552:	f10b 0b01 	add.w	fp, fp, #1
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1556:	4638      	mov	r0, r7
    1558:	f008 fc0c 	bl	9d74 <Print::println()>
    155c:	f1bb 0f3f 	cmp.w	fp, #63	; 0x3f
    1560:	f106 06b8 	add.w	r6, r6, #184	; 0xb8
    1564:	f47f af3a 	bne.w	13dc <BMSModuleManager::printPackDetails(int, bool)+0xf4>
        SERIALCONSOLE.println("C");
      }

    }
  }
}
    1568:	b015      	add	sp, #84	; 0x54
    156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    156e:	2101      	movs	r1, #1
    1570:	4815      	ldr	r0, [pc, #84]	; (15c8 <BMSModuleManager::printPackDetails(int, bool)+0x2e0>)
    1572:	f00b f8cd 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1576:	4638      	mov	r0, r7
    1578:	f008 fbfc 	bl	9d74 <Print::println()>
    157c:	e726      	b.n	13cc <BMSModuleManager::printPackDetails(int, bool)+0xe4>
    157e:	2101      	movs	r1, #1
    1580:	480c      	ldr	r0, [pc, #48]	; (15b4 <BMSModuleManager::printPackDetails(int, bool)+0x2cc>)
    1582:	f00b f8c5 	bl	c710 <usb_serial_write>
    1586:	e74b      	b.n	1420 <BMSModuleManager::printPackDetails(int, bool)+0x138>
    1588:	000148f4 	.word	0x000148f4
    158c:	447a0000 	.word	0x447a0000
    1590:	000145cc 	.word	0x000145cc
    1594:	1fff8824 	.word	0x1fff8824
    1598:	0001466c 	.word	0x0001466c
    159c:	000155bc 	.word	0x000155bc
    15a0:	00014678 	.word	0x00014678
    15a4:	0001467c 	.word	0x0001467c
    15a8:	00014730 	.word	0x00014730
    15ac:	00014684 	.word	0x00014684
    15b0:	00014688 	.word	0x00014688
    15b4:	00014740 	.word	0x00014740
    15b8:	0001468c 	.word	0x0001468c
    15bc:	00014698 	.word	0x00014698
    15c0:	000146a4 	.word	0x000146a4
    15c4:	000146b0 	.word	0x000146b0
    15c8:	000146c0 	.word	0x000146c0

000015cc <BMSModuleManager::printAllCSV(unsigned long, float, int)>:

void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC)
{
    15cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15d0:	b087      	sub	sp, #28
    15d2:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    15d6:	f8df 9224 	ldr.w	r9, [pc, #548]	; 17fc <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x230>
    15da:	f8df a224 	ldr.w	sl, [pc, #548]	; 1800 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x234>
    15de:	9103      	str	r1, [sp, #12]
    15e0:	9204      	str	r2, [sp, #16]
    15e2:	4698      	mov	r8, r3
    15e4:	462e      	mov	r6, r5
  for (int y = 1; y < 63; y++)
    15e6:	2701      	movs	r7, #1
    15e8:	9505      	str	r5, [sp, #20]
    15ea:	4693      	mov	fp, r2
    15ec:	e004      	b.n	15f8 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    15ee:	3701      	adds	r7, #1
    15f0:	2f3f      	cmp	r7, #63	; 0x3f
    15f2:	f106 06b8 	add.w	r6, r6, #184	; 0xb8
    15f6:	d075      	beq.n	16e4 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x118>
  {
    if (modules[y].isExisting())
    15f8:	4630      	mov	r0, r6
    15fa:	f7ff fa9f 	bl	b3c <BMSModule::isExisting()>
    15fe:	2800      	cmp	r0, #0
    1600:	d0f5      	beq.n	15ee <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x22>
    1602:	2300      	movs	r3, #0
    1604:	220a      	movs	r2, #10
    1606:	9903      	ldr	r1, [sp, #12]
    1608:	4648      	mov	r0, r9
    160a:	f008 fbcb 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    160e:	2101      	movs	r1, #1
    1610:	4650      	mov	r0, sl
    1612:	f00b f87d 	bl	c710 <usb_serial_write>
    {
      SERIALCONSOLE.print(timestamp);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(current, 0);
    1616:	4658      	mov	r0, fp
    1618:	f00b fd3c 	bl	d094 <__aeabi_f2d>
    161c:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    161e:	2100      	movs	r1, #0
    1620:	4602      	mov	r2, r0
    1622:	9100      	str	r1, [sp, #0]
    1624:	4648      	mov	r0, r9
    1626:	f008 fbc7 	bl	9db8 <Print::printFloat(double, unsigned char)>
    162a:	2101      	movs	r1, #1
    162c:	4650      	mov	r0, sl
    162e:	f00b f86f 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1632:	4641      	mov	r1, r8
    1634:	4648      	mov	r0, r9
    1636:	f008 fb95 	bl	9d64 <Print::print(long)>
    163a:	2101      	movs	r1, #1
    163c:	4650      	mov	r0, sl
    163e:	f00b f867 	bl	c710 <usb_serial_write>
    1642:	4639      	mov	r1, r7
    1644:	4648      	mov	r0, r9
    1646:	f008 fb8d 	bl	9d64 <Print::print(long)>
    164a:	2101      	movs	r1, #1
    164c:	4650      	mov	r0, sl
    164e:	f00b f85f 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(SOC);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(y);
      SERIALCONSOLE.print(",");
      for (int i = 0; i < 8; i++)
    1652:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1654:	2502      	movs	r5, #2
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    1656:	4621      	mov	r1, r4
    1658:	4630      	mov	r0, r6
    165a:	f7fe ff43 	bl	4e4 <BMSModule::getCellVoltage(int)>
    165e:	f00b fd19 	bl	d094 <__aeabi_f2d>
    1662:	9500      	str	r5, [sp, #0]
    1664:	4602      	mov	r2, r0
    1666:	460b      	mov	r3, r1
    1668:	4648      	mov	r0, r9
    166a:	f008 fba5 	bl	9db8 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    166e:	3401      	adds	r4, #1
    1670:	2101      	movs	r1, #1
    1672:	4650      	mov	r0, sl
    1674:	f00b f84c 	bl	c710 <usb_serial_write>
    1678:	2c08      	cmp	r4, #8
    167a:	d1ec      	bne.n	1656 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x8a>
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    167c:	2100      	movs	r1, #0
    167e:	4630      	mov	r0, r6
    1680:	f7ff fa4a 	bl	b18 <BMSModule::getTemperature(int)>
    1684:	f00b fd06 	bl	d094 <__aeabi_f2d>
    1688:	9500      	str	r5, [sp, #0]
    168a:	4602      	mov	r2, r0
    168c:	460b      	mov	r3, r1
    168e:	4648      	mov	r0, r9
    1690:	f008 fb92 	bl	9db8 <Print::printFloat(double, unsigned char)>
    1694:	2101      	movs	r1, #1
    1696:	4650      	mov	r0, sl
    1698:	f00b f83a 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    169c:	2101      	movs	r1, #1
    169e:	4630      	mov	r0, r6
    16a0:	f7ff fa3a 	bl	b18 <BMSModule::getTemperature(int)>
    16a4:	f00b fcf6 	bl	d094 <__aeabi_f2d>
    16a8:	9500      	str	r5, [sp, #0]
    16aa:	4602      	mov	r2, r0
    16ac:	460b      	mov	r3, r1
    16ae:	4648      	mov	r0, r9
    16b0:	f008 fb82 	bl	9db8 <Print::printFloat(double, unsigned char)>
    16b4:	2101      	movs	r1, #1
    16b6:	4650      	mov	r0, sl
    16b8:	f00b f82a 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    16bc:	2102      	movs	r1, #2
    16be:	4630      	mov	r0, r6
    16c0:	f7ff fa2a 	bl	b18 <BMSModule::getTemperature(int)>
    16c4:	f00b fce6 	bl	d094 <__aeabi_f2d>
    16c8:	9500      	str	r5, [sp, #0]
    16ca:	4602      	mov	r2, r0
    16cc:	460b      	mov	r3, r1
    16ce:	4648      	mov	r0, r9
    16d0:	f008 fb72 	bl	9db8 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    16d4:	3701      	adds	r7, #1
      SERIALCONSOLE.println();
    16d6:	4648      	mov	r0, r9
    16d8:	f008 fb4c 	bl	9d74 <Print::println()>
  for (int y = 1; y < 63; y++)
    16dc:	2f3f      	cmp	r7, #63	; 0x3f
    16de:	f106 06b8 	add.w	r6, r6, #184	; 0xb8
    16e2:	d189      	bne.n	15f8 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    }
  }
  for (int y = 1; y < 63; y++)
    16e4:	9d05      	ldr	r5, [sp, #20]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    16e6:	4f47      	ldr	r7, [pc, #284]	; (1804 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x238>)
					{ serial2_write(buffer, size); return size; }
    16e8:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1800 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x234>
    16ec:	2601      	movs	r6, #1
    16ee:	f04f 0b00 	mov.w	fp, #0
    16f2:	e004      	b.n	16fe <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    16f4:	3601      	adds	r6, #1
    16f6:	2e3f      	cmp	r6, #63	; 0x3f
    16f8:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
    16fc:	d07a      	beq.n	17f4 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x228>
  {
    if (modules[y].isExisting())
    16fe:	4628      	mov	r0, r5
    1700:	f7ff fa1c 	bl	b3c <BMSModule::isExisting()>
    1704:	2800      	cmp	r0, #0
    1706:	d0f5      	beq.n	16f4 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    1708:	2300      	movs	r3, #0
    170a:	220a      	movs	r2, #10
    170c:	9903      	ldr	r1, [sp, #12]
    170e:	4638      	mov	r0, r7
    1710:	f008 fb48 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1714:	2101      	movs	r1, #1
    1716:	4648      	mov	r0, r9
    1718:	f009 fcce 	bl	b0b8 <serial2_write>
    {
      Serial2.print(timestamp);
      Serial2.print(",");
      Serial2.print(current, 0);
    171c:	9804      	ldr	r0, [sp, #16]
    171e:	f00b fcb9 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1722:	f8cd b000 	str.w	fp, [sp]
    1726:	4602      	mov	r2, r0
    1728:	460b      	mov	r3, r1
    172a:	4638      	mov	r0, r7
    172c:	f008 fb44 	bl	9db8 <Print::printFloat(double, unsigned char)>
    1730:	2101      	movs	r1, #1
    1732:	4648      	mov	r0, r9
    1734:	f009 fcc0 	bl	b0b8 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1738:	4641      	mov	r1, r8
    173a:	4638      	mov	r0, r7
    173c:	f008 fb12 	bl	9d64 <Print::print(long)>
    1740:	2101      	movs	r1, #1
    1742:	4648      	mov	r0, r9
    1744:	f009 fcb8 	bl	b0b8 <serial2_write>
    1748:	4631      	mov	r1, r6
    174a:	4638      	mov	r0, r7
    174c:	f008 fb0a 	bl	9d64 <Print::print(long)>
    1750:	2101      	movs	r1, #1
    1752:	4648      	mov	r0, r9
    1754:	f009 fcb0 	bl	b0b8 <serial2_write>
      Serial2.print(",");
      Serial2.print(SOC);
      Serial2.print(",");
      Serial2.print(y);
      Serial2.print(",");
      for (int i = 0; i < 8; i++)
    1758:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    175a:	f04f 0a02 	mov.w	sl, #2
      {
        Serial2.print(modules[y].getCellVoltage(i));
    175e:	4621      	mov	r1, r4
    1760:	4628      	mov	r0, r5
    1762:	f7fe febf 	bl	4e4 <BMSModule::getCellVoltage(int)>
    1766:	f00b fc95 	bl	d094 <__aeabi_f2d>
    176a:	f8cd a000 	str.w	sl, [sp]
    176e:	4602      	mov	r2, r0
    1770:	460b      	mov	r3, r1
    1772:	4638      	mov	r0, r7
    1774:	f008 fb20 	bl	9db8 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    1778:	3401      	adds	r4, #1
    177a:	2101      	movs	r1, #1
    177c:	4648      	mov	r0, r9
    177e:	f009 fc9b 	bl	b0b8 <serial2_write>
    1782:	2c08      	cmp	r4, #8
    1784:	d1eb      	bne.n	175e <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x192>
        Serial2.print(",");
      }
      Serial2.print(modules[y].getTemperature(0));
    1786:	2100      	movs	r1, #0
    1788:	4628      	mov	r0, r5
    178a:	f7ff f9c5 	bl	b18 <BMSModule::getTemperature(int)>
    178e:	f00b fc81 	bl	d094 <__aeabi_f2d>
    1792:	f8cd a000 	str.w	sl, [sp]
    1796:	4602      	mov	r2, r0
    1798:	460b      	mov	r3, r1
    179a:	4638      	mov	r0, r7
    179c:	f008 fb0c 	bl	9db8 <Print::printFloat(double, unsigned char)>
    17a0:	2101      	movs	r1, #1
    17a2:	4648      	mov	r0, r9
    17a4:	f009 fc88 	bl	b0b8 <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(1));
    17a8:	2101      	movs	r1, #1
    17aa:	4628      	mov	r0, r5
    17ac:	f7ff f9b4 	bl	b18 <BMSModule::getTemperature(int)>
    17b0:	f00b fc70 	bl	d094 <__aeabi_f2d>
    17b4:	f8cd a000 	str.w	sl, [sp]
    17b8:	4602      	mov	r2, r0
    17ba:	460b      	mov	r3, r1
    17bc:	4638      	mov	r0, r7
    17be:	f008 fafb 	bl	9db8 <Print::printFloat(double, unsigned char)>
    17c2:	2101      	movs	r1, #1
    17c4:	4648      	mov	r0, r9
    17c6:	f009 fc77 	bl	b0b8 <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(2));
    17ca:	2102      	movs	r1, #2
    17cc:	4628      	mov	r0, r5
    17ce:	f7ff f9a3 	bl	b18 <BMSModule::getTemperature(int)>
    17d2:	f00b fc5f 	bl	d094 <__aeabi_f2d>
    17d6:	f8cd a000 	str.w	sl, [sp]
    17da:	4602      	mov	r2, r0
    17dc:	460b      	mov	r3, r1
    17de:	4638      	mov	r0, r7
    17e0:	f008 faea 	bl	9db8 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    17e4:	3601      	adds	r6, #1
      Serial2.println();
    17e6:	4638      	mov	r0, r7
    17e8:	f008 fac4 	bl	9d74 <Print::println()>
  for (int y = 1; y < 63; y++)
    17ec:	2e3f      	cmp	r6, #63	; 0x3f
    17ee:	f105 05b8 	add.w	r5, r5, #184	; 0xb8
    17f2:	d184      	bne.n	16fe <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    }
  }
}
    17f4:	b007      	add	sp, #28
    17f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17fa:	bf00      	nop
    17fc:	1fff8824 	.word	0x1fff8824
    1800:	000146c4 	.word	0x000146c4
    1804:	1fff87b4 	.word	0x1fff87b4

00001808 <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    1808:	4b01      	ldr	r3, [pc, #4]	; (1810 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    180a:	7018      	strb	r0, [r3, #0]
}
    180c:	4770      	bx	lr
    180e:	bf00      	nop
    1810:	1fff8724 	.word	0x1fff8724

00001814 <Logger::logMessage(char*, std::__va_list)>:
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args) {
  for (; *format != 0; ++format) {
    1814:	7802      	ldrb	r2, [r0, #0]
    1816:	2a00      	cmp	r2, #0
    1818:	f000 80b8 	beq.w	198c <Logger::logMessage(char*, std::__va_list)+0x178>
void Logger::logMessage(char *format, va_list args) {
    181c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1820:	4f5c      	ldr	r7, [pc, #368]	; (1994 <Logger::logMessage(char*, std::__va_list)+0x180>)
    1822:	f8df 8174 	ldr.w	r8, [pc, #372]	; 1998 <Logger::logMessage(char*, std::__va_list)+0x184>
    1826:	4e5d      	ldr	r6, [pc, #372]	; (199c <Logger::logMessage(char*, std::__va_list)+0x188>)
    1828:	b083      	sub	sp, #12
    182a:	4603      	mov	r3, r0
    182c:	460d      	mov	r5, r1
    if (*format == '%') {
    182e:	2a25      	cmp	r2, #37	; 0x25
    1830:	d134      	bne.n	189c <Logger::logMessage(char*, std::__va_list)+0x88>
      ++format;
      if (*format == '\0')
    1832:	7858      	ldrb	r0, [r3, #1]
      ++format;
    1834:	1c5c      	adds	r4, r3, #1
      if (*format == '\0')
    1836:	2800      	cmp	r0, #0
    1838:	d038      	beq.n	18ac <Logger::logMessage(char*, std::__va_list)+0x98>
        break;
      if (*format == '%') {
    183a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    183e:	2b55      	cmp	r3, #85	; 0x55
    1840:	d82e      	bhi.n	18a0 <Logger::logMessage(char*, std::__va_list)+0x8c>
    1842:	e8df f003 	tbb	[pc, r3]
    1846:	2d9f      	.short	0x2d9f
    1848:	2d2d2d2d 	.word	0x2d2d2d2d
    184c:	2d2d2d2d 	.word	0x2d2d2d2d
    1850:	2d2d2d2d 	.word	0x2d2d2d2d
    1854:	2d2d2d2d 	.word	0x2d2d2d2d
    1858:	2d2d2d2d 	.word	0x2d2d2d2d
    185c:	2d2d2d2d 	.word	0x2d2d2d2d
    1860:	932d2d2d 	.word	0x932d2d2d
    1864:	2d2d2d2d 	.word	0x2d2d2d2d
    1868:	2d2d2d2d 	.word	0x2d2d2d2d
    186c:	2d2d2d2d 	.word	0x2d2d2d2d
    1870:	2d2d2d2d 	.word	0x2d2d2d2d
    1874:	2d2d882d 	.word	0x2d2d882d
    1878:	2d2d7c2d 	.word	0x2d2d7c2d
    187c:	2d2d2d2d 	.word	0x2d2d2d2d
    1880:	742d2d2d 	.word	0x742d2d2d
    1884:	5e2d3939 	.word	0x5e2d3939
    1888:	2d392d2d 	.word	0x2d392d2d
    188c:	2d2d392d 	.word	0x2d2d392d
    1890:	2d2d2d2d 	.word	0x2d2d2d2d
    1894:	2d2d3f49 	.word	0x2d2d3f49
    1898:	692d562d 	.word	0x692d562d
        }
        continue;
      }

    }
    SERIALCONSOLE.print(*format);
    189c:	7818      	ldrb	r0, [r3, #0]
    189e:	461c      	mov	r4, r3
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    18a0:	f00a ffba 	bl	c818 <usb_serial_putchar>
  for (; *format != 0; ++format) {
    18a4:	7862      	ldrb	r2, [r4, #1]
    18a6:	1c63      	adds	r3, r4, #1
    18a8:	2a00      	cmp	r2, #0
    18aa:	d1c0      	bne.n	182e <Logger::logMessage(char*, std::__va_list)+0x1a>
  }
  SERIALCONSOLE.println();
    18ac:	483c      	ldr	r0, [pc, #240]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
}
    18ae:	b003      	add	sp, #12
    18b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SERIALCONSOLE.println();
    18b4:	f008 ba5e 	b.w	9d74 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    18b8:	f855 1b04 	ldr.w	r1, [r5], #4
    18bc:	4838      	ldr	r0, [pc, #224]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    18be:	f008 fa51 	bl	9d64 <Print::print(long)>
        continue;
    18c2:	e7ef      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    18c4:	f855 1b04 	ldr.w	r1, [r5], #4
    18c8:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    18ca:	bf0e      	itee	eq
    18cc:	4835      	ldreq	r0, [pc, #212]	; (19a4 <Logger::logMessage(char*, std::__va_list)+0x190>)
    18ce:	2101      	movne	r1, #1
    18d0:	4630      	movne	r0, r6
    18d2:	f00a ff1d 	bl	c710 <usb_serial_write>
    18d6:	e7e5      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
        register char *s = (char *) va_arg( args, int );
    18d8:	f855 9b04 	ldr.w	r9, [r5], #4
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    18dc:	f1b9 0f00 	cmp.w	r9, #0
    18e0:	d0e0      	beq.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
							  return write((const uint8_t *)str, strlen(str)); }
    18e2:	4648      	mov	r0, r9
    18e4:	f00c ffac 	bl	e840 <strlen>
    18e8:	4601      	mov	r1, r0
    18ea:	4648      	mov	r0, r9
    18ec:	f00a ff10 	bl	c710 <usb_serial_write>
    18f0:	e7d8      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    18f2:	f855 1b04 	ldr.w	r1, [r5], #4
    18f6:	482a      	ldr	r0, [pc, #168]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    18f8:	2300      	movs	r3, #0
    18fa:	2210      	movs	r2, #16
    18fc:	f008 fa52 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    1900:	e7d0      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 3);
    1902:	3507      	adds	r5, #7
    1904:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1908:	2103      	movs	r1, #3
    190a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    190e:	4824      	ldr	r0, [pc, #144]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    1910:	9100      	str	r1, [sp, #0]
    1912:	f008 fa51 	bl	9db8 <Print::printFloat(double, unsigned char)>
        continue;
    1916:	e7c5      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 0);
    1918:	3507      	adds	r5, #7
    191a:	f025 0507 	bic.w	r5, r5, #7
    191e:	2100      	movs	r1, #0
    1920:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    1924:	481e      	ldr	r0, [pc, #120]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    1926:	9100      	str	r1, [sp, #0]
    1928:	f008 fa46 	bl	9db8 <Print::printFloat(double, unsigned char)>
        continue;
    192c:	e7ba      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    192e:	f855 1b04 	ldr.w	r1, [r5], #4
    1932:	481b      	ldr	r0, [pc, #108]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    1934:	2300      	movs	r3, #0
    1936:	2202      	movs	r2, #2
    1938:	f008 fa34 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    193c:	e7b2      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
    193e:	2102      	movs	r1, #2
    1940:	4819      	ldr	r0, [pc, #100]	; (19a8 <Logger::logMessage(char*, std::__va_list)+0x194>)
    1942:	f00a fee5 	bl	c710 <usb_serial_write>
    1946:	f855 1b04 	ldr.w	r1, [r5], #4
    194a:	4815      	ldr	r0, [pc, #84]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    194c:	2300      	movs	r3, #0
    194e:	2210      	movs	r2, #16
    1950:	f008 fa28 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    1954:	e7a6      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    1956:	f855 3b04 	ldr.w	r3, [r5], #4
    195a:	2b01      	cmp	r3, #1
    195c:	bf07      	ittee	eq
    195e:	2104      	moveq	r1, #4
    1960:	4640      	moveq	r0, r8
    1962:	2105      	movne	r1, #5
    1964:	4638      	movne	r0, r7
    1966:	f00a fed3 	bl	c710 <usb_serial_write>
    196a:	e79b      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
    196c:	2102      	movs	r1, #2
    196e:	480f      	ldr	r0, [pc, #60]	; (19ac <Logger::logMessage(char*, std::__va_list)+0x198>)
    1970:	f00a fece 	bl	c710 <usb_serial_write>
    1974:	f855 1b04 	ldr.w	r1, [r5], #4
    1978:	4809      	ldr	r0, [pc, #36]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    197a:	2300      	movs	r3, #0
    197c:	2202      	movs	r2, #2
    197e:	f008 fa11 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    1982:	e78f      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1984:	2025      	movs	r0, #37	; 0x25
    1986:	f00a ff47 	bl	c818 <usb_serial_putchar>
        continue;
    198a:	e78b      	b.n	18a4 <Logger::logMessage(char*, std::__va_list)+0x90>
  SERIALCONSOLE.println();
    198c:	4804      	ldr	r0, [pc, #16]	; (19a0 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    198e:	f008 b9f1 	b.w	9d74 <Print::println()>
    1992:	bf00      	nop
    1994:	000146e0 	.word	0x000146e0
    1998:	000146d8 	.word	0x000146d8
    199c:	000146d4 	.word	0x000146d4
    19a0:	1fff8824 	.word	0x1fff8824
    19a4:	000146d0 	.word	0x000146d0
    19a8:	000146c8 	.word	0x000146c8
    19ac:	000146cc 	.word	0x000146cc

000019b0 <Logger::console(char*, ...)>:
void Logger::console(char *message, ...) {
    19b0:	b40f      	push	{r0, r1, r2, r3}
    19b2:	b500      	push	{lr}
    19b4:	b083      	sub	sp, #12
    19b6:	a904      	add	r1, sp, #16
    19b8:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    19bc:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args);
    19be:	f7ff ff29 	bl	1814 <Logger::logMessage(char*, std::__va_list)>
}
    19c2:	b003      	add	sp, #12
    19c4:	f85d eb04 	ldr.w	lr, [sp], #4
    19c8:	b004      	add	sp, #16
    19ca:	4770      	bx	lr

000019cc <Logger::log(Logger::LogLevel, char*, std::__va_list)>:
void Logger::log(LogLevel level, char *format, va_list args) {
    19cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19ce:	4b1c      	ldr	r3, [pc, #112]	; (1a40 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x74>)
  lastLogTime = millis();
    19d0:	4f1c      	ldr	r7, [pc, #112]	; (1a44 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x78>)
    19d2:	681b      	ldr	r3, [r3, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    19d4:	b083      	sub	sp, #12
    19d6:	4604      	mov	r4, r0
    19d8:	9301      	str	r3, [sp, #4]
	return ret;
    19da:	9b01      	ldr	r3, [sp, #4]
  lastLogTime = millis();
    19dc:	603b      	str	r3, [r7, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    19de:	460d      	mov	r5, r1
    19e0:	4616      	mov	r6, r2
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    19e2:	4619      	mov	r1, r3
    19e4:	220a      	movs	r2, #10
    19e6:	2300      	movs	r3, #0
    19e8:	4817      	ldr	r0, [pc, #92]	; (1a48 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x7c>)
    19ea:	f008 f9db 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    19ee:	2103      	movs	r1, #3
    19f0:	4816      	ldr	r0, [pc, #88]	; (1a4c <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x80>)
    19f2:	f00a fe8d 	bl	c710 <usb_serial_write>
  switch (level) {
    19f6:	2c03      	cmp	r4, #3
    19f8:	d807      	bhi.n	1a0a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    19fa:	e8df f004 	tbb	[pc, r4]
    19fe:	161b      	.short	0x161b
    1a00:	1102      	.short	0x1102
    1a02:	4813      	ldr	r0, [pc, #76]	; (1a50 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x84>)
    1a04:	2107      	movs	r1, #7
    1a06:	f00a fe83 	bl	c710 <usb_serial_write>
    1a0a:	2102      	movs	r1, #2
    1a0c:	4811      	ldr	r0, [pc, #68]	; (1a54 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x88>)
    1a0e:	f00a fe7f 	bl	c710 <usb_serial_write>
  logMessage(format, args);
    1a12:	4631      	mov	r1, r6
    1a14:	4628      	mov	r0, r5
}
    1a16:	b003      	add	sp, #12
    1a18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  logMessage(format, args);
    1a1c:	f7ff befa 	b.w	1814 <Logger::logMessage(char*, std::__va_list)>
    1a20:	2105      	movs	r1, #5
    1a22:	480d      	ldr	r0, [pc, #52]	; (1a58 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x8c>)
    1a24:	f00a fe74 	bl	c710 <usb_serial_write>
    1a28:	e7ef      	b.n	1a0a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    1a2a:	2104      	movs	r1, #4
    1a2c:	480b      	ldr	r0, [pc, #44]	; (1a5c <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x90>)
    1a2e:	f00a fe6f 	bl	c710 <usb_serial_write>
    1a32:	e7ea      	b.n	1a0a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    1a34:	2105      	movs	r1, #5
    1a36:	480a      	ldr	r0, [pc, #40]	; (1a60 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x94>)
    1a38:	f00a fe6a 	bl	c710 <usb_serial_write>
    1a3c:	e7e5      	b.n	1a0a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    1a3e:	bf00      	nop
    1a40:	1fffc3b4 	.word	0x1fffc3b4
    1a44:	1fff8fa8 	.word	0x1fff8fa8
    1a48:	1fff8824 	.word	0x1fff8824
    1a4c:	000146e8 	.word	0x000146e8
    1a50:	000146fc 	.word	0x000146fc
    1a54:	00014730 	.word	0x00014730
    1a58:	00014704 	.word	0x00014704
    1a5c:	000146f4 	.word	0x000146f4
    1a60:	000146ec 	.word	0x000146ec

00001a64 <Logger::debug(char*, ...)>:
void Logger::debug(char *message, ...) {
    1a64:	b40f      	push	{r0, r1, r2, r3}
    1a66:	b500      	push	{lr}
  if (logLevel > Debug)
    1a68:	4b06      	ldr	r3, [pc, #24]	; (1a84 <Logger::debug(char*, ...)+0x20>)
    1a6a:	7818      	ldrb	r0, [r3, #0]
void Logger::debug(char *message, ...) {
    1a6c:	b083      	sub	sp, #12
  if (logLevel > Debug)
    1a6e:	b920      	cbnz	r0, 1a7a <Logger::debug(char*, ...)+0x16>
  va_start(args, message);
    1a70:	aa05      	add	r2, sp, #20
  Logger::log(Debug, message, args);
    1a72:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    1a74:	9201      	str	r2, [sp, #4]
  Logger::log(Debug, message, args);
    1a76:	f7ff ffa9 	bl	19cc <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    1a7a:	b003      	add	sp, #12
    1a7c:	f85d eb04 	ldr.w	lr, [sp], #4
    1a80:	b004      	add	sp, #16
    1a82:	4770      	bx	lr
    1a84:	1fff8724 	.word	0x1fff8724

00001a88 <Logger::info(char*, ...)>:
void Logger::info(char *message, ...) {
    1a88:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Info)
    1a8a:	4b08      	ldr	r3, [pc, #32]	; (1aac <Logger::info(char*, ...)+0x24>)
void Logger::info(char *message, ...) {
    1a8c:	b500      	push	{lr}
  if (logLevel > Info)
    1a8e:	781b      	ldrb	r3, [r3, #0]
    1a90:	2b01      	cmp	r3, #1
void Logger::info(char *message, ...) {
    1a92:	b083      	sub	sp, #12
  if (logLevel > Info)
    1a94:	d805      	bhi.n	1aa2 <Logger::info(char*, ...)+0x1a>
  va_start(args, message);
    1a96:	aa05      	add	r2, sp, #20
  Logger::log(Info, message, args);
    1a98:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    1a9a:	9201      	str	r2, [sp, #4]
  Logger::log(Info, message, args);
    1a9c:	2001      	movs	r0, #1
    1a9e:	f7ff ff95 	bl	19cc <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    1aa2:	b003      	add	sp, #12
    1aa4:	f85d eb04 	ldr.w	lr, [sp], #4
    1aa8:	b004      	add	sp, #16
    1aaa:	4770      	bx	lr
    1aac:	1fff8724 	.word	0x1fff8724

00001ab0 <Logger::error(char*, ...)>:
void Logger::error(char *message, ...) {
    1ab0:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Error)
    1ab2:	4b08      	ldr	r3, [pc, #32]	; (1ad4 <Logger::error(char*, ...)+0x24>)
void Logger::error(char *message, ...) {
    1ab4:	b500      	push	{lr}
  if (logLevel > Error)
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	2b03      	cmp	r3, #3
void Logger::error(char *message, ...) {
    1aba:	b083      	sub	sp, #12
  if (logLevel > Error)
    1abc:	d805      	bhi.n	1aca <Logger::error(char*, ...)+0x1a>
  va_start(args, message);
    1abe:	aa05      	add	r2, sp, #20
  Logger::log(Error, message, args);
    1ac0:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    1ac2:	9201      	str	r2, [sp, #4]
  Logger::log(Error, message, args);
    1ac4:	2003      	movs	r0, #3
    1ac6:	f7ff ff81 	bl	19cc <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    1aca:	b003      	add	sp, #12
    1acc:	f85d eb04 	ldr.w	lr, [sp], #4
    1ad0:	b004      	add	sp, #16
    1ad2:	4770      	bx	lr
    1ad4:	1fff8724 	.word	0x1fff8724

00001ad8 <IntervalTimer::~IntervalTimer()>:
public:
	IntervalTimer() {
		channel = NULL;
		nvic_priority = 128;
	}
	~IntervalTimer() {
    1ad8:	b510      	push	{r4, lr}
    1ada:	4604      	mov	r4, r0
		end();
    1adc:	f008 f8aa 	bl	9c34 <IntervalTimer::end()>
	}
    1ae0:	4620      	mov	r0, r4
    1ae2:	bd10      	pop	{r4, pc}

00001ae4 <Can0callback()>:
    Serial.println();
  }
}

void Can0callback()  //run periodically to check if no can bus message is present in soft buffer
{
    1ae4:	b510      	push	{r4, lr}
    digitalWriteFast(LED_BUILTIN, !digitalReadFast(LED_BUILTIN));
    Serial.println();
    Serial.print("In Callback | ");
    Serial.print(sendCnt);
  */
  if (sendCnt > 0) {
    1ae6:	4c0a      	ldr	r4, [pc, #40]	; (1b10 <Can0callback()+0x2c>)
    1ae8:	6823      	ldr	r3, [r4, #0]
    1aea:	2b00      	cmp	r3, #0
    1aec:	dc00      	bgt.n	1af0 <Can0callback()+0xc>
        msgbuf[y] = msgbuf[y + 1];
      }
      sendCnt--;
    }
  }
}
    1aee:	bd10      	pop	{r4, pc}
    if (Can0.write(msgbuf[0]) != 0) {
    1af0:	4908      	ldr	r1, [pc, #32]	; (1b14 <Can0callback()+0x30>)
    1af2:	4809      	ldr	r0, [pc, #36]	; (1b18 <Can0callback()+0x34>)
    1af4:	f006 ffee 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    1af8:	2800      	cmp	r0, #0
    1afa:	d0f8      	beq.n	1aee <Can0callback()+0xa>
        msgbuf[y] = msgbuf[y + 1];
    1afc:	4907      	ldr	r1, [pc, #28]	; (1b1c <Can0callback()+0x38>)
    1afe:	2290      	movs	r2, #144	; 0x90
    1b00:	f1a1 0010 	sub.w	r0, r1, #16
    1b04:	f00c fcf6 	bl	e4f4 <memmove>
      sendCnt--;
    1b08:	6823      	ldr	r3, [r4, #0]
    1b0a:	3b01      	subs	r3, #1
    1b0c:	6023      	str	r3, [r4, #0]
}
    1b0e:	bd10      	pop	{r4, pc}
    1b10:	1fffc0b0 	.word	0x1fffc0b0
    1b14:	1fffbfc0 	.word	0x1fffbfc0
    1b18:	1fffc1c0 	.word	0x1fffc1c0
    1b1c:	1fffbfd0 	.word	0x1fffbfd0

00001b20 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    1b20:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    1b24:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    1b26:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    1b2a:	d01c      	beq.n	1b66 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    1b2c:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    1b2e:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    1b32:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    1b36:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    1b3a:	db09      	blt.n	1b50 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    1b3c:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    1b40:	fb00 f102 	mul.w	r1, r0, r2
    1b44:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    1b46:	fb90 f0f2 	sdiv	r0, r0, r2
    1b4a:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    1b4c:	db10      	blt.n	1b70 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    1b4e:	4770      	bx	lr
		num -= in_range / 2;
    1b50:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    1b54:	fb00 f102 	mul.w	r1, r0, r2
    1b58:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    1b5a:	fb90 f0f2 	sdiv	r0, r0, r2
    1b5e:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    1b60:	dbf5      	blt.n	1b4e <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    1b62:	3001      	adds	r0, #1
}
    1b64:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    1b66:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    1b6a:	eb03 006c 	add.w	r0, r3, ip, asr #1
    1b6e:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    1b70:	3801      	subs	r0, #1
    1b72:	4770      	bx	lr

00001b74 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1b74:	b538      	push	{r3, r4, r5, lr}
    1b76:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1b78:	b149      	cbz	r1, 1b8e <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    1b7a:	4608      	mov	r0, r1
    1b7c:	460d      	mov	r5, r1
    1b7e:	f00c fe5f 	bl	e840 <strlen>
    1b82:	6823      	ldr	r3, [r4, #0]
    1b84:	4602      	mov	r2, r0
    1b86:	685b      	ldr	r3, [r3, #4]
    1b88:	4629      	mov	r1, r5
    1b8a:	4620      	mov	r0, r4
    1b8c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1b8e:	4620      	mov	r0, r4
    1b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1b94:	f008 b8ee 	b.w	9d74 <Print::println()>

00001b98 <loadSettings()>:
void loadSettings() {
    1b98:	b510      	push	{r4, lr}
  Logger::console("Resetting to factory defaults");
    1b9a:	4844      	ldr	r0, [pc, #272]	; (1cac <loadSettings()+0x114>)
  settings.OverVSetpoint = 4.2f;
    1b9c:	4c44      	ldr	r4, [pc, #272]	; (1cb0 <loadSettings()+0x118>)
  Logger::console("Resetting to factory defaults");
    1b9e:	f7ff ff07 	bl	19b0 <Logger::console(char*, ...)>
  settings.version = EEPROM_VERSION;
    1ba2:	4b44      	ldr	r3, [pc, #272]	; (1cb4 <loadSettings()+0x11c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    1ba4:	4844      	ldr	r0, [pc, #272]	; (1cb8 <loadSettings()+0x120>)
  settings.OverVSetpoint = 4.2f;
    1ba6:	60dc      	str	r4, [r3, #12]
  settings.UnderVSetpoint = 3.0f;
    1ba8:	4c44      	ldr	r4, [pc, #272]	; (1cbc <loadSettings()+0x124>)
    1baa:	611c      	str	r4, [r3, #16]
  settings.ChargeVsetpoint = 4.1f;
    1bac:	4c44      	ldr	r4, [pc, #272]	; (1cc0 <loadSettings()+0x128>)
    1bae:	615c      	str	r4, [r3, #20]
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    1bb0:	4c44      	ldr	r4, [pc, #272]	; (1cc4 <loadSettings()+0x12c>)
    1bb2:	625c      	str	r4, [r3, #36]	; 0x24
  settings.DischVsetpoint = 3.2f;
    1bb4:	4c44      	ldr	r4, [pc, #272]	; (1cc8 <loadSettings()+0x130>)
    1bb6:	619c      	str	r4, [r3, #24]
  settings.OverTSetpoint = 65.0f;
    1bb8:	4c44      	ldr	r4, [pc, #272]	; (1ccc <loadSettings()+0x134>)
    1bba:	629c      	str	r4, [r3, #40]	; 0x28
  settings.UnderTSetpoint = -10.0f;
    1bbc:	4c44      	ldr	r4, [pc, #272]	; (1cd0 <loadSettings()+0x138>)
    1bbe:	62dc      	str	r4, [r3, #44]	; 0x2c
  settings.ChargeTSetpoint = 0.0f;
    1bc0:	2400      	movs	r4, #0
    1bc2:	631c      	str	r4, [r3, #48]	; 0x30
  settings.DisTSetpoint = 40.0f;
    1bc4:	4c43      	ldr	r4, [pc, #268]	; (1cd4 <loadSettings()+0x13c>)
    1bc6:	635c      	str	r4, [r3, #52]	; 0x34
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    1bc8:	4c43      	ldr	r4, [pc, #268]	; (1cd8 <loadSettings()+0x140>)
    1bca:	639c      	str	r4, [r3, #56]	; 0x38
  settings.canSpeed = 500000;
    1bcc:	4c43      	ldr	r4, [pc, #268]	; (1cdc <loadSettings()+0x144>)
    1bce:	605c      	str	r4, [r3, #4]
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    1bd0:	f240 2401 	movw	r4, #513	; 0x201
    1bd4:	811c      	strh	r4, [r3, #8]
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    1bd6:	4c42      	ldr	r4, [pc, #264]	; (1ce0 <loadSettings()+0x148>)
    1bd8:	621c      	str	r4, [r3, #32]
  settings.IgnoreVolt = 0.5;  //
    1bda:	f04f 547c 	mov.w	r4, #1056964608	; 0x3f000000
    1bde:	649c      	str	r4, [r3, #72]	; 0x48
  settings.balanceVoltage = 3.9f;
    1be0:	4c40      	ldr	r4, [pc, #256]	; (1ce4 <loadSettings()+0x14c>)
    1be2:	64dc      	str	r4, [r3, #76]	; 0x4c
  settings.balanceHyst = 0.04f;
    1be4:	4c40      	ldr	r4, [pc, #256]	; (1ce8 <loadSettings()+0x150>)
    1be6:	651c      	str	r4, [r3, #80]	; 0x50
  settings.Scells = 12;             //Cells in series
    1be8:	240c      	movs	r4, #12
    1bea:	655c      	str	r4, [r3, #84]	; 0x54
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    1bec:	4c3f      	ldr	r4, [pc, #252]	; (1cec <loadSettings()+0x154>)
    1bee:	661c      	str	r4, [r3, #96]	; 0x60
  settings.discurrentmax = 300;     // max discharge current in 0.1A
    1bf0:	f44f 7496 	mov.w	r4, #300	; 0x12c
    1bf4:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    1bf8:	f640 441c 	movw	r4, #3100	; 0xc1c
    1bfc:	669c      	str	r4, [r3, #104]	; 0x68
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    1bfe:	240a      	movs	r4, #10
    1c00:	66dc      	str	r4, [r3, #108]	; 0x6c
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    1c02:	f241 0404 	movw	r4, #4100	; 0x1004
    1c06:	671c      	str	r4, [r3, #112]	; 0x70
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    1c08:	245a      	movs	r4, #90	; 0x5a
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    1c0a:	2201      	movs	r2, #1
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    1c0c:	2100      	movs	r1, #0
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    1c0e:	61d8      	str	r0, [r3, #28]
  settings.CellGap = 0.2f;   //max delta between high and low cell
    1c10:	63d8      	str	r0, [r3, #60]	; 0x3c
  settings.DischHys = 0.2f;  // Discharge voltage offset
    1c12:	6418      	str	r0, [r3, #64]	; 0x40
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    1c14:	675c      	str	r4, [r3, #116]	; 0x74
  settings.CAP = 100;               //battery size in Ah
    1c16:	2064      	movs	r0, #100	; 0x64
  settings.cursens = 2;
    1c18:	2402      	movs	r4, #2
  settings.version = EEPROM_VERSION;
    1c1a:	f240 2c13 	movw	ip, #531	; 0x213
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    1c1e:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    1c22:	659a      	str	r2, [r3, #88]	; 0x58
  settings.CAP = 100;               //battery size in Ah
    1c24:	65d8      	str	r0, [r3, #92]	; 0x5c
  settings.invertcur = 0;           //Invert current sensor direction
    1c26:	6799      	str	r1, [r3, #120]	; 0x78
  settings.cursens = 2;
    1c28:	67dc      	str	r4, [r3, #124]	; 0x7c
  settings.version = EEPROM_VERSION;
    1c2a:	f8a3 c000 	strh.w	ip, [r3]
  settings.curcan = 1;
    1c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  settings.chargerspd = 100;       //ms per message
    1c32:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
  settings.TempConv = 0.0038;      // Temperature scale
    1c36:	482e      	ldr	r0, [pc, #184]	; (1cf0 <loadSettings()+0x158>)
  settings.chargertype = 2;        // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    1c38:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  settings.ncur = 1;               //number of multiples to use for current measurement
    1c3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  settings.triptime = 5000;        //ms of allowed undervoltage before throwing open stopping discharge.
    1c40:	4c2c      	ldr	r4, [pc, #176]	; (1cf4 <loadSettings()+0x15c>)
  settings.ChargerDirect = 1;      //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    1c42:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
  settings.TempConv = 0.0038;      // Temperature scale
    1c46:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  settings.tripcont = 1;           //in ESSmode 1 - Main contactor function, 0 - Trip function
    1c4a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  settings.TempOff = -52;          //Temperature offset
    1c4e:	f06f 0033 	mvn.w	r0, #51	; 0x33
  settings.chargecurrentcold = 1;  // Max allowed charging current below under temperature
    1c52:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
  settings.conthold = 50;          //holding duty cycle for contactor 0-255
    1c56:	2232      	movs	r2, #50	; 0x32
  settings.voltsoc = 0;            //SOC purely voltage based
    1c58:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  settings.ESSmode = 0;            //activate ESS mode
    1c5c:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  settings.triptime = 5000;        //ms of allowed undervoltage before throwing open stopping discharge.
    1c60:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
  settings.TempOff = -52;          //Temperature offset
    1c64:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    1c68:	4c23      	ldr	r4, [pc, #140]	; (1cf8 <loadSettings()+0x160>)
  settings.SerialCan = 0;          //Serial canbus or display: 0-display 1- canbus expansion
    1c6a:	f883 10d0 	strb.w	r1, [r3, #208]	; 0xd0
  settings.Precurrent = 1000;      //ma before closing main contator
    1c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  settings.gaugehigh = 255;        //full fuel gauge pwm
    1c72:	21ff      	movs	r1, #255	; 0xff
  settings.conthold = 50;          //holding duty cycle for contactor 0-255
    1c74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  settings.gaugelow = 50;          //empty fuel gauge pwm
    1c78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  settings.convhigh = 580;         // mV/A current sensor high range channel
    1c7c:	4a1f      	ldr	r2, [pc, #124]	; (1cfc <loadSettings()+0x164>)
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    1c7e:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
  settings.Precurrent = 1000;      //ma before closing main contator
    1c82:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  settings.offset1 = 1750;         //mV mid point of channel 1
    1c86:	4c1e      	ldr	r4, [pc, #120]	; (1d00 <loadSettings()+0x168>)
  settings.convlow = 6430;         // mV/A current sensor low range channel
    1c88:	481e      	ldr	r0, [pc, #120]	; (1d04 <loadSettings()+0x16c>)
  settings.gaugehigh = 255;        //full fuel gauge pwm
    1c8a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  settings.convhigh = 580;         // mV/A current sensor high range channel
    1c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  settings.changecur = 20000;      //mA change overpoint
    1c92:	f644 6120 	movw	r1, #20000	; 0x4e20
  settings.Pretime = 5000;         //ms of precharge time
    1c96:	f241 3288 	movw	r2, #5000	; 0x1388
  settings.offset1 = 1750;         //mV mid point of channel 1
    1c9a:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  settings.convlow = 6430;         // mV/A current sensor low range channel
    1c9e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
  settings.changecur = 20000;      //mA change overpoint
    1ca2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  settings.Pretime = 5000;         //ms of precharge time
    1ca6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    1caa:	bd10      	pop	{r4, pc}
    1cac:	0001470c 	.word	0x0001470c
    1cb0:	40866666 	.word	0x40866666
    1cb4:	1fffc0b4 	.word	0x1fffc0b4
    1cb8:	3e4ccccd 	.word	0x3e4ccccd
    1cbc:	40400000 	.word	0x40400000
    1cc0:	40833333 	.word	0x40833333
    1cc4:	3dcccccd 	.word	0x3dcccccd
    1cc8:	404ccccd 	.word	0x404ccccd
    1ccc:	42820000 	.word	0x42820000
    1cd0:	c1200000 	.word	0xc1200000
    1cd4:	42200000 	.word	0x42200000
    1cd8:	40a00000 	.word	0x40a00000
    1cdc:	0007a120 	.word	0x0007a120
    1ce0:	40733333 	.word	0x40733333
    1ce4:	4079999a 	.word	0x4079999a
    1ce8:	3d23d70a 	.word	0x3d23d70a
    1cec:	0032012c 	.word	0x0032012c
    1cf0:	3b79096c 	.word	0x3b79096c
    1cf4:	00051388 	.word	0x00051388
    1cf8:	3e99999a 	.word	0x3e99999a
    1cfc:	44110000 	.word	0x44110000
    1d00:	06d606d6 	.word	0x06d606d6
    1d04:	45c8f000 	.word	0x45c8f000

00001d08 <alarmupdate()>:
void alarmupdate() {
    1d08:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    1d0a:	4d41      	ldr	r5, [pc, #260]	; (1e10 <alarmupdate()+0x108>)
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    1d0c:	4c41      	ldr	r4, [pc, #260]	; (1e14 <alarmupdate()+0x10c>)
    1d0e:	4842      	ldr	r0, [pc, #264]	; (1e18 <alarmupdate()+0x110>)
    1d10:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    1d12:	2300      	movs	r3, #0
    1d14:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    1d16:	f7ff f85d 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    1d1a:	4601      	mov	r1, r0
    1d1c:	4630      	mov	r0, r6
    1d1e:	f00b fd7b 	bl	d818 <__aeabi_fcmplt>
    1d22:	b108      	cbz	r0, 1d28 <alarmupdate()+0x20>
    alarm[0] = 0x04;
    1d24:	2304      	movs	r3, #4
    1d26:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    1d28:	483b      	ldr	r0, [pc, #236]	; (1e18 <alarmupdate()+0x110>)
    1d2a:	f7ff f81f 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    1d2e:	6921      	ldr	r1, [r4, #16]
    1d30:	f00b fd72 	bl	d818 <__aeabi_fcmplt>
    1d34:	b118      	cbz	r0, 1d3e <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    1d36:	782b      	ldrb	r3, [r5, #0]
    1d38:	f043 0310 	orr.w	r3, r3, #16
    1d3c:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > settings.OverTSetpoint) {
    1d3e:	4836      	ldr	r0, [pc, #216]	; (1e18 <alarmupdate()+0x110>)
    1d40:	f7ff fa9e 	bl	1280 <BMSModuleManager::getHighTemperature()>
    1d44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1d46:	f00b fd85 	bl	d854 <__aeabi_fcmpgt>
    1d4a:	b118      	cbz	r0, 1d54 <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    1d4c:	782b      	ldrb	r3, [r5, #0]
    1d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d52:	702b      	strb	r3, [r5, #0]
  alarm[1] = 0;
    1d54:	2600      	movs	r6, #0
    1d56:	706e      	strb	r6, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    1d58:	482f      	ldr	r0, [pc, #188]	; (1e18 <alarmupdate()+0x110>)
    1d5a:	f7ff fa99 	bl	1290 <BMSModuleManager::getLowTemperature()>
  alarm[3] = 0;
    1d5e:	70ee      	strb	r6, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    1d60:	482d      	ldr	r0, [pc, #180]	; (1e18 <alarmupdate()+0x110>)
    1d62:	f7ff f837 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    1d66:	4606      	mov	r6, r0
    1d68:	482b      	ldr	r0, [pc, #172]	; (1e18 <alarmupdate()+0x110>)
    1d6a:	f7fe ffff 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    1d6e:	4601      	mov	r1, r0
    1d70:	4630      	mov	r0, r6
    1d72:	f00b faa9 	bl	d2c8 <__aeabi_fsub>
    1d76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    1d78:	f00b fd6c 	bl	d854 <__aeabi_fcmpgt>
    1d7c:	b108      	cbz	r0, 1d82 <alarmupdate()+0x7a>
    alarm[3] = 0x01;
    1d7e:	2301      	movs	r3, #1
    1d80:	70eb      	strb	r3, [r5, #3]
  warning[0] = 0;
    1d82:	4d26      	ldr	r5, [pc, #152]	; (1e1c <alarmupdate()+0x114>)
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    1d84:	4824      	ldr	r0, [pc, #144]	; (1e18 <alarmupdate()+0x110>)
  warning[0] = 0;
    1d86:	2300      	movs	r3, #0
    1d88:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    1d8a:	f7ff f823 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    1d8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1d90:	4606      	mov	r6, r0
    1d92:	68e0      	ldr	r0, [r4, #12]
    1d94:	f00b fa98 	bl	d2c8 <__aeabi_fsub>
    1d98:	4601      	mov	r1, r0
    1d9a:	4630      	mov	r0, r6
    1d9c:	f00b fd5a 	bl	d854 <__aeabi_fcmpgt>
    1da0:	b108      	cbz	r0, 1da6 <alarmupdate()+0x9e>
    warning[0] = 0x04;
    1da2:	2304      	movs	r3, #4
    1da4:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff)) {
    1da6:	481c      	ldr	r0, [pc, #112]	; (1e18 <alarmupdate()+0x110>)
    1da8:	f7fe ffe0 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    1dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1dae:	4606      	mov	r6, r0
    1db0:	6920      	ldr	r0, [r4, #16]
    1db2:	f00b fa8b 	bl	d2cc <__addsf3>
    1db6:	4601      	mov	r1, r0
    1db8:	4630      	mov	r0, r6
    1dba:	f00b fd2d 	bl	d818 <__aeabi_fcmplt>
    1dbe:	b118      	cbz	r0, 1dc8 <alarmupdate()+0xc0>
    warning[0] |= 0x10;
    1dc0:	782b      	ldrb	r3, [r5, #0]
    1dc2:	f043 0310 	orr.w	r3, r3, #16
    1dc6:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff)) {
    1dc8:	4813      	ldr	r0, [pc, #76]	; (1e18 <alarmupdate()+0x110>)
    1dca:	f7ff fa59 	bl	1280 <BMSModuleManager::getHighTemperature()>
    1dce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1dd0:	4606      	mov	r6, r0
    1dd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1dd4:	f00b fa78 	bl	d2c8 <__aeabi_fsub>
    1dd8:	4601      	mov	r1, r0
    1dda:	4630      	mov	r0, r6
    1ddc:	f00b fd3a 	bl	d854 <__aeabi_fcmpgt>
    1de0:	b118      	cbz	r0, 1dea <alarmupdate()+0xe2>
    warning[0] |= 0x40;
    1de2:	782b      	ldrb	r3, [r5, #0]
    1de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1de8:	702b      	strb	r3, [r5, #0]
  warning[1] = 0;
    1dea:	2300      	movs	r3, #0
    1dec:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff)) {
    1dee:	480a      	ldr	r0, [pc, #40]	; (1e18 <alarmupdate()+0x110>)
    1df0:	f7ff fa4e 	bl	1290 <BMSModuleManager::getLowTemperature()>
    1df4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1df6:	4603      	mov	r3, r0
    1df8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1dfa:	461c      	mov	r4, r3
    1dfc:	f00b fa66 	bl	d2cc <__addsf3>
    1e00:	4601      	mov	r1, r0
    1e02:	4620      	mov	r0, r4
    1e04:	f00b fd08 	bl	d818 <__aeabi_fcmplt>
    1e08:	b108      	cbz	r0, 1e0e <alarmupdate()+0x106>
    warning[1] = 0x01;
    1e0a:	2301      	movs	r3, #1
    1e0c:	706b      	strb	r3, [r5, #1]
}
    1e0e:	bd70      	pop	{r4, r5, r6, pc}
    1e10:	1fff9000 	.word	0x1fff9000
    1e14:	1fffc0b4 	.word	0x1fffc0b4
    1e18:	1fff900c 	.word	0x1fff900c
    1e1c:	1fffc1ac 	.word	0x1fffc1ac

00001e20 <gaugeupdate()>:
void gaugeupdate() {
    1e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (gaugedebug == 1) {
    1e24:	4c7f      	ldr	r4, [pc, #508]	; (2024 <gaugeupdate()+0x204>)
    1e26:	6823      	ldr	r3, [r4, #0]
    1e28:	2b01      	cmp	r3, #1
void gaugeupdate() {
    1e2a:	b082      	sub	sp, #8
  if (gaugedebug == 1) {
    1e2c:	d049      	beq.n	1ec2 <gaugeupdate()+0xa2>
  if (gaugedebug == 2) {
    1e2e:	2b02      	cmp	r3, #2
    1e30:	f000 80c3 	beq.w	1fba <gaugeupdate()+0x19a>
  if (gaugedebug == 3) {
    1e34:	2b03      	cmp	r3, #3
    1e36:	d003      	beq.n	1e40 <gaugeupdate()+0x20>
  if (gaugedebug == 0) {
    1e38:	b32b      	cbz	r3, 1e86 <gaugeupdate()+0x66>
}
    1e3a:	b002      	add	sp, #8
    1e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SOCtest = 1000;
    1e40:	4b79      	ldr	r3, [pc, #484]	; (2028 <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1e42:	4e7a      	ldr	r6, [pc, #488]	; (202c <gaugeupdate()+0x20c>)
    SOCtest = 1000;
    1e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e48:	601a      	str	r2, [r3, #0]
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    1e4a:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    1e4e:	f00b faf1 	bl	d434 <__aeabi_i2f>
    1e52:	4605      	mov	r5, r0
    1e54:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    1e58:	f00b faec 	bl	d434 <__aeabi_i2f>
    1e5c:	4629      	mov	r1, r5
    1e5e:	f00b fa33 	bl	d2c8 <__aeabi_fsub>
    1e62:	4973      	ldr	r1, [pc, #460]	; (2030 <gaugeupdate()+0x210>)
    1e64:	f00b fb3a 	bl	d4dc <__aeabi_fmul>
    1e68:	4971      	ldr	r1, [pc, #452]	; (2030 <gaugeupdate()+0x210>)
    1e6a:	f00b fbeb 	bl	d644 <__aeabi_fdiv>
    1e6e:	4629      	mov	r1, r5
    1e70:	f00b fa2c 	bl	d2cc <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1e74:	f00b fcf8 	bl	d868 <__aeabi_f2iz>
    1e78:	4601      	mov	r1, r0
    1e7a:	2006      	movs	r0, #6
    1e7c:	f008 fc5a 	bl	a734 <analogWrite>
  if (gaugedebug == 0) {
    1e80:	6823      	ldr	r3, [r4, #0]
    1e82:	2b00      	cmp	r3, #0
    1e84:	d1d9      	bne.n	1e3a <gaugeupdate()+0x1a>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    1e86:	4b69      	ldr	r3, [pc, #420]	; (202c <gaugeupdate()+0x20c>)
    1e88:	486a      	ldr	r0, [pc, #424]	; (2034 <gaugeupdate()+0x214>)
    1e8a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
	long out_range = out_max - out_min;
    1e8e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
	long num = (x - in_min) * out_range;
    1e92:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    1e94:	4868      	ldr	r0, [pc, #416]	; (2038 <gaugeupdate()+0x218>)
	long out_range = out_max - out_min;
    1e96:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    1e98:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    1e9a:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    1e9e:	f2c0 80b2 	blt.w	2006 <gaugeupdate()+0x1e6>
		num += in_range / 2;
    1ea2:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    1ea4:	fb80 2003 	smull	r2, r0, r0, r3
    1ea8:	17da      	asrs	r2, r3, #31
    1eaa:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    1eae:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    1eb0:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    1eb2:	f2c0 80b4 	blt.w	201e <gaugeupdate()+0x1fe>
    1eb6:	2006      	movs	r0, #6
}
    1eb8:	b002      	add	sp, #8
    1eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    1ebe:	f008 bc39 	b.w	a734 <analogWrite>
    SOCtest = SOCtest + 10;
    1ec2:	4f59      	ldr	r7, [pc, #356]	; (2028 <gaugeupdate()+0x208>)
    1ec4:	6838      	ldr	r0, [r7, #0]
    1ec6:	300a      	adds	r0, #10
    if (SOCtest > 1000) {
    1ec8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    1ecc:	f300 8096 	bgt.w	1ffc <gaugeupdate()+0x1dc>
    SOCtest = SOCtest + 10;
    1ed0:	6038      	str	r0, [r7, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1ed2:	f00b faaf 	bl	d434 <__aeabi_i2f>
    1ed6:	4959      	ldr	r1, [pc, #356]	; (203c <gaugeupdate()+0x21c>)
    1ed8:	f00b fb00 	bl	d4dc <__aeabi_fmul>
    1edc:	4680      	mov	r8, r0
    1ede:	4e53      	ldr	r6, [pc, #332]	; (202c <gaugeupdate()+0x20c>)
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    1ee0:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    1ee4:	f00b faa6 	bl	d434 <__aeabi_i2f>
    1ee8:	4605      	mov	r5, r0
    1eea:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    1eee:	f00b faa1 	bl	d434 <__aeabi_i2f>
    1ef2:	4629      	mov	r1, r5
    1ef4:	f00b f9e8 	bl	d2c8 <__aeabi_fsub>
    1ef8:	4641      	mov	r1, r8
    1efa:	f00b faef 	bl	d4dc <__aeabi_fmul>
    1efe:	494c      	ldr	r1, [pc, #304]	; (2030 <gaugeupdate()+0x210>)
    1f00:	f00b fba0 	bl	d644 <__aeabi_fdiv>
    1f04:	4629      	mov	r1, r5
    1f06:	f00b f9e1 	bl	d2cc <__addsf3>
    1f0a:	f00b fcad 	bl	d868 <__aeabi_f2iz>
    1f0e:	4601      	mov	r1, r0
    1f10:	2006      	movs	r0, #6
    1f12:	f008 fc0f 	bl	a734 <analogWrite>
    1f16:	2102      	movs	r1, #2
    1f18:	4849      	ldr	r0, [pc, #292]	; (2040 <gaugeupdate()+0x220>)
    1f1a:	f00a fbf9 	bl	c710 <usb_serial_write>
    1f1e:	4849      	ldr	r0, [pc, #292]	; (2044 <gaugeupdate()+0x224>)
    1f20:	f007 ff28 	bl	9d74 <Print::println()>
    1f24:	2106      	movs	r1, #6
    1f26:	4848      	ldr	r0, [pc, #288]	; (2048 <gaugeupdate()+0x228>)
    1f28:	f00a fbf2 	bl	c710 <usb_serial_write>
    SERIALCONSOLE.print(SOCtest * 0.1);
    1f2c:	6838      	ldr	r0, [r7, #0]
    1f2e:	f00b fa81 	bl	d434 <__aeabi_i2f>
    1f32:	4942      	ldr	r1, [pc, #264]	; (203c <gaugeupdate()+0x21c>)
    1f34:	f00b fad2 	bl	d4dc <__aeabi_fmul>
    1f38:	f00b f8ac 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1f3c:	f04f 0802 	mov.w	r8, #2
    1f40:	4602      	mov	r2, r0
    1f42:	460b      	mov	r3, r1
    1f44:	483f      	ldr	r0, [pc, #252]	; (2044 <gaugeupdate()+0x224>)
    1f46:	f8cd 8000 	str.w	r8, [sp]
    1f4a:	f007 ff35 	bl	9db8 <Print::printFloat(double, unsigned char)>
    1f4e:	210d      	movs	r1, #13
    1f50:	483e      	ldr	r0, [pc, #248]	; (204c <gaugeupdate()+0x22c>)
    1f52:	f00a fbdd 	bl	c710 <usb_serial_write>
    1f56:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    1f5a:	f00b fa6b 	bl	d434 <__aeabi_i2f>
    1f5e:	4605      	mov	r5, r0
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1f60:	6838      	ldr	r0, [r7, #0]
    1f62:	f00b fa67 	bl	d434 <__aeabi_i2f>
    1f66:	4935      	ldr	r1, [pc, #212]	; (203c <gaugeupdate()+0x21c>)
    1f68:	f00b fab8 	bl	d4dc <__aeabi_fmul>
    1f6c:	4603      	mov	r3, r0
    1f6e:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    1f72:	461e      	mov	r6, r3
    1f74:	f00b fa5e 	bl	d434 <__aeabi_i2f>
    1f78:	4629      	mov	r1, r5
    1f7a:	f00b f9a5 	bl	d2c8 <__aeabi_fsub>
    1f7e:	4601      	mov	r1, r0
    1f80:	4630      	mov	r0, r6
    1f82:	f00b faab 	bl	d4dc <__aeabi_fmul>
    1f86:	492a      	ldr	r1, [pc, #168]	; (2030 <gaugeupdate()+0x210>)
    1f88:	f00b fb5c 	bl	d644 <__aeabi_fdiv>
    1f8c:	4629      	mov	r1, r5
    1f8e:	f00b f99d 	bl	d2cc <__addsf3>
    1f92:	f00b f87f 	bl	d094 <__aeabi_f2d>
    1f96:	f8cd 8000 	str.w	r8, [sp]
    1f9a:	460b      	mov	r3, r1
    1f9c:	4602      	mov	r2, r0
    1f9e:	4829      	ldr	r0, [pc, #164]	; (2044 <gaugeupdate()+0x224>)
    1fa0:	f007 ff0a 	bl	9db8 <Print::printFloat(double, unsigned char)>
    1fa4:	4641      	mov	r1, r8
    1fa6:	4826      	ldr	r0, [pc, #152]	; (2040 <gaugeupdate()+0x220>)
    1fa8:	f00a fbb2 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1fac:	4825      	ldr	r0, [pc, #148]	; (2044 <gaugeupdate()+0x224>)
    1fae:	f007 fee1 	bl	9d74 <Print::println()>
  if (gaugedebug == 2) {
    1fb2:	6823      	ldr	r3, [r4, #0]
    1fb4:	2b02      	cmp	r3, #2
    1fb6:	f47f af3d 	bne.w	1e34 <gaugeupdate()+0x14>
    SOCtest = 0;
    1fba:	4b1b      	ldr	r3, [pc, #108]	; (2028 <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1fbc:	4e1b      	ldr	r6, [pc, #108]	; (202c <gaugeupdate()+0x20c>)
    SOCtest = 0;
    1fbe:	2200      	movs	r2, #0
    1fc0:	601a      	str	r2, [r3, #0]
    1fc2:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    1fc6:	f00b fa35 	bl	d434 <__aeabi_i2f>
    1fca:	4605      	mov	r5, r0
    1fcc:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    1fd0:	f00b fa30 	bl	d434 <__aeabi_i2f>
    1fd4:	4629      	mov	r1, r5
    1fd6:	f00b f977 	bl	d2c8 <__aeabi_fsub>
    1fda:	2100      	movs	r1, #0
    1fdc:	f00b fa7e 	bl	d4dc <__aeabi_fmul>
    1fe0:	4913      	ldr	r1, [pc, #76]	; (2030 <gaugeupdate()+0x210>)
    1fe2:	f00b fb2f 	bl	d644 <__aeabi_fdiv>
    1fe6:	4629      	mov	r1, r5
    1fe8:	f00b f970 	bl	d2cc <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1fec:	f00b fc3c 	bl	d868 <__aeabi_f2iz>
    1ff0:	4601      	mov	r1, r0
    1ff2:	2006      	movs	r0, #6
    1ff4:	f008 fb9e 	bl	a734 <analogWrite>
  if (gaugedebug == 3) {
    1ff8:	6823      	ldr	r3, [r4, #0]
    1ffa:	e71b      	b.n	1e34 <gaugeupdate()+0x14>
      SOCtest = 0;
    1ffc:	2300      	movs	r3, #0
    1ffe:	f04f 0800 	mov.w	r8, #0
    2002:	603b      	str	r3, [r7, #0]
    2004:	e76b      	b.n	1ede <gaugeupdate()+0xbe>
		num -= in_range / 2;
    2006:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    2008:	fb80 2003 	smull	r2, r0, r0, r3
    200c:	17da      	asrs	r2, r3, #31
    200e:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    2012:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    2014:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    2016:	f6ff af4e 	blt.w	1eb6 <gaugeupdate()+0x96>
    201a:	3101      	adds	r1, #1
    201c:	e74b      	b.n	1eb6 <gaugeupdate()+0x96>
		if (in_range * num < 0) return result - 1;
    201e:	3901      	subs	r1, #1
    2020:	e749      	b.n	1eb6 <gaugeupdate()+0x96>
    2022:	bf00      	nop
    2024:	1fffbed8 	.word	0x1fffbed8
    2028:	1fff8ff0 	.word	0x1fff8ff0
    202c:	1fffc0b4 	.word	0x1fffc0b4
    2030:	42c80000 	.word	0x42c80000
    2034:	1fff8728 	.word	0x1fff8728
    2038:	51eb851f 	.word	0x51eb851f
    203c:	3dcccccd 	.word	0x3dcccccd
    2040:	000155bc 	.word	0x000155bc
    2044:	1fff8824 	.word	0x1fff8824
    2048:	0001472c 	.word	0x0001472c
    204c:	00014734 	.word	0x00014734

00002050 <printbmsstat()>:
void printbmsstat() {
    2050:	b530      	push	{r4, r5, lr}
  SERIALCONSOLE.println();
    2052:	48a1      	ldr	r0, [pc, #644]	; (22d8 <printbmsstat()+0x288>)
  if (settings.ESSmode == 1) {
    2054:	4ca1      	ldr	r4, [pc, #644]	; (22dc <printbmsstat()+0x28c>)
void printbmsstat() {
    2056:	b083      	sub	sp, #12
  SERIALCONSOLE.println();
    2058:	f007 fe8c 	bl	9d74 <Print::println()>
  SERIALCONSOLE.println();
    205c:	489e      	ldr	r0, [pc, #632]	; (22d8 <printbmsstat()+0x288>)
    205e:	f007 fe89 	bl	9d74 <Print::println()>
  SERIALCONSOLE.println();
    2062:	489d      	ldr	r0, [pc, #628]	; (22d8 <printbmsstat()+0x288>)
    2064:	f007 fe86 	bl	9d74 <Print::println()>
    2068:	489d      	ldr	r0, [pc, #628]	; (22e0 <printbmsstat()+0x290>)
    206a:	210d      	movs	r1, #13
    206c:	f00a fb50 	bl	c710 <usb_serial_write>
  if (settings.ESSmode == 1) {
    2070:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    2074:	2b01      	cmp	r3, #1
    2076:	f000 8163 	beq.w	2340 <printbmsstat()+0x2f0>
    SERIALCONSOLE.print(bmsstatus);
    207a:	4d9a      	ldr	r5, [pc, #616]	; (22e4 <printbmsstat()+0x294>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    207c:	4896      	ldr	r0, [pc, #600]	; (22d8 <printbmsstat()+0x288>)
    207e:	7829      	ldrb	r1, [r5, #0]
    2080:	2300      	movs	r3, #0
    2082:	220a      	movs	r2, #10
    2084:	f007 fe8e 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus) {
    2088:	782b      	ldrb	r3, [r5, #0]
    208a:	2b05      	cmp	r3, #5
    208c:	d80b      	bhi.n	20a6 <printbmsstat()+0x56>
    208e:	e8df f013 	tbh	[pc, r3, lsl #1]
    2092:	01c2      	.short	0x01c2
    2094:	01cc01c7 	.word	0x01cc01c7
    2098:	01d10006 	.word	0x01d10006
    209c:	01bd      	.short	0x01bd
    209e:	4892      	ldr	r0, [pc, #584]	; (22e8 <printbmsstat()+0x298>)
    20a0:	2108      	movs	r1, #8
    20a2:	f00a fb35 	bl	c710 <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    20a6:	4891      	ldr	r0, [pc, #580]	; (22ec <printbmsstat()+0x29c>)
    20a8:	f7fe fe60 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    20ac:	6921      	ldr	r1, [r4, #16]
    20ae:	f00b fbb3 	bl	d818 <__aeabi_fcmplt>
    20b2:	2800      	cmp	r0, #0
    20b4:	f040 810a 	bne.w	22cc <printbmsstat()+0x27c>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    20b8:	488c      	ldr	r0, [pc, #560]	; (22ec <printbmsstat()+0x29c>)
    20ba:	f7fe fe8b 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    20be:	68e1      	ldr	r1, [r4, #12]
    20c0:	f00b fbc8 	bl	d854 <__aeabi_fcmpgt>
    20c4:	2800      	cmp	r0, #0
    20c6:	f040 80fc 	bne.w	22c2 <printbmsstat()+0x272>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    20ca:	4888      	ldr	r0, [pc, #544]	; (22ec <printbmsstat()+0x29c>)
    20cc:	f7fe fe82 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    20d0:	4605      	mov	r5, r0
    20d2:	4886      	ldr	r0, [pc, #536]	; (22ec <printbmsstat()+0x29c>)
    20d4:	f7fe fe4a 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    20d8:	4601      	mov	r1, r0
    20da:	4628      	mov	r0, r5
    20dc:	f00b f8f4 	bl	d2c8 <__aeabi_fsub>
    20e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    20e2:	f00b fbb7 	bl	d854 <__aeabi_fcmpgt>
    20e6:	2800      	cmp	r0, #0
    20e8:	f040 80e6 	bne.w	22b8 <printbmsstat()+0x268>
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    20ec:	487f      	ldr	r0, [pc, #508]	; (22ec <printbmsstat()+0x29c>)
    20ee:	f7ff f8c7 	bl	1280 <BMSModuleManager::getHighTemperature()>
    20f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    20f4:	f00b fbae 	bl	d854 <__aeabi_fcmpgt>
    20f8:	2800      	cmp	r0, #0
    20fa:	f040 80d8 	bne.w	22ae <printbmsstat()+0x25e>
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    20fe:	487b      	ldr	r0, [pc, #492]	; (22ec <printbmsstat()+0x29c>)
    2100:	f7ff f8c6 	bl	1290 <BMSModuleManager::getLowTemperature()>
    2104:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2106:	f00b fb87 	bl	d818 <__aeabi_fcmplt>
    210a:	2800      	cmp	r0, #0
    210c:	f040 80ca 	bne.w	22a4 <printbmsstat()+0x254>
    2110:	2102      	movs	r1, #2
    2112:	4877      	ldr	r0, [pc, #476]	; (22f0 <printbmsstat()+0x2a0>)
    2114:	f00a fafc 	bl	c710 <usb_serial_write>
  if (digitalRead(IN3) == HIGH) {
    2118:	2012      	movs	r0, #18
    211a:	f008 fcad 	bl	aa78 <digitalRead>
    211e:	2801      	cmp	r0, #1
    2120:	f000 816f 	beq.w	2402 <printbmsstat()+0x3b2>
  if (digitalRead(IN1) == HIGH) {
    2124:	2011      	movs	r0, #17
    2126:	f008 fca7 	bl	aa78 <digitalRead>
    212a:	2801      	cmp	r0, #1
    212c:	f000 8164 	beq.w	23f8 <printbmsstat()+0x3a8>
  if (balancecells == 1) {
    2130:	4b70      	ldr	r3, [pc, #448]	; (22f4 <printbmsstat()+0x2a4>)
    2132:	681b      	ldr	r3, [r3, #0]
    2134:	2b01      	cmp	r3, #1
    2136:	f000 815a 	beq.w	23ee <printbmsstat()+0x39e>
    213a:	2102      	movs	r1, #2
    213c:	486c      	ldr	r0, [pc, #432]	; (22f0 <printbmsstat()+0x2a0>)
  if ((contstat & 1) == 1) {
    213e:	4c6e      	ldr	r4, [pc, #440]	; (22f8 <printbmsstat()+0x2a8>)
    2140:	f00a fae6 	bl	c710 <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    2144:	4b6d      	ldr	r3, [pc, #436]	; (22fc <printbmsstat()+0x2ac>)
	size_t print(int n)				{ return print((long)n); }
    2146:	4864      	ldr	r0, [pc, #400]	; (22d8 <printbmsstat()+0x288>)
    2148:	6819      	ldr	r1, [r3, #0]
    214a:	f007 fe0b 	bl	9d64 <Print::print(long)>
  SERIALCONSOLE.println();
    214e:	4862      	ldr	r0, [pc, #392]	; (22d8 <printbmsstat()+0x288>)
    2150:	f007 fe10 	bl	9d74 <Print::println()>
    2154:	2104      	movs	r1, #4
    2156:	486a      	ldr	r0, [pc, #424]	; (2300 <printbmsstat()+0x2b0>)
    2158:	f00a fada 	bl	c710 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    215c:	200b      	movs	r0, #11
    215e:	f008 fc8b 	bl	aa78 <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2162:	2300      	movs	r3, #0
    2164:	4601      	mov	r1, r0
    2166:	220a      	movs	r2, #10
    2168:	485b      	ldr	r0, [pc, #364]	; (22d8 <printbmsstat()+0x288>)
    216a:	f007 fe1b 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    216e:	200c      	movs	r0, #12
    2170:	f008 fc82 	bl	aa78 <digitalRead>
    2174:	2300      	movs	r3, #0
    2176:	4601      	mov	r1, r0
    2178:	220a      	movs	r2, #10
    217a:	4857      	ldr	r0, [pc, #348]	; (22d8 <printbmsstat()+0x288>)
    217c:	f007 fe12 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    2180:	2014      	movs	r0, #20
    2182:	f008 fc79 	bl	aa78 <digitalRead>
    2186:	2300      	movs	r3, #0
    2188:	4601      	mov	r1, r0
    218a:	220a      	movs	r2, #10
    218c:	4852      	ldr	r0, [pc, #328]	; (22d8 <printbmsstat()+0x288>)
    218e:	f007 fe09 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    2192:	2015      	movs	r0, #21
    2194:	f008 fc70 	bl	aa78 <digitalRead>
    2198:	220a      	movs	r2, #10
    219a:	4601      	mov	r1, r0
    219c:	2300      	movs	r3, #0
    219e:	484e      	ldr	r0, [pc, #312]	; (22d8 <printbmsstat()+0x288>)
    21a0:	f007 fe00 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    21a4:	2106      	movs	r1, #6
    21a6:	4857      	ldr	r0, [pc, #348]	; (2304 <printbmsstat()+0x2b4>)
    21a8:	f00a fab2 	bl	c710 <usb_serial_write>
  if ((contstat & 1) == 1) {
    21ac:	6823      	ldr	r3, [r4, #0]
    21ae:	07d8      	lsls	r0, r3, #31
    21b0:	bf4b      	itete	mi
    21b2:	2101      	movmi	r1, #1
    21b4:	2101      	movpl	r1, #1
    21b6:	4854      	ldrmi	r0, [pc, #336]	; (2308 <printbmsstat()+0x2b8>)
    21b8:	4854      	ldrpl	r0, [pc, #336]	; (230c <printbmsstat()+0x2bc>)
    21ba:	f00a faa9 	bl	c710 <usb_serial_write>
  if ((contstat & 2) == 2) {
    21be:	6823      	ldr	r3, [r4, #0]
    21c0:	0799      	lsls	r1, r3, #30
    21c2:	bf4b      	itete	mi
    21c4:	2101      	movmi	r1, #1
    21c6:	2101      	movpl	r1, #1
    21c8:	484f      	ldrmi	r0, [pc, #316]	; (2308 <printbmsstat()+0x2b8>)
    21ca:	4850      	ldrpl	r0, [pc, #320]	; (230c <printbmsstat()+0x2bc>)
    21cc:	f00a faa0 	bl	c710 <usb_serial_write>
  if ((contstat & 4) == 4) {
    21d0:	6823      	ldr	r3, [r4, #0]
    21d2:	075a      	lsls	r2, r3, #29
    21d4:	bf4b      	itete	mi
    21d6:	2101      	movmi	r1, #1
    21d8:	2101      	movpl	r1, #1
    21da:	484b      	ldrmi	r0, [pc, #300]	; (2308 <printbmsstat()+0x2b8>)
    21dc:	484b      	ldrpl	r0, [pc, #300]	; (230c <printbmsstat()+0x2bc>)
    21de:	f00a fa97 	bl	c710 <usb_serial_write>
  if ((contstat & 8) == 8) {
    21e2:	6823      	ldr	r3, [r4, #0]
    21e4:	071b      	lsls	r3, r3, #28
    21e6:	bf4b      	itete	mi
    21e8:	2101      	movmi	r1, #1
    21ea:	2101      	movpl	r1, #1
    21ec:	4846      	ldrmi	r0, [pc, #280]	; (2308 <printbmsstat()+0x2b8>)
    21ee:	4847      	ldrpl	r0, [pc, #284]	; (230c <printbmsstat()+0x2bc>)
    21f0:	f00a fa8e 	bl	c710 <usb_serial_write>
    21f4:	2104      	movs	r1, #4
    21f6:	4846      	ldr	r0, [pc, #280]	; (2310 <printbmsstat()+0x2c0>)
    21f8:	f00a fa8a 	bl	c710 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(IN1));
    21fc:	2011      	movs	r0, #17
    21fe:	f008 fc3b 	bl	aa78 <digitalRead>
    2202:	2300      	movs	r3, #0
    2204:	4601      	mov	r1, r0
    2206:	220a      	movs	r2, #10
    2208:	4833      	ldr	r0, [pc, #204]	; (22d8 <printbmsstat()+0x288>)
    220a:	f007 fdcb 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    220e:	2010      	movs	r0, #16
    2210:	f008 fc32 	bl	aa78 <digitalRead>
    2214:	2300      	movs	r3, #0
    2216:	4601      	mov	r1, r0
    2218:	220a      	movs	r2, #10
    221a:	482f      	ldr	r0, [pc, #188]	; (22d8 <printbmsstat()+0x288>)
    221c:	f007 fdc2 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    2220:	2012      	movs	r0, #18
    2222:	f008 fc29 	bl	aa78 <digitalRead>
    2226:	2300      	movs	r3, #0
    2228:	4601      	mov	r1, r0
    222a:	220a      	movs	r2, #10
    222c:	482a      	ldr	r0, [pc, #168]	; (22d8 <printbmsstat()+0x288>)
    222e:	f007 fdb9 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    2232:	2013      	movs	r0, #19
    2234:	f008 fc20 	bl	aa78 <digitalRead>
    2238:	220a      	movs	r2, #10
    223a:	4601      	mov	r1, r0
    223c:	2300      	movs	r3, #0
    223e:	4826      	ldr	r0, [pc, #152]	; (22d8 <printbmsstat()+0x288>)
    2240:	f007 fdb0 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2244:	2118      	movs	r1, #24
    2246:	4833      	ldr	r0, [pc, #204]	; (2314 <printbmsstat()+0x2c4>)
    2248:	f00a fa62 	bl	c710 <usb_serial_write>
  SERIALCONSOLE.print(chargecurrent * 0.1, 0);
    224c:	4b32      	ldr	r3, [pc, #200]	; (2318 <printbmsstat()+0x2c8>)
    224e:	f9b3 0000 	ldrsh.w	r0, [r3]
    2252:	f00b f8ef 	bl	d434 <__aeabi_i2f>
    2256:	4931      	ldr	r1, [pc, #196]	; (231c <printbmsstat()+0x2cc>)
    2258:	f00b f940 	bl	d4dc <__aeabi_fmul>
    225c:	f00a ff1a 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2260:	2400      	movs	r4, #0
    2262:	4602      	mov	r2, r0
    2264:	460b      	mov	r3, r1
    2266:	9400      	str	r4, [sp, #0]
    2268:	481b      	ldr	r0, [pc, #108]	; (22d8 <printbmsstat()+0x288>)
    226a:	f007 fda5 	bl	9db8 <Print::printFloat(double, unsigned char)>
    226e:	211d      	movs	r1, #29
    2270:	482b      	ldr	r0, [pc, #172]	; (2320 <printbmsstat()+0x2d0>)
    2272:	f00a fa4d 	bl	c710 <usb_serial_write>
  SERIALCONSOLE.print(discurrent * 0.1, 0);
    2276:	4b2b      	ldr	r3, [pc, #172]	; (2324 <printbmsstat()+0x2d4>)
    2278:	f9b3 0000 	ldrsh.w	r0, [r3]
    227c:	f00b f8da 	bl	d434 <__aeabi_i2f>
    2280:	4926      	ldr	r1, [pc, #152]	; (231c <printbmsstat()+0x2cc>)
    2282:	f00b f92b 	bl	d4dc <__aeabi_fmul>
    2286:	f00a ff05 	bl	d094 <__aeabi_f2d>
    228a:	9400      	str	r4, [sp, #0]
    228c:	4602      	mov	r2, r0
    228e:	460b      	mov	r3, r1
    2290:	4811      	ldr	r0, [pc, #68]	; (22d8 <printbmsstat()+0x288>)
    2292:	f007 fd91 	bl	9db8 <Print::printFloat(double, unsigned char)>
    2296:	4824      	ldr	r0, [pc, #144]	; (2328 <printbmsstat()+0x2d8>)
    2298:	2102      	movs	r1, #2
}
    229a:	b003      	add	sp, #12
    229c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    22a0:	f00a ba36 	b.w	c710 <usb_serial_write>
    22a4:	210d      	movs	r1, #13
    22a6:	4821      	ldr	r0, [pc, #132]	; (232c <printbmsstat()+0x2dc>)
    22a8:	f00a fa32 	bl	c710 <usb_serial_write>
    22ac:	e730      	b.n	2110 <printbmsstat()+0xc0>
    22ae:	210c      	movs	r1, #12
    22b0:	481f      	ldr	r0, [pc, #124]	; (2330 <printbmsstat()+0x2e0>)
    22b2:	f00a fa2d 	bl	c710 <usb_serial_write>
    22b6:	e722      	b.n	20fe <printbmsstat()+0xae>
    22b8:	2111      	movs	r1, #17
    22ba:	481e      	ldr	r0, [pc, #120]	; (2334 <printbmsstat()+0x2e4>)
    22bc:	f00a fa28 	bl	c710 <usb_serial_write>
    22c0:	e714      	b.n	20ec <printbmsstat()+0x9c>
    22c2:	210e      	movs	r1, #14
    22c4:	481c      	ldr	r0, [pc, #112]	; (2338 <printbmsstat()+0x2e8>)
    22c6:	f00a fa23 	bl	c710 <usb_serial_write>
    22ca:	e6fe      	b.n	20ca <printbmsstat()+0x7a>
    22cc:	210f      	movs	r1, #15
    22ce:	481b      	ldr	r0, [pc, #108]	; (233c <printbmsstat()+0x2ec>)
    22d0:	f00a fa1e 	bl	c710 <usb_serial_write>
    22d4:	e6f0      	b.n	20b8 <printbmsstat()+0x68>
    22d6:	bf00      	nop
    22d8:	1fff8824 	.word	0x1fff8824
    22dc:	1fffc0b4 	.word	0x1fffc0b4
    22e0:	00014744 	.word	0x00014744
    22e4:	1fffbe2c 	.word	0x1fffbe2c
    22e8:	00014808 	.word	0x00014808
    22ec:	1fff900c 	.word	0x1fff900c
    22f0:	000155bc 	.word	0x000155bc
    22f4:	1fff9008 	.word	0x1fff9008
    22f8:	1fffbeac 	.word	0x1fffbeac
    22fc:	1fffbe34 	.word	0x1fffbe34
    2300:	0001484c 	.word	0x0001484c
    2304:	00014854 	.word	0x00014854
    2308:	0001485c 	.word	0x0001485c
    230c:	00014860 	.word	0x00014860
    2310:	00014864 	.word	0x00014864
    2314:	0001486c 	.word	0x0001486c
    2318:	1fffbe38 	.word	0x1fffbe38
    231c:	3dcccccd 	.word	0x3dcccccd
    2320:	00014888 	.word	0x00014888
    2324:	1fffbecc 	.word	0x1fffbecc
    2328:	000148a8 	.word	0x000148a8
    232c:	000147a4 	.word	0x000147a4
    2330:	00014794 	.word	0x00014794
    2334:	00014780 	.word	0x00014780
    2338:	00014770 	.word	0x00014770
    233c:	00014760 	.word	0x00014760
    2340:	2109      	movs	r1, #9
    2342:	4854      	ldr	r0, [pc, #336]	; (2494 <printbmsstat()+0x444>)
    2344:	f00a f9e4 	bl	c710 <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    2348:	4853      	ldr	r0, [pc, #332]	; (2498 <printbmsstat()+0x448>)
    234a:	f7fe fd0f 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    234e:	6921      	ldr	r1, [r4, #16]
    2350:	f00b fa62 	bl	d818 <__aeabi_fcmplt>
    2354:	2800      	cmp	r0, #0
    2356:	f040 8083 	bne.w	2460 <printbmsstat()+0x410>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    235a:	484f      	ldr	r0, [pc, #316]	; (2498 <printbmsstat()+0x448>)
    235c:	f7fe fd3a 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    2360:	68e1      	ldr	r1, [r4, #12]
    2362:	f00b fa77 	bl	d854 <__aeabi_fcmpgt>
    2366:	2800      	cmp	r0, #0
    2368:	f040 8084 	bne.w	2474 <printbmsstat()+0x424>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    236c:	484a      	ldr	r0, [pc, #296]	; (2498 <printbmsstat()+0x448>)
    236e:	f7fe fd31 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    2372:	4605      	mov	r5, r0
    2374:	4848      	ldr	r0, [pc, #288]	; (2498 <printbmsstat()+0x448>)
    2376:	f7fe fcf9 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    237a:	4601      	mov	r1, r0
    237c:	4628      	mov	r0, r5
    237e:	f00a ffa3 	bl	d2c8 <__aeabi_fsub>
    2382:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    2384:	f00b fa66 	bl	d854 <__aeabi_fcmpgt>
    2388:	2800      	cmp	r0, #0
    238a:	d16e      	bne.n	246a <printbmsstat()+0x41a>
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    238c:	4842      	ldr	r0, [pc, #264]	; (2498 <printbmsstat()+0x448>)
    238e:	f7fe ff77 	bl	1280 <BMSModuleManager::getHighTemperature()>
    2392:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2394:	f00b fa5e 	bl	d854 <__aeabi_fcmpgt>
    2398:	2800      	cmp	r0, #0
    239a:	d175      	bne.n	2488 <printbmsstat()+0x438>
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    239c:	483e      	ldr	r0, [pc, #248]	; (2498 <printbmsstat()+0x448>)
    239e:	f7fe ff77 	bl	1290 <BMSModuleManager::getLowTemperature()>
    23a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    23a4:	f00b fa38 	bl	d818 <__aeabi_fcmplt>
    23a8:	2800      	cmp	r0, #0
    23aa:	d168      	bne.n	247e <printbmsstat()+0x42e>
    if (storagemode == 1) {
    23ac:	4b3b      	ldr	r3, [pc, #236]	; (249c <printbmsstat()+0x44c>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    23ae:	483a      	ldr	r0, [pc, #232]	; (2498 <printbmsstat()+0x448>)
    if (storagemode == 1) {
    23b0:	681b      	ldr	r3, [r3, #0]
    23b2:	2b01      	cmp	r3, #1
    23b4:	d043      	beq.n	243e <printbmsstat()+0x3ee>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    23b6:	f7fe fcd9 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    23ba:	6921      	ldr	r1, [r4, #16]
    23bc:	f00b fa4a 	bl	d854 <__aeabi_fcmpgt>
    23c0:	2800      	cmp	r0, #0
    23c2:	f43f aea5 	beq.w	2110 <printbmsstat()+0xc0>
    23c6:	4834      	ldr	r0, [pc, #208]	; (2498 <printbmsstat()+0x448>)
    23c8:	f7fe fd04 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    23cc:	68e1      	ldr	r1, [r4, #12]
    23ce:	f00b fa23 	bl	d818 <__aeabi_fcmplt>
    23d2:	2800      	cmp	r0, #0
    23d4:	f43f ae9c 	beq.w	2110 <printbmsstat()+0xc0>
        if (bmsstatus == Error) {
    23d8:	4b31      	ldr	r3, [pc, #196]	; (24a0 <printbmsstat()+0x450>)
    23da:	781b      	ldrb	r3, [r3, #0]
    23dc:	2b05      	cmp	r3, #5
    23de:	bf0b      	itete	eq
    23e0:	4830      	ldreq	r0, [pc, #192]	; (24a4 <printbmsstat()+0x454>)
    23e2:	4831      	ldrne	r0, [pc, #196]	; (24a8 <printbmsstat()+0x458>)
    23e4:	210a      	moveq	r1, #10
    23e6:	2108      	movne	r1, #8
    23e8:	f00a f992 	bl	c710 <usb_serial_write>
    23ec:	e690      	b.n	2110 <printbmsstat()+0xc0>
    23ee:	2111      	movs	r1, #17
    23f0:	482e      	ldr	r0, [pc, #184]	; (24ac <printbmsstat()+0x45c>)
    23f2:	f00a f98d 	bl	c710 <usb_serial_write>
    23f6:	e6a0      	b.n	213a <printbmsstat()+0xea>
    23f8:	210a      	movs	r1, #10
    23fa:	482d      	ldr	r0, [pc, #180]	; (24b0 <printbmsstat()+0x460>)
    23fc:	f00a f988 	bl	c710 <usb_serial_write>
    2400:	e696      	b.n	2130 <printbmsstat()+0xe0>
    2402:	210e      	movs	r1, #14
    2404:	482b      	ldr	r0, [pc, #172]	; (24b4 <printbmsstat()+0x464>)
    2406:	f00a f983 	bl	c710 <usb_serial_write>
    240a:	e68b      	b.n	2124 <printbmsstat()+0xd4>
    240c:	2107      	movs	r1, #7
    240e:	482a      	ldr	r0, [pc, #168]	; (24b8 <printbmsstat()+0x468>)
    2410:	f00a f97e 	bl	c710 <usb_serial_write>
    2414:	e647      	b.n	20a6 <printbmsstat()+0x56>
    2416:	2106      	movs	r1, #6
    2418:	4828      	ldr	r0, [pc, #160]	; (24bc <printbmsstat()+0x46c>)
    241a:	f00a f979 	bl	c710 <usb_serial_write>
    241e:	e642      	b.n	20a6 <printbmsstat()+0x56>
    2420:	2107      	movs	r1, #7
    2422:	4827      	ldr	r0, [pc, #156]	; (24c0 <printbmsstat()+0x470>)
    2424:	f00a f974 	bl	c710 <usb_serial_write>
    2428:	e63d      	b.n	20a6 <printbmsstat()+0x56>
    242a:	2107      	movs	r1, #7
    242c:	4825      	ldr	r0, [pc, #148]	; (24c4 <printbmsstat()+0x474>)
    242e:	f00a f96f 	bl	c710 <usb_serial_write>
    2432:	e638      	b.n	20a6 <printbmsstat()+0x56>
    2434:	210b      	movs	r1, #11
    2436:	4824      	ldr	r0, [pc, #144]	; (24c8 <printbmsstat()+0x478>)
    2438:	f00a f96a 	bl	c710 <usb_serial_write>
    243c:	e633      	b.n	20a6 <printbmsstat()+0x56>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    243e:	f7fe fc95 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    2442:	6a21      	ldr	r1, [r4, #32]
    2444:	f00b fa06 	bl	d854 <__aeabi_fcmpgt>
    2448:	2800      	cmp	r0, #0
    244a:	f43f ae61 	beq.w	2110 <printbmsstat()+0xc0>
    244e:	2116      	movs	r1, #22
    2450:	481e      	ldr	r0, [pc, #120]	; (24cc <printbmsstat()+0x47c>)
    2452:	f00a f95d 	bl	c710 <usb_serial_write>
    2456:	210a      	movs	r1, #10
    2458:	4812      	ldr	r0, [pc, #72]	; (24a4 <printbmsstat()+0x454>)
    245a:	f00a f959 	bl	c710 <usb_serial_write>
    245e:	e657      	b.n	2110 <printbmsstat()+0xc0>
    2460:	210f      	movs	r1, #15
    2462:	481b      	ldr	r0, [pc, #108]	; (24d0 <printbmsstat()+0x480>)
    2464:	f00a f954 	bl	c710 <usb_serial_write>
    2468:	e777      	b.n	235a <printbmsstat()+0x30a>
    246a:	2111      	movs	r1, #17
    246c:	4819      	ldr	r0, [pc, #100]	; (24d4 <printbmsstat()+0x484>)
    246e:	f00a f94f 	bl	c710 <usb_serial_write>
    2472:	e78b      	b.n	238c <printbmsstat()+0x33c>
    2474:	210e      	movs	r1, #14
    2476:	4818      	ldr	r0, [pc, #96]	; (24d8 <printbmsstat()+0x488>)
    2478:	f00a f94a 	bl	c710 <usb_serial_write>
    247c:	e776      	b.n	236c <printbmsstat()+0x31c>
    247e:	210d      	movs	r1, #13
    2480:	4816      	ldr	r0, [pc, #88]	; (24dc <printbmsstat()+0x48c>)
    2482:	f00a f945 	bl	c710 <usb_serial_write>
    2486:	e791      	b.n	23ac <printbmsstat()+0x35c>
    2488:	210c      	movs	r1, #12
    248a:	4815      	ldr	r0, [pc, #84]	; (24e0 <printbmsstat()+0x490>)
    248c:	f00a f940 	bl	c710 <usb_serial_write>
    2490:	e784      	b.n	239c <printbmsstat()+0x34c>
    2492:	bf00      	nop
    2494:	00014754 	.word	0x00014754
    2498:	1fff900c 	.word	0x1fff900c
    249c:	1fffc198 	.word	0x1fffc198
    24a0:	1fffbe2c 	.word	0x1fffbe2c
    24a4:	000147cc 	.word	0x000147cc
    24a8:	000147d8 	.word	0x000147d8
    24ac:	00014838 	.word	0x00014838
    24b0:	0001482c 	.word	0x0001482c
    24b4:	0001481c 	.word	0x0001481c
    24b8:	00014814 	.word	0x00014814
    24bc:	000147e4 	.word	0x000147e4
    24c0:	000147ec 	.word	0x000147ec
    24c4:	00014800 	.word	0x00014800
    24c8:	000147f4 	.word	0x000147f4
    24cc:	000147b4 	.word	0x000147b4
    24d0:	00014760 	.word	0x00014760
    24d4:	00014780 	.word	0x00014780
    24d8:	00014770 	.word	0x00014770
    24dc:	000147a4 	.word	0x000147a4
    24e0:	00014794 	.word	0x00014794

000024e4 <getcurrent()>:
void getcurrent() {
    24e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    24e8:	4cae      	ldr	r4, [pc, #696]	; (27a4 <getcurrent()+0x2c0>)
    24ea:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
    24ec:	2e01      	cmp	r6, #1
void getcurrent() {
    24ee:	b08e      	sub	sp, #56	; 0x38
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    24f0:	f000 81e9 	beq.w	28c6 <getcurrent()+0x3e2>
    24f4:	2e03      	cmp	r6, #3
    24f6:	d06f      	beq.n	25d8 <getcurrent()+0xf4>
    24f8:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 27a8 <getcurrent()+0x2c4>
    24fc:	4fab      	ldr	r7, [pc, #684]	; (27ac <getcurrent()+0x2c8>)
    24fe:	4eac      	ldr	r6, [pc, #688]	; (27b0 <getcurrent()+0x2cc>)
  if (settings.invertcur == 1) {
    2500:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  lowpassFilter.input(RawCur);
    2502:	48ac      	ldr	r0, [pc, #688]	; (27b4 <getcurrent()+0x2d0>)
  if (settings.invertcur == 1) {
    2504:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    2506:	bf09      	itett	eq
    2508:	6831      	ldreq	r1, [r6, #0]
    250a:	6831      	ldrne	r1, [r6, #0]
    250c:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    2510:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    2512:	f007 f8f1 	bl	96f8 <FilterOnePole::input(float)>
  if (debugCur != 0) {
    2516:	683b      	ldr	r3, [r7, #0]
    2518:	2b00      	cmp	r3, #0
    251a:	f040 8128 	bne.w	276e <getcurrent()+0x28a>
  currentact = lowpassFilter.output();
    251e:	48a5      	ldr	r0, [pc, #660]	; (27b4 <getcurrent()+0x2d0>)
    2520:	f007 f8be 	bl	96a0 <FilterOnePole::output()>
  if (debugCur != 0) {
    2524:	683b      	ldr	r3, [r7, #0]
  currentact = lowpassFilter.output();
    2526:	f8c8 0000 	str.w	r0, [r8]
    252a:	4605      	mov	r5, r0
  if (debugCur != 0) {
    252c:	2b00      	cmp	r3, #0
    252e:	f040 810e 	bne.w	274e <getcurrent()+0x26a>
  if (settings.cursens == Analoguedual) {
    2532:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2534:	2b01      	cmp	r3, #1
    2536:	f000 80ce 	beq.w	26d6 <getcurrent()+0x1f2>
    if (currentact > 500 || currentact < -500) {
    253a:	499f      	ldr	r1, [pc, #636]	; (27b8 <getcurrent()+0x2d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    253c:	4f9f      	ldr	r7, [pc, #636]	; (27bc <getcurrent()+0x2d8>)
    253e:	4628      	mov	r0, r5
    2540:	f00b f988 	bl	d854 <__aeabi_fcmpgt>
    2544:	b930      	cbnz	r0, 2554 <getcurrent()+0x70>
    2546:	499e      	ldr	r1, [pc, #632]	; (27c0 <getcurrent()+0x2dc>)
    2548:	4628      	mov	r0, r5
    254a:	f00b f965 	bl	d818 <__aeabi_fcmplt>
    254e:	2800      	cmp	r0, #0
    2550:	f000 825b 	beq.w	2a0a <getcurrent()+0x526>
    2554:	683b      	ldr	r3, [r7, #0]
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2556:	f8df a26c 	ldr.w	sl, [pc, #620]	; 27c4 <getcurrent()+0x2e0>
    255a:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    255c:	9809      	ldr	r0, [sp, #36]	; 0x24
    255e:	f8da 3000 	ldr.w	r3, [sl]
    2562:	f8df 9264 	ldr.w	r9, [pc, #612]	; 27c8 <getcurrent()+0x2e4>
    2566:	1ac0      	subs	r0, r0, r3
    2568:	f00a ff60 	bl	d42c <__aeabi_ui2f>
    256c:	4629      	mov	r1, r5
    256e:	f00a ffb5 	bl	d4dc <__aeabi_fmul>
    2572:	4996      	ldr	r1, [pc, #600]	; (27cc <getcurrent()+0x2e8>)
    2574:	f00b f866 	bl	d644 <__aeabi_fdiv>
    2578:	4994      	ldr	r1, [pc, #592]	; (27cc <getcurrent()+0x2e8>)
    257a:	f00b f863 	bl	d644 <__aeabi_fdiv>
    257e:	f8d9 1000 	ldr.w	r1, [r9]
    2582:	f00a fea3 	bl	d2cc <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2586:	683b      	ldr	r3, [r7, #0]
    2588:	9308      	str	r3, [sp, #32]
	return ret;
    258a:	9b08      	ldr	r3, [sp, #32]
    258c:	f8c9 0000 	str.w	r0, [r9]
      lasttime = millis();
    2590:	f8ca 3000 	str.w	r3, [sl]
  currentact = settings.ncur * currentact;
    2594:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
  AverageCurrent = myRA.reading(currentact);
    2598:	4c8d      	ldr	r4, [pc, #564]	; (27d0 <getcurrent()+0x2ec>)
  currentact = settings.ncur * currentact;
    259a:	f00a ff4b 	bl	d434 <__aeabi_i2f>
    259e:	4629      	mov	r1, r5
    25a0:	f00a ff9c 	bl	d4dc <__aeabi_fmul>
  RawCur = 0;
    25a4:	2300      	movs	r3, #0
    25a6:	6033      	str	r3, [r6, #0]
  currentact = settings.ncur * currentact;
    25a8:	f8c8 0000 	str.w	r0, [r8]
  AverageCurrent = myRA.reading(currentact);
    25ac:	f00b f95c 	bl	d868 <__aeabi_f2iz>
    25b0:	4601      	mov	r1, r0
    25b2:	4888      	ldr	r0, [pc, #544]	; (27d4 <getcurrent()+0x2f0>)
    25b4:	f007 f8e2 	bl	977c <movingAvg::reading(int)>
    25b8:	f00a ff3c 	bl	d434 <__aeabi_i2f>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25bc:	683b      	ldr	r3, [r7, #0]
  if (millis() - curloop1 > 1000) {
    25be:	4a86      	ldr	r2, [pc, #536]	; (27d8 <getcurrent()+0x2f4>)
    25c0:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    25c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    25c4:	6811      	ldr	r1, [r2, #0]
  AverageCurrent = myRA.reading(currentact);
    25c6:	6020      	str	r0, [r4, #0]
  if (millis() - curloop1 > 1000) {
    25c8:	1a5b      	subs	r3, r3, r1
    25ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    25ce:	f200 8117 	bhi.w	2800 <getcurrent()+0x31c>
}
    25d2:	b00e      	add	sp, #56	; 0x38
    25d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      adc->adc0->startContinuous(ACUR1);
    25d8:	4d80      	ldr	r5, [pc, #512]	; (27dc <getcurrent()+0x2f8>)
      sensor = 1;
    25da:	4f81      	ldr	r7, [pc, #516]	; (27e0 <getcurrent()+0x2fc>)
      adc->adc0->startContinuous(ACUR1);
    25dc:	682a      	ldr	r2, [r5, #0]
    25de:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 27a8 <getcurrent()+0x2c4>
    25e2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      sensor = 1;
    25e6:	2301      	movs	r3, #1
      adc->adc0->startContinuous(ACUR1);
    25e8:	210f      	movs	r1, #15
      sensor = 1;
    25ea:	603b      	str	r3, [r7, #0]
      adc->adc0->startContinuous(ACUR1);
    25ec:	f006 ff42 	bl	9474 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    25f0:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    25f2:	4f6e      	ldr	r7, [pc, #440]	; (27ac <getcurrent()+0x2c8>)
    if (sensor == 1) {
    25f4:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    25f6:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    25f8:	f000 8194 	beq.w	2924 <getcurrent()+0x440>
      if (debugCur != 0) {
    25fc:	2b00      	cmp	r3, #0
    25fe:	f040 8218 	bne.w	2a32 <getcurrent()+0x54e>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2602:	682b      	ldr	r3, [r5, #0]
    2604:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 27e4 <getcurrent()+0x300>
    2608:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    260c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    260e:	691e      	ldr	r6, [r3, #16]
    2610:	b2b6      	uxth	r6, r6
    2612:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2616:	f006 fc81 	bl	8f1c <ADC_Module::getMaxValue()>
    261a:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
    261e:	f640 43e4 	movw	r3, #3300	; 0xce4
    2622:	fb06 f303 	mul.w	r3, r6, r3
    2626:	fbb3 f0f0 	udiv	r0, r3, r0
    262a:	1a80      	subs	r0, r0, r2
    262c:	b200      	sxth	r0, r0
    262e:	f00a ff01 	bl	d434 <__aeabi_i2f>
    2632:	496d      	ldr	r1, [pc, #436]	; (27e8 <getcurrent()+0x304>)
    2634:	4606      	mov	r6, r0
    2636:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    263a:	f00a ff4f 	bl	d4dc <__aeabi_fmul>
    263e:	4601      	mov	r1, r0
    2640:	4630      	mov	r0, r6
    2642:	f00a ffff 	bl	d644 <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2646:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    264a:	4e59      	ldr	r6, [pc, #356]	; (27b0 <getcurrent()+0x2cc>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    264c:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    264e:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2650:	f300 81e3 	bgt.w	2a1a <getcurrent()+0x536>
        RawCur = 0;
    2654:	2300      	movs	r3, #0
    2656:	6033      	str	r3, [r6, #0]
      if (debugCur != 0) {
    2658:	683b      	ldr	r3, [r7, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	f43f af50 	beq.w	2500 <getcurrent()+0x1c>
    2660:	2102      	movs	r1, #2
    2662:	4862      	ldr	r0, [pc, #392]	; (27ec <getcurrent()+0x308>)
    2664:	f00a f854 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    2668:	682b      	ldr	r3, [r5, #0]
    266a:	f8d9 5000 	ldr.w	r5, [r9]
    266e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2672:	f640 43e4 	movw	r3, #3300	; 0xce4
    2676:	fb03 f505 	mul.w	r5, r3, r5
    267a:	f006 fc4f 	bl	8f1c <ADC_Module::getMaxValue()>
    267e:	fbb5 f0f0 	udiv	r0, r5, r0
    2682:	f00a fed3 	bl	d42c <__aeabi_ui2f>
    2686:	4605      	mov	r5, r0
    2688:	f8b4 008a 	ldrh.w	r0, [r4, #138]	; 0x8a
    268c:	f00a fed2 	bl	d434 <__aeabi_i2f>
    2690:	4601      	mov	r1, r0
    2692:	4628      	mov	r0, r5
    2694:	f00a fe18 	bl	d2c8 <__aeabi_fsub>
    2698:	f00a fcfc 	bl	d094 <__aeabi_f2d>
    269c:	2502      	movs	r5, #2
    269e:	4602      	mov	r2, r0
    26a0:	460b      	mov	r3, r1
    26a2:	9500      	str	r5, [sp, #0]
    26a4:	4852      	ldr	r0, [pc, #328]	; (27f0 <getcurrent()+0x30c>)
    26a6:	f007 fb87 	bl	9db8 <Print::printFloat(double, unsigned char)>
    26aa:	4629      	mov	r1, r5
    26ac:	484f      	ldr	r0, [pc, #316]	; (27ec <getcurrent()+0x308>)
    26ae:	f00a f82f 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    26b2:	6830      	ldr	r0, [r6, #0]
    26b4:	f00a fcee 	bl	d094 <__aeabi_f2d>
    26b8:	9500      	str	r5, [sp, #0]
    26ba:	4602      	mov	r2, r0
    26bc:	460b      	mov	r3, r1
    26be:	484c      	ldr	r0, [pc, #304]	; (27f0 <getcurrent()+0x30c>)
    26c0:	f007 fb7a 	bl	9db8 <Print::printFloat(double, unsigned char)>
    26c4:	4629      	mov	r1, r5
    26c6:	484b      	ldr	r0, [pc, #300]	; (27f4 <getcurrent()+0x310>)
    26c8:	f00a f822 	bl	c710 <usb_serial_write>
    26cc:	4629      	mov	r1, r5
    26ce:	4847      	ldr	r0, [pc, #284]	; (27ec <getcurrent()+0x308>)
    26d0:	f00a f81e 	bl	c710 <usb_serial_write>
    26d4:	e714      	b.n	2500 <getcurrent()+0x1c>
    if (sensor == 1) {
    26d6:	4b42      	ldr	r3, [pc, #264]	; (27e0 <getcurrent()+0x2fc>)
    26d8:	681b      	ldr	r3, [r3, #0]
    26da:	2b01      	cmp	r3, #1
    26dc:	f000 8208 	beq.w	2af0 <getcurrent()+0x60c>
    if (sensor == 2) {
    26e0:	2b02      	cmp	r3, #2
    26e2:	f040 8198 	bne.w	2a16 <getcurrent()+0x532>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1)) {
    26e6:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
    26ea:	4638      	mov	r0, r7
    26ec:	f00a fea2 	bl	d434 <__aeabi_i2f>
    26f0:	4629      	mov	r1, r5
    26f2:	f00b f891 	bl	d818 <__aeabi_fcmplt>
    26f6:	b940      	cbnz	r0, 270a <getcurrent()+0x226>
    26f8:	4278      	negs	r0, r7
    26fa:	f00a fe9b 	bl	d434 <__aeabi_i2f>
    26fe:	4629      	mov	r1, r5
    2700:	f00b f8a8 	bl	d854 <__aeabi_fcmpgt>
    2704:	2800      	cmp	r0, #0
    2706:	f000 826c 	beq.w	2be2 <getcurrent()+0x6fe>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    270a:	4f2c      	ldr	r7, [pc, #176]	; (27bc <getcurrent()+0x2d8>)
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    270c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 27c4 <getcurrent()+0x2e0>
    2710:	683b      	ldr	r3, [r7, #0]
    2712:	9306      	str	r3, [sp, #24]
	return ret;
    2714:	9806      	ldr	r0, [sp, #24]
    2716:	f8da 3000 	ldr.w	r3, [sl]
    271a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 27c8 <getcurrent()+0x2e4>
    271e:	1ac0      	subs	r0, r0, r3
    2720:	f00a fe84 	bl	d42c <__aeabi_ui2f>
    2724:	4629      	mov	r1, r5
    2726:	f00a fed9 	bl	d4dc <__aeabi_fmul>
    272a:	4928      	ldr	r1, [pc, #160]	; (27cc <getcurrent()+0x2e8>)
    272c:	f00a ff8a 	bl	d644 <__aeabi_fdiv>
    2730:	4926      	ldr	r1, [pc, #152]	; (27cc <getcurrent()+0x2e8>)
    2732:	f00a ff87 	bl	d644 <__aeabi_fdiv>
    2736:	f8d9 1000 	ldr.w	r1, [r9]
    273a:	f00a fdc7 	bl	d2cc <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    273e:	683b      	ldr	r3, [r7, #0]
    2740:	9305      	str	r3, [sp, #20]
	return ret;
    2742:	9b05      	ldr	r3, [sp, #20]
    2744:	f8c9 0000 	str.w	r0, [r9]
        lasttime = millis();
    2748:	f8ca 3000 	str.w	r3, [sl]
    274c:	e722      	b.n	2594 <getcurrent()+0xb0>
    SERIALCONSOLE.print(currentact);
    274e:	f00a fca1 	bl	d094 <__aeabi_f2d>
    2752:	460b      	mov	r3, r1
    2754:	2102      	movs	r1, #2
    2756:	4602      	mov	r2, r0
    2758:	9100      	str	r1, [sp, #0]
    275a:	4825      	ldr	r0, [pc, #148]	; (27f0 <getcurrent()+0x30c>)
    275c:	f007 fb2c 	bl	9db8 <Print::printFloat(double, unsigned char)>
    2760:	4825      	ldr	r0, [pc, #148]	; (27f8 <getcurrent()+0x314>)
    2762:	2104      	movs	r1, #4
    2764:	f009 ffd4 	bl	c710 <usb_serial_write>
      if (currentact > 500 || currentact < -500) {
    2768:	f8d8 5000 	ldr.w	r5, [r8]
    276c:	e6e1      	b.n	2532 <getcurrent()+0x4e>
    SERIALCONSOLE.print(lowpassFilter.output());
    276e:	4811      	ldr	r0, [pc, #68]	; (27b4 <getcurrent()+0x2d0>)
    2770:	f006 ff96 	bl	96a0 <FilterOnePole::output()>
    2774:	f00a fc8e 	bl	d094 <__aeabi_f2d>
    2778:	460b      	mov	r3, r1
    277a:	2102      	movs	r1, #2
    277c:	4602      	mov	r2, r0
    277e:	9100      	str	r1, [sp, #0]
    2780:	481b      	ldr	r0, [pc, #108]	; (27f0 <getcurrent()+0x30c>)
    2782:	f007 fb19 	bl	9db8 <Print::printFloat(double, unsigned char)>
    2786:	2103      	movs	r1, #3
    2788:	481c      	ldr	r0, [pc, #112]	; (27fc <getcurrent()+0x318>)
    278a:	f009 ffc1 	bl	c710 <usb_serial_write>
    SERIALCONSOLE.print(settings.changecur);
    278e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    2792:	4817      	ldr	r0, [pc, #92]	; (27f0 <getcurrent()+0x30c>)
    2794:	f007 fae6 	bl	9d64 <Print::print(long)>
    2798:	2103      	movs	r1, #3
    279a:	4818      	ldr	r0, [pc, #96]	; (27fc <getcurrent()+0x318>)
    279c:	f009 ffb8 	bl	c710 <usb_serial_write>
    27a0:	e6bd      	b.n	251e <getcurrent()+0x3a>
    27a2:	bf00      	nop
    27a4:	1fffc0b4 	.word	0x1fffc0b4
    27a8:	1fffbec0 	.word	0x1fffbec0
    27ac:	1fffbec8 	.word	0x1fffbec8
    27b0:	1fff8fe0 	.word	0x1fff8fe0
    27b4:	1fffbf08 	.word	0x1fffbf08
    27b8:	43fa0000 	.word	0x43fa0000
    27bc:	1fffc3b4 	.word	0x1fffc3b4
    27c0:	c3fa0000 	.word	0xc3fa0000
    27c4:	1fffbefc 	.word	0x1fffbefc
    27c8:	1fff9004 	.word	0x1fff9004
    27cc:	447a0000 	.word	0x447a0000
    27d0:	1fff8fac 	.word	0x1fff8fac
    27d4:	1fffc060 	.word	0x1fffc060
    27d8:	1fffbebc 	.word	0x1fffbebc
    27dc:	1fff8ffc 	.word	0x1fff8ffc
    27e0:	1fff8770 	.word	0x1fff8770
    27e4:	1fffc1a0 	.word	0x1fffc1a0
    27e8:	3727c5ac 	.word	0x3727c5ac
    27ec:	000155bc 	.word	0x000155bc
    27f0:	1fff8824 	.word	0x1fff8824
    27f4:	000148e8 	.word	0x000148e8
    27f8:	000148f0 	.word	0x000148f0
    27fc:	000148ec 	.word	0x000148ec
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2800:	683b      	ldr	r3, [r7, #0]
    2802:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    2804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    myRA.reset();
    2806:	48a5      	ldr	r0, [pc, #660]	; (2a9c <getcurrent()+0x5b8>)
    curloop1 = millis();
    2808:	6013      	str	r3, [r2, #0]
    myRA.reset();
    280a:	f006 ffe3 	bl	97d4 <movingAvg::reset()>
    AverageCurrentSec = myRASec.reading(AverageCurrent);
    280e:	6820      	ldr	r0, [r4, #0]
    2810:	4da3      	ldr	r5, [pc, #652]	; (2aa0 <getcurrent()+0x5bc>)
    2812:	f00b f829 	bl	d868 <__aeabi_f2iz>
    2816:	4601      	mov	r1, r0
    2818:	48a2      	ldr	r0, [pc, #648]	; (2aa4 <getcurrent()+0x5c0>)
    281a:	f006 ffaf 	bl	977c <movingAvg::reading(int)>
    281e:	f00a fe09 	bl	d434 <__aeabi_i2f>
    SecCount++;
    2822:	4aa1      	ldr	r2, [pc, #644]	; (2aa8 <getcurrent()+0x5c4>)
    AverageCurrentSec = myRASec.reading(AverageCurrent);
    2824:	6028      	str	r0, [r5, #0]
    SecCount++;
    2826:	6813      	ldr	r3, [r2, #0]
    2828:	3301      	adds	r3, #1
    if (SecCount >= 59) {
    282a:	2b3a      	cmp	r3, #58	; 0x3a
    282c:	f300 818d 	bgt.w	2b4a <getcurrent()+0x666>
    SecCount++;
    2830:	6013      	str	r3, [r2, #0]
    if (debugAvgCur != 0) {
    2832:	4b9e      	ldr	r3, [pc, #632]	; (2aac <getcurrent()+0x5c8>)
    2834:	681b      	ldr	r3, [r3, #0]
    2836:	2b00      	cmp	r3, #0
    2838:	f43f aecb 	beq.w	25d2 <getcurrent()+0xee>
      SERIALCONSOLE.println();
    283c:	489c      	ldr	r0, [pc, #624]	; (2ab0 <getcurrent()+0x5cc>)
    283e:	f007 fa99 	bl	9d74 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2842:	683b      	ldr	r3, [r7, #0]
    2844:	930d      	str	r3, [sp, #52]	; 0x34
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2846:	220a      	movs	r2, #10
    2848:	2300      	movs	r3, #0
	return ret;
    284a:	990d      	ldr	r1, [sp, #52]	; 0x34
    284c:	4898      	ldr	r0, [pc, #608]	; (2ab0 <getcurrent()+0x5cc>)
    284e:	f007 faa9 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2852:	2101      	movs	r1, #1
    2854:	4897      	ldr	r0, [pc, #604]	; (2ab4 <getcurrent()+0x5d0>)
    2856:	f009 ff5b 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print(currentact);
    285a:	f8d8 0000 	ldr.w	r0, [r8]
    285e:	f00a fc19 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2862:	2602      	movs	r6, #2
    2864:	4602      	mov	r2, r0
    2866:	460b      	mov	r3, r1
    2868:	9600      	str	r6, [sp, #0]
    286a:	4891      	ldr	r0, [pc, #580]	; (2ab0 <getcurrent()+0x5cc>)
    286c:	f007 faa4 	bl	9db8 <Print::printFloat(double, unsigned char)>
    2870:	2101      	movs	r1, #1
    2872:	4890      	ldr	r0, [pc, #576]	; (2ab4 <getcurrent()+0x5d0>)
    2874:	f009 ff4c 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print(AverageCurrent);
    2878:	6820      	ldr	r0, [r4, #0]
    287a:	f00a fc0b 	bl	d094 <__aeabi_f2d>
    287e:	9600      	str	r6, [sp, #0]
    2880:	4602      	mov	r2, r0
    2882:	460b      	mov	r3, r1
    2884:	488a      	ldr	r0, [pc, #552]	; (2ab0 <getcurrent()+0x5cc>)
    2886:	f007 fa97 	bl	9db8 <Print::printFloat(double, unsigned char)>
    288a:	2101      	movs	r1, #1
    288c:	4889      	ldr	r0, [pc, #548]	; (2ab4 <getcurrent()+0x5d0>)
    288e:	f009 ff3f 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print(AverageCurrentSec);
    2892:	6828      	ldr	r0, [r5, #0]
    2894:	f00a fbfe 	bl	d094 <__aeabi_f2d>
    2898:	9600      	str	r6, [sp, #0]
    289a:	4602      	mov	r2, r0
    289c:	460b      	mov	r3, r1
    289e:	4884      	ldr	r0, [pc, #528]	; (2ab0 <getcurrent()+0x5cc>)
    28a0:	f007 fa8a 	bl	9db8 <Print::printFloat(double, unsigned char)>
    28a4:	2101      	movs	r1, #1
    28a6:	4883      	ldr	r0, [pc, #524]	; (2ab4 <getcurrent()+0x5d0>)
    28a8:	f009 ff32 	bl	c710 <usb_serial_write>
      SERIALCONSOLE.print(AverageCurrentMin);
    28ac:	4b82      	ldr	r3, [pc, #520]	; (2ab8 <getcurrent()+0x5d4>)
    28ae:	6818      	ldr	r0, [r3, #0]
    28b0:	f00a fbf0 	bl	d094 <__aeabi_f2d>
    28b4:	9600      	str	r6, [sp, #0]
    28b6:	4602      	mov	r2, r0
    28b8:	460b      	mov	r3, r1
    28ba:	487d      	ldr	r0, [pc, #500]	; (2ab0 <getcurrent()+0x5cc>)
    28bc:	f007 fa7c 	bl	9db8 <Print::printFloat(double, unsigned char)>
}
    28c0:	b00e      	add	sp, #56	; 0x38
    28c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (currentact < settings.changecur && currentact > (settings.changecur * -1)) {
    28c6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 2abc <getcurrent()+0x5d8>
    28ca:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
    28ce:	f8d8 5000 	ldr.w	r5, [r8]
    28d2:	4638      	mov	r0, r7
    28d4:	f00a fdae 	bl	d434 <__aeabi_i2f>
    28d8:	4629      	mov	r1, r5
    28da:	f00a ffbb 	bl	d854 <__aeabi_fcmpgt>
    28de:	b188      	cbz	r0, 2904 <getcurrent()+0x420>
    28e0:	4278      	negs	r0, r7
    28e2:	f00a fda7 	bl	d434 <__aeabi_i2f>
    28e6:	4601      	mov	r1, r0
    28e8:	4628      	mov	r0, r5
    28ea:	f00a ffb3 	bl	d854 <__aeabi_fcmpgt>
    28ee:	b148      	cbz	r0, 2904 <getcurrent()+0x420>
        adc->adc0->startContinuous(ACUR1);
    28f0:	4d73      	ldr	r5, [pc, #460]	; (2ac0 <getcurrent()+0x5dc>)
        sensor = 1;
    28f2:	4f74      	ldr	r7, [pc, #464]	; (2ac4 <getcurrent()+0x5e0>)
        adc->adc0->startContinuous(ACUR1);
    28f4:	682b      	ldr	r3, [r5, #0]
        sensor = 1;
    28f6:	603e      	str	r6, [r7, #0]
        adc->adc0->startContinuous(ACUR1);
    28f8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    28fc:	210f      	movs	r1, #15
    28fe:	f006 fdb9 	bl	9474 <ADC_Module::startContinuous(unsigned char)>
    2902:	e675      	b.n	25f0 <getcurrent()+0x10c>
        sensor = 2;
    2904:	4f6f      	ldr	r7, [pc, #444]	; (2ac4 <getcurrent()+0x5e0>)
        adc->adc0->startContinuous(ACUR2);
    2906:	4d6e      	ldr	r5, [pc, #440]	; (2ac0 <getcurrent()+0x5dc>)
        sensor = 2;
    2908:	2302      	movs	r3, #2
    290a:	603b      	str	r3, [r7, #0]
        adc->adc0->startContinuous(ACUR2);
    290c:	682b      	ldr	r3, [r5, #0]
    290e:	210e      	movs	r1, #14
    2910:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2914:	f006 fdae 	bl	9474 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2918:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    291a:	4f6b      	ldr	r7, [pc, #428]	; (2ac8 <getcurrent()+0x5e4>)
    if (sensor == 1) {
    291c:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    291e:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2920:	f47f ae6c 	bne.w	25fc <getcurrent()+0x118>
      if (debugCur != 0) {
    2924:	2b00      	cmp	r3, #0
    2926:	f040 811d 	bne.w	2b64 <getcurrent()+0x680>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    292a:	682b      	ldr	r3, [r5, #0]
    292c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 2acc <getcurrent()+0x5e8>
    2930:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2934:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2936:	691e      	ldr	r6, [r3, #16]
    2938:	b2b6      	uxth	r6, r6
    293a:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    293e:	f006 faed 	bl	8f1c <ADC_Module::getMaxValue()>
    2942:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    2946:	f640 4ae4 	movw	sl, #3300	; 0xce4
    294a:	fb0a f606 	mul.w	r6, sl, r6
    294e:	fbb6 f6f0 	udiv	r6, r6, r0
    2952:	1af0      	subs	r0, r6, r3
    2954:	b200      	sxth	r0, r0
    2956:	f00a fd6d 	bl	d434 <__aeabi_i2f>
    295a:	495d      	ldr	r1, [pc, #372]	; (2ad0 <getcurrent()+0x5ec>)
    295c:	4606      	mov	r6, r0
    295e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2962:	f00a fdbb 	bl	d4dc <__aeabi_fmul>
    2966:	4601      	mov	r1, r0
    2968:	4630      	mov	r0, r6
    296a:	f00a fe6b 	bl	d644 <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    296e:	682b      	ldr	r3, [r5, #0]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    2970:	4e58      	ldr	r6, [pc, #352]	; (2ad4 <getcurrent()+0x5f0>)
    2972:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    2974:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2978:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    297c:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    297e:	fb0a fa03 	mul.w	sl, sl, r3
    2982:	f006 facb 	bl	8f1c <ADC_Module::getMaxValue()>
    2986:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    298a:	fbba f3f0 	udiv	r3, sl, r0
    298e:	b21b      	sxth	r3, r3
    2990:	1a9b      	subs	r3, r3, r2
    2992:	2b00      	cmp	r3, #0
    2994:	f8b4 20be 	ldrh.w	r2, [r4, #190]	; 0xbe
    2998:	bfb8      	it	lt
    299a:	425b      	neglt	r3, r3
    299c:	429a      	cmp	r2, r3
        RawCur = 0;
    299e:	bfc4      	itt	gt
    29a0:	2300      	movgt	r3, #0
    29a2:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0) {
    29a4:	683b      	ldr	r3, [r7, #0]
    29a6:	2b00      	cmp	r3, #0
    29a8:	f43f adaa 	beq.w	2500 <getcurrent()+0x1c>
    29ac:	2102      	movs	r1, #2
    29ae:	484a      	ldr	r0, [pc, #296]	; (2ad8 <getcurrent()+0x5f4>)
    29b0:	f009 feae 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    29b4:	682b      	ldr	r3, [r5, #0]
    29b6:	f8d9 5000 	ldr.w	r5, [r9]
    29ba:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    29be:	f640 43e4 	movw	r3, #3300	; 0xce4
    29c2:	fb03 f505 	mul.w	r5, r3, r5
    29c6:	f006 faa9 	bl	8f1c <ADC_Module::getMaxValue()>
    29ca:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    29ce:	fbb5 f5f0 	udiv	r5, r5, r0
    29d2:	b22d      	sxth	r5, r5
	size_t print(int n)				{ return print((long)n); }
    29d4:	1a69      	subs	r1, r5, r1
    29d6:	4836      	ldr	r0, [pc, #216]	; (2ab0 <getcurrent()+0x5cc>)
    29d8:	f007 f9c4 	bl	9d64 <Print::print(long)>
    29dc:	2102      	movs	r1, #2
    29de:	483e      	ldr	r0, [pc, #248]	; (2ad8 <getcurrent()+0x5f4>)
    29e0:	f009 fe96 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    29e4:	6830      	ldr	r0, [r6, #0]
    29e6:	f00a fb55 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    29ea:	2502      	movs	r5, #2
    29ec:	4602      	mov	r2, r0
    29ee:	460b      	mov	r3, r1
    29f0:	9500      	str	r5, [sp, #0]
    29f2:	482f      	ldr	r0, [pc, #188]	; (2ab0 <getcurrent()+0x5cc>)
    29f4:	f007 f9e0 	bl	9db8 <Print::printFloat(double, unsigned char)>
    29f8:	2103      	movs	r1, #3
    29fa:	4838      	ldr	r0, [pc, #224]	; (2adc <getcurrent()+0x5f8>)
    29fc:	f009 fe88 	bl	c710 <usb_serial_write>
    2a00:	4629      	mov	r1, r5
    2a02:	4835      	ldr	r0, [pc, #212]	; (2ad8 <getcurrent()+0x5f4>)
    2a04:	f009 fe84 	bl	c710 <usb_serial_write>
    2a08:	e57a      	b.n	2500 <getcurrent()+0x1c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a0a:	683a      	ldr	r2, [r7, #0]
      lasttime = millis();
    2a0c:	4b34      	ldr	r3, [pc, #208]	; (2ae0 <getcurrent()+0x5fc>)
    2a0e:	920a      	str	r2, [sp, #40]	; 0x28
	return ret;
    2a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2a12:	601a      	str	r2, [r3, #0]
    2a14:	e5be      	b.n	2594 <getcurrent()+0xb0>
    2a16:	4f33      	ldr	r7, [pc, #204]	; (2ae4 <getcurrent()+0x600>)
    2a18:	e5bc      	b.n	2594 <getcurrent()+0xb0>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2a1a:	682b      	ldr	r3, [r5, #0]
    2a1c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2a20:	f006 fa7c 	bl	8f1c <ADC_Module::getMaxValue()>
    2a24:	f8d9 3000 	ldr.w	r3, [r9]
    2a28:	3864      	subs	r0, #100	; 0x64
    2a2a:	4298      	cmp	r0, r3
    2a2c:	f4ff ae12 	bcc.w	2654 <getcurrent()+0x170>
    2a30:	e612      	b.n	2658 <getcurrent()+0x174>
        SERIALCONSOLE.println();
    2a32:	481f      	ldr	r0, [pc, #124]	; (2ab0 <getcurrent()+0x5cc>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a34:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2acc <getcurrent()+0x5e8>
        SERIALCONSOLE.println();
    2a38:	f007 f99c 	bl	9d74 <Print::println()>
    2a3c:	210c      	movs	r1, #12
    2a3e:	482a      	ldr	r0, [pc, #168]	; (2ae8 <getcurrent()+0x604>)
    2a40:	f009 fe66 	bl	c710 <usb_serial_write>
    2a44:	4829      	ldr	r0, [pc, #164]	; (2aec <getcurrent()+0x608>)
    2a46:	210c      	movs	r1, #12
    2a48:	f009 fe62 	bl	c710 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a4c:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    2a4e:	683a      	ldr	r2, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a50:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2a54:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2a56:	691e      	ldr	r6, [r3, #16]
    2a58:	b2b6      	uxth	r6, r6
    2a5a:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    2a5e:	2a00      	cmp	r2, #0
    2a60:	f43f add9 	beq.w	2616 <getcurrent()+0x132>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset2)
    2a64:	f006 fa5a 	bl	8f1c <ADC_Module::getMaxValue()>
    2a68:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2a6c:	2300      	movs	r3, #0
    2a6e:	fb06 f202 	mul.w	r2, r6, r2
    2a72:	fbb2 f1f0 	udiv	r1, r2, r0
    2a76:	220a      	movs	r2, #10
    2a78:	480d      	ldr	r0, [pc, #52]	; (2ab0 <getcurrent()+0x5cc>)
    2a7a:	f007 f993 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2a7e:	2102      	movs	r1, #2
    2a80:	4815      	ldr	r0, [pc, #84]	; (2ad8 <getcurrent()+0x5f4>)
    2a82:	f009 fe45 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2a86:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    2a8a:	4809      	ldr	r0, [pc, #36]	; (2ab0 <getcurrent()+0x5cc>)
    2a8c:	f007 f96a 	bl	9d64 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2a90:	682b      	ldr	r3, [r5, #0]
    2a92:	f8d9 6000 	ldr.w	r6, [r9]
    2a96:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2a9a:	e5bc      	b.n	2616 <getcurrent()+0x132>
    2a9c:	1fffc060 	.word	0x1fffc060
    2aa0:	1fff8fb4 	.word	0x1fff8fb4
    2aa4:	1fffc088 	.word	0x1fffc088
    2aa8:	1fff8ff4 	.word	0x1fff8ff4
    2aac:	1fffbec4 	.word	0x1fffbec4
    2ab0:	1fff8824 	.word	0x1fff8824
    2ab4:	00014740 	.word	0x00014740
    2ab8:	1fff8fb0 	.word	0x1fff8fb0
    2abc:	1fffbec0 	.word	0x1fffbec0
    2ac0:	1fff8ffc 	.word	0x1fff8ffc
    2ac4:	1fff8770 	.word	0x1fff8770
    2ac8:	1fffbec8 	.word	0x1fffbec8
    2acc:	1fffc1a0 	.word	0x1fffc1a0
    2ad0:	3727c5ac 	.word	0x3727c5ac
    2ad4:	1fff8fe0 	.word	0x1fff8fe0
    2ad8:	000155bc 	.word	0x000155bc
    2adc:	000148d4 	.word	0x000148d4
    2ae0:	1fffbefc 	.word	0x1fffbefc
    2ae4:	1fffc3b4 	.word	0x1fffc3b4
    2ae8:	000148d8 	.word	0x000148d8
    2aec:	000148c4 	.word	0x000148c4
      if (currentact > 500 || currentact < -500) {
    2af0:	493f      	ldr	r1, [pc, #252]	; (2bf0 <getcurrent()+0x70c>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2af2:	4f40      	ldr	r7, [pc, #256]	; (2bf4 <getcurrent()+0x710>)
    2af4:	4628      	mov	r0, r5
    2af6:	f00a fead 	bl	d854 <__aeabi_fcmpgt>
    2afa:	b928      	cbnz	r0, 2b08 <getcurrent()+0x624>
    2afc:	493e      	ldr	r1, [pc, #248]	; (2bf8 <getcurrent()+0x714>)
    2afe:	4628      	mov	r0, r5
    2b00:	f00a fe8a 	bl	d818 <__aeabi_fcmplt>
    2b04:	2800      	cmp	r0, #0
    2b06:	d066      	beq.n	2bd6 <getcurrent()+0x6f2>
    2b08:	683b      	ldr	r3, [r7, #0]
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2b0a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2bfc <getcurrent()+0x718>
    2b0e:	9303      	str	r3, [sp, #12]
	return ret;
    2b10:	9803      	ldr	r0, [sp, #12]
    2b12:	f8da 3000 	ldr.w	r3, [sl]
    2b16:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 2c00 <getcurrent()+0x71c>
    2b1a:	1ac0      	subs	r0, r0, r3
    2b1c:	f00a fc86 	bl	d42c <__aeabi_ui2f>
    2b20:	4629      	mov	r1, r5
    2b22:	f00a fcdb 	bl	d4dc <__aeabi_fmul>
    2b26:	4937      	ldr	r1, [pc, #220]	; (2c04 <getcurrent()+0x720>)
    2b28:	f00a fd8c 	bl	d644 <__aeabi_fdiv>
    2b2c:	4935      	ldr	r1, [pc, #212]	; (2c04 <getcurrent()+0x720>)
    2b2e:	f00a fd89 	bl	d644 <__aeabi_fdiv>
    2b32:	f8d9 1000 	ldr.w	r1, [r9]
    2b36:	f00a fbc9 	bl	d2cc <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2b3a:	683b      	ldr	r3, [r7, #0]
    2b3c:	9302      	str	r3, [sp, #8]
	return ret;
    2b3e:	9b02      	ldr	r3, [sp, #8]
    2b40:	f8c9 0000 	str.w	r0, [r9]
        lasttime = millis();
    2b44:	f8ca 3000 	str.w	r3, [sl]
    2b48:	e524      	b.n	2594 <getcurrent()+0xb0>
      SecCount = 0;
    2b4a:	2300      	movs	r3, #0
    2b4c:	6013      	str	r3, [r2, #0]
      AverageCurrentMin = myRAMin.reading(AverageCurrentSec);
    2b4e:	f00a fe8b 	bl	d868 <__aeabi_f2iz>
    2b52:	4601      	mov	r1, r0
    2b54:	482c      	ldr	r0, [pc, #176]	; (2c08 <getcurrent()+0x724>)
    2b56:	f006 fe11 	bl	977c <movingAvg::reading(int)>
    2b5a:	f00a fc6b 	bl	d434 <__aeabi_i2f>
    2b5e:	4b2b      	ldr	r3, [pc, #172]	; (2c0c <getcurrent()+0x728>)
    2b60:	6018      	str	r0, [r3, #0]
    2b62:	e666      	b.n	2832 <getcurrent()+0x34e>
        SERIALCONSOLE.println();
    2b64:	482a      	ldr	r0, [pc, #168]	; (2c10 <getcurrent()+0x72c>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2b66:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2c14 <getcurrent()+0x730>
        SERIALCONSOLE.println();
    2b6a:	f007 f903 	bl	9d74 <Print::println()>
        if (settings.cursens == Analoguedual) {
    2b6e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2b70:	2b01      	cmp	r3, #1
    2b72:	bf0c      	ite	eq
    2b74:	4828      	ldreq	r0, [pc, #160]	; (2c18 <getcurrent()+0x734>)
    2b76:	4829      	ldrne	r0, [pc, #164]	; (2c1c <getcurrent()+0x738>)
    2b78:	210b      	movs	r1, #11
    2b7a:	f009 fdc9 	bl	c710 <usb_serial_write>
    2b7e:	4828      	ldr	r0, [pc, #160]	; (2c20 <getcurrent()+0x73c>)
    2b80:	210c      	movs	r1, #12
    2b82:	f009 fdc5 	bl	c710 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2b86:	682a      	ldr	r2, [r5, #0]
      if (debugCur != 0) {
    2b88:	683b      	ldr	r3, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2b8a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    2b8e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    2b90:	6916      	ldr	r6, [r2, #16]
    2b92:	b2b6      	uxth	r6, r6
    2b94:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    2b98:	2b00      	cmp	r3, #0
    2b9a:	f43f aed0 	beq.w	293e <getcurrent()+0x45a>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset1)
    2b9e:	f006 f9bd 	bl	8f1c <ADC_Module::getMaxValue()>
    2ba2:	f640 43e4 	movw	r3, #3300	; 0xce4
    2ba6:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2baa:	220a      	movs	r2, #10
    2bac:	fbb3 f1f0 	udiv	r1, r3, r0
    2bb0:	2300      	movs	r3, #0
    2bb2:	4817      	ldr	r0, [pc, #92]	; (2c10 <getcurrent()+0x72c>)
    2bb4:	f007 f8f6 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2bb8:	2101      	movs	r1, #1
    2bba:	481a      	ldr	r0, [pc, #104]	; (2c24 <getcurrent()+0x740>)
    2bbc:	f009 fda8 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2bc0:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    2bc4:	4812      	ldr	r0, [pc, #72]	; (2c10 <getcurrent()+0x72c>)
    2bc6:	f007 f8cd 	bl	9d64 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    2bca:	682b      	ldr	r3, [r5, #0]
    2bcc:	f8d9 6000 	ldr.w	r6, [r9]
    2bd0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2bd4:	e6b3      	b.n	293e <getcurrent()+0x45a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2bd6:	683a      	ldr	r2, [r7, #0]
        lasttime = millis();
    2bd8:	4b08      	ldr	r3, [pc, #32]	; (2bfc <getcurrent()+0x718>)
    2bda:	9204      	str	r2, [sp, #16]
	return ret;
    2bdc:	9a04      	ldr	r2, [sp, #16]
    2bde:	601a      	str	r2, [r3, #0]
    2be0:	e4d8      	b.n	2594 <getcurrent()+0xb0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2be2:	4f04      	ldr	r7, [pc, #16]	; (2bf4 <getcurrent()+0x710>)
        lasttime = millis();
    2be4:	4b05      	ldr	r3, [pc, #20]	; (2bfc <getcurrent()+0x718>)
    2be6:	683a      	ldr	r2, [r7, #0]
    2be8:	9207      	str	r2, [sp, #28]
	return ret;
    2bea:	9a07      	ldr	r2, [sp, #28]
    2bec:	601a      	str	r2, [r3, #0]
    2bee:	e4d1      	b.n	2594 <getcurrent()+0xb0>
    2bf0:	43fa0000 	.word	0x43fa0000
    2bf4:	1fffc3b4 	.word	0x1fffc3b4
    2bf8:	c3fa0000 	.word	0xc3fa0000
    2bfc:	1fffbefc 	.word	0x1fffbefc
    2c00:	1fff9004 	.word	0x1fff9004
    2c04:	447a0000 	.word	0x447a0000
    2c08:	1fffc074 	.word	0x1fffc074
    2c0c:	1fff8fb0 	.word	0x1fff8fb0
    2c10:	1fff8824 	.word	0x1fff8824
    2c14:	1fffc1a0 	.word	0x1fffc1a0
    2c18:	000148ac 	.word	0x000148ac
    2c1c:	000148b8 	.word	0x000148b8
    2c20:	000148c4 	.word	0x000148c4
    2c24:	00014740 	.word	0x00014740

00002c28 <updateSOC()>:
void updateSOC() {
    2c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   if (SOCreset == 1) {
    2c2c:	4da7      	ldr	r5, [pc, #668]	; (2ecc <updateSOC()+0x2a4>)
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2c2e:	4ca8      	ldr	r4, [pc, #672]	; (2ed0 <updateSOC()+0x2a8>)
   if (SOCreset == 1) {
    2c30:	682b      	ldr	r3, [r5, #0]
    2c32:	2b01      	cmp	r3, #1
void updateSOC() {
    2c34:	b087      	sub	sp, #28
   if (SOCreset == 1) {
    2c36:	f000 8108 	beq.w	2e4a <updateSOC()+0x222>
    2c3a:	4ea6      	ldr	r6, [pc, #664]	; (2ed4 <updateSOC()+0x2ac>)
    2c3c:	4fa6      	ldr	r7, [pc, #664]	; (2ed8 <updateSOC()+0x2b0>)
  if (SOCset == 0 && SOCmem == 0) {
    2c3e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 2edc <updateSOC()+0x2b4>
    2c42:	f8d9 3000 	ldr.w	r3, [r9]
    2c46:	2b00      	cmp	r3, #0
    2c48:	f000 80a4 	beq.w	2d94 <updateSOC()+0x16c>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2c4c:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    2c50:	6da5      	ldr	r5, [r4, #88]	; 0x58
    2c52:	f8df 828c 	ldr.w	r8, [pc, #652]	; 2ee0 <updateSOC()+0x2b8>
    2c56:	49a3      	ldr	r1, [pc, #652]	; (2ee4 <updateSOC()+0x2bc>)
    2c58:	6838      	ldr	r0, [r7, #0]
    2c5a:	f00a fc3f 	bl	d4dc <__aeabi_fmul>
    2c5e:	fb05 f50b 	mul.w	r5, r5, fp
    2c62:	4681      	mov	r9, r0
    2c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2c68:	fb05 f000 	mul.w	r0, r5, r0
    2c6c:	f00a fbe2 	bl	d434 <__aeabi_i2f>
    2c70:	4601      	mov	r1, r0
    2c72:	4648      	mov	r0, r9
    2c74:	f00a fce6 	bl	d644 <__aeabi_fdiv>
    2c78:	499b      	ldr	r1, [pc, #620]	; (2ee8 <updateSOC()+0x2c0>)
    2c7a:	f00a fc2f 	bl	d4dc <__aeabi_fmul>
    2c7e:	f00a fdf3 	bl	d868 <__aeabi_f2iz>
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    2c82:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2c86:	6030      	str	r0, [r6, #0]
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    2c88:	2b01      	cmp	r3, #1
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2c8a:	4605      	mov	r5, r0
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    2c8c:	d054      	beq.n	2d38 <updateSOC()+0x110>
    2c8e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2c90:	2b00      	cmp	r3, #0
    2c92:	d051      	beq.n	2d38 <updateSOC()+0x110>
  if (SOC >= 100) {
    2c94:	2d63      	cmp	r5, #99	; 0x63
    2c96:	dd72      	ble.n	2d7e <updateSOC()+0x156>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    2c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2c9a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    2c9c:	fb03 f000 	mul.w	r0, r3, r0
    2ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2ca4:	fb03 f000 	mul.w	r0, r3, r0
    2ca8:	f00a fbc4 	bl	d434 <__aeabi_i2f>
    2cac:	498d      	ldr	r1, [pc, #564]	; (2ee4 <updateSOC()+0x2bc>)
    2cae:	f00a fcc9 	bl	d644 <__aeabi_fdiv>
    SOC = 100;
    2cb2:	2364      	movs	r3, #100	; 0x64
    2cb4:	6033      	str	r3, [r6, #0]
  if (debug != 0) {
    2cb6:	f8d8 3000 	ldr.w	r3, [r8]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    2cba:	6038      	str	r0, [r7, #0]
  if (debug != 0) {
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d066      	beq.n	2d8e <updateSOC()+0x166>
    if (settings.cursens == Analoguedual) {
    2cc0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2cc2:	2b01      	cmp	r3, #1
    2cc4:	f000 80e8 	beq.w	2e98 <updateSOC()+0x270>
    if (settings.cursens == Analoguesing) {
    2cc8:	2b03      	cmp	r3, #3
    2cca:	f000 80f2 	beq.w	2eb2 <updateSOC()+0x28a>
    if (settings.cursens == Canbus) {
    2cce:	2b02      	cmp	r3, #2
    2cd0:	f000 80f7 	beq.w	2ec2 <updateSOC()+0x29a>
    2cd4:	2102      	movs	r1, #2
    2cd6:	4885      	ldr	r0, [pc, #532]	; (2eec <updateSOC()+0x2c4>)
    2cd8:	f009 fd1a 	bl	c710 <usb_serial_write>
    SERIALCONSOLE.print(currentact);
    2cdc:	4b84      	ldr	r3, [pc, #528]	; (2ef0 <updateSOC()+0x2c8>)
    2cde:	6818      	ldr	r0, [r3, #0]
    2ce0:	f00a f9d8 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2ce4:	2402      	movs	r4, #2
    2ce6:	4602      	mov	r2, r0
    2ce8:	460b      	mov	r3, r1
    2cea:	9400      	str	r4, [sp, #0]
    2cec:	4881      	ldr	r0, [pc, #516]	; (2ef4 <updateSOC()+0x2cc>)
    2cee:	f007 f863 	bl	9db8 <Print::printFloat(double, unsigned char)>
    2cf2:	4621      	mov	r1, r4
    2cf4:	4880      	ldr	r0, [pc, #512]	; (2ef8 <updateSOC()+0x2d0>)
    2cf6:	f009 fd0b 	bl	c710 <usb_serial_write>
    2cfa:	4621      	mov	r1, r4
    2cfc:	487b      	ldr	r0, [pc, #492]	; (2eec <updateSOC()+0x2c4>)
    2cfe:	f009 fd07 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2d02:	6831      	ldr	r1, [r6, #0]
    2d04:	487b      	ldr	r0, [pc, #492]	; (2ef4 <updateSOC()+0x2cc>)
    2d06:	f007 f82d 	bl	9d64 <Print::print(long)>
    2d0a:	2106      	movs	r1, #6
    2d0c:	487b      	ldr	r0, [pc, #492]	; (2efc <updateSOC()+0x2d4>)
    2d0e:	f009 fcff 	bl	c710 <usb_serial_write>
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    2d12:	6838      	ldr	r0, [r7, #0]
    2d14:	4973      	ldr	r1, [pc, #460]	; (2ee4 <updateSOC()+0x2bc>)
    2d16:	f00a fbe1 	bl	d4dc <__aeabi_fmul>
    2d1a:	f00a f9bb 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2d1e:	9400      	str	r4, [sp, #0]
    2d20:	4602      	mov	r2, r0
    2d22:	460b      	mov	r3, r1
    2d24:	4873      	ldr	r0, [pc, #460]	; (2ef4 <updateSOC()+0x2cc>)
    2d26:	f007 f847 	bl	9db8 <Print::printFloat(double, unsigned char)>
    2d2a:	4875      	ldr	r0, [pc, #468]	; (2f00 <updateSOC()+0x2d8>)
    2d2c:	2103      	movs	r1, #3
}
    2d2e:	b007      	add	sp, #28
    2d30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d34:	f009 bcec 	b.w	c710 <usb_serial_write>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2d38:	4872      	ldr	r0, [pc, #456]	; (2f04 <updateSOC()+0x2dc>)
    2d3a:	f7fe f817 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    2d3e:	4972      	ldr	r1, [pc, #456]	; (2f08 <updateSOC()+0x2e0>)
    2d40:	f00a fbcc 	bl	d4dc <__aeabi_fmul>
    2d44:	f00a fdb6 	bl	d8b4 <__aeabi_f2uiz>
    2d48:	6f65      	ldr	r5, [r4, #116]	; 0x74
    2d4a:	6f22      	ldr	r2, [r4, #112]	; 0x70
    2d4c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    2d4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    2d50:	9500      	str	r5, [sp, #0]
    2d52:	b280      	uxth	r0, r0
    2d54:	f7fe fee4 	bl	1b20 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    2d58:	4605      	mov	r5, r0
    2d5a:	6030      	str	r0, [r6, #0]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2d5c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    2d5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2d60:	fb05 f000 	mul.w	r0, r5, r0
    2d64:	fb03 f000 	mul.w	r0, r3, r0
    2d68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2d6c:	0040      	lsls	r0, r0, #1
    2d6e:	f00a fb61 	bl	d434 <__aeabi_i2f>
    2d72:	495c      	ldr	r1, [pc, #368]	; (2ee4 <updateSOC()+0x2bc>)
    2d74:	f00a fc66 	bl	d644 <__aeabi_fdiv>
  if (SOC >= 100) {
    2d78:	2d63      	cmp	r5, #99	; 0x63
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2d7a:	6038      	str	r0, [r7, #0]
  if (SOC >= 100) {
    2d7c:	dc8c      	bgt.n	2c98 <updateSOC()+0x70>
  if (SOC < 0) {
    2d7e:	2d00      	cmp	r5, #0
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    2d80:	bfbc      	itt	lt
    2d82:	2300      	movlt	r3, #0
    2d84:	6033      	strlt	r3, [r6, #0]
  if (debug != 0) {
    2d86:	f8d8 3000 	ldr.w	r3, [r8]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d198      	bne.n	2cc0 <updateSOC()+0x98>
}
    2d8e:	b007      	add	sp, #28
    2d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (SOCset == 0 && SOCmem == 0) {
    2d94:	f8df a174 	ldr.w	sl, [pc, #372]	; 2f0c <updateSOC()+0x2e4>
    2d98:	f8da 3000 	ldr.w	r3, [sl]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d037      	beq.n	2e10 <updateSOC()+0x1e8>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2da0:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    2da4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    2da6:	f8df 8138 	ldr.w	r8, [pc, #312]	; 2ee0 <updateSOC()+0x2b8>
  if (SOCset == 0 && SOCmem == 1) {
    2daa:	2b01      	cmp	r3, #1
    2dac:	f47f af53 	bne.w	2c56 <updateSOC()+0x2e>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2db0:	6830      	ldr	r0, [r6, #0]
    2db2:	fb00 f00b 	mul.w	r0, r0, fp
    2db6:	fb05 f000 	mul.w	r0, r5, r0
    2dba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2dbe:	4d54      	ldr	r5, [pc, #336]	; (2f10 <updateSOC()+0x2e8>)
    2dc0:	0040      	lsls	r0, r0, #1
    2dc2:	f00a fb37 	bl	d434 <__aeabi_i2f>
    2dc6:	4947      	ldr	r1, [pc, #284]	; (2ee4 <updateSOC()+0x2bc>)
    2dc8:	f00a fc3c 	bl	d644 <__aeabi_fdiv>
    2dcc:	682b      	ldr	r3, [r5, #0]
    2dce:	9304      	str	r3, [sp, #16]
	return ret;
    2dd0:	9a04      	ldr	r2, [sp, #16]
    2dd2:	6038      	str	r0, [r7, #0]
         if (millis() > 9000) {
    2dd4:	f242 3328 	movw	r3, #9000	; 0x2328
    2dd8:	429a      	cmp	r2, r3
    2dda:	f200 80e4 	bhi.w	2fa6 <updateSOC()+0x37e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2dde:	682b      	ldr	r3, [r5, #0]
    2de0:	9305      	str	r3, [sp, #20]
	return ret;
    2de2:	9a05      	ldr	r2, [sp, #20]
    if (millis() > 10000) {
    2de4:	f242 7310 	movw	r3, #10000	; 0x2710
    2de8:	429a      	cmp	r2, r3
    2dea:	d90d      	bls.n	2e08 <updateSOC()+0x1e0>
      if (debug != 0) {
    2dec:	f8d8 3000 	ldr.w	r3, [r8]
      SOCset = 1;
    2df0:	2201      	movs	r2, #1
    2df2:	f8c9 2000 	str.w	r2, [r9]
      if (debug != 0) {
    2df6:	2b00      	cmp	r3, #0
    2df8:	f040 80e1 	bne.w	2fbe <updateSOC()+0x396>
      if (settings.ESSmode == 1) {
    2dfc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    2e00:	2b01      	cmp	r3, #1
        bmsstatus = Ready;
    2e02:	bf04      	itt	eq
    2e04:	4a43      	ldreq	r2, [pc, #268]	; (2f14 <updateSOC()+0x2ec>)
    2e06:	7013      	strbeq	r3, [r2, #0]
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2e08:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    2e0c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    2e0e:	e722      	b.n	2c56 <updateSOC()+0x2e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e10:	4d3f      	ldr	r5, [pc, #252]	; (2f10 <updateSOC()+0x2e8>)
    2e12:	682a      	ldr	r2, [r5, #0]
    2e14:	9202      	str	r2, [sp, #8]
	return ret;
    2e16:	9a02      	ldr	r2, [sp, #8]
     if (millis() > 9000) {
    2e18:	f242 3328 	movw	r3, #9000	; 0x2328
    2e1c:	429a      	cmp	r2, r3
    2e1e:	f200 80b6 	bhi.w	2f8e <updateSOC()+0x366>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e22:	682b      	ldr	r3, [r5, #0]
    2e24:	9303      	str	r3, [sp, #12]
	return ret;
    2e26:	9a03      	ldr	r2, [sp, #12]
    if (millis() > 10000) {
    2e28:	f242 7310 	movw	r3, #10000	; 0x2710
    2e2c:	429a      	cmp	r2, r3
    2e2e:	d87d      	bhi.n	2f2c <updateSOC()+0x304>
  if (SOCset == 0 && SOCmem == 1) {
    2e30:	f8d9 3000 	ldr.w	r3, [r9]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2e34:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    2e38:	6da5      	ldr	r5, [r4, #88]	; 0x58
    2e3a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2ee0 <updateSOC()+0x2b8>
  if (SOCset == 0 && SOCmem == 1) {
    2e3e:	2b00      	cmp	r3, #0
    2e40:	f47f af09 	bne.w	2c56 <updateSOC()+0x2e>
    2e44:	f8da 3000 	ldr.w	r3, [sl]
    2e48:	e7af      	b.n	2daa <updateSOC()+0x182>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2e4a:	482e      	ldr	r0, [pc, #184]	; (2f04 <updateSOC()+0x2dc>)
    2e4c:	f7fd ff8e 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    2e50:	492d      	ldr	r1, [pc, #180]	; (2f08 <updateSOC()+0x2e0>)
    2e52:	6f26      	ldr	r6, [r4, #112]	; 0x70
    2e54:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    2e56:	f00a fb41 	bl	d4dc <__aeabi_fmul>
    2e5a:	f00a fd2b 	bl	d8b4 <__aeabi_f2uiz>
    2e5e:	4632      	mov	r2, r6
    2e60:	6f66      	ldr	r6, [r4, #116]	; 0x74
    2e62:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    2e64:	9600      	str	r6, [sp, #0]
    2e66:	463b      	mov	r3, r7
    2e68:	b280      	uxth	r0, r0
    2e6a:	f7fe fe59 	bl	1b20 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    2e6e:	4e19      	ldr	r6, [pc, #100]	; (2ed4 <updateSOC()+0x2ac>)
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2e70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2e72:	6030      	str	r0, [r6, #0]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2e74:	fb03 f000 	mul.w	r0, r3, r0
    2e78:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2e7a:	4f17      	ldr	r7, [pc, #92]	; (2ed8 <updateSOC()+0x2b0>)
    2e7c:	fb03 f000 	mul.w	r0, r3, r0
    2e80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e84:	0040      	lsls	r0, r0, #1
    2e86:	f00a fad5 	bl	d434 <__aeabi_i2f>
    2e8a:	4916      	ldr	r1, [pc, #88]	; (2ee4 <updateSOC()+0x2bc>)
    2e8c:	f00a fbda 	bl	d644 <__aeabi_fdiv>
    SOCreset = 0;
    2e90:	2300      	movs	r3, #0
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2e92:	6038      	str	r0, [r7, #0]
    SOCreset = 0;
    2e94:	602b      	str	r3, [r5, #0]
    2e96:	e6d2      	b.n	2c3e <updateSOC()+0x16>
      if (sensor == 1) {
    2e98:	4b1f      	ldr	r3, [pc, #124]	; (2f18 <updateSOC()+0x2f0>)
    2e9a:	681b      	ldr	r3, [r3, #0]
    2e9c:	2b01      	cmp	r3, #1
    2e9e:	bf0c      	ite	eq
    2ea0:	481e      	ldreq	r0, [pc, #120]	; (2f1c <updateSOC()+0x2f4>)
    2ea2:	481f      	ldrne	r0, [pc, #124]	; (2f20 <updateSOC()+0x2f8>)
    2ea4:	210a      	movs	r1, #10
    2ea6:	f009 fc33 	bl	c710 <usb_serial_write>
    if (settings.cursens == Analoguesing) {
    2eaa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2eac:	2b03      	cmp	r3, #3
    2eae:	f47f af0e 	bne.w	2cce <updateSOC()+0xa6>
    2eb2:	481c      	ldr	r0, [pc, #112]	; (2f24 <updateSOC()+0x2fc>)
    2eb4:	2110      	movs	r1, #16
    2eb6:	f009 fc2b 	bl	c710 <usb_serial_write>
    if (settings.cursens == Canbus) {
    2eba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2ebc:	2b02      	cmp	r3, #2
    2ebe:	f47f af09 	bne.w	2cd4 <updateSOC()+0xac>
    2ec2:	2107      	movs	r1, #7
    2ec4:	4818      	ldr	r0, [pc, #96]	; (2f28 <updateSOC()+0x300>)
    2ec6:	f009 fc23 	bl	c710 <usb_serial_write>
    2eca:	e703      	b.n	2cd4 <updateSOC()+0xac>
    2ecc:	1fff8fe8 	.word	0x1fff8fe8
    2ed0:	1fffc0b4 	.word	0x1fffc0b4
    2ed4:	1fff8728 	.word	0x1fff8728
    2ed8:	1fff9004 	.word	0x1fff9004
    2edc:	1fff8fec 	.word	0x1fff8fec
    2ee0:	1fff8748 	.word	0x1fff8748
    2ee4:	3e8e38e4 	.word	0x3e8e38e4
    2ee8:	42c80000 	.word	0x42c80000
    2eec:	000155bc 	.word	0x000155bc
    2ef0:	1fffbec0 	.word	0x1fffbec0
    2ef4:	1fff8824 	.word	0x1fff8824
    2ef8:	000148e8 	.word	0x000148e8
    2efc:	00014988 	.word	0x00014988
    2f00:	00014990 	.word	0x00014990
    2f04:	1fff900c 	.word	0x1fff900c
    2f08:	447a0000 	.word	0x447a0000
    2f0c:	1fff8fe4 	.word	0x1fff8fe4
    2f10:	1fffc3b4 	.word	0x1fffc3b4
    2f14:	1fffbe2c 	.word	0x1fffbe2c
    2f18:	1fff8770 	.word	0x1fff8770
    2f1c:	00014954 	.word	0x00014954
    2f20:	00014960 	.word	0x00014960
    2f24:	0001496c 	.word	0x0001496c
    2f28:	00014980 	.word	0x00014980
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2f2c:	4838      	ldr	r0, [pc, #224]	; (3010 <updateSOC()+0x3e8>)
      if (debug != 0) {
    2f2e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3014 <updateSOC()+0x3ec>
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2f32:	f7fd ff1b 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    2f36:	4938      	ldr	r1, [pc, #224]	; (3018 <updateSOC()+0x3f0>)
    2f38:	f00a fad0 	bl	d4dc <__aeabi_fmul>
    2f3c:	f00a fcba 	bl	d8b4 <__aeabi_f2uiz>
    2f40:	6f65      	ldr	r5, [r4, #116]	; 0x74
    2f42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    2f44:	6f22      	ldr	r2, [r4, #112]	; 0x70
    2f46:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    2f48:	9500      	str	r5, [sp, #0]
    2f4a:	b280      	uxth	r0, r0
    2f4c:	f7fe fde8 	bl	1b20 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2f50:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    2f54:	6da5      	ldr	r5, [r4, #88]	; 0x58
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2f56:	6030      	str	r0, [r6, #0]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2f58:	fb0b f000 	mul.w	r0, fp, r0
    2f5c:	fb05 f000 	mul.w	r0, r5, r0
    2f60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2f64:	0040      	lsls	r0, r0, #1
    2f66:	f00a fa65 	bl	d434 <__aeabi_i2f>
    2f6a:	492c      	ldr	r1, [pc, #176]	; (301c <updateSOC()+0x3f4>)
    2f6c:	f00a fb6a 	bl	d644 <__aeabi_fdiv>
      if (debug != 0) {
    2f70:	f8d8 3000 	ldr.w	r3, [r8]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2f74:	6038      	str	r0, [r7, #0]
      SOCset = 1;
    2f76:	2201      	movs	r2, #1
    2f78:	f8c9 2000 	str.w	r2, [r9]
      if (debug != 0) {
    2f7c:	bb73      	cbnz	r3, 2fdc <updateSOC()+0x3b4>
      if (settings.ESSmode == 1) {
    2f7e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    2f82:	2b01      	cmp	r3, #1
    2f84:	f47f ae67 	bne.w	2c56 <updateSOC()+0x2e>
        bmsstatus = Ready;
    2f88:	4a25      	ldr	r2, [pc, #148]	; (3020 <updateSOC()+0x3f8>)
    2f8a:	7013      	strb	r3, [r2, #0]
  if (SOCset == 0 && SOCmem == 1) {
    2f8c:	e663      	b.n	2c56 <updateSOC()+0x2e>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    2f8e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    2f92:	9300      	str	r3, [sp, #0]
    2f94:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    2f98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2f9a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    2f9e:	481c      	ldr	r0, [pc, #112]	; (3010 <updateSOC()+0x3e8>)
    2fa0:	f7fe f8b8 	bl	1114 <BMSModuleManager::setSensors(int, float, float, int)>
    2fa4:	e73d      	b.n	2e22 <updateSOC()+0x1fa>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    2fa6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    2faa:	9300      	str	r3, [sp, #0]
    2fac:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    2fb0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2fb2:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    2fb6:	4816      	ldr	r0, [pc, #88]	; (3010 <updateSOC()+0x3e8>)
    2fb8:	f7fe f8ac 	bl	1114 <BMSModuleManager::setSensors(int, float, float, int)>
    2fbc:	e70f      	b.n	2dde <updateSOC()+0x1b6>
    2fbe:	2102      	movs	r1, #2
    2fc0:	4818      	ldr	r0, [pc, #96]	; (3024 <updateSOC()+0x3fc>)
    2fc2:	f009 fba5 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2fc6:	4818      	ldr	r0, [pc, #96]	; (3028 <updateSOC()+0x400>)
    2fc8:	f006 fed4 	bl	9d74 <Print::println()>
    2fcc:	2159      	movs	r1, #89	; 0x59
    2fce:	4817      	ldr	r0, [pc, #92]	; (302c <updateSOC()+0x404>)
    2fd0:	f009 fb9e 	bl	c710 <usb_serial_write>
    2fd4:	4814      	ldr	r0, [pc, #80]	; (3028 <updateSOC()+0x400>)
    2fd6:	f006 fecd 	bl	9d74 <Print::println()>
    2fda:	e70f      	b.n	2dfc <updateSOC()+0x1d4>
    2fdc:	2102      	movs	r1, #2
    2fde:	4811      	ldr	r0, [pc, #68]	; (3024 <updateSOC()+0x3fc>)
    2fe0:	f009 fb96 	bl	c710 <usb_serial_write>
    2fe4:	4810      	ldr	r0, [pc, #64]	; (3028 <updateSOC()+0x400>)
    2fe6:	f006 fec5 	bl	9d74 <Print::println()>
    2fea:	2159      	movs	r1, #89	; 0x59
    2fec:	480f      	ldr	r0, [pc, #60]	; (302c <updateSOC()+0x404>)
    2fee:	f009 fb8f 	bl	c710 <usb_serial_write>
    2ff2:	480d      	ldr	r0, [pc, #52]	; (3028 <updateSOC()+0x400>)
    2ff4:	f006 febe 	bl	9d74 <Print::println()>
      if (settings.ESSmode == 1) {
    2ff8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2ffc:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    3000:	6da5      	ldr	r5, [r4, #88]	; 0x58
      if (settings.ESSmode == 1) {
    3002:	2b01      	cmp	r3, #1
        bmsstatus = Ready;
    3004:	bf04      	itt	eq
    3006:	4a06      	ldreq	r2, [pc, #24]	; (3020 <updateSOC()+0x3f8>)
    3008:	7013      	strbeq	r3, [r2, #0]
  if (SOCset == 0 && SOCmem == 1) {
    300a:	f8d9 3000 	ldr.w	r3, [r9]
    300e:	e716      	b.n	2e3e <updateSOC()+0x216>
    3010:	1fff900c 	.word	0x1fff900c
    3014:	1fff8748 	.word	0x1fff8748
    3018:	447a0000 	.word	0x447a0000
    301c:	3e8e38e4 	.word	0x3e8e38e4
    3020:	1fffbe2c 	.word	0x1fffbe2c
    3024:	000155bc 	.word	0x000155bc
    3028:	1fff8824 	.word	0x1fff8824
    302c:	000148f8 	.word	0x000148f8

00003030 <Prechargecon()>:
void Prechargecon() {
    3030:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    3032:	2011      	movs	r0, #17
void Prechargecon() {
    3034:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    3036:	f007 fd1f 	bl	aa78 <digitalRead>
    303a:	2801      	cmp	r0, #1
    303c:	d004      	beq.n	3048 <Prechargecon()+0x18>
    303e:	2012      	movs	r0, #18
    3040:	f007 fd1a 	bl	aa78 <digitalRead>
    3044:	2801      	cmp	r0, #1
    3046:	d122      	bne.n	308e <Prechargecon()+0x5e>
    digitalWrite(OUT4, HIGH);  //Negative Contactor Close
    3048:	2101      	movs	r1, #1
    304a:	2015      	movs	r0, #21
    304c:	f007 fcee 	bl	aa2c <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3050:	4b2a      	ldr	r3, [pc, #168]	; (30fc <Prechargecon()+0xcc>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    3052:	4a2b      	ldr	r2, [pc, #172]	; (3100 <Prechargecon()+0xd0>)
    3054:	4c2b      	ldr	r4, [pc, #172]	; (3104 <Prechargecon()+0xd4>)
    3056:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    3058:	4d2b      	ldr	r5, [pc, #172]	; (3108 <Prechargecon()+0xd8>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    305a:	6811      	ldr	r1, [r2, #0]
    305c:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    305e:	2202      	movs	r2, #2
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    3060:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    contctrl = 2;
    3064:	602a      	str	r2, [r5, #0]
	return ret;
    3066:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    3068:	440b      	add	r3, r1
    306a:	4293      	cmp	r3, r2
    306c:	d808      	bhi.n	3080 <Prechargecon()+0x50>
    306e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    3072:	f00a f9df 	bl	d434 <__aeabi_i2f>
    3076:	4b25      	ldr	r3, [pc, #148]	; (310c <Prechargecon()+0xdc>)
    3078:	6819      	ldr	r1, [r3, #0]
    307a:	f00a fbcd 	bl	d818 <__aeabi_fcmplt>
    307e:	b1d0      	cbz	r0, 30b6 <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);  //precharge
    3080:	2101      	movs	r1, #1
      digitalWrite(OUT2, LOW);
    3082:	200c      	movs	r0, #12
}
    3084:	b003      	add	sp, #12
    3086:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    308a:	f007 bccf 	b.w	aa2c <digitalWrite>
    digitalWrite(OUT1, LOW);
    308e:	2100      	movs	r1, #0
    3090:	200b      	movs	r0, #11
    3092:	f007 fccb 	bl	aa2c <digitalWrite>
    digitalWrite(OUT2, LOW);
    3096:	2100      	movs	r1, #0
    3098:	200c      	movs	r0, #12
    309a:	f007 fcc7 	bl	aa2c <digitalWrite>
    digitalWrite(OUT4, LOW);
    309e:	2100      	movs	r1, #0
    30a0:	2015      	movs	r0, #21
    30a2:	f007 fcc3 	bl	aa2c <digitalWrite>
    bmsstatus = Ready;
    30a6:	491a      	ldr	r1, [pc, #104]	; (3110 <Prechargecon()+0xe0>)
    contctrl = 0;
    30a8:	4b17      	ldr	r3, [pc, #92]	; (3108 <Prechargecon()+0xd8>)
    bmsstatus = Ready;
    30aa:	2001      	movs	r0, #1
    contctrl = 0;
    30ac:	2200      	movs	r2, #0
    bmsstatus = Ready;
    30ae:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    30b0:	601a      	str	r2, [r3, #0]
}
    30b2:	b003      	add	sp, #12
    30b4:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);  //Positive Contactor Close
    30b6:	2101      	movs	r1, #1
    30b8:	200b      	movs	r0, #11
    30ba:	f007 fcb7 	bl	aa2c <digitalWrite>
      if (settings.ChargerDirect == 1) {
    30be:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
      contctrl = 3;
    30c2:	2403      	movs	r4, #3
    30c4:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1) {
    30c6:	b14b      	cbz	r3, 30dc <Prechargecon()+0xac>
        bmsstatus = Drive;
    30c8:	4b11      	ldr	r3, [pc, #68]	; (3110 <Prechargecon()+0xe0>)
    30ca:	2202      	movs	r2, #2
    30cc:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    30ce:	2100      	movs	r1, #0
    30d0:	200c      	movs	r0, #12
}
    30d2:	b003      	add	sp, #12
    30d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    30d8:	f007 bca8 	b.w	aa2c <digitalWrite>
        if (digitalRead(IN3) == HIGH) {
    30dc:	2012      	movs	r0, #18
    30de:	f007 fccb 	bl	aa78 <digitalRead>
    30e2:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    30e4:	bf08      	it	eq
    30e6:	4b0a      	ldreq	r3, [pc, #40]	; (3110 <Prechargecon()+0xe0>)
        if (digitalRead(IN1) == HIGH) {
    30e8:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    30ec:	bf08      	it	eq
    30ee:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH) {
    30f0:	f007 fcc2 	bl	aa78 <digitalRead>
    30f4:	2801      	cmp	r0, #1
    30f6:	d1ea      	bne.n	30ce <Prechargecon()+0x9e>
    30f8:	e7e6      	b.n	30c8 <Prechargecon()+0x98>
    30fa:	bf00      	nop
    30fc:	1fffc3b4 	.word	0x1fffc3b4
    3100:	1fff8fd8 	.word	0x1fff8fd8
    3104:	1fffc0b4 	.word	0x1fffc0b4
    3108:	1fffbea8 	.word	0x1fffbea8
    310c:	1fffbec0 	.word	0x1fffbec0
    3110:	1fffbe2c 	.word	0x1fffbe2c

00003114 <contcon()>:
void contcon() {
    3114:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat)  //check for contactor request change
    3116:	4e71      	ldr	r6, [pc, #452]	; (32dc <contcon()+0x1c8>)
    3118:	4c71      	ldr	r4, [pc, #452]	; (32e0 <contcon()+0x1cc>)
    311a:	6833      	ldr	r3, [r6, #0]
    311c:	6825      	ldr	r5, [r4, #0]
    311e:	42ab      	cmp	r3, r5
void contcon() {
    3120:	b087      	sub	sp, #28
  if (contctrl != contstat)  //check for contactor request change
    3122:	d02d      	beq.n	3180 <contcon()+0x6c>
    if ((contctrl & 1) == 0) {
    3124:	f013 0101 	ands.w	r1, r3, #1
    3128:	d04b      	beq.n	31c2 <contcon()+0xae>
    if ((contctrl & 2) == 0) {
    312a:	f013 0102 	ands.w	r1, r3, #2
    312e:	d05f      	beq.n	31f0 <contcon()+0xdc>
    if ((contctrl & 4) == 0) {
    3130:	f013 0104 	ands.w	r1, r3, #4
    3134:	d051      	beq.n	31da <contcon()+0xc6>
    if ((contctrl & 1) == 1) {
    3136:	07da      	lsls	r2, r3, #31
    3138:	d50e      	bpl.n	3158 <contcon()+0x44>
      if ((contstat & 1) != 1) {
    313a:	6822      	ldr	r2, [r4, #0]
    313c:	07d7      	lsls	r7, r2, #31
    313e:	d40b      	bmi.n	3158 <contcon()+0x44>
        if (conttimer1 == 0) {
    3140:	4d68      	ldr	r5, [pc, #416]	; (32e4 <contcon()+0x1d0>)
    3142:	682a      	ldr	r2, [r5, #0]
    3144:	2a00      	cmp	r2, #0
    3146:	f000 8093 	beq.w	3270 <contcon()+0x15c>
    314a:	4b67      	ldr	r3, [pc, #412]	; (32e8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    314c:	681b      	ldr	r3, [r3, #0]
    314e:	9301      	str	r3, [sp, #4]
	return ret;
    3150:	9b01      	ldr	r3, [sp, #4]
        if (conttimer1 < millis()) {
    3152:	4293      	cmp	r3, r2
    3154:	d87f      	bhi.n	3256 <contcon()+0x142>
    if ((contctrl & 2) == 2) {
    3156:	6833      	ldr	r3, [r6, #0]
    3158:	079d      	lsls	r5, r3, #30
    315a:	d414      	bmi.n	3186 <contcon()+0x72>
    if ((contctrl & 4) == 4) {
    315c:	0759      	lsls	r1, r3, #29
    315e:	d522      	bpl.n	31a6 <contcon()+0x92>
      if ((contstat & 4) != 4) {
    3160:	6822      	ldr	r2, [r4, #0]
    3162:	0752      	lsls	r2, r2, #29
    3164:	d40d      	bmi.n	3182 <contcon()+0x6e>
        if (conttimer3 == 0) {
    3166:	4f61      	ldr	r7, [pc, #388]	; (32ec <contcon()+0x1d8>)
    3168:	683a      	ldr	r2, [r7, #0]
    316a:	2a00      	cmp	r2, #0
    316c:	f000 809e 	beq.w	32ac <contcon()+0x198>
    3170:	4b5d      	ldr	r3, [pc, #372]	; (32e8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	9305      	str	r3, [sp, #20]
	return ret;
    3176:	9b05      	ldr	r3, [sp, #20]
        if (conttimer3 < millis()) {
    3178:	4293      	cmp	r3, r2
    317a:	f200 8086 	bhi.w	328a <contcon()+0x176>
  if (contctrl == 0) {
    317e:	6835      	ldr	r5, [r6, #0]
    3180:	b1a5      	cbz	r5, 31ac <contcon()+0x98>
}
    3182:	b007      	add	sp, #28
    3184:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2) {
    3186:	6822      	ldr	r2, [r4, #0]
    3188:	0790      	lsls	r0, r2, #30
    318a:	d43d      	bmi.n	3208 <contcon()+0xf4>
        if (conttimer2 == 0) {
    318c:	4d58      	ldr	r5, [pc, #352]	; (32f0 <contcon()+0x1dc>)
    318e:	682a      	ldr	r2, [r5, #0]
    3190:	2a00      	cmp	r2, #0
    3192:	d049      	beq.n	3228 <contcon()+0x114>
    3194:	4b54      	ldr	r3, [pc, #336]	; (32e8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	9303      	str	r3, [sp, #12]
	return ret;
    319a:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis()) {
    319c:	429a      	cmp	r2, r3
    319e:	d336      	bcc.n	320e <contcon()+0xfa>
    if ((contctrl & 4) == 4) {
    31a0:	6833      	ldr	r3, [r6, #0]
    31a2:	0759      	lsls	r1, r3, #29
    31a4:	d4dc      	bmi.n	3160 <contcon()+0x4c>
    31a6:	461d      	mov	r5, r3
  if (contctrl == 0) {
    31a8:	2d00      	cmp	r5, #0
    31aa:	d1ea      	bne.n	3182 <contcon()+0x6e>
    analogWrite(OUT5, 0);
    31ac:	4629      	mov	r1, r5
    31ae:	2016      	movs	r0, #22
    31b0:	f007 fac0 	bl	a734 <analogWrite>
    analogWrite(OUT6, 0);
    31b4:	4629      	mov	r1, r5
    31b6:	2017      	movs	r0, #23
}
    31b8:	b007      	add	sp, #28
    31ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    31be:	f007 bab9 	b.w	a734 <analogWrite>
      analogWrite(OUT5, 0);
    31c2:	2016      	movs	r0, #22
    31c4:	f007 fab6 	bl	a734 <analogWrite>
      contstat = contstat & 254;
    31c8:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    31ca:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    31cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0) {
    31d0:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    31d4:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    31d6:	d1ab      	bne.n	3130 <contcon()+0x1c>
    31d8:	e00a      	b.n	31f0 <contcon()+0xdc>
      analogWrite(OUT7, 0);
    31da:	2005      	movs	r0, #5
    31dc:	f007 faaa 	bl	a734 <analogWrite>
      contstat = contstat & 251;
    31e0:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    31e2:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    31e4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    31e8:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    31ea:	07da      	lsls	r2, r3, #31
    31ec:	d5b4      	bpl.n	3158 <contcon()+0x44>
    31ee:	e7a4      	b.n	313a <contcon()+0x26>
      analogWrite(OUT6, 0);
    31f0:	2017      	movs	r0, #23
    31f2:	f007 fa9f 	bl	a734 <analogWrite>
      contstat = contstat & 253;
    31f6:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    31f8:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    31fa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0) {
    31fe:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    3202:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    3204:	d197      	bne.n	3136 <contcon()+0x22>
    3206:	e7e8      	b.n	31da <contcon()+0xc6>
    if ((contctrl & 4) == 4) {
    3208:	075b      	lsls	r3, r3, #29
    320a:	d4aa      	bmi.n	3162 <contcon()+0x4e>
    320c:	e7b9      	b.n	3182 <contcon()+0x6e>
          analogWrite(OUT6, settings.conthold);
    320e:	4b39      	ldr	r3, [pc, #228]	; (32f4 <contcon()+0x1e0>)
    3210:	2017      	movs	r0, #23
    3212:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    3216:	f007 fa8d 	bl	a734 <analogWrite>
          contstat = contstat | 2;
    321a:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    321c:	2200      	movs	r2, #0
          contstat = contstat | 2;
    321e:	f043 0302 	orr.w	r3, r3, #2
    3222:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    3224:	602a      	str	r2, [r5, #0]
    3226:	e7bb      	b.n	31a0 <contcon()+0x8c>
          Serial.println();
    3228:	4833      	ldr	r0, [pc, #204]	; (32f8 <contcon()+0x1e4>)
    322a:	f006 fda3 	bl	9d74 <Print::println()>
    322e:	210c      	movs	r1, #12
    3230:	4832      	ldr	r0, [pc, #200]	; (32fc <contcon()+0x1e8>)
    3232:	f009 fa6d 	bl	c710 <usb_serial_write>
    3236:	4830      	ldr	r0, [pc, #192]	; (32f8 <contcon()+0x1e4>)
    3238:	f006 fd9c 	bl	9d74 <Print::println()>
          analogWrite(OUT6, 255);
    323c:	21ff      	movs	r1, #255	; 0xff
    323e:	2017      	movs	r0, #23
    3240:	f007 fa78 	bl	a734 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3244:	4b28      	ldr	r3, [pc, #160]	; (32e8 <contcon()+0x1d4>)
          conttimer2 = millis() + pulltime;
    3246:	492e      	ldr	r1, [pc, #184]	; (3300 <contcon()+0x1ec>)
    3248:	681a      	ldr	r2, [r3, #0]
    324a:	9202      	str	r2, [sp, #8]
	return ret;
    324c:	9a02      	ldr	r2, [sp, #8]
    324e:	6809      	ldr	r1, [r1, #0]
    3250:	440a      	add	r2, r1
    3252:	602a      	str	r2, [r5, #0]
    3254:	e79f      	b.n	3196 <contcon()+0x82>
          analogWrite(OUT5, settings.conthold);
    3256:	4b27      	ldr	r3, [pc, #156]	; (32f4 <contcon()+0x1e0>)
    3258:	2016      	movs	r0, #22
    325a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    325e:	f007 fa69 	bl	a734 <analogWrite>
          contstat = contstat | 1;
    3262:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    3264:	2200      	movs	r2, #0
          contstat = contstat | 1;
    3266:	f043 0301 	orr.w	r3, r3, #1
    326a:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    326c:	602a      	str	r2, [r5, #0]
    326e:	e772      	b.n	3156 <contcon()+0x42>
          analogWrite(OUT5, 255);
    3270:	21ff      	movs	r1, #255	; 0xff
    3272:	2016      	movs	r0, #22
    3274:	f007 fa5e 	bl	a734 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3278:	4b1b      	ldr	r3, [pc, #108]	; (32e8 <contcon()+0x1d4>)
          conttimer1 = millis() + pulltime;
    327a:	4921      	ldr	r1, [pc, #132]	; (3300 <contcon()+0x1ec>)
    327c:	681a      	ldr	r2, [r3, #0]
    327e:	9200      	str	r2, [sp, #0]
	return ret;
    3280:	9a00      	ldr	r2, [sp, #0]
    3282:	6809      	ldr	r1, [r1, #0]
    3284:	440a      	add	r2, r1
    3286:	602a      	str	r2, [r5, #0]
    3288:	e760      	b.n	314c <contcon()+0x38>
          analogWrite(OUT7, settings.conthold);
    328a:	4b1a      	ldr	r3, [pc, #104]	; (32f4 <contcon()+0x1e0>)
    328c:	2005      	movs	r0, #5
    328e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    3292:	f007 fa4f 	bl	a734 <analogWrite>
          contstat = contstat | 4;
    3296:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0) {
    3298:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    329a:	2200      	movs	r2, #0
          contstat = contstat | 4;
    329c:	f043 0304 	orr.w	r3, r3, #4
    32a0:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    32a2:	603a      	str	r2, [r7, #0]
  if (contctrl == 0) {
    32a4:	2d00      	cmp	r5, #0
    32a6:	f47f af6c 	bne.w	3182 <contcon()+0x6e>
    32aa:	e77f      	b.n	31ac <contcon()+0x98>
          Serial.println();
    32ac:	4812      	ldr	r0, [pc, #72]	; (32f8 <contcon()+0x1e4>)
    32ae:	f006 fd61 	bl	9d74 <Print::println()>
    32b2:	210c      	movs	r1, #12
    32b4:	4813      	ldr	r0, [pc, #76]	; (3304 <contcon()+0x1f0>)
    32b6:	f009 fa2b 	bl	c710 <usb_serial_write>
    32ba:	480f      	ldr	r0, [pc, #60]	; (32f8 <contcon()+0x1e4>)
    32bc:	f006 fd5a 	bl	9d74 <Print::println()>
          analogWrite(OUT7, 255);
    32c0:	21ff      	movs	r1, #255	; 0xff
    32c2:	2005      	movs	r0, #5
    32c4:	f007 fa36 	bl	a734 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32c8:	4b07      	ldr	r3, [pc, #28]	; (32e8 <contcon()+0x1d4>)
          conttimer3 = millis() + pulltime;
    32ca:	490d      	ldr	r1, [pc, #52]	; (3300 <contcon()+0x1ec>)
    32cc:	681a      	ldr	r2, [r3, #0]
    32ce:	9204      	str	r2, [sp, #16]
	return ret;
    32d0:	9a04      	ldr	r2, [sp, #16]
    32d2:	6809      	ldr	r1, [r1, #0]
    32d4:	440a      	add	r2, r1
    32d6:	603a      	str	r2, [r7, #0]
    32d8:	e74b      	b.n	3172 <contcon()+0x5e>
    32da:	bf00      	nop
    32dc:	1fffbea8 	.word	0x1fffbea8
    32e0:	1fffbeac 	.word	0x1fffbeac
    32e4:	1fffbeb0 	.word	0x1fffbeb0
    32e8:	1fffc3b4 	.word	0x1fffc3b4
    32ec:	1fffbeb8 	.word	0x1fffbeb8
    32f0:	1fffbeb4 	.word	0x1fffbeb4
    32f4:	1fffc0b4 	.word	0x1fffc0b4
    32f8:	1fff8824 	.word	0x1fff8824
    32fc:	00014994 	.word	0x00014994
    3300:	1fff8764 	.word	0x1fff8764
    3304:	000149a4 	.word	0x000149a4

00003308 <calcur()>:
void calcur() {
    3308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->adc0->startContinuous(ACUR1);
    330c:	4e54      	ldr	r6, [pc, #336]	; (3460 <calcur()+0x158>)
  sensor = 1;
    330e:	f8df a154 	ldr.w	sl, [pc, #340]	; 3464 <calcur()+0x15c>
  adc->adc0->startContinuous(ACUR1);
    3312:	6833      	ldr	r3, [r6, #0]
  x = 0;
    3314:	f8df 9150 	ldr.w	r9, [pc, #336]	; 3468 <calcur()+0x160>
  adc->adc0->startContinuous(ACUR1);
    3318:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    331c:	4d53      	ldr	r5, [pc, #332]	; (346c <calcur()+0x164>)
    331e:	210f      	movs	r1, #15
    3320:	f006 f8a8 	bl	9474 <ADC_Module::startContinuous(unsigned char)>
  sensor = 1;
    3324:	2301      	movs	r3, #1
    3326:	f8ca 3000 	str.w	r3, [sl]
    332a:	4851      	ldr	r0, [pc, #324]	; (3470 <calcur()+0x168>)
  x = 0;
    332c:	2300      	movs	r3, #0
    332e:	2122      	movs	r1, #34	; 0x22
    3330:	f8c9 3000 	str.w	r3, [r9]
    3334:	f009 f9ec 	bl	c710 <usb_serial_write>
  while (x < 20) {
    3338:	f8d9 3000 	ldr.w	r3, [r9]
    333c:	2b13      	cmp	r3, #19
    333e:	dc21      	bgt.n	3384 <calcur()+0x7c>
    3340:	4f4c      	ldr	r7, [pc, #304]	; (3474 <calcur()+0x16c>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    3342:	f640 48e4 	movw	r8, #3300	; 0xce4
    3346:	6833      	ldr	r3, [r6, #0]
    3348:	f8b5 b088 	ldrh.w	fp, [r5, #136]	; 0x88
    334c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3350:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3352:	691c      	ldr	r4, [r3, #16]
    3354:	f005 fde2 	bl	8f1c <ADC_Module::getMaxValue()>
    3358:	b2a4      	uxth	r4, r4
    335a:	2101      	movs	r1, #1
    335c:	fb08 f404 	mul.w	r4, r8, r4
    3360:	fbb4 f4f0 	udiv	r4, r4, r0
    3364:	4638      	mov	r0, r7
    3366:	44a3      	add	fp, r4
    3368:	f8a5 b088 	strh.w	fp, [r5, #136]	; 0x88
    336c:	f009 f9d0 	bl	c710 <usb_serial_write>
    delay(100);
    3370:	2064      	movs	r0, #100	; 0x64
    3372:	f007 fbeb 	bl	ab4c <delay>
    x++;
    3376:	f8d9 3000 	ldr.w	r3, [r9]
    337a:	3301      	adds	r3, #1
  while (x < 20) {
    337c:	2b13      	cmp	r3, #19
    x++;
    337e:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    3382:	dde0      	ble.n	3346 <calcur()+0x3e>
  settings.offset1 = settings.offset1 / 21;
    3384:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    3388:	493b      	ldr	r1, [pc, #236]	; (3478 <calcur()+0x170>)
	size_t print(int n)				{ return print((long)n); }
    338a:	483c      	ldr	r0, [pc, #240]	; (347c <calcur()+0x174>)
    338c:	fba1 2103 	umull	r2, r1, r1, r3
    3390:	1a5b      	subs	r3, r3, r1
    3392:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    3396:	f3c1 110f 	ubfx	r1, r1, #4, #16
    339a:	f8a5 1088 	strh.w	r1, [r5, #136]	; 0x88
    339e:	f006 fce1 	bl	9d64 <Print::print(long)>
    33a2:	211d      	movs	r1, #29
    33a4:	4836      	ldr	r0, [pc, #216]	; (3480 <calcur()+0x178>)
    33a6:	f009 f9b3 	bl	c710 <usb_serial_write>
    33aa:	2102      	movs	r1, #2
    33ac:	4835      	ldr	r0, [pc, #212]	; (3484 <calcur()+0x17c>)
    33ae:	f009 f9af 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    33b2:	4832      	ldr	r0, [pc, #200]	; (347c <calcur()+0x174>)
    33b4:	f006 fcde 	bl	9d74 <Print::println()>
  x = 0;
    33b8:	2300      	movs	r3, #0
    33ba:	f8c9 3000 	str.w	r3, [r9]
  adc->adc0->startContinuous(ACUR2);
    33be:	6833      	ldr	r3, [r6, #0]
    33c0:	210e      	movs	r1, #14
    33c2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    33c6:	f006 f855 	bl	9474 <ADC_Module::startContinuous(unsigned char)>
  sensor = 2;
    33ca:	2302      	movs	r3, #2
    33cc:	4828      	ldr	r0, [pc, #160]	; (3470 <calcur()+0x168>)
    33ce:	f8ca 3000 	str.w	r3, [sl]
    33d2:	2122      	movs	r1, #34	; 0x22
    33d4:	f009 f99c 	bl	c710 <usb_serial_write>
  while (x < 20) {
    33d8:	f8d9 3000 	ldr.w	r3, [r9]
    33dc:	2b13      	cmp	r3, #19
    33de:	dc22      	bgt.n	3426 <calcur()+0x11e>
    33e0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3474 <calcur()+0x16c>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    33e4:	f640 47e4 	movw	r7, #3300	; 0xce4
    33e8:	6833      	ldr	r3, [r6, #0]
    33ea:	f8b5 a08a 	ldrh.w	sl, [r5, #138]	; 0x8a
    33ee:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    33f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    33f4:	691c      	ldr	r4, [r3, #16]
    33f6:	f005 fd91 	bl	8f1c <ADC_Module::getMaxValue()>
    33fa:	b2a4      	uxth	r4, r4
    33fc:	2101      	movs	r1, #1
    33fe:	fb07 f404 	mul.w	r4, r7, r4
    3402:	fbb4 f4f0 	udiv	r4, r4, r0
    3406:	4640      	mov	r0, r8
    3408:	44a2      	add	sl, r4
    340a:	f8a5 a08a 	strh.w	sl, [r5, #138]	; 0x8a
    340e:	f009 f97f 	bl	c710 <usb_serial_write>
    delay(100);
    3412:	2064      	movs	r0, #100	; 0x64
    3414:	f007 fb9a 	bl	ab4c <delay>
    x++;
    3418:	f8d9 3000 	ldr.w	r3, [r9]
    341c:	3301      	adds	r3, #1
  while (x < 20) {
    341e:	2b13      	cmp	r3, #19
    x++;
    3420:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    3424:	dde0      	ble.n	33e8 <calcur()+0xe0>
  settings.offset2 = settings.offset2 / 21;
    3426:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
    342a:	4913      	ldr	r1, [pc, #76]	; (3478 <calcur()+0x170>)
	size_t print(int n)				{ return print((long)n); }
    342c:	4813      	ldr	r0, [pc, #76]	; (347c <calcur()+0x174>)
    342e:	fba1 2103 	umull	r2, r1, r1, r3
    3432:	1a5b      	subs	r3, r3, r1
    3434:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    3438:	f3c1 110f 	ubfx	r1, r1, #4, #16
    343c:	f8a5 108a 	strh.w	r1, [r5, #138]	; 0x8a
    3440:	f006 fc90 	bl	9d64 <Print::print(long)>
    3444:	211d      	movs	r1, #29
    3446:	4810      	ldr	r0, [pc, #64]	; (3488 <calcur()+0x180>)
    3448:	f009 f962 	bl	c710 <usb_serial_write>
    344c:	480d      	ldr	r0, [pc, #52]	; (3484 <calcur()+0x17c>)
    344e:	2102      	movs	r1, #2
    3450:	f009 f95e 	bl	c710 <usb_serial_write>
}
    3454:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    3458:	4808      	ldr	r0, [pc, #32]	; (347c <calcur()+0x174>)
    345a:	f006 bc8b 	b.w	9d74 <Print::println()>
    345e:	bf00      	nop
    3460:	1fff8ffc 	.word	0x1fff8ffc
    3464:	1fff8770 	.word	0x1fff8770
    3468:	1fffc1b0 	.word	0x1fffc1b0
    346c:	1fffc0b4 	.word	0x1fffc0b4
    3470:	000149b4 	.word	0x000149b4
    3474:	000149d8 	.word	0x000149d8
    3478:	86186187 	.word	0x86186187
    347c:	1fff8824 	.word	0x1fff8824
    3480:	000149dc 	.word	0x000149dc
    3484:	000155bc 	.word	0x000155bc
    3488:	000149fc 	.word	0x000149fc

0000348c <VEcan()>:
{
    348c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (settings.chargertype == BYD || settings.chargertype == Pylon) {
    3490:	4d25      	ldr	r5, [pc, #148]	; (3528 <VEcan()+0x9c>)
    3492:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    3496:	f1a3 0208 	sub.w	r2, r3, #8
    349a:	2a01      	cmp	r2, #1
    349c:	f240 81c2 	bls.w	3824 <VEcan()+0x398>
    if (settings.chargertype != EltekPC) {
    34a0:	2b07      	cmp	r3, #7
    34a2:	d055      	beq.n	3550 <VEcan()+0xc4>
      if (storagemode == 0) {
    34a4:	4b21      	ldr	r3, [pc, #132]	; (352c <VEcan()+0xa0>)
      msg.id = 0x351;
    34a6:	4c22      	ldr	r4, [pc, #136]	; (3530 <VEcan()+0xa4>)
      if (storagemode == 0) {
    34a8:	681b      	ldr	r3, [r3, #0]
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    34aa:	6d68      	ldr	r0, [r5, #84]	; 0x54
      msg.id = 0x351;
    34ac:	f240 3151 	movw	r1, #849	; 0x351
      msg.len = 8;
    34b0:	2208      	movs	r2, #8
      msg.id = 0x351;
    34b2:	6021      	str	r1, [r4, #0]
      msg.len = 8;
    34b4:	71e2      	strb	r2, [r4, #7]
      if (storagemode == 0) {
    34b6:	2b00      	cmp	r3, #0
    34b8:	f000 83cb 	beq.w	3c52 <VEcan()+0x7c6>
        msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    34bc:	f009 ffba 	bl	d434 <__aeabi_i2f>
    34c0:	6a29      	ldr	r1, [r5, #32]
    34c2:	4606      	mov	r6, r0
    34c4:	f00a f80a 	bl	d4dc <__aeabi_fmul>
    34c8:	491a      	ldr	r1, [pc, #104]	; (3534 <VEcan()+0xa8>)
    34ca:	f00a f807 	bl	d4dc <__aeabi_fmul>
    34ce:	f00a f9f1 	bl	d8b4 <__aeabi_f2uiz>
    34d2:	b2c2      	uxtb	r2, r0
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    34d4:	7222      	strb	r2, [r4, #8]
      msg.buf[2] = lowByte(chargecurrent);
    34d6:	4a18      	ldr	r2, [pc, #96]	; (3538 <VEcan()+0xac>)
      msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    34d8:	69a9      	ldr	r1, [r5, #24]
        msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    34da:	f3c0 2307 	ubfx	r3, r0, #8, #8
        msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    34de:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(chargecurrent);
    34e0:	8813      	ldrh	r3, [r2, #0]
    34e2:	8163      	strh	r3, [r4, #10]
      msg.buf[4] = lowByte(discurrent);
    34e4:	4b15      	ldr	r3, [pc, #84]	; (353c <VEcan()+0xb0>)
      msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    34e6:	4630      	mov	r0, r6
      msg.buf[4] = lowByte(discurrent);
    34e8:	881b      	ldrh	r3, [r3, #0]
    34ea:	81a3      	strh	r3, [r4, #12]
      msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    34ec:	f009 fff6 	bl	d4dc <__aeabi_fmul>
    34f0:	4910      	ldr	r1, [pc, #64]	; (3534 <VEcan()+0xa8>)
    34f2:	f009 fff3 	bl	d4dc <__aeabi_fmul>
    34f6:	f00a f9dd 	bl	d8b4 <__aeabi_f2uiz>
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    34fa:	490d      	ldr	r1, [pc, #52]	; (3530 <VEcan()+0xa4>)
      msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    34fc:	4603      	mov	r3, r0
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    34fe:	4810      	ldr	r0, [pc, #64]	; (3540 <VEcan()+0xb4>)
      msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3500:	81e3      	strh	r3, [r4, #14]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3502:	f005 fae7 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3506:	bb20      	cbnz	r0, 3552 <VEcan()+0xc6>
    3508:	4a0e      	ldr	r2, [pc, #56]	; (3544 <VEcan()+0xb8>)
    350a:	490f      	ldr	r1, [pc, #60]	; (3548 <VEcan()+0xbc>)
    350c:	6813      	ldr	r3, [r2, #0]
    350e:	6809      	ldr	r1, [r1, #0]
    3510:	428b      	cmp	r3, r1
    3512:	da1e      	bge.n	3552 <VEcan()+0xc6>
        msgbuf[sendCnt] = msg;
    3514:	4e0d      	ldr	r6, [pc, #52]	; (354c <VEcan()+0xc0>)
    3516:	eb06 1603 	add.w	r6, r6, r3, lsl #4
        sendCnt++;
    351a:	3301      	adds	r3, #1
    351c:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    351e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3522:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
        sendCnt++;
    3526:	e014      	b.n	3552 <VEcan()+0xc6>
    3528:	1fffc0b4 	.word	0x1fffc0b4
    352c:	1fffc198 	.word	0x1fffc198
    3530:	1fffbf30 	.word	0x1fffbf30
    3534:	41200000 	.word	0x41200000
    3538:	1fffbe38 	.word	0x1fffbe38
    353c:	1fffbecc 	.word	0x1fffbecc
    3540:	1fffc1c0 	.word	0x1fffc1c0
    3544:	1fffc0b0 	.word	0x1fffc0b0
    3548:	1fff876c 	.word	0x1fff876c
    354c:	1fffbfc0 	.word	0x1fffbfc0
    3550:	4ca2      	ldr	r4, [pc, #648]	; (37dc <VEcan()+0x350>)
    msg.buf[0] = lowByte(SOC);
    3552:	4aa3      	ldr	r2, [pc, #652]	; (37e0 <VEcan()+0x354>)
    3554:	6813      	ldr	r3, [r2, #0]
    3556:	8812      	ldrh	r2, [r2, #0]
    3558:	8122      	strh	r2, [r4, #8]
    msg.buf[4] = lowByte(SOC * 10);
    355a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    msg.len = 8;
    355e:	2008      	movs	r0, #8
    msg.buf[4] = lowByte(SOC * 10);
    3560:	005b      	lsls	r3, r3, #1
    msg.buf[2] = lowByte(SOH);
    3562:	4aa0      	ldr	r2, [pc, #640]	; (37e4 <VEcan()+0x358>)
    msg.buf[4] = lowByte(SOC * 10);
    3564:	7323      	strb	r3, [r4, #12]
    msg.id = 0x355;
    3566:	f240 3155 	movw	r1, #853	; 0x355
    msg.buf[5] = highByte(SOC * 10);
    356a:	4103      	asrs	r3, r0
    msg.buf[2] = lowByte(SOH);
    356c:	8812      	ldrh	r2, [r2, #0]
    msg.len = 8;
    356e:	71e0      	strb	r0, [r4, #7]
    msg.id = 0x355;
    3570:	6021      	str	r1, [r4, #0]
    msg.buf[5] = highByte(SOC * 10);
    3572:	7363      	strb	r3, [r4, #13]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3574:	4999      	ldr	r1, [pc, #612]	; (37dc <VEcan()+0x350>)
    3576:	489c      	ldr	r0, [pc, #624]	; (37e8 <VEcan()+0x35c>)
    msg.buf[2] = lowByte(SOH);
    3578:	8162      	strh	r2, [r4, #10]
    msg.buf[6] = 0;
    357a:	2300      	movs	r3, #0
    357c:	81e3      	strh	r3, [r4, #14]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    357e:	f005 faa9 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3582:	b930      	cbnz	r0, 3592 <VEcan()+0x106>
    3584:	4a99      	ldr	r2, [pc, #612]	; (37ec <VEcan()+0x360>)
    3586:	499a      	ldr	r1, [pc, #616]	; (37f0 <VEcan()+0x364>)
    3588:	6813      	ldr	r3, [r2, #0]
    358a:	6809      	ldr	r1, [r1, #0]
    358c:	428b      	cmp	r3, r1
    358e:	f2c0 83e2 	blt.w	3d56 <VEcan()+0x8ca>
    msg.id = 0x356;
    3592:	f240 3256 	movw	r2, #854	; 0x356
    msg.len = 8;
    3596:	2308      	movs	r3, #8
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3598:	4896      	ldr	r0, [pc, #600]	; (37f4 <VEcan()+0x368>)
    msg.id = 0x356;
    359a:	6022      	str	r2, [r4, #0]
    msg.len = 8;
    359c:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    359e:	f7fd fdb5 	bl	110c <BMSModuleManager::getPackVoltage()>
    35a2:	4995      	ldr	r1, [pc, #596]	; (37f8 <VEcan()+0x36c>)
    35a4:	f009 ff9a 	bl	d4dc <__aeabi_fmul>
    35a8:	f00a f984 	bl	d8b4 <__aeabi_f2uiz>
    35ac:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    35ae:	4891      	ldr	r0, [pc, #580]	; (37f4 <VEcan()+0x368>)
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    35b0:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    35b2:	f7fd fdab 	bl	110c <BMSModuleManager::getPackVoltage()>
    35b6:	4990      	ldr	r1, [pc, #576]	; (37f8 <VEcan()+0x36c>)
    35b8:	f009 ff90 	bl	d4dc <__aeabi_fmul>
    35bc:	f00a f97a 	bl	d8b4 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    35c0:	4a8e      	ldr	r2, [pc, #568]	; (37fc <VEcan()+0x370>)
    35c2:	498d      	ldr	r1, [pc, #564]	; (37f8 <VEcan()+0x36c>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    35c4:	4603      	mov	r3, r0
    35c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    msg.buf[2] = lowByte(long(currentact / 100));
    35ca:	6810      	ldr	r0, [r2, #0]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    35cc:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    35ce:	f00a f839 	bl	d644 <__aeabi_fdiv>
    35d2:	f00a f949 	bl	d868 <__aeabi_f2iz>
    35d6:	4603      	mov	r3, r0
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    35d8:	4886      	ldr	r0, [pc, #536]	; (37f4 <VEcan()+0x368>)
    msg.buf[2] = lowByte(long(currentact / 100));
    35da:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    35dc:	f7fd fdd4 	bl	1188 <BMSModuleManager::getAvgTemperature()>
    35e0:	4987      	ldr	r1, [pc, #540]	; (3800 <VEcan()+0x374>)
    35e2:	f009 ff7b 	bl	d4dc <__aeabi_fmul>
    35e6:	f00a f93f 	bl	d868 <__aeabi_f2iz>
    35ea:	4603      	mov	r3, r0
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    35ec:	4881      	ldr	r0, [pc, #516]	; (37f4 <VEcan()+0x368>)
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    35ee:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    35f0:	f7fd fdca 	bl	1188 <BMSModuleManager::getAvgTemperature()>
    35f4:	4982      	ldr	r1, [pc, #520]	; (3800 <VEcan()+0x374>)
    35f6:	f009 ff71 	bl	d4dc <__aeabi_fmul>
    35fa:	f00a f935 	bl	d868 <__aeabi_f2iz>
    msg.buf[6] = 0;
    35fe:	2200      	movs	r2, #0
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3600:	f340 2307 	sbfx	r3, r0, #8, #8
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3604:	4975      	ldr	r1, [pc, #468]	; (37dc <VEcan()+0x350>)
    3606:	4878      	ldr	r0, [pc, #480]	; (37e8 <VEcan()+0x35c>)
    msg.buf[6] = 0;
    3608:	81e2      	strh	r2, [r4, #14]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    360a:	7363      	strb	r3, [r4, #13]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    360c:	f005 fa62 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3610:	b930      	cbnz	r0, 3620 <VEcan()+0x194>
    3612:	4a76      	ldr	r2, [pc, #472]	; (37ec <VEcan()+0x360>)
    3614:	4976      	ldr	r1, [pc, #472]	; (37f0 <VEcan()+0x364>)
    3616:	6813      	ldr	r3, [r2, #0]
    3618:	6809      	ldr	r1, [r1, #0]
    361a:	428b      	cmp	r3, r1
    361c:	f2c0 8391 	blt.w	3d42 <VEcan()+0x8b6>
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3620:	4b78      	ldr	r3, [pc, #480]	; (3804 <VEcan()+0x378>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3622:	4a79      	ldr	r2, [pc, #484]	; (3808 <VEcan()+0x37c>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3624:	681b      	ldr	r3, [r3, #0]
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3626:	6812      	ldr	r2, [r2, #0]
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3628:	60e3      	str	r3, [r4, #12]
    msg.id = 0x35A;
    362a:	f240 305a 	movw	r0, #858	; 0x35a
    362e:	6020      	str	r0, [r4, #0]
    msg.len = 8;
    3630:	2308      	movs	r3, #8
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3632:	496a      	ldr	r1, [pc, #424]	; (37dc <VEcan()+0x350>)
    3634:	486c      	ldr	r0, [pc, #432]	; (37e8 <VEcan()+0x35c>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3636:	60a2      	str	r2, [r4, #8]
    msg.len = 8;
    3638:	71e3      	strb	r3, [r4, #7]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    363a:	f005 fa4b 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    363e:	b930      	cbnz	r0, 364e <VEcan()+0x1c2>
    3640:	4a6a      	ldr	r2, [pc, #424]	; (37ec <VEcan()+0x360>)
    3642:	496b      	ldr	r1, [pc, #428]	; (37f0 <VEcan()+0x364>)
    3644:	6813      	ldr	r3, [r2, #0]
    3646:	6809      	ldr	r1, [r1, #0]
    3648:	428b      	cmp	r3, r1
    364a:	f2c0 8370 	blt.w	3d2e <VEcan()+0x8a2>
    msg.buf[0] = bmsname[0];
    364e:	4b6f      	ldr	r3, [pc, #444]	; (380c <VEcan()+0x380>)
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3650:	4962      	ldr	r1, [pc, #392]	; (37dc <VEcan()+0x350>)
    msg.buf[4] = bmsname[4];
    3652:	e9d3 2300 	ldrd	r2, r3, [r3]
    msg.id = 0x35E;
    3656:	f240 305e 	movw	r0, #862	; 0x35e
    365a:	6020      	str	r0, [r4, #0]
    msg.buf[4] = bmsname[4];
    365c:	60e3      	str	r3, [r4, #12]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    365e:	4862      	ldr	r0, [pc, #392]	; (37e8 <VEcan()+0x35c>)
    msg.buf[0] = bmsname[0];
    3660:	60a2      	str	r2, [r4, #8]
    msg.len = 8;
    3662:	2308      	movs	r3, #8
    3664:	71e3      	strb	r3, [r4, #7]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3666:	f005 fa35 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    366a:	b930      	cbnz	r0, 367a <VEcan()+0x1ee>
    366c:	4a5f      	ldr	r2, [pc, #380]	; (37ec <VEcan()+0x360>)
    366e:	4960      	ldr	r1, [pc, #384]	; (37f0 <VEcan()+0x364>)
    3670:	6813      	ldr	r3, [r2, #0]
    3672:	6809      	ldr	r1, [r1, #0]
    3674:	428b      	cmp	r3, r1
    3676:	f2c0 8350 	blt.w	3d1a <VEcan()+0x88e>
    msg.buf[0] = bmsmanu[0];
    367a:	4b65      	ldr	r3, [pc, #404]	; (3810 <VEcan()+0x384>)
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    367c:	4957      	ldr	r1, [pc, #348]	; (37dc <VEcan()+0x350>)
    msg.buf[4] = bmsmanu[4];
    367e:	e9d3 2300 	ldrd	r2, r3, [r3]
    msg.id = 0x370;
    3682:	f44f 705c 	mov.w	r0, #880	; 0x370
    3686:	6020      	str	r0, [r4, #0]
    msg.buf[4] = bmsmanu[4];
    3688:	60e3      	str	r3, [r4, #12]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    368a:	4857      	ldr	r0, [pc, #348]	; (37e8 <VEcan()+0x35c>)
    msg.buf[0] = bmsmanu[0];
    368c:	60a2      	str	r2, [r4, #8]
    msg.len = 8;
    368e:	2308      	movs	r3, #8
    3690:	71e3      	strb	r3, [r4, #7]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3692:	f005 fa1f 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3696:	b930      	cbnz	r0, 36a6 <VEcan()+0x21a>
    3698:	4a54      	ldr	r2, [pc, #336]	; (37ec <VEcan()+0x360>)
    369a:	4955      	ldr	r1, [pc, #340]	; (37f0 <VEcan()+0x364>)
    369c:	6813      	ldr	r3, [r2, #0]
    369e:	6809      	ldr	r1, [r1, #0]
    36a0:	428b      	cmp	r3, r1
    36a2:	f2c0 82e4 	blt.w	3c6e <VEcan()+0x7e2>
    if (balancecells == 1) {
    36a6:	4b5b      	ldr	r3, [pc, #364]	; (3814 <VEcan()+0x388>)
    36a8:	681b      	ldr	r3, [r3, #0]
    36aa:	2b01      	cmp	r3, #1
    36ac:	f000 82ed 	beq.w	3c8a <VEcan()+0x7fe>
    msg.id = 0x373;
    36b0:	f240 3273 	movw	r2, #883	; 0x373
    msg.len = 8;
    36b4:	2308      	movs	r3, #8
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    36b6:	484f      	ldr	r0, [pc, #316]	; (37f4 <VEcan()+0x368>)
    msg.id = 0x373;
    36b8:	6022      	str	r2, [r4, #0]
    msg.len = 8;
    36ba:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    36bc:	f7fd fb56 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    36c0:	4955      	ldr	r1, [pc, #340]	; (3818 <VEcan()+0x38c>)
    36c2:	f009 ff0b 	bl	d4dc <__aeabi_fmul>
    36c6:	f00a f8f5 	bl	d8b4 <__aeabi_f2uiz>
    36ca:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    36cc:	4849      	ldr	r0, [pc, #292]	; (37f4 <VEcan()+0x368>)
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    36ce:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    36d0:	f7fd fb4c 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    36d4:	4950      	ldr	r1, [pc, #320]	; (3818 <VEcan()+0x38c>)
    36d6:	f009 ff01 	bl	d4dc <__aeabi_fmul>
    36da:	f00a f8eb 	bl	d8b4 <__aeabi_f2uiz>
    36de:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    36e2:	4844      	ldr	r0, [pc, #272]	; (37f4 <VEcan()+0x368>)
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    36e4:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    36e6:	f7fd fb75 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    36ea:	494b      	ldr	r1, [pc, #300]	; (3818 <VEcan()+0x38c>)
    36ec:	f009 fef6 	bl	d4dc <__aeabi_fmul>
    36f0:	f00a f8e0 	bl	d8b4 <__aeabi_f2uiz>
    36f4:	4603      	mov	r3, r0
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    36f6:	483f      	ldr	r0, [pc, #252]	; (37f4 <VEcan()+0x368>)
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    36f8:	72a3      	strb	r3, [r4, #10]
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    36fa:	f7fd fb6b 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    36fe:	4946      	ldr	r1, [pc, #280]	; (3818 <VEcan()+0x38c>)
    3700:	f009 feec 	bl	d4dc <__aeabi_fmul>
    3704:	f00a f8d6 	bl	d8b4 <__aeabi_f2uiz>
    3708:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    370c:	4839      	ldr	r0, [pc, #228]	; (37f4 <VEcan()+0x368>)
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    370e:	72e3      	strb	r3, [r4, #11]
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    3710:	f7fd fdbe 	bl	1290 <BMSModuleManager::getLowTemperature()>
    3714:	4941      	ldr	r1, [pc, #260]	; (381c <VEcan()+0x390>)
    3716:	f009 fdd9 	bl	d2cc <__addsf3>
    371a:	f00a f8cb 	bl	d8b4 <__aeabi_f2uiz>
    371e:	4603      	mov	r3, r0
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    3720:	4834      	ldr	r0, [pc, #208]	; (37f4 <VEcan()+0x368>)
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    3722:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    3724:	f7fd fdb4 	bl	1290 <BMSModuleManager::getLowTemperature()>
    3728:	493c      	ldr	r1, [pc, #240]	; (381c <VEcan()+0x390>)
    372a:	f009 fdcf 	bl	d2cc <__addsf3>
    372e:	f00a f8c1 	bl	d8b4 <__aeabi_f2uiz>
    3732:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    3736:	482f      	ldr	r0, [pc, #188]	; (37f4 <VEcan()+0x368>)
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    3738:	7363      	strb	r3, [r4, #13]
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    373a:	f7fd fda1 	bl	1280 <BMSModuleManager::getHighTemperature()>
    373e:	4937      	ldr	r1, [pc, #220]	; (381c <VEcan()+0x390>)
    3740:	f009 fdc4 	bl	d2cc <__addsf3>
    3744:	f00a f8b6 	bl	d8b4 <__aeabi_f2uiz>
    3748:	4603      	mov	r3, r0
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    374a:	482a      	ldr	r0, [pc, #168]	; (37f4 <VEcan()+0x368>)
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    374c:	73a3      	strb	r3, [r4, #14]
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    374e:	f7fd fd97 	bl	1280 <BMSModuleManager::getHighTemperature()>
    3752:	4932      	ldr	r1, [pc, #200]	; (381c <VEcan()+0x390>)
    3754:	f009 fdba 	bl	d2cc <__addsf3>
    3758:	f00a f8ac 	bl	d8b4 <__aeabi_f2uiz>
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    375c:	491f      	ldr	r1, [pc, #124]	; (37dc <VEcan()+0x350>)
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    375e:	f3c0 2307 	ubfx	r3, r0, #8, #8
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3762:	4821      	ldr	r0, [pc, #132]	; (37e8 <VEcan()+0x35c>)
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    3764:	73e3      	strb	r3, [r4, #15]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3766:	f005 f9b5 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    376a:	b930      	cbnz	r0, 377a <VEcan()+0x2ee>
    376c:	4a1f      	ldr	r2, [pc, #124]	; (37ec <VEcan()+0x360>)
    376e:	4920      	ldr	r1, [pc, #128]	; (37f0 <VEcan()+0x364>)
    3770:	6813      	ldr	r3, [r2, #0]
    3772:	6809      	ldr	r1, [r1, #0]
    3774:	428b      	cmp	r3, r1
    3776:	f2c0 8270 	blt.w	3c5a <VEcan()+0x7ce>
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    377a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    377c:	6dab      	ldr	r3, [r5, #88]	; 0x58
    msg.buf[0] = lowByte(bms.getNumModules());
    377e:	481d      	ldr	r0, [pc, #116]	; (37f4 <VEcan()+0x368>)
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3780:	fb13 f302 	smulbb	r3, r3, r2
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    3784:	f3c3 2107 	ubfx	r1, r3, #8, #8
    msg.id = 0x372;
    3788:	f240 3272 	movw	r2, #882	; 0x372
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    378c:	7223      	strb	r3, [r4, #8]
    msg.len = 8;
    378e:	2308      	movs	r3, #8
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    3790:	7261      	strb	r1, [r4, #9]
    msg.id = 0x372;
    3792:	6022      	str	r2, [r4, #0]
    msg.len = 8;
    3794:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = lowByte(bms.getNumModules());
    3796:	f7fd fd75 	bl	1284 <BMSModuleManager::getNumModules()>
    379a:	4603      	mov	r3, r0
    msg.buf[1] = highByte(bms.getNumModules());
    379c:	4815      	ldr	r0, [pc, #84]	; (37f4 <VEcan()+0x368>)
    msg.buf[0] = lowByte(bms.getNumModules());
    379e:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(bms.getNumModules());
    37a0:	f7fd fd70 	bl	1284 <BMSModuleManager::getNumModules()>
    msg.buf[2] = 0x00;
    37a4:	2200      	movs	r2, #0
    msg.buf[1] = highByte(bms.getNumModules());
    37a6:	1203      	asrs	r3, r0, #8
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    37a8:	490c      	ldr	r1, [pc, #48]	; (37dc <VEcan()+0x350>)
    37aa:	480f      	ldr	r0, [pc, #60]	; (37e8 <VEcan()+0x35c>)
    msg.buf[1] = highByte(bms.getNumModules());
    37ac:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = 0x00;
    37ae:	8162      	strh	r2, [r4, #10]
    msg.buf[4] = 0x00;
    37b0:	60e2      	str	r2, [r4, #12]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    37b2:	f005 f98f 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    37b6:	b970      	cbnz	r0, 37d6 <VEcan()+0x34a>
    37b8:	4a0c      	ldr	r2, [pc, #48]	; (37ec <VEcan()+0x360>)
    37ba:	490d      	ldr	r1, [pc, #52]	; (37f0 <VEcan()+0x364>)
    37bc:	6813      	ldr	r3, [r2, #0]
    37be:	6809      	ldr	r1, [r1, #0]
    37c0:	428b      	cmp	r3, r1
    37c2:	da08      	bge.n	37d6 <VEcan()+0x34a>
      msgbuf[sendCnt] = msg;
    37c4:	4d16      	ldr	r5, [pc, #88]	; (3820 <VEcan()+0x394>)
    37c6:	eb05 1503 	add.w	r5, r5, r3, lsl #4
      sendCnt++;
    37ca:	3301      	adds	r3, #1
    37cc:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    37ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    37d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    37d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37da:	bf00      	nop
    37dc:	1fffbf30 	.word	0x1fffbf30
    37e0:	1fff8728 	.word	0x1fff8728
    37e4:	1fff872c 	.word	0x1fff872c
    37e8:	1fffc1c0 	.word	0x1fffc1c0
    37ec:	1fffc0b0 	.word	0x1fffc0b0
    37f0:	1fff876c 	.word	0x1fff876c
    37f4:	1fff900c 	.word	0x1fff900c
    37f8:	42c80000 	.word	0x42c80000
    37fc:	1fffbec0 	.word	0x1fffbec0
    3800:	41200000 	.word	0x41200000
    3804:	1fffc1ac 	.word	0x1fffc1ac
    3808:	1fff9000 	.word	0x1fff9000
    380c:	1fff8738 	.word	0x1fff8738
    3810:	1fff8730 	.word	0x1fff8730
    3814:	1fff9008 	.word	0x1fff9008
    3818:	447a0000 	.word	0x447a0000
    381c:	43889333 	.word	0x43889333
    3820:	1fffbfc0 	.word	0x1fffbfc0
    if (settings.chargertype == Pylon) {
    3824:	2b09      	cmp	r3, #9
      msg.id = 0x359;
    3826:	4cb3      	ldr	r4, [pc, #716]	; (3af4 <VEcan()+0x668>)
    if (settings.chargertype == Pylon) {
    3828:	f000 82b8 	beq.w	3d9c <VEcan()+0x910>
    382c:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 3af8 <VEcan()+0x66c>
    3830:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 3afc <VEcan()+0x670>
    3834:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 3b00 <VEcan()+0x674>
    3838:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 3b04 <VEcan()+0x678>
    383c:	4fb2      	ldr	r7, [pc, #712]	; (3b08 <VEcan()+0x67c>)
    383e:	4eb3      	ldr	r6, [pc, #716]	; (3b0c <VEcan()+0x680>)
      msg.buf[0] = 0x00;
    3840:	4bb3      	ldr	r3, [pc, #716]	; (3b10 <VEcan()+0x684>)
    3842:	60a3      	str	r3, [r4, #8]
      msg.id = 0x618;
    3844:	f44f 63c3 	mov.w	r3, #1560	; 0x618
    3848:	6023      	str	r3, [r4, #0]
      msg.len = 8;
    384a:	2308      	movs	r3, #8
    384c:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    384e:	49a9      	ldr	r1, [pc, #676]	; (3af4 <VEcan()+0x668>)
    3850:	48b0      	ldr	r0, [pc, #704]	; (3b14 <VEcan()+0x688>)
      msg.buf[4] = 0x00;
    3852:	2300      	movs	r3, #0
    3854:	60e3      	str	r3, [r4, #12]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3856:	f005 f93d 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    385a:	b970      	cbnz	r0, 387a <VEcan()+0x3ee>
    385c:	4bae      	ldr	r3, [pc, #696]	; (3b18 <VEcan()+0x68c>)
    385e:	4aaf      	ldr	r2, [pc, #700]	; (3b1c <VEcan()+0x690>)
    3860:	6819      	ldr	r1, [r3, #0]
    3862:	6813      	ldr	r3, [r2, #0]
    3864:	428b      	cmp	r3, r1
    3866:	da08      	bge.n	387a <VEcan()+0x3ee>
        msgbuf[sendCnt] = msg;
    3868:	49ad      	ldr	r1, [pc, #692]	; (3b20 <VEcan()+0x694>)
    386a:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
        sendCnt++;
    386e:	3301      	adds	r3, #1
    3870:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3876:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      delay(2);
    387a:	2002      	movs	r0, #2
    387c:	f007 f966 	bl	ab4c <delay>
      msg.buf[0] = 0x00;
    3880:	4ba3      	ldr	r3, [pc, #652]	; (3b10 <VEcan()+0x684>)
    3882:	60a3      	str	r3, [r4, #8]
      msg.id = 0x5D8;
    3884:	f44f 63bb 	mov.w	r3, #1496	; 0x5d8
    3888:	6023      	str	r3, [r4, #0]
      msg.len = 8;
    388a:	2308      	movs	r3, #8
    388c:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    388e:	4999      	ldr	r1, [pc, #612]	; (3af4 <VEcan()+0x668>)
    3890:	48a0      	ldr	r0, [pc, #640]	; (3b14 <VEcan()+0x688>)
      msg.buf[4] = 0x00;
    3892:	2300      	movs	r3, #0
    3894:	60e3      	str	r3, [r4, #12]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3896:	f005 f91d 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    389a:	b970      	cbnz	r0, 38ba <VEcan()+0x42e>
    389c:	4b9e      	ldr	r3, [pc, #632]	; (3b18 <VEcan()+0x68c>)
    389e:	4a9f      	ldr	r2, [pc, #636]	; (3b1c <VEcan()+0x690>)
    38a0:	6819      	ldr	r1, [r3, #0]
    38a2:	6813      	ldr	r3, [r2, #0]
    38a4:	428b      	cmp	r3, r1
    38a6:	da08      	bge.n	38ba <VEcan()+0x42e>
        msgbuf[sendCnt] = msg;
    38a8:	499d      	ldr	r1, [pc, #628]	; (3b20 <VEcan()+0x694>)
    38aa:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
        sendCnt++;
    38ae:	3301      	adds	r3, #1
    38b0:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    38b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    38b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      delay(2);
    38ba:	2002      	movs	r0, #2
    38bc:	f007 f946 	bl	ab4c <delay>
      msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    38c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    38c2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    38c4:	6d69      	ldr	r1, [r5, #84]	; 0x54
    38c6:	fb00 f203 	mul.w	r2, r0, r3
    38ca:	fb01 f202 	mul.w	r2, r1, r2
      msg.buf[5] = lowByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    38ce:	fb13 f300 	smulbb	r3, r3, r0
    38d2:	fb13 f301 	smulbb	r3, r3, r1
      msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    38d6:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    38da:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    38de:	1212      	asrs	r2, r2, #8
    38e0:	7322      	strb	r2, [r4, #12]
      msg.buf[5] = lowByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    38e2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    38e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    38ea:	7363      	strb	r3, [r4, #13]
      msg.buf[0] = 0x03;
    38ec:	4b8d      	ldr	r3, [pc, #564]	; (3b24 <VEcan()+0x698>)
    38ee:	60a3      	str	r3, [r4, #8]
      msg.id = 0x558;
    38f0:	f44f 63ab 	mov.w	r3, #1368	; 0x558
    38f4:	6023      	str	r3, [r4, #0]
      msg.len = 8;
    38f6:	2308      	movs	r3, #8
    38f8:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    38fa:	497e      	ldr	r1, [pc, #504]	; (3af4 <VEcan()+0x668>)
    38fc:	4885      	ldr	r0, [pc, #532]	; (3b14 <VEcan()+0x688>)
      msg.buf[6] = 0x05;
    38fe:	f240 7305 	movw	r3, #1797	; 0x705
    3902:	81e3      	strh	r3, [r4, #14]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3904:	f005 f8e6 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3908:	b970      	cbnz	r0, 3928 <VEcan()+0x49c>
    390a:	4b83      	ldr	r3, [pc, #524]	; (3b18 <VEcan()+0x68c>)
    390c:	4a83      	ldr	r2, [pc, #524]	; (3b1c <VEcan()+0x690>)
    390e:	6819      	ldr	r1, [r3, #0]
    3910:	6813      	ldr	r3, [r2, #0]
    3912:	428b      	cmp	r3, r1
    3914:	da08      	bge.n	3928 <VEcan()+0x49c>
        msgbuf[sendCnt] = msg;
    3916:	4982      	ldr	r1, [pc, #520]	; (3b20 <VEcan()+0x694>)
    3918:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
        sendCnt++;
    391c:	3301      	adds	r3, #1
    391e:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3920:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3924:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      delay(2);
    3928:	2002      	movs	r0, #2
    392a:	f007 f90f 	bl	ab4c <delay>
      msg.buf[0] = 0x00;
    392e:	4b7e      	ldr	r3, [pc, #504]	; (3b28 <VEcan()+0x69c>)
    3930:	60a3      	str	r3, [r4, #8]
      msg.buf[4] = 0x00;
    3932:	4b7e      	ldr	r3, [pc, #504]	; (3b2c <VEcan()+0x6a0>)
    3934:	60e3      	str	r3, [r4, #12]
      msg.id = 0x598;
    3936:	f44f 63b3 	mov.w	r3, #1432	; 0x598
    393a:	6023      	str	r3, [r4, #0]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    393c:	496d      	ldr	r1, [pc, #436]	; (3af4 <VEcan()+0x668>)
    393e:	4875      	ldr	r0, [pc, #468]	; (3b14 <VEcan()+0x688>)
      msg.len = 8;
    3940:	2308      	movs	r3, #8
    3942:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3944:	f005 f8c6 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3948:	b970      	cbnz	r0, 3968 <VEcan()+0x4dc>
    394a:	4b73      	ldr	r3, [pc, #460]	; (3b18 <VEcan()+0x68c>)
    394c:	4a73      	ldr	r2, [pc, #460]	; (3b1c <VEcan()+0x690>)
    394e:	6819      	ldr	r1, [r3, #0]
    3950:	6813      	ldr	r3, [r2, #0]
    3952:	428b      	cmp	r3, r1
    3954:	da08      	bge.n	3968 <VEcan()+0x4dc>
        msgbuf[sendCnt] = msg;
    3956:	4972      	ldr	r1, [pc, #456]	; (3b20 <VEcan()+0x694>)
    3958:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
        sendCnt++;
    395c:	3301      	adds	r3, #1
    395e:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3960:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3964:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      delay(2);
    3968:	2002      	movs	r0, #2
    396a:	f007 f8ef 	bl	ab4c <delay>
      msg.id = 0x358;
    396e:	f44f 7256 	mov.w	r2, #856	; 0x358
      if (storagemode == 0) {
    3972:	f8db 3000 	ldr.w	r3, [fp]
      msg.id = 0x358;
    3976:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    3978:	2208      	movs	r2, #8
        msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    397a:	6d68      	ldr	r0, [r5, #84]	; 0x54
      msg.len = 8;
    397c:	71e2      	strb	r2, [r4, #7]
      if (storagemode == 0) {
    397e:	2b00      	cmp	r3, #0
    3980:	f000 8326 	beq.w	3fd0 <VEcan()+0xb44>
        msg.buf[0] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3984:	f009 fd56 	bl	d434 <__aeabi_i2f>
    3988:	6a29      	ldr	r1, [r5, #32]
    398a:	4683      	mov	fp, r0
    398c:	f009 fda6 	bl	d4dc <__aeabi_fmul>
    3990:	4967      	ldr	r1, [pc, #412]	; (3b30 <VEcan()+0x6a4>)
    3992:	f009 fda3 	bl	d4dc <__aeabi_fmul>
    3996:	f009 ff8d 	bl	d8b4 <__aeabi_f2uiz>
      msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    399a:	69a9      	ldr	r1, [r5, #24]
        msg.buf[0] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    399c:	f3c0 2207 	ubfx	r2, r0, #8, #8
        msg.buf[1] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    39a0:	b2c3      	uxtb	r3, r0
      msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    39a2:	4658      	mov	r0, fp
        msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    39a4:	7222      	strb	r2, [r4, #8]
        msg.buf[1] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    39a6:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    39a8:	f009 fd98 	bl	d4dc <__aeabi_fmul>
    39ac:	4960      	ldr	r1, [pc, #384]	; (3b30 <VEcan()+0x6a4>)
    39ae:	f009 fd95 	bl	d4dc <__aeabi_fmul>
    39b2:	f009 ff7f 	bl	d8b4 <__aeabi_f2uiz>
      msg.buf[4] = highByte(discurrent);
    39b6:	f8ba 2000 	ldrh.w	r2, [sl]
      msg.buf[6] = highByte(chargecurrent);
    39ba:	f8b9 3000 	ldrh.w	r3, [r9]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    39be:	494d      	ldr	r1, [pc, #308]	; (3af4 <VEcan()+0x668>)
      msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    39c0:	ba40      	rev16	r0, r0
    39c2:	8160      	strh	r0, [r4, #10]
      msg.buf[4] = highByte(discurrent);
    39c4:	ba52      	rev16	r2, r2
      msg.buf[6] = highByte(chargecurrent);
    39c6:	ba5b      	rev16	r3, r3
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    39c8:	4852      	ldr	r0, [pc, #328]	; (3b14 <VEcan()+0x688>)
      msg.buf[4] = highByte(discurrent);
    39ca:	81a2      	strh	r2, [r4, #12]
      msg.buf[6] = highByte(chargecurrent);
    39cc:	81e3      	strh	r3, [r4, #14]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    39ce:	f005 f881 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    39d2:	b970      	cbnz	r0, 39f2 <VEcan()+0x566>
    39d4:	4b50      	ldr	r3, [pc, #320]	; (3b18 <VEcan()+0x68c>)
    39d6:	4a51      	ldr	r2, [pc, #324]	; (3b1c <VEcan()+0x690>)
    39d8:	6819      	ldr	r1, [r3, #0]
    39da:	6813      	ldr	r3, [r2, #0]
    39dc:	428b      	cmp	r3, r1
    39de:	da08      	bge.n	39f2 <VEcan()+0x566>
        msgbuf[sendCnt] = msg;
    39e0:	4d4f      	ldr	r5, [pc, #316]	; (3b20 <VEcan()+0x694>)
    39e2:	eb05 1503 	add.w	r5, r5, r3, lsl #4
        sendCnt++;
    39e6:	3301      	adds	r3, #1
    39e8:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    39ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    39ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      delay(2);
    39f2:	2002      	movs	r0, #2
    39f4:	f007 f8aa 	bl	ab4c <delay>
      msg.id = 0x3D8;
    39f8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
      msg.buf[0] = highByte(SOC * 100);
    39fc:	f8d8 3000 	ldr.w	r3, [r8]
      msg.id = 0x3D8;
    3a00:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    3a02:	2208      	movs	r2, #8
    3a04:	71e2      	strb	r2, [r4, #7]
      msg.buf[0] = highByte(SOC * 100);
    3a06:	2264      	movs	r2, #100	; 0x64
    3a08:	fb03 f202 	mul.w	r2, r3, r2
      msg.buf[1] = lowByte(SOC * 100);
    3a0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a14:	009b      	lsls	r3, r3, #2
    3a16:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = highByte(SOH);
    3a18:	883d      	ldrh	r5, [r7, #0]
      msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    3a1a:	4b46      	ldr	r3, [pc, #280]	; (3b34 <VEcan()+0x6a8>)
    3a1c:	4946      	ldr	r1, [pc, #280]	; (3b38 <VEcan()+0x6ac>)
    3a1e:	6818      	ldr	r0, [r3, #0]
      msg.buf[0] = highByte(SOC * 100);
    3a20:	1212      	asrs	r2, r2, #8
      msg.buf[2] = highByte(SOH);
    3a22:	ba6d      	rev16	r5, r5
      msg.buf[0] = highByte(SOC * 100);
    3a24:	7222      	strb	r2, [r4, #8]
      msg.buf[2] = highByte(SOH);
    3a26:	8165      	strh	r5, [r4, #10]
      msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    3a28:	f009 fd58 	bl	d4dc <__aeabi_fmul>
    3a2c:	f009 ff42 	bl	d8b4 <__aeabi_f2uiz>
      msg.buf[6] = 0xF9;
    3a30:	22f9      	movs	r2, #249	; 0xf9
      msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    3a32:	ba43      	rev16	r3, r0
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3a34:	492f      	ldr	r1, [pc, #188]	; (3af4 <VEcan()+0x668>)
    3a36:	4837      	ldr	r0, [pc, #220]	; (3b14 <VEcan()+0x688>)
      msg.buf[6] = 0xF9;
    3a38:	81e2      	strh	r2, [r4, #14]
      msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    3a3a:	81a3      	strh	r3, [r4, #12]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3a3c:	f005 f84a 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3a40:	b970      	cbnz	r0, 3a60 <VEcan()+0x5d4>
    3a42:	4a36      	ldr	r2, [pc, #216]	; (3b1c <VEcan()+0x690>)
    3a44:	4934      	ldr	r1, [pc, #208]	; (3b18 <VEcan()+0x68c>)
    3a46:	6813      	ldr	r3, [r2, #0]
    3a48:	6809      	ldr	r1, [r1, #0]
    3a4a:	428b      	cmp	r3, r1
    3a4c:	da08      	bge.n	3a60 <VEcan()+0x5d4>
        msgbuf[sendCnt] = msg;
    3a4e:	4d34      	ldr	r5, [pc, #208]	; (3b20 <VEcan()+0x694>)
    3a50:	eb05 1503 	add.w	r5, r5, r3, lsl #4
        sendCnt++;
    3a54:	3301      	adds	r3, #1
    3a56:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3a58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3a5c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      delay(2);
    3a60:	2002      	movs	r0, #2
    3a62:	f007 f873 	bl	ab4c <delay>
      msg.buf[4] = 0x00;
    3a66:	4b35      	ldr	r3, [pc, #212]	; (3b3c <VEcan()+0x6b0>)
      msg.buf[0] = 0x00;
    3a68:	4a2f      	ldr	r2, [pc, #188]	; (3b28 <VEcan()+0x69c>)
      msg.buf[4] = 0x00;
    3a6a:	60e3      	str	r3, [r4, #12]
      msg.id = 0x458;
    3a6c:	f44f 608b 	mov.w	r0, #1112	; 0x458
    3a70:	6020      	str	r0, [r4, #0]
      msg.len = 8;
    3a72:	2308      	movs	r3, #8
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3a74:	491f      	ldr	r1, [pc, #124]	; (3af4 <VEcan()+0x668>)
    3a76:	4827      	ldr	r0, [pc, #156]	; (3b14 <VEcan()+0x688>)
      msg.buf[0] = 0x00;
    3a78:	60a2      	str	r2, [r4, #8]
      msg.len = 8;
    3a7a:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3a7c:	f005 f82a 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3a80:	b970      	cbnz	r0, 3aa0 <VEcan()+0x614>
    3a82:	4a26      	ldr	r2, [pc, #152]	; (3b1c <VEcan()+0x690>)
    3a84:	4924      	ldr	r1, [pc, #144]	; (3b18 <VEcan()+0x68c>)
    3a86:	6813      	ldr	r3, [r2, #0]
    3a88:	6809      	ldr	r1, [r1, #0]
    3a8a:	428b      	cmp	r3, r1
    3a8c:	da08      	bge.n	3aa0 <VEcan()+0x614>
        msgbuf[sendCnt] = msg;
    3a8e:	4d24      	ldr	r5, [pc, #144]	; (3b20 <VEcan()+0x694>)
    3a90:	eb05 1503 	add.w	r5, r5, r3, lsl #4
        sendCnt++;
    3a94:	3301      	adds	r3, #1
    3a96:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3a98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3a9c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      delay(2);
    3aa0:	2002      	movs	r0, #2
    3aa2:	f007 f853 	bl	ab4c <delay>
      msg.id = 0x518;
    3aa6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
      msg.len = 8;
    3aaa:	2308      	movs	r3, #8
      msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    3aac:	4824      	ldr	r0, [pc, #144]	; (3b40 <VEcan()+0x6b4>)
      msg.id = 0x518;
    3aae:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    3ab0:	71e3      	strb	r3, [r4, #7]
      msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    3ab2:	f7fd fbe5 	bl	1280 <BMSModuleManager::getHighTemperature()>
    3ab6:	491e      	ldr	r1, [pc, #120]	; (3b30 <VEcan()+0x6a4>)
    3ab8:	f009 fd10 	bl	d4dc <__aeabi_fmul>
    3abc:	f009 fefa 	bl	d8b4 <__aeabi_f2uiz>
    3ac0:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    3ac4:	481e      	ldr	r0, [pc, #120]	; (3b40 <VEcan()+0x6b4>)
      msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    3ac6:	7223      	strb	r3, [r4, #8]
      msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    3ac8:	f7fd fbda 	bl	1280 <BMSModuleManager::getHighTemperature()>
    3acc:	4918      	ldr	r1, [pc, #96]	; (3b30 <VEcan()+0x6a4>)
    3ace:	f009 fd05 	bl	d4dc <__aeabi_fmul>
    3ad2:	f009 feef 	bl	d8b4 <__aeabi_f2uiz>
    3ad6:	4603      	mov	r3, r0
      msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    3ad8:	4819      	ldr	r0, [pc, #100]	; (3b40 <VEcan()+0x6b4>)
      msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    3ada:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    3adc:	f7fd fbd8 	bl	1290 <BMSModuleManager::getLowTemperature()>
    3ae0:	4913      	ldr	r1, [pc, #76]	; (3b30 <VEcan()+0x6a4>)
    3ae2:	f009 fcfb 	bl	d4dc <__aeabi_fmul>
    3ae6:	f009 fee5 	bl	d8b4 <__aeabi_f2uiz>
    3aea:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    3aee:	4814      	ldr	r0, [pc, #80]	; (3b40 <VEcan()+0x6b4>)
      msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    3af0:	72a3      	strb	r3, [r4, #10]
    3af2:	e027      	b.n	3b44 <VEcan()+0x6b8>
    3af4:	1fffbf30 	.word	0x1fffbf30
    3af8:	1fffc198 	.word	0x1fffc198
    3afc:	1fffbe38 	.word	0x1fffbe38
    3b00:	1fffbecc 	.word	0x1fffbecc
    3b04:	1fff8728 	.word	0x1fff8728
    3b08:	1fff872c 	.word	0x1fff872c
    3b0c:	1fffbec0 	.word	0x1fffbec0
    3b10:	44594200 	.word	0x44594200
    3b14:	1fffc1c0 	.word	0x1fffc1c0
    3b18:	1fff876c 	.word	0x1fff876c
    3b1c:	1fffc0b0 	.word	0x1fffc0b0
    3b20:	1fffbfc0 	.word	0x1fffbfc0
    3b24:	04001203 	.word	0x04001203
    3b28:	34120000 	.word	0x34120000
    3b2c:	4f040000 	.word	0x4f040000
    3b30:	41200000 	.word	0x41200000
    3b34:	1fff9004 	.word	0x1fff9004
    3b38:	3b360b62 	.word	0x3b360b62
    3b3c:	78560000 	.word	0x78560000
    3b40:	1fff900c 	.word	0x1fff900c
      msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    3b44:	f7fd fba4 	bl	1290 <BMSModuleManager::getLowTemperature()>
    3b48:	4988      	ldr	r1, [pc, #544]	; (3d6c <VEcan()+0x8e0>)
    3b4a:	f009 fcc7 	bl	d4dc <__aeabi_fmul>
    3b4e:	f009 feb1 	bl	d8b4 <__aeabi_f2uiz>
      msg.buf[4] = 0xFF;
    3b52:	f04f 32ff 	mov.w	r2, #4294967295
      msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    3b56:	4603      	mov	r3, r0
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3b58:	4985      	ldr	r1, [pc, #532]	; (3d70 <VEcan()+0x8e4>)
    3b5a:	4886      	ldr	r0, [pc, #536]	; (3d74 <VEcan()+0x8e8>)
      msg.buf[4] = 0xFF;
    3b5c:	60e2      	str	r2, [r4, #12]
      msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    3b5e:	72e3      	strb	r3, [r4, #11]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3b60:	f004 ffb8 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3b64:	b970      	cbnz	r0, 3b84 <VEcan()+0x6f8>
    3b66:	4a84      	ldr	r2, [pc, #528]	; (3d78 <VEcan()+0x8ec>)
    3b68:	4984      	ldr	r1, [pc, #528]	; (3d7c <VEcan()+0x8f0>)
    3b6a:	6813      	ldr	r3, [r2, #0]
    3b6c:	6809      	ldr	r1, [r1, #0]
    3b6e:	428b      	cmp	r3, r1
    3b70:	da08      	bge.n	3b84 <VEcan()+0x6f8>
        msgbuf[sendCnt] = msg;
    3b72:	4d83      	ldr	r5, [pc, #524]	; (3d80 <VEcan()+0x8f4>)
    3b74:	eb05 1503 	add.w	r5, r5, r3, lsl #4
        sendCnt++;
    3b78:	3301      	adds	r3, #1
    3b7a:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3b7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3b80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      delay(2);
    3b84:	2002      	movs	r0, #2
    3b86:	f006 ffe1 	bl	ab4c <delay>
      msg.id = 0x4D8;
    3b8a:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
      msg.len = 8;
    3b8e:	2308      	movs	r3, #8
      msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    3b90:	487c      	ldr	r0, [pc, #496]	; (3d84 <VEcan()+0x8f8>)
      msg.id = 0x4D8;
    3b92:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    3b94:	71e3      	strb	r3, [r4, #7]
      msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    3b96:	f7fd fab9 	bl	110c <BMSModuleManager::getPackVoltage()>
    3b9a:	4974      	ldr	r1, [pc, #464]	; (3d6c <VEcan()+0x8e0>)
    3b9c:	f009 fc9e 	bl	d4dc <__aeabi_fmul>
    3ba0:	f009 fe88 	bl	d8b4 <__aeabi_f2uiz>
    3ba4:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3ba8:	4876      	ldr	r0, [pc, #472]	; (3d84 <VEcan()+0x8f8>)
      msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    3baa:	7223      	strb	r3, [r4, #8]
      msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3bac:	f7fd faae 	bl	110c <BMSModuleManager::getPackVoltage()>
    3bb0:	496e      	ldr	r1, [pc, #440]	; (3d6c <VEcan()+0x8e0>)
    3bb2:	f009 fc93 	bl	d4dc <__aeabi_fmul>
    3bb6:	f009 fe7d 	bl	d8b4 <__aeabi_f2uiz>
      msg.buf[2] = highByte(long(currentact / 100));
    3bba:	4973      	ldr	r1, [pc, #460]	; (3d88 <VEcan()+0x8fc>)
      msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3bbc:	4603      	mov	r3, r0
      msg.buf[2] = highByte(long(currentact / 100));
    3bbe:	6830      	ldr	r0, [r6, #0]
      msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3bc0:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = highByte(long(currentact / 100));
    3bc2:	f009 fd3f 	bl	d644 <__aeabi_fdiv>
    3bc6:	f009 fe4f 	bl	d868 <__aeabi_f2iz>
    3bca:	ba43      	rev16	r3, r0
      msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3bcc:	486d      	ldr	r0, [pc, #436]	; (3d84 <VEcan()+0x8f8>)
      msg.buf[2] = highByte(long(currentact / 100));
    3bce:	8163      	strh	r3, [r4, #10]
      msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3bd0:	f7fd fada 	bl	1188 <BMSModuleManager::getAvgTemperature()>
    3bd4:	4965      	ldr	r1, [pc, #404]	; (3d6c <VEcan()+0x8e0>)
    3bd6:	f009 fc81 	bl	d4dc <__aeabi_fmul>
    3bda:	f009 fe45 	bl	d868 <__aeabi_f2iz>
    3bde:	f340 2307 	sbfx	r3, r0, #8, #8
      msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3be2:	4868      	ldr	r0, [pc, #416]	; (3d84 <VEcan()+0x8f8>)
      msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3be4:	7323      	strb	r3, [r4, #12]
      msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3be6:	f7fd facf 	bl	1188 <BMSModuleManager::getAvgTemperature()>
    3bea:	4960      	ldr	r1, [pc, #384]	; (3d6c <VEcan()+0x8e0>)
    3bec:	f009 fc76 	bl	d4dc <__aeabi_fmul>
    3bf0:	f009 fe3a 	bl	d868 <__aeabi_f2iz>
      msg.buf[6] = 0x03;
    3bf4:	f640 0303 	movw	r3, #2051	; 0x803
      msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3bf8:	4602      	mov	r2, r0
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3bfa:	495d      	ldr	r1, [pc, #372]	; (3d70 <VEcan()+0x8e4>)
    3bfc:	485d      	ldr	r0, [pc, #372]	; (3d74 <VEcan()+0x8e8>)
      msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3bfe:	7362      	strb	r2, [r4, #13]
      msg.buf[6] = 0x03;
    3c00:	81e3      	strh	r3, [r4, #14]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3c02:	f004 ff67 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3c06:	b970      	cbnz	r0, 3c26 <VEcan()+0x79a>
    3c08:	4a5b      	ldr	r2, [pc, #364]	; (3d78 <VEcan()+0x8ec>)
    3c0a:	495c      	ldr	r1, [pc, #368]	; (3d7c <VEcan()+0x8f0>)
    3c0c:	6813      	ldr	r3, [r2, #0]
    3c0e:	6809      	ldr	r1, [r1, #0]
    3c10:	428b      	cmp	r3, r1
    3c12:	da08      	bge.n	3c26 <VEcan()+0x79a>
        msgbuf[sendCnt] = msg;
    3c14:	4d5a      	ldr	r5, [pc, #360]	; (3d80 <VEcan()+0x8f4>)
    3c16:	eb05 1503 	add.w	r5, r5, r3, lsl #4
        sendCnt++;
    3c1a:	3301      	adds	r3, #1
    3c1c:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3c1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3c22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      delay(2);
    3c26:	2002      	movs	r0, #2
    3c28:	f006 ff90 	bl	ab4c <delay>
      msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3c2c:	4b57      	ldr	r3, [pc, #348]	; (3d8c <VEcan()+0x900>)
      msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3c2e:	4a58      	ldr	r2, [pc, #352]	; (3d90 <VEcan()+0x904>)
      msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3c30:	681b      	ldr	r3, [r3, #0]
      msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3c32:	6812      	ldr	r2, [r2, #0]
      msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3c34:	60e3      	str	r3, [r4, #12]
      msg.id = 0x158;
    3c36:	f44f 75ac 	mov.w	r5, #344	; 0x158
      msg.len = 8;
    3c3a:	2308      	movs	r3, #8
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3c3c:	494c      	ldr	r1, [pc, #304]	; (3d70 <VEcan()+0x8e4>)
    3c3e:	484d      	ldr	r0, [pc, #308]	; (3d74 <VEcan()+0x8e8>)
      msg.id = 0x158;
    3c40:	6025      	str	r5, [r4, #0]
      msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3c42:	60a2      	str	r2, [r4, #8]
      msg.len = 8;
    3c44:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3c46:	f004 ff45 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3c4a:	2800      	cmp	r0, #0
    3c4c:	f47f adc3 	bne.w	37d6 <VEcan()+0x34a>
    3c50:	e5b2      	b.n	37b8 <VEcan()+0x32c>
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3c52:	f009 fbef 	bl	d434 <__aeabi_i2f>
    3c56:	6969      	ldr	r1, [r5, #20]
    3c58:	e433      	b.n	34c2 <VEcan()+0x36>
      msgbuf[sendCnt] = msg;
    3c5a:	4e49      	ldr	r6, [pc, #292]	; (3d80 <VEcan()+0x8f4>)
    3c5c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
      sendCnt++;
    3c60:	3301      	adds	r3, #1
    3c62:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    3c64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3c68:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      sendCnt++;
    3c6c:	e585      	b.n	377a <VEcan()+0x2ee>
      msgbuf[sendCnt] = msg;
    3c6e:	4e44      	ldr	r6, [pc, #272]	; (3d80 <VEcan()+0x8f4>)
    3c70:	eb06 1603 	add.w	r6, r6, r3, lsl #4
      sendCnt++;
    3c74:	3301      	adds	r3, #1
    3c76:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    3c78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3c7c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    if (balancecells == 1) {
    3c80:	4b44      	ldr	r3, [pc, #272]	; (3d94 <VEcan()+0x908>)
    3c82:	681b      	ldr	r3, [r3, #0]
    3c84:	2b01      	cmp	r3, #1
    3c86:	f47f ad13 	bne.w	36b0 <VEcan()+0x224>
      if (bms.getLowCellVolt() + settings.balanceHyst < bms.getHighCellVolt()) {
    3c8a:	483e      	ldr	r0, [pc, #248]	; (3d84 <VEcan()+0x8f8>)
    3c8c:	f7fd f86e 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    3c90:	6d29      	ldr	r1, [r5, #80]	; 0x50
    3c92:	f009 fb1b 	bl	d2cc <__addsf3>
    3c96:	4606      	mov	r6, r0
    3c98:	483a      	ldr	r0, [pc, #232]	; (3d84 <VEcan()+0x8f8>)
    3c9a:	f7fd f89b 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    3c9e:	4601      	mov	r1, r0
    3ca0:	4630      	mov	r0, r6
    3ca2:	f009 fdb9 	bl	d818 <__aeabi_fcmplt>
    3ca6:	2800      	cmp	r0, #0
    3ca8:	f43f ad02 	beq.w	36b0 <VEcan()+0x224>
        msg.id = 0x3c3;
    3cac:	f240 32c3 	movw	r2, #963	; 0x3c3
        msg.len = 8;
    3cb0:	2308      	movs	r3, #8
        if (bms.getLowCellVolt() < settings.balanceVoltage) {
    3cb2:	4834      	ldr	r0, [pc, #208]	; (3d84 <VEcan()+0x8f8>)
        msg.id = 0x3c3;
    3cb4:	6022      	str	r2, [r4, #0]
        msg.len = 8;
    3cb6:	71e3      	strb	r3, [r4, #7]
        if (bms.getLowCellVolt() < settings.balanceVoltage) {
    3cb8:	f7fd f858 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    3cbc:	6cee      	ldr	r6, [r5, #76]	; 0x4c
    3cbe:	4631      	mov	r1, r6
    3cc0:	f009 fdaa 	bl	d818 <__aeabi_fcmplt>
    3cc4:	2800      	cmp	r0, #0
    3cc6:	f000 818b 	beq.w	3fe0 <VEcan()+0xb54>
          msg.buf[0] = highByte(uint16_t(settings.balanceVoltage * 1000));
    3cca:	4933      	ldr	r1, [pc, #204]	; (3d98 <VEcan()+0x90c>)
    3ccc:	4630      	mov	r0, r6
    3cce:	f009 fc05 	bl	d4dc <__aeabi_fmul>
    3cd2:	f009 fdef 	bl	d8b4 <__aeabi_f2uiz>
    3cd6:	f3c0 2307 	ubfx	r3, r0, #8, #8
    3cda:	7223      	strb	r3, [r4, #8]
          msg.buf[1] = lowByte(uint16_t(settings.balanceVoltage * 1000));
    3cdc:	b2c3      	uxtb	r3, r0
        msg.buf[2] = 0x01;
    3cde:	f240 4201 	movw	r2, #1025	; 0x401
          msg.buf[1] = lowByte(uint16_t(settings.balanceVoltage * 1000));
    3ce2:	7263      	strb	r3, [r4, #9]
        if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3ce4:	4922      	ldr	r1, [pc, #136]	; (3d70 <VEcan()+0x8e4>)
    3ce6:	4823      	ldr	r0, [pc, #140]	; (3d74 <VEcan()+0x8e8>)
        msg.buf[2] = 0x01;
    3ce8:	8162      	strh	r2, [r4, #10]
        msg.buf[4] = 0x03;
    3cea:	2303      	movs	r3, #3
    3cec:	60e3      	str	r3, [r4, #12]
        if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3cee:	f004 fef1 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3cf2:	2800      	cmp	r0, #0
    3cf4:	f47f acdc 	bne.w	36b0 <VEcan()+0x224>
    3cf8:	4a1f      	ldr	r2, [pc, #124]	; (3d78 <VEcan()+0x8ec>)
    3cfa:	4920      	ldr	r1, [pc, #128]	; (3d7c <VEcan()+0x8f0>)
    3cfc:	6813      	ldr	r3, [r2, #0]
    3cfe:	6809      	ldr	r1, [r1, #0]
    3d00:	428b      	cmp	r3, r1
    3d02:	f6bf acd5 	bge.w	36b0 <VEcan()+0x224>
          msgbuf[sendCnt] = msg;
    3d06:	4e1e      	ldr	r6, [pc, #120]	; (3d80 <VEcan()+0x8f4>)
    3d08:	eb06 1603 	add.w	r6, r6, r3, lsl #4
          sendCnt++;
    3d0c:	3301      	adds	r3, #1
    3d0e:	6013      	str	r3, [r2, #0]
          msgbuf[sendCnt] = msg;
    3d10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3d14:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
          sendCnt++;
    3d18:	e4ca      	b.n	36b0 <VEcan()+0x224>
      msgbuf[sendCnt] = msg;
    3d1a:	4e19      	ldr	r6, [pc, #100]	; (3d80 <VEcan()+0x8f4>)
    3d1c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
      sendCnt++;
    3d20:	3301      	adds	r3, #1
    3d22:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    3d24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3d28:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      sendCnt++;
    3d2c:	e4a5      	b.n	367a <VEcan()+0x1ee>
      msgbuf[sendCnt] = msg;
    3d2e:	4e14      	ldr	r6, [pc, #80]	; (3d80 <VEcan()+0x8f4>)
    3d30:	eb06 1603 	add.w	r6, r6, r3, lsl #4
      sendCnt++;
    3d34:	3301      	adds	r3, #1
    3d36:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    3d38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3d3c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      sendCnt++;
    3d40:	e485      	b.n	364e <VEcan()+0x1c2>
      msgbuf[sendCnt] = msg;
    3d42:	4e0f      	ldr	r6, [pc, #60]	; (3d80 <VEcan()+0x8f4>)
    3d44:	eb06 1603 	add.w	r6, r6, r3, lsl #4
      sendCnt++;
    3d48:	3301      	adds	r3, #1
    3d4a:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    3d4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3d50:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      sendCnt++;
    3d54:	e464      	b.n	3620 <VEcan()+0x194>
      msgbuf[sendCnt] = msg;
    3d56:	4e0a      	ldr	r6, [pc, #40]	; (3d80 <VEcan()+0x8f4>)
    3d58:	eb06 1603 	add.w	r6, r6, r3, lsl #4
      sendCnt++;
    3d5c:	3301      	adds	r3, #1
    3d5e:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    3d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3d64:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      sendCnt++;
    3d68:	e413      	b.n	3592 <VEcan()+0x106>
    3d6a:	bf00      	nop
    3d6c:	41200000 	.word	0x41200000
    3d70:	1fffbf30 	.word	0x1fffbf30
    3d74:	1fffc1c0 	.word	0x1fffc1c0
    3d78:	1fffc0b0 	.word	0x1fffc0b0
    3d7c:	1fff876c 	.word	0x1fff876c
    3d80:	1fffbfc0 	.word	0x1fffbfc0
    3d84:	1fff900c 	.word	0x1fff900c
    3d88:	42c80000 	.word	0x42c80000
    3d8c:	1fffc1ac 	.word	0x1fffc1ac
    3d90:	1fff9000 	.word	0x1fff9000
    3d94:	1fff9008 	.word	0x1fff9008
    3d98:	447a0000 	.word	0x447a0000
      msg.id = 0x359;
    3d9c:	f240 3259 	movw	r2, #857	; 0x359
    3da0:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    3da2:	2208      	movs	r2, #8
      msg.buf[4] = 0x01;  //number of modules fixed for now
    3da4:	4b99      	ldr	r3, [pc, #612]	; (400c <VEcan()+0xb80>)
      msg.len = 8;
    3da6:	71e2      	strb	r2, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3da8:	4899      	ldr	r0, [pc, #612]	; (4010 <VEcan()+0xb84>)
      msg.buf[4] = 0x01;  //number of modules fixed for now
    3daa:	60e3      	str	r3, [r4, #12]
      msg.buf[0] = 0x00;  //protection to be translated later date
    3dac:	2200      	movs	r2, #0
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3dae:	4621      	mov	r1, r4
      msg.buf[0] = 0x00;  //protection to be translated later date
    3db0:	60a2      	str	r2, [r4, #8]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3db2:	f004 fe8f 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3db6:	b970      	cbnz	r0, 3dd6 <VEcan()+0x94a>
    3db8:	4a96      	ldr	r2, [pc, #600]	; (4014 <VEcan()+0xb88>)
    3dba:	4997      	ldr	r1, [pc, #604]	; (4018 <VEcan()+0xb8c>)
    3dbc:	6813      	ldr	r3, [r2, #0]
    3dbe:	6809      	ldr	r1, [r1, #0]
    3dc0:	428b      	cmp	r3, r1
    3dc2:	da08      	bge.n	3dd6 <VEcan()+0x94a>
        msgbuf[sendCnt] = msg;
    3dc4:	4e95      	ldr	r6, [pc, #596]	; (401c <VEcan()+0xb90>)
    3dc6:	eb06 1603 	add.w	r6, r6, r3, lsl #4
        sendCnt++;
    3dca:	3301      	adds	r3, #1
    3dcc:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3dce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3dd2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      if (storagemode == 0) {
    3dd6:	f8df b248 	ldr.w	fp, [pc, #584]	; 4020 <VEcan()+0xb94>
      delay(2);
    3dda:	2002      	movs	r0, #2
    3ddc:	f006 feb6 	bl	ab4c <delay>
      msg.id = 0x351;
    3de0:	f240 3251 	movw	r2, #849	; 0x351
      if (storagemode == 0) {
    3de4:	f8db 3000 	ldr.w	r3, [fp]
      msg.id = 0x351;
    3de8:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    3dea:	2208      	movs	r2, #8
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3dec:	6d68      	ldr	r0, [r5, #84]	; 0x54
      msg.len = 8;
    3dee:	71e2      	strb	r2, [r4, #7]
      if (storagemode == 0) {
    3df0:	2b00      	cmp	r3, #0
    3df2:	f000 80e9 	beq.w	3fc8 <VEcan()+0xb3c>
        msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3df6:	f009 fb1d 	bl	d434 <__aeabi_i2f>
    3dfa:	6a29      	ldr	r1, [r5, #32]
      msg.buf[2] = lowByte(chargecurrent);
    3dfc:	f8df 9224 	ldr.w	r9, [pc, #548]	; 4024 <VEcan()+0xb98>
      msg.buf[4] = lowByte(discurrent);
    3e00:	f8df a224 	ldr.w	sl, [pc, #548]	; 4028 <VEcan()+0xb9c>
        msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3e04:	f009 fb6a 	bl	d4dc <__aeabi_fmul>
    3e08:	4988      	ldr	r1, [pc, #544]	; (402c <VEcan()+0xba0>)
    3e0a:	f009 fb67 	bl	d4dc <__aeabi_fmul>
    3e0e:	f009 fd51 	bl	d8b4 <__aeabi_f2uiz>
    3e12:	b2c3      	uxtb	r3, r0
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3e14:	7223      	strb	r3, [r4, #8]
      msg.buf[2] = lowByte(chargecurrent);
    3e16:	f8b9 3000 	ldrh.w	r3, [r9]
    3e1a:	8163      	strh	r3, [r4, #10]
        msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3e1c:	f3c0 2007 	ubfx	r0, r0, #8, #8
      msg.buf[4] = lowByte(discurrent);
    3e20:	f8ba 3000 	ldrh.w	r3, [sl]
        msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3e24:	7260      	strb	r0, [r4, #9]
      msg.buf[4] = lowByte(discurrent);
    3e26:	81a3      	strh	r3, [r4, #12]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3e28:	4981      	ldr	r1, [pc, #516]	; (4030 <VEcan()+0xba4>)
    3e2a:	4879      	ldr	r0, [pc, #484]	; (4010 <VEcan()+0xb84>)
      msg.buf[6] = 0x00;
    3e2c:	2300      	movs	r3, #0
    3e2e:	81e3      	strh	r3, [r4, #14]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3e30:	f004 fe50 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3e34:	b970      	cbnz	r0, 3e54 <VEcan()+0x9c8>
    3e36:	4b78      	ldr	r3, [pc, #480]	; (4018 <VEcan()+0xb8c>)
    3e38:	4a76      	ldr	r2, [pc, #472]	; (4014 <VEcan()+0xb88>)
    3e3a:	6819      	ldr	r1, [r3, #0]
    3e3c:	6813      	ldr	r3, [r2, #0]
    3e3e:	428b      	cmp	r3, r1
    3e40:	da08      	bge.n	3e54 <VEcan()+0x9c8>
        msgbuf[sendCnt] = msg;
    3e42:	4e76      	ldr	r6, [pc, #472]	; (401c <VEcan()+0xb90>)
    3e44:	eb06 1603 	add.w	r6, r6, r3, lsl #4
        sendCnt++;
    3e48:	3301      	adds	r3, #1
    3e4a:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3e4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3e50:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      msg.buf[0] = lowByte(SOC);
    3e54:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4034 <VEcan()+0xba8>
      msg.buf[2] = lowByte(SOH);   //static for now
    3e58:	4f77      	ldr	r7, [pc, #476]	; (4038 <VEcan()+0xbac>)
      delay(2);
    3e5a:	2002      	movs	r0, #2
    3e5c:	f006 fe76 	bl	ab4c <delay>
      msg.buf[0] = lowByte(SOC);
    3e60:	f8b8 3000 	ldrh.w	r3, [r8]
    3e64:	8123      	strh	r3, [r4, #8]
      msg.buf[2] = lowByte(SOH);   //static for now
    3e66:	883b      	ldrh	r3, [r7, #0]
    3e68:	8163      	strh	r3, [r4, #10]
      msg.id = 0x355;
    3e6a:	f240 3355 	movw	r3, #853	; 0x355
    3e6e:	6023      	str	r3, [r4, #0]
      msg.len = 8;
    3e70:	2308      	movs	r3, #8
    3e72:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3e74:	496e      	ldr	r1, [pc, #440]	; (4030 <VEcan()+0xba4>)
    3e76:	4866      	ldr	r0, [pc, #408]	; (4010 <VEcan()+0xb84>)
      msg.buf[4] = 0x00;
    3e78:	2300      	movs	r3, #0
    3e7a:	60e3      	str	r3, [r4, #12]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3e7c:	f004 fe2a 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3e80:	b970      	cbnz	r0, 3ea0 <VEcan()+0xa14>
    3e82:	4b65      	ldr	r3, [pc, #404]	; (4018 <VEcan()+0xb8c>)
    3e84:	4a63      	ldr	r2, [pc, #396]	; (4014 <VEcan()+0xb88>)
    3e86:	6819      	ldr	r1, [r3, #0]
    3e88:	6813      	ldr	r3, [r2, #0]
    3e8a:	428b      	cmp	r3, r1
    3e8c:	da08      	bge.n	3ea0 <VEcan()+0xa14>
        msgbuf[sendCnt] = msg;
    3e8e:	4e63      	ldr	r6, [pc, #396]	; (401c <VEcan()+0xb90>)
    3e90:	eb06 1603 	add.w	r6, r6, r3, lsl #4
        sendCnt++;
    3e94:	3301      	adds	r3, #1
    3e96:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3e98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3e9c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      delay(2);
    3ea0:	2002      	movs	r0, #2
    3ea2:	f006 fe53 	bl	ab4c <delay>
      msg.id = 0x356;
    3ea6:	f240 3356 	movw	r3, #854	; 0x356
    3eaa:	6023      	str	r3, [r4, #0]
      msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3eac:	4863      	ldr	r0, [pc, #396]	; (403c <VEcan()+0xbb0>)
      msg.buf[2] = lowByte(long(currentact / 100));
    3eae:	4e64      	ldr	r6, [pc, #400]	; (4040 <VEcan()+0xbb4>)
      msg.len = 8;
    3eb0:	2308      	movs	r3, #8
    3eb2:	71e3      	strb	r3, [r4, #7]
      msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3eb4:	f7fd f92a 	bl	110c <BMSModuleManager::getPackVoltage()>
    3eb8:	4962      	ldr	r1, [pc, #392]	; (4044 <VEcan()+0xbb8>)
    3eba:	f009 fb0f 	bl	d4dc <__aeabi_fmul>
    3ebe:	f009 fcf9 	bl	d8b4 <__aeabi_f2uiz>
    3ec2:	7220      	strb	r0, [r4, #8]
      msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3ec4:	485d      	ldr	r0, [pc, #372]	; (403c <VEcan()+0xbb0>)
    3ec6:	f7fd f921 	bl	110c <BMSModuleManager::getPackVoltage()>
    3eca:	495e      	ldr	r1, [pc, #376]	; (4044 <VEcan()+0xbb8>)
    3ecc:	f009 fb06 	bl	d4dc <__aeabi_fmul>
    3ed0:	f009 fcf0 	bl	d8b4 <__aeabi_f2uiz>
    3ed4:	f3c0 2007 	ubfx	r0, r0, #8, #8
      msg.buf[2] = lowByte(long(currentact / 100));
    3ed8:	495a      	ldr	r1, [pc, #360]	; (4044 <VEcan()+0xbb8>)
      msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3eda:	7260      	strb	r0, [r4, #9]
      msg.buf[2] = lowByte(long(currentact / 100));
    3edc:	6830      	ldr	r0, [r6, #0]
    3ede:	f009 fbb1 	bl	d644 <__aeabi_fdiv>
    3ee2:	f009 fcc1 	bl	d868 <__aeabi_f2iz>
    3ee6:	8160      	strh	r0, [r4, #10]
      msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3ee8:	4854      	ldr	r0, [pc, #336]	; (403c <VEcan()+0xbb0>)
    3eea:	f7fd f94d 	bl	1188 <BMSModuleManager::getAvgTemperature()>
    3eee:	494f      	ldr	r1, [pc, #316]	; (402c <VEcan()+0xba0>)
    3ef0:	f009 faf4 	bl	d4dc <__aeabi_fmul>
    3ef4:	f009 fcb8 	bl	d868 <__aeabi_f2iz>
    3ef8:	7320      	strb	r0, [r4, #12]
      msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3efa:	4850      	ldr	r0, [pc, #320]	; (403c <VEcan()+0xbb0>)
    3efc:	f7fd f944 	bl	1188 <BMSModuleManager::getAvgTemperature()>
    3f00:	494a      	ldr	r1, [pc, #296]	; (402c <VEcan()+0xba0>)
    3f02:	f009 faeb 	bl	d4dc <__aeabi_fmul>
    3f06:	f009 fcaf 	bl	d868 <__aeabi_f2iz>
    3f0a:	f340 2007 	sbfx	r0, r0, #8, #8
    3f0e:	7360      	strb	r0, [r4, #13]
      msg.buf[6] = 0;
    3f10:	2300      	movs	r3, #0
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3f12:	4947      	ldr	r1, [pc, #284]	; (4030 <VEcan()+0xba4>)
    3f14:	483e      	ldr	r0, [pc, #248]	; (4010 <VEcan()+0xb84>)
      msg.buf[6] = 0;
    3f16:	81e3      	strh	r3, [r4, #14]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3f18:	f004 fddc 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3f1c:	b970      	cbnz	r0, 3f3c <VEcan()+0xab0>
    3f1e:	4b3e      	ldr	r3, [pc, #248]	; (4018 <VEcan()+0xb8c>)
    3f20:	4a3c      	ldr	r2, [pc, #240]	; (4014 <VEcan()+0xb88>)
    3f22:	6819      	ldr	r1, [r3, #0]
    3f24:	6813      	ldr	r3, [r2, #0]
    3f26:	428b      	cmp	r3, r1
    3f28:	da08      	bge.n	3f3c <VEcan()+0xab0>
        msgbuf[sendCnt] = msg;
    3f2a:	493c      	ldr	r1, [pc, #240]	; (401c <VEcan()+0xb90>)
    3f2c:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
        sendCnt++;
    3f30:	3301      	adds	r3, #1
    3f32:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3f34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3f38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      delay(2);
    3f3c:	2002      	movs	r0, #2
    3f3e:	f006 fe05 	bl	ab4c <delay>
      msg.id = 0x35C;
    3f42:	f44f 7357 	mov.w	r3, #860	; 0x35c
    3f46:	6023      	str	r3, [r4, #0]
      msg.len = 2;
    3f48:	2302      	movs	r3, #2
    3f4a:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3f4c:	4938      	ldr	r1, [pc, #224]	; (4030 <VEcan()+0xba4>)
    3f4e:	4830      	ldr	r0, [pc, #192]	; (4010 <VEcan()+0xb84>)
      msg.buf[0] = 0xC0;  //fixed charge and discharge enable for verifcation
    3f50:	23c0      	movs	r3, #192	; 0xc0
    3f52:	8123      	strh	r3, [r4, #8]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3f54:	f004 fdbe 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3f58:	b970      	cbnz	r0, 3f78 <VEcan()+0xaec>
    3f5a:	4b2f      	ldr	r3, [pc, #188]	; (4018 <VEcan()+0xb8c>)
    3f5c:	4a2d      	ldr	r2, [pc, #180]	; (4014 <VEcan()+0xb88>)
    3f5e:	6819      	ldr	r1, [r3, #0]
    3f60:	6813      	ldr	r3, [r2, #0]
    3f62:	428b      	cmp	r3, r1
    3f64:	da08      	bge.n	3f78 <VEcan()+0xaec>
        msgbuf[sendCnt] = msg;
    3f66:	492d      	ldr	r1, [pc, #180]	; (401c <VEcan()+0xb90>)
    3f68:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
        sendCnt++;
    3f6c:	3301      	adds	r3, #1
    3f6e:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3f70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3f74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      delay(2);
    3f78:	2002      	movs	r0, #2
    3f7a:	f006 fde7 	bl	ab4c <delay>
      msg.buf[0] = "T";  //No idea how the naming works
    3f7e:	4b32      	ldr	r3, [pc, #200]	; (4048 <VEcan()+0xbbc>)
    3f80:	7223      	strb	r3, [r4, #8]
      msg.buf[1] = "P";  //No idea how the naming works
    3f82:	4b32      	ldr	r3, [pc, #200]	; (404c <VEcan()+0xbc0>)
    3f84:	7263      	strb	r3, [r4, #9]
      msg.id = 0x35E;
    3f86:	f240 335e 	movw	r3, #862	; 0x35e
    3f8a:	6023      	str	r3, [r4, #0]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3f8c:	4928      	ldr	r1, [pc, #160]	; (4030 <VEcan()+0xba4>)
    3f8e:	4820      	ldr	r0, [pc, #128]	; (4010 <VEcan()+0xb84>)
      msg.len = 2;
    3f90:	2302      	movs	r3, #2
    3f92:	71e3      	strb	r3, [r4, #7]
      if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    3f94:	f004 fd9e 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    3f98:	b9f8      	cbnz	r0, 3fda <VEcan()+0xb4e>
    3f9a:	4b1f      	ldr	r3, [pc, #124]	; (4018 <VEcan()+0xb8c>)
    3f9c:	4a1d      	ldr	r2, [pc, #116]	; (4014 <VEcan()+0xb88>)
    3f9e:	6819      	ldr	r1, [r3, #0]
    3fa0:	6813      	ldr	r3, [r2, #0]
    3fa2:	428b      	cmp	r3, r1
    3fa4:	da19      	bge.n	3fda <VEcan()+0xb4e>
        msgbuf[sendCnt] = msg;
    3fa6:	491d      	ldr	r1, [pc, #116]	; (401c <VEcan()+0xb90>)
    if (settings.chargertype == BYD) {
    3fa8:	f8d5 c0b4 	ldr.w	ip, [r5, #180]	; 0xb4
        msgbuf[sendCnt] = msg;
    3fac:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
        sendCnt++;
    3fb0:	3301      	adds	r3, #1
    3fb2:	6013      	str	r3, [r2, #0]
        msgbuf[sendCnt] = msg;
    3fb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3fb8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    if (settings.chargertype == BYD) {
    3fbc:	f1bc 0f08 	cmp.w	ip, #8
    3fc0:	f43f ac3e 	beq.w	3840 <VEcan()+0x3b4>
}
    3fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3fc8:	f009 fa34 	bl	d434 <__aeabi_i2f>
    3fcc:	6969      	ldr	r1, [r5, #20]
    3fce:	e715      	b.n	3dfc <VEcan()+0x970>
        msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3fd0:	f009 fa30 	bl	d434 <__aeabi_i2f>
    3fd4:	6969      	ldr	r1, [r5, #20]
    3fd6:	4683      	mov	fp, r0
    3fd8:	e4d8      	b.n	398c <VEcan()+0x500>
    if (settings.chargertype == BYD) {
    3fda:	f8d5 c0b4 	ldr.w	ip, [r5, #180]	; 0xb4
    3fde:	e7ed      	b.n	3fbc <VEcan()+0xb30>
          msg.buf[0] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    3fe0:	4816      	ldr	r0, [pc, #88]	; (403c <VEcan()+0xbb0>)
    3fe2:	f7fc fec3 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    3fe6:	491a      	ldr	r1, [pc, #104]	; (4050 <VEcan()+0xbc4>)
    3fe8:	f009 fa78 	bl	d4dc <__aeabi_fmul>
    3fec:	f009 fc62 	bl	d8b4 <__aeabi_f2uiz>
    3ff0:	f3c0 2307 	ubfx	r3, r0, #8, #8
          msg.buf[1] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3ff4:	4811      	ldr	r0, [pc, #68]	; (403c <VEcan()+0xbb0>)
          msg.buf[0] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    3ff6:	7223      	strb	r3, [r4, #8]
          msg.buf[1] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3ff8:	f7fc feb8 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    3ffc:	4914      	ldr	r1, [pc, #80]	; (4050 <VEcan()+0xbc4>)
    3ffe:	f009 fa6d 	bl	d4dc <__aeabi_fmul>
    4002:	f009 fc57 	bl	d8b4 <__aeabi_f2uiz>
    4006:	b2c3      	uxtb	r3, r0
    4008:	e669      	b.n	3cde <VEcan()+0x852>
    400a:	bf00      	nop
    400c:	004e5001 	.word	0x004e5001
    4010:	1fffc1c0 	.word	0x1fffc1c0
    4014:	1fffc0b0 	.word	0x1fffc0b0
    4018:	1fff876c 	.word	0x1fff876c
    401c:	1fffbfc0 	.word	0x1fffbfc0
    4020:	1fffc198 	.word	0x1fffc198
    4024:	1fffbe38 	.word	0x1fffbe38
    4028:	1fffbecc 	.word	0x1fffbecc
    402c:	41200000 	.word	0x41200000
    4030:	1fffbf30 	.word	0x1fffbf30
    4034:	1fff8728 	.word	0x1fff8728
    4038:	1fff872c 	.word	0x1fff872c
    403c:	1fff900c 	.word	0x1fff900c
    4040:	1fffbec0 	.word	0x1fffbec0
    4044:	42c80000 	.word	0x42c80000
    4048:	000146d0 	.word	0x000146d0
    404c:	00014a1c 	.word	0x00014a1c
    4050:	447a0000 	.word	0x447a0000

00004054 <menu()>:
void menu() {
    4054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (menuload == 4)             //debug
    4058:	4cd4      	ldr	r4, [pc, #848]	; (43ac <menu()+0x358>)
  incomingByte = Serial.read();  // read the incoming byte:
    405a:	4dd5      	ldr	r5, [pc, #852]	; (43b0 <menu()+0x35c>)
void menu() {
    405c:	b082      	sub	sp, #8
        virtual int read() { return usb_serial_getchar(); }
    405e:	f008 fae9 	bl	c634 <usb_serial_getchar>
  if (menuload == 4)             //debug
    4062:	6823      	ldr	r3, [r4, #0]
  incomingByte = Serial.read();  // read the incoming byte:
    4064:	6028      	str	r0, [r5, #0]
  if (menuload == 4)             //debug
    4066:	2b04      	cmp	r3, #4
    4068:	f000 80a8 	beq.w	41bc <menu()+0x168>
  if (menuload == 9) {
    406c:	2b09      	cmp	r3, #9
    406e:	d114      	bne.n	409a <menu()+0x46>
    switch (incomingByte) {
    4070:	2831      	cmp	r0, #49	; 0x31
    4072:	f000 81bf 	beq.w	43f4 <menu()+0x3a0>
    switch (incomingByte) {
    4076:	2871      	cmp	r0, #113	; 0x71
    4078:	d103      	bne.n	4082 <menu()+0x2e>
          menuload = 1;
    407a:	2300      	movs	r3, #0
          incomingByte = 'i';
    407c:	2073      	movs	r0, #115	; 0x73
          menuload = 1;
    407e:	6023      	str	r3, [r4, #0]
          incomingByte = 'i';
    4080:	6028      	str	r0, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    4082:	2873      	cmp	r0, #115	; 0x73
    4084:	bf08      	it	eq
    4086:	2b00      	cmpeq	r3, #0
    4088:	bf0c      	ite	eq
    408a:	2301      	moveq	r3, #1
    408c:	2300      	movne	r3, #0
    408e:	2b00      	cmp	r3, #0
    4090:	f040 8120 	bne.w	42d4 <menu()+0x280>
}
    4094:	b002      	add	sp, #8
    4096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (menuload == 2) {
    409a:	2b02      	cmp	r3, #2
    409c:	f040 8409 	bne.w	48b2 <menu()+0x85e>
    switch (incomingByte) {
    40a0:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    40a4:	2a42      	cmp	r2, #66	; 0x42
    40a6:	d8ec      	bhi.n	4082 <menu()+0x2e>
    40a8:	a101      	add	r1, pc, #4	; (adr r1, 40b0 <menu()+0x5c>)
    40aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    40ae:	bf00      	nop
    40b0:	00004751 	.word	0x00004751
    40b4:	0000485d 	.word	0x0000485d
    40b8:	00004843 	.word	0x00004843
    40bc:	00004877 	.word	0x00004877
    40c0:	00005275 	.word	0x00005275
    40c4:	00005297 	.word	0x00005297
    40c8:	000052b5 	.word	0x000052b5
    40cc:	000052d3 	.word	0x000052d3
    40d0:	00004083 	.word	0x00004083
    40d4:	00004083 	.word	0x00004083
    40d8:	00004083 	.word	0x00004083
    40dc:	00004083 	.word	0x00004083
    40e0:	00004083 	.word	0x00004083
    40e4:	00004083 	.word	0x00004083
    40e8:	00004083 	.word	0x00004083
    40ec:	00004083 	.word	0x00004083
    40f0:	00004083 	.word	0x00004083
    40f4:	00004083 	.word	0x00004083
    40f8:	00004083 	.word	0x00004083
    40fc:	00004083 	.word	0x00004083
    4100:	00004083 	.word	0x00004083
    4104:	00004083 	.word	0x00004083
    4108:	00004083 	.word	0x00004083
    410c:	00004083 	.word	0x00004083
    4110:	00004083 	.word	0x00004083
    4114:	00004083 	.word	0x00004083
    4118:	00004083 	.word	0x00004083
    411c:	00004083 	.word	0x00004083
    4120:	00004083 	.word	0x00004083
    4124:	00004083 	.word	0x00004083
    4128:	00004083 	.word	0x00004083
    412c:	00004083 	.word	0x00004083
    4130:	00004083 	.word	0x00004083
    4134:	00004083 	.word	0x00004083
    4138:	00004083 	.word	0x00004083
    413c:	00004083 	.word	0x00004083
    4140:	00004083 	.word	0x00004083
    4144:	00004083 	.word	0x00004083
    4148:	00004083 	.word	0x00004083
    414c:	00004083 	.word	0x00004083
    4150:	00004083 	.word	0x00004083
    4154:	00004083 	.word	0x00004083
    4158:	00004083 	.word	0x00004083
    415c:	00004083 	.word	0x00004083
    4160:	00004083 	.word	0x00004083
    4164:	00004083 	.word	0x00004083
    4168:	00004083 	.word	0x00004083
    416c:	00004083 	.word	0x00004083
    4170:	00004083 	.word	0x00004083
    4174:	00004083 	.word	0x00004083
    4178:	000048ab 	.word	0x000048ab
    417c:	00004083 	.word	0x00004083
    4180:	00004083 	.word	0x00004083
    4184:	00004083 	.word	0x00004083
    4188:	00004083 	.word	0x00004083
    418c:	00004083 	.word	0x00004083
    4190:	00004083 	.word	0x00004083
    4194:	00004083 	.word	0x00004083
    4198:	00004083 	.word	0x00004083
    419c:	00004083 	.word	0x00004083
    41a0:	00004083 	.word	0x00004083
    41a4:	00004083 	.word	0x00004083
    41a8:	00004083 	.word	0x00004083
    41ac:	00004083 	.word	0x00004083
    41b0:	0000407b 	.word	0x0000407b
    41b4:	00004083 	.word	0x00004083
    41b8:	000052f1 	.word	0x000052f1
    switch (incomingByte) {
    41bc:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    41c0:	2a41      	cmp	r2, #65	; 0x41
    41c2:	f63f af5e 	bhi.w	4082 <menu()+0x2e>
    41c6:	a101      	add	r1, pc, #4	; (adr r1, 41cc <menu()+0x178>)
    41c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    41cc:	00004625 	.word	0x00004625
    41d0:	00004637 	.word	0x00004637
    41d4:	0000464d 	.word	0x0000464d
    41d8:	00004651 	.word	0x00004651
    41dc:	0000466d 	.word	0x0000466d
    41e0:	00004671 	.word	0x00004671
    41e4:	000046f9 	.word	0x000046f9
    41e8:	00004727 	.word	0x00004727
    41ec:	0000472b 	.word	0x0000472b
    41f0:	0000472f 	.word	0x0000472f
    41f4:	00004083 	.word	0x00004083
    41f8:	00004083 	.word	0x00004083
    41fc:	00004083 	.word	0x00004083
    4200:	00004083 	.word	0x00004083
    4204:	00004083 	.word	0x00004083
    4208:	00004083 	.word	0x00004083
    420c:	00004083 	.word	0x00004083
    4210:	00004083 	.word	0x00004083
    4214:	00004083 	.word	0x00004083
    4218:	00004083 	.word	0x00004083
    421c:	00004083 	.word	0x00004083
    4220:	00004083 	.word	0x00004083
    4224:	00004083 	.word	0x00004083
    4228:	00004083 	.word	0x00004083
    422c:	00004083 	.word	0x00004083
    4230:	00004083 	.word	0x00004083
    4234:	00004083 	.word	0x00004083
    4238:	00004083 	.word	0x00004083
    423c:	00004083 	.word	0x00004083
    4240:	00004083 	.word	0x00004083
    4244:	00004083 	.word	0x00004083
    4248:	00004083 	.word	0x00004083
    424c:	00004083 	.word	0x00004083
    4250:	00004083 	.word	0x00004083
    4254:	00004083 	.word	0x00004083
    4258:	00004083 	.word	0x00004083
    425c:	00004083 	.word	0x00004083
    4260:	00004083 	.word	0x00004083
    4264:	00004083 	.word	0x00004083
    4268:	00004083 	.word	0x00004083
    426c:	00004083 	.word	0x00004083
    4270:	00004083 	.word	0x00004083
    4274:	00004083 	.word	0x00004083
    4278:	00004083 	.word	0x00004083
    427c:	00004083 	.word	0x00004083
    4280:	00004083 	.word	0x00004083
    4284:	00004083 	.word	0x00004083
    4288:	00004083 	.word	0x00004083
    428c:	00004083 	.word	0x00004083
    4290:	00004083 	.word	0x00004083
    4294:	00004083 	.word	0x00004083
    4298:	00004083 	.word	0x00004083
    429c:	00004083 	.word	0x00004083
    42a0:	00004083 	.word	0x00004083
    42a4:	00004083 	.word	0x00004083
    42a8:	00004083 	.word	0x00004083
    42ac:	00004083 	.word	0x00004083
    42b0:	00004083 	.word	0x00004083
    42b4:	00004083 	.word	0x00004083
    42b8:	00004083 	.word	0x00004083
    42bc:	00004083 	.word	0x00004083
    42c0:	00004083 	.word	0x00004083
    42c4:	00004083 	.word	0x00004083
    42c8:	00004083 	.word	0x00004083
    42cc:	00004083 	.word	0x00004083
    42d0:	0000407b 	.word	0x0000407b
    42d4:	4e37      	ldr	r6, [pc, #220]	; (43b4 <menu()+0x360>)
    SERIALCONSOLE.println();
    42d6:	4838      	ldr	r0, [pc, #224]	; (43b8 <menu()+0x364>)
    42d8:	f005 fd4c 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    42dc:	2104      	movs	r1, #4
    42de:	4837      	ldr	r0, [pc, #220]	; (43bc <menu()+0x368>)
    42e0:	f008 fa16 	bl	c710 <usb_serial_write>
    42e4:	4834      	ldr	r0, [pc, #208]	; (43b8 <menu()+0x364>)
    42e6:	f005 fd45 	bl	9d74 <Print::println()>
    42ea:	2110      	movs	r1, #16
    42ec:	4834      	ldr	r0, [pc, #208]	; (43c0 <menu()+0x36c>)
    42ee:	f008 fa0f 	bl	c710 <usb_serial_write>
    42f2:	4831      	ldr	r0, [pc, #196]	; (43b8 <menu()+0x364>)
    42f4:	f005 fd3e 	bl	9d74 <Print::println()>
    42f8:	2113      	movs	r1, #19
    42fa:	4832      	ldr	r0, [pc, #200]	; (43c4 <menu()+0x370>)
    42fc:	f008 fa08 	bl	c710 <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    4300:	4b31      	ldr	r3, [pc, #196]	; (43c8 <menu()+0x374>)
	size_t print(int n)				{ return print((long)n); }
    4302:	482d      	ldr	r0, [pc, #180]	; (43b8 <menu()+0x364>)
    4304:	6819      	ldr	r1, [r3, #0]
    4306:	f005 fd2d 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    430a:	482b      	ldr	r0, [pc, #172]	; (43b8 <menu()+0x364>)
    430c:	f005 fd32 	bl	9d74 <Print::println()>
    4310:	2114      	movs	r1, #20
    4312:	482e      	ldr	r0, [pc, #184]	; (43cc <menu()+0x378>)
    4314:	f008 f9fc 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4318:	4827      	ldr	r0, [pc, #156]	; (43b8 <menu()+0x364>)
    431a:	f005 fd2b 	bl	9d74 <Print::println()>
    431e:	211e      	movs	r1, #30
    4320:	482b      	ldr	r0, [pc, #172]	; (43d0 <menu()+0x37c>)
    4322:	f008 f9f5 	bl	c710 <usb_serial_write>
    4326:	4824      	ldr	r0, [pc, #144]	; (43b8 <menu()+0x364>)
    4328:	f005 fd24 	bl	9d74 <Print::println()>
    432c:	2115      	movs	r1, #21
    432e:	4829      	ldr	r0, [pc, #164]	; (43d4 <menu()+0x380>)
    4330:	f008 f9ee 	bl	c710 <usb_serial_write>
    4334:	4820      	ldr	r0, [pc, #128]	; (43b8 <menu()+0x364>)
    4336:	f005 fd1d 	bl	9d74 <Print::println()>
    433a:	211e      	movs	r1, #30
    433c:	4826      	ldr	r0, [pc, #152]	; (43d8 <menu()+0x384>)
    433e:	f008 f9e7 	bl	c710 <usb_serial_write>
    4342:	481d      	ldr	r0, [pc, #116]	; (43b8 <menu()+0x364>)
    4344:	f005 fd16 	bl	9d74 <Print::println()>
    4348:	2120      	movs	r1, #32
    434a:	4824      	ldr	r0, [pc, #144]	; (43dc <menu()+0x388>)
    434c:	f008 f9e0 	bl	c710 <usb_serial_write>
    4350:	4819      	ldr	r0, [pc, #100]	; (43b8 <menu()+0x364>)
    4352:	f005 fd0f 	bl	9d74 <Print::println()>
    4356:	2119      	movs	r1, #25
    4358:	4821      	ldr	r0, [pc, #132]	; (43e0 <menu()+0x38c>)
    435a:	f008 f9d9 	bl	c710 <usb_serial_write>
    435e:	4816      	ldr	r0, [pc, #88]	; (43b8 <menu()+0x364>)
    4360:	f005 fd08 	bl	9d74 <Print::println()>
    4364:	2112      	movs	r1, #18
    4366:	481f      	ldr	r0, [pc, #124]	; (43e4 <menu()+0x390>)
    4368:	f008 f9d2 	bl	c710 <usb_serial_write>
    436c:	4812      	ldr	r0, [pc, #72]	; (43b8 <menu()+0x364>)
    436e:	f005 fd01 	bl	9d74 <Print::println()>
    4372:	2116      	movs	r1, #22
    4374:	481c      	ldr	r0, [pc, #112]	; (43e8 <menu()+0x394>)
    4376:	f008 f9cb 	bl	c710 <usb_serial_write>
    437a:	480f      	ldr	r0, [pc, #60]	; (43b8 <menu()+0x364>)
    437c:	f005 fcfa 	bl	9d74 <Print::println()>
    4380:	210f      	movs	r1, #15
    4382:	481a      	ldr	r0, [pc, #104]	; (43ec <menu()+0x398>)
    4384:	f008 f9c4 	bl	c710 <usb_serial_write>
    4388:	480b      	ldr	r0, [pc, #44]	; (43b8 <menu()+0x364>)
    438a:	f005 fcf3 	bl	9d74 <Print::println()>
    438e:	210d      	movs	r1, #13
    4390:	4817      	ldr	r0, [pc, #92]	; (43f0 <menu()+0x39c>)
    4392:	f008 f9bd 	bl	c710 <usb_serial_write>
    4396:	4808      	ldr	r0, [pc, #32]	; (43b8 <menu()+0x364>)
    4398:	f005 fcec 	bl	9d74 <Print::println()>
    debug = 0;
    439c:	2200      	movs	r2, #0
    menuload = 1;
    439e:	2301      	movs	r3, #1
    debug = 0;
    43a0:	6032      	str	r2, [r6, #0]
    menuload = 1;
    43a2:	6023      	str	r3, [r4, #0]
}
    43a4:	b002      	add	sp, #8
    43a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43aa:	bf00      	nop
    43ac:	1fffbf2c 	.word	0x1fffbf2c
    43b0:	1fffbef0 	.word	0x1fffbef0
    43b4:	1fff8748 	.word	0x1fff8748
    43b8:	1fff8824 	.word	0x1fff8824
    43bc:	00015480 	.word	0x00015480
    43c0:	00015488 	.word	0x00015488
    43c4:	0001549c 	.word	0x0001549c
    43c8:	1fff8754 	.word	0x1fff8754
    43cc:	000154b0 	.word	0x000154b0
    43d0:	000154c8 	.word	0x000154c8
    43d4:	000154e8 	.word	0x000154e8
    43d8:	00015500 	.word	0x00015500
    43dc:	00015520 	.word	0x00015520
    43e0:	00015544 	.word	0x00015544
    43e4:	00015560 	.word	0x00015560
    43e8:	00015574 	.word	0x00015574
    43ec:	0001558c 	.word	0x0001558c
    43f0:	0001559c 	.word	0x0001559c
        settings.SerialCan = !settings.SerialCan;
    43f4:	4ea5      	ldr	r6, [pc, #660]	; (468c <menu()+0x638>)
    43f6:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
        menuload = 1;
    43fa:	2201      	movs	r2, #1
        incomingByte = 115;
    43fc:	2078      	movs	r0, #120	; 0x78
        settings.SerialCan = !settings.SerialCan;
    43fe:	4053      	eors	r3, r2
        menuload = 1;
    4400:	6022      	str	r2, [r4, #0]
        settings.SerialCan = !settings.SerialCan;
    4402:	f886 30d0 	strb.w	r3, [r6, #208]	; 0xd0
        incomingByte = 115;
    4406:	6028      	str	r0, [r5, #0]
    switch (incomingByte) {
    4408:	f1a0 0352 	sub.w	r3, r0, #82	; 0x52
    440c:	2b26      	cmp	r3, #38	; 0x26
    440e:	f201 802a 	bhi.w	5466 <menu()+0x1412>
    4412:	e8df f013 	tbh	[pc, r3, lsl #1]
    4416:	0831      	.short	0x0831
    4418:	08280828 	.word	0x08280828
    441c:	08280828 	.word	0x08280828
    4420:	08280828 	.word	0x08280828
    4424:	08280828 	.word	0x08280828
    4428:	08280828 	.word	0x08280828
    442c:	08280828 	.word	0x08280828
    4430:	08280828 	.word	0x08280828
    4434:	0d960d99 	.word	0x0d960d99
    4438:	00290d93 	.word	0x00290d93
    443c:	08280da2 	.word	0x08280da2
    4440:	08280828 	.word	0x08280828
    4444:	08280d9f 	.word	0x08280d9f
    4448:	08280d9c 	.word	0x08280d9c
    444c:	08280828 	.word	0x08280828
    4450:	08280828 	.word	0x08280828
    4454:	08280838 	.word	0x08280838
    4458:	08280828 	.word	0x08280828
    445c:	08280828 	.word	0x08280828
    4460:	00cf0828 	.word	0x00cf0828
        virtual int read() { return usb_serial_getchar(); }
    4464:	f008 f8e6 	bl	c634 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4468:	f008 f920 	bl	c6ac <usb_serial_available>
        while (Serial.available()) {
    446c:	2800      	cmp	r0, #0
    446e:	d1f9      	bne.n	4464 <menu()+0x410>
        SERIALCONSOLE.println();
    4470:	4887      	ldr	r0, [pc, #540]	; (4690 <menu()+0x63c>)
    4472:	f005 fc7f 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4476:	4886      	ldr	r0, [pc, #536]	; (4690 <menu()+0x63c>)
    4478:	f005 fc7c 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    447c:	4884      	ldr	r0, [pc, #528]	; (4690 <menu()+0x63c>)
    447e:	f005 fc79 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4482:	4883      	ldr	r0, [pc, #524]	; (4690 <menu()+0x63c>)
    4484:	f005 fc76 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4488:	4881      	ldr	r0, [pc, #516]	; (4690 <menu()+0x63c>)
    448a:	f005 fc73 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    448e:	2113      	movs	r1, #19
    4490:	4880      	ldr	r0, [pc, #512]	; (4694 <menu()+0x640>)
    4492:	f008 f93d 	bl	c710 <usb_serial_write>
    4496:	487e      	ldr	r0, [pc, #504]	; (4690 <menu()+0x63c>)
    4498:	f005 fc6c 	bl	9d74 <Print::println()>
    449c:	210d      	movs	r1, #13
    449e:	487e      	ldr	r0, [pc, #504]	; (4698 <menu()+0x644>)
    44a0:	f008 f936 	bl	c710 <usb_serial_write>
    44a4:	487a      	ldr	r0, [pc, #488]	; (4690 <menu()+0x63c>)
    44a6:	f005 fc65 	bl	9d74 <Print::println()>
    44aa:	210f      	movs	r1, #15
    44ac:	487b      	ldr	r0, [pc, #492]	; (469c <menu()+0x648>)
    44ae:	f008 f92f 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    44b2:	4b7b      	ldr	r3, [pc, #492]	; (46a0 <menu()+0x64c>)
	size_t print(int n)				{ return print((long)n); }
    44b4:	4876      	ldr	r0, [pc, #472]	; (4690 <menu()+0x63c>)
    44b6:	6819      	ldr	r1, [r3, #0]
    44b8:	f005 fc54 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44bc:	4874      	ldr	r0, [pc, #464]	; (4690 <menu()+0x63c>)
    44be:	f005 fc59 	bl	9d74 <Print::println()>
    44c2:	2113      	movs	r1, #19
    44c4:	4877      	ldr	r0, [pc, #476]	; (46a4 <menu()+0x650>)
    44c6:	f008 f923 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    44ca:	4b77      	ldr	r3, [pc, #476]	; (46a8 <menu()+0x654>)
	size_t print(int n)				{ return print((long)n); }
    44cc:	4870      	ldr	r0, [pc, #448]	; (4690 <menu()+0x63c>)
    44ce:	6819      	ldr	r1, [r3, #0]
    44d0:	f005 fc48 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44d4:	486e      	ldr	r0, [pc, #440]	; (4690 <menu()+0x63c>)
    44d6:	f005 fc4d 	bl	9d74 <Print::println()>
    44da:	2112      	movs	r1, #18
    44dc:	4873      	ldr	r0, [pc, #460]	; (46ac <menu()+0x658>)
    44de:	f008 f917 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    44e2:	4b73      	ldr	r3, [pc, #460]	; (46b0 <menu()+0x65c>)
	size_t print(int n)				{ return print((long)n); }
    44e4:	486a      	ldr	r0, [pc, #424]	; (4690 <menu()+0x63c>)
    44e6:	6819      	ldr	r1, [r3, #0]
    44e8:	f005 fc3c 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44ec:	4868      	ldr	r0, [pc, #416]	; (4690 <menu()+0x63c>)
    44ee:	f005 fc41 	bl	9d74 <Print::println()>
    44f2:	2111      	movs	r1, #17
    44f4:	486f      	ldr	r0, [pc, #444]	; (46b4 <menu()+0x660>)
    44f6:	f008 f90b 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    44fa:	4b6f      	ldr	r3, [pc, #444]	; (46b8 <menu()+0x664>)
	size_t print(int n)				{ return print((long)n); }
    44fc:	4864      	ldr	r0, [pc, #400]	; (4690 <menu()+0x63c>)
    44fe:	6819      	ldr	r1, [r3, #0]
    4500:	f005 fc30 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4504:	4862      	ldr	r0, [pc, #392]	; (4690 <menu()+0x63c>)
    4506:	f005 fc35 	bl	9d74 <Print::println()>
    450a:	210e      	movs	r1, #14
    450c:	486b      	ldr	r0, [pc, #428]	; (46bc <menu()+0x668>)
    450e:	f008 f8ff 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(settings.ESSmode);
    4512:	4b5e      	ldr	r3, [pc, #376]	; (468c <menu()+0x638>)
	size_t print(int n)				{ return print((long)n); }
    4514:	485e      	ldr	r0, [pc, #376]	; (4690 <menu()+0x63c>)
    4516:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
    451a:	f005 fc23 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    451e:	485c      	ldr	r0, [pc, #368]	; (4690 <menu()+0x63c>)
    4520:	f005 fc28 	bl	9d74 <Print::println()>
    4524:	2119      	movs	r1, #25
    4526:	4866      	ldr	r0, [pc, #408]	; (46c0 <menu()+0x66c>)
    4528:	f008 f8f2 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    452c:	4b65      	ldr	r3, [pc, #404]	; (46c4 <menu()+0x670>)
	size_t print(int n)				{ return print((long)n); }
    452e:	4858      	ldr	r0, [pc, #352]	; (4690 <menu()+0x63c>)
    4530:	6819      	ldr	r1, [r3, #0]
    4532:	f005 fc17 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4536:	4856      	ldr	r0, [pc, #344]	; (4690 <menu()+0x63c>)
    4538:	f005 fc1c 	bl	9d74 <Print::println()>
    453c:	2111      	movs	r1, #17
    453e:	4862      	ldr	r0, [pc, #392]	; (46c8 <menu()+0x674>)
    4540:	f008 f8e6 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    4544:	4b61      	ldr	r3, [pc, #388]	; (46cc <menu()+0x678>)
	size_t print(int n)				{ return print((long)n); }
    4546:	4852      	ldr	r0, [pc, #328]	; (4690 <menu()+0x63c>)
    4548:	6819      	ldr	r1, [r3, #0]
    454a:	f005 fc0b 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    454e:	4850      	ldr	r0, [pc, #320]	; (4690 <menu()+0x63c>)
    4550:	f005 fc10 	bl	9d74 <Print::println()>
    4554:	2110      	movs	r1, #16
    4556:	485e      	ldr	r0, [pc, #376]	; (46d0 <menu()+0x67c>)
    4558:	f008 f8da 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    455c:	4b5d      	ldr	r3, [pc, #372]	; (46d4 <menu()+0x680>)
	size_t print(int n)				{ return print((long)n); }
    455e:	484c      	ldr	r0, [pc, #304]	; (4690 <menu()+0x63c>)
    4560:	6819      	ldr	r1, [r3, #0]
    4562:	f005 fbff 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4566:	484a      	ldr	r0, [pc, #296]	; (4690 <menu()+0x63c>)
    4568:	f005 fc04 	bl	9d74 <Print::println()>
    456c:	211c      	movs	r1, #28
    456e:	485a      	ldr	r0, [pc, #360]	; (46d8 <menu()+0x684>)
    4570:	f008 f8ce 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    4574:	4b59      	ldr	r3, [pc, #356]	; (46dc <menu()+0x688>)
	size_t print(int n)				{ return print((long)n); }
    4576:	4846      	ldr	r0, [pc, #280]	; (4690 <menu()+0x63c>)
    4578:	6819      	ldr	r1, [r3, #0]
    457a:	f005 fbf3 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    457e:	4844      	ldr	r0, [pc, #272]	; (4690 <menu()+0x63c>)
    4580:	f005 fbf8 	bl	9d74 <Print::println()>
    4584:	211b      	movs	r1, #27
    4586:	4856      	ldr	r0, [pc, #344]	; (46e0 <menu()+0x68c>)
    4588:	f008 f8c2 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(showbal);
    458c:	4b55      	ldr	r3, [pc, #340]	; (46e4 <menu()+0x690>)
	size_t print(int n)				{ return print((long)n); }
    458e:	4840      	ldr	r0, [pc, #256]	; (4690 <menu()+0x63c>)
    4590:	7819      	ldrb	r1, [r3, #0]
    4592:	f005 fbe7 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4596:	483e      	ldr	r0, [pc, #248]	; (4690 <menu()+0x63c>)
    4598:	f005 fbec 	bl	9d74 <Print::println()>
    459c:	2113      	movs	r1, #19
    459e:	4852      	ldr	r0, [pc, #328]	; (46e8 <menu()+0x694>)
    45a0:	f008 f8b6 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    45a4:	483a      	ldr	r0, [pc, #232]	; (4690 <menu()+0x63c>)
    45a6:	f005 fbe5 	bl	9d74 <Print::println()>
        menuload = 4;
    45aa:	2304      	movs	r3, #4
    45ac:	6023      	str	r3, [r4, #0]
        break;
    45ae:	e571      	b.n	4094 <menu()+0x40>
        virtual int read() { return usb_serial_getchar(); }
    45b0:	f008 f840 	bl	c634 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    45b4:	f008 f87a 	bl	c6ac <usb_serial_available>
        while (Serial.available()) {
    45b8:	2800      	cmp	r0, #0
    45ba:	d1f9      	bne.n	45b0 <menu()+0x55c>
        SERIALCONSOLE.println();
    45bc:	4834      	ldr	r0, [pc, #208]	; (4690 <menu()+0x63c>)
    45be:	f005 fbd9 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    45c2:	4833      	ldr	r0, [pc, #204]	; (4690 <menu()+0x63c>)
    45c4:	f005 fbd6 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    45c8:	4831      	ldr	r0, [pc, #196]	; (4690 <menu()+0x63c>)
    45ca:	f005 fbd3 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    45ce:	4830      	ldr	r0, [pc, #192]	; (4690 <menu()+0x63c>)
    45d0:	f005 fbd0 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    45d4:	482e      	ldr	r0, [pc, #184]	; (4690 <menu()+0x63c>)
    45d6:	f005 fbcd 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    45da:	2112      	movs	r1, #18
    45dc:	4843      	ldr	r0, [pc, #268]	; (46ec <menu()+0x698>)
    45de:	f008 f897 	bl	c710 <usb_serial_write>
    45e2:	482b      	ldr	r0, [pc, #172]	; (4690 <menu()+0x63c>)
    45e4:	f005 fbc6 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    45e8:	4829      	ldr	r0, [pc, #164]	; (4690 <menu()+0x63c>)
    45ea:	f005 fbc3 	bl	9d74 <Print::println()>
    45ee:	4840      	ldr	r0, [pc, #256]	; (46f0 <menu()+0x69c>)
    45f0:	2116      	movs	r1, #22
    45f2:	f008 f88d 	bl	c710 <usb_serial_write>
        if (settings.SerialCan == 0) {
    45f6:	4b25      	ldr	r3, [pc, #148]	; (468c <menu()+0x638>)
    45f8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    45fc:	2b00      	cmp	r3, #0
    45fe:	f040 878e 	bne.w	551e <menu()+0x14ca>
    4602:	483c      	ldr	r0, [pc, #240]	; (46f4 <menu()+0x6a0>)
    4604:	2104      	movs	r1, #4
    4606:	f008 f883 	bl	c710 <usb_serial_write>
    460a:	4821      	ldr	r0, [pc, #132]	; (4690 <menu()+0x63c>)
    460c:	f005 fbb2 	bl	9d74 <Print::println()>
    4610:	2113      	movs	r1, #19
    4612:	4835      	ldr	r0, [pc, #212]	; (46e8 <menu()+0x694>)
    4614:	f008 f87c 	bl	c710 <usb_serial_write>
    4618:	481d      	ldr	r0, [pc, #116]	; (4690 <menu()+0x63c>)
    461a:	f005 fbab 	bl	9d74 <Print::println()>
        menuload = 9;
    461e:	2309      	movs	r3, #9
    4620:	6023      	str	r3, [r4, #0]
        break;
    4622:	e537      	b.n	4094 <menu()+0x40>
        showbal = !showbal;
    4624:	4a2f      	ldr	r2, [pc, #188]	; (46e4 <menu()+0x690>)
    4626:	7813      	ldrb	r3, [r2, #0]
        menuload = 1;
    4628:	2101      	movs	r1, #1
        incomingByte = 'd';
    462a:	2064      	movs	r0, #100	; 0x64
        showbal = !showbal;
    462c:	404b      	eors	r3, r1
        menuload = 1;
    462e:	6021      	str	r1, [r4, #0]
        showbal = !showbal;
    4630:	7013      	strb	r3, [r2, #0]
        incomingByte = 'd';
    4632:	6028      	str	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    4634:	e6e8      	b.n	4408 <menu()+0x3b4>
        candebug = !candebug;
    4636:	4a1a      	ldr	r2, [pc, #104]	; (46a0 <menu()+0x64c>)
        CSVdebug = !CSVdebug;
    4638:	6813      	ldr	r3, [r2, #0]
    463a:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    463e:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    4640:	2101      	movs	r1, #1
        CSVdebug = !CSVdebug;
    4642:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4644:	6021      	str	r1, [r4, #0]
        CSVdebug = !CSVdebug;
    4646:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    4648:	6028      	str	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    464a:	e6dd      	b.n	4408 <menu()+0x3b4>
        debugCur = !debugCur;
    464c:	4a16      	ldr	r2, [pc, #88]	; (46a8 <menu()+0x654>)
    464e:	e7f3      	b.n	4638 <menu()+0x5e4>
        outputcheck = !outputcheck;
    4650:	4b17      	ldr	r3, [pc, #92]	; (46b0 <menu()+0x65c>)
    4652:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    4654:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    4656:	2a00      	cmp	r2, #0
    4658:	bf0c      	ite	eq
    465a:	460a      	moveq	r2, r1
    465c:	2200      	movne	r2, #0
        menuload = 1;
    465e:	6021      	str	r1, [r4, #0]
        outputcheck = !outputcheck;
    4660:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0) {
    4662:	f041 83d1 	bne.w	5e08 <menu()+0x1db4>
        incomingByte = 'd';
    4666:	2064      	movs	r0, #100	; 0x64
    4668:	6028      	str	r0, [r5, #0]
  if (menuload == 7) {
    466a:	e6cd      	b.n	4408 <menu()+0x3b4>
        inputcheck = !inputcheck;
    466c:	4a12      	ldr	r2, [pc, #72]	; (46b8 <menu()+0x664>)
    466e:	e7e3      	b.n	4638 <menu()+0x5e4>
        settings.ESSmode = !settings.ESSmode;
    4670:	4e06      	ldr	r6, [pc, #24]	; (468c <menu()+0x638>)
    4672:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
    4676:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    467a:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    467c:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    467e:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4680:	6022      	str	r2, [r4, #0]
        settings.ESSmode = !settings.ESSmode;
    4682:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
        incomingByte = 'd';
    4686:	6028      	str	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    4688:	e6be      	b.n	4408 <menu()+0x3b4>
    468a:	bf00      	nop
    468c:	1fffc0b4 	.word	0x1fffc0b4
    4690:	1fff8824 	.word	0x1fff8824
    4694:	00014ec8 	.word	0x00014ec8
    4698:	00014edc 	.word	0x00014edc
    469c:	00014eec 	.word	0x00014eec
    46a0:	1fffbe30 	.word	0x1fffbe30
    46a4:	00014efc 	.word	0x00014efc
    46a8:	1fffbec8 	.word	0x1fffbec8
    46ac:	00014f10 	.word	0x00014f10
    46b0:	1fffc0a4 	.word	0x1fffc0a4
    46b4:	00014f24 	.word	0x00014f24
    46b8:	1fffbef4 	.word	0x1fffbef4
    46bc:	00014f38 	.word	0x00014f38
    46c0:	00014f48 	.word	0x00014f48
    46c4:	1fffbe34 	.word	0x1fffbe34
    46c8:	00014f64 	.word	0x00014f64
    46cc:	1fffbed8 	.word	0x1fffbed8
    46d0:	00014f78 	.word	0x00014f78
    46d4:	1fff8fbc 	.word	0x1fff8fbc
    46d8:	00014f8c 	.word	0x00014f8c
    46dc:	1fff874c 	.word	0x1fff874c
    46e0:	00014fac 	.word	0x00014fac
    46e4:	1fffc194 	.word	0x1fffc194
    46e8:	00014a78 	.word	0x00014a78
    46ec:	00015578 	.word	0x00015578
    46f0:	00014a44 	.word	0x00014a44
    46f4:	00014a5c 	.word	0x00014a5c
        menuload = 1;
    46f8:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    46fa:	4882      	ldr	r0, [pc, #520]	; (4904 <menu()+0x8b0>)
        menuload = 1;
    46fc:	6023      	str	r3, [r4, #0]
        cellspresent = bms.seriescells();
    46fe:	f7fc fae5 	bl	ccc <BMSModuleManager::seriescells()>
    4702:	4b81      	ldr	r3, [pc, #516]	; (4908 <menu()+0x8b4>)
        incomingByte = 'd';
    4704:	2264      	movs	r2, #100	; 0x64
        cellspresent = bms.seriescells();
    4706:	6018      	str	r0, [r3, #0]
  if (menuload == 9) {
    4708:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    470a:	602a      	str	r2, [r5, #0]
  if (menuload == 2) {
    470c:	2b02      	cmp	r3, #2
    470e:	f001 8378 	beq.w	5e02 <menu()+0x1dae>
  if (menuload == 8) {
    4712:	2b08      	cmp	r3, #8
    4714:	f001 8375 	beq.w	5e02 <menu()+0x1dae>
  if (menuload == 7) {
    4718:	2b07      	cmp	r3, #7
    471a:	f04f 0064 	mov.w	r0, #100	; 0x64
    471e:	f041 8402 	bne.w	5f26 <menu()+0x1ed2>
  if (menuload == 5) {
    4722:	2307      	movs	r3, #7
    4724:	e4ad      	b.n	4082 <menu()+0x2e>
        gaugedebug = !gaugedebug;
    4726:	4a79      	ldr	r2, [pc, #484]	; (490c <menu()+0x8b8>)
    4728:	e786      	b.n	4638 <menu()+0x5e4>
        CSVdebug = !CSVdebug;
    472a:	4a79      	ldr	r2, [pc, #484]	; (4910 <menu()+0x8bc>)
    472c:	e784      	b.n	4638 <menu()+0x5e4>
        menuload = 1;
    472e:	2301      	movs	r3, #1
    4730:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    4732:	f007 ffbb 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4736:	2800      	cmp	r0, #0
    4738:	f301 8354 	bgt.w	5de4 <menu()+0x1d90>
        if (debugdigits > 4) {
    473c:	4b75      	ldr	r3, [pc, #468]	; (4914 <menu()+0x8c0>)
    473e:	6818      	ldr	r0, [r3, #0]
    4740:	2804      	cmp	r0, #4
          debugdigits = 2;
    4742:	bfc4      	itt	gt
    4744:	2202      	movgt	r2, #2
    4746:	601a      	strgt	r2, [r3, #0]
        incomingByte = 'd';
    4748:	2264      	movs	r2, #100	; 0x64
  if (menuload == 9) {
    474a:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    474c:	602a      	str	r2, [r5, #0]
        break;
    474e:	e7dd      	b.n	470c <menu()+0x6b8>
        settings.invertcur = !settings.invertcur;
    4750:	4e71      	ldr	r6, [pc, #452]	; (4918 <menu()+0x8c4>)
    4752:	6fb3      	ldr	r3, [r6, #120]	; 0x78
    4754:	fab3 f383 	clz	r3, r3
    4758:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    475a:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    475c:	67b3      	str	r3, [r6, #120]	; 0x78
        incomingByte = 'c';
    475e:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    4760:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4762:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4764:	e001      	b.n	476a <menu()+0x716>
        virtual int read() { return usb_serial_getchar(); }
    4766:	f007 ff65 	bl	c634 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    476a:	f007 ff9f 	bl	c6ac <usb_serial_available>
        while (Serial.available()) {
    476e:	2800      	cmp	r0, #0
    4770:	d1f9      	bne.n	4766 <menu()+0x712>
        SERIALCONSOLE.println();
    4772:	486a      	ldr	r0, [pc, #424]	; (491c <menu()+0x8c8>)
    4774:	f005 fafe 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4778:	4868      	ldr	r0, [pc, #416]	; (491c <menu()+0x8c8>)
    477a:	f005 fafb 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    477e:	4867      	ldr	r0, [pc, #412]	; (491c <menu()+0x8c8>)
    4780:	f005 faf8 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4784:	4865      	ldr	r0, [pc, #404]	; (491c <menu()+0x8c8>)
    4786:	f005 faf5 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    478a:	4864      	ldr	r0, [pc, #400]	; (491c <menu()+0x8c8>)
    478c:	f005 faf2 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4790:	211f      	movs	r1, #31
    4792:	4863      	ldr	r0, [pc, #396]	; (4920 <menu()+0x8cc>)
    4794:	f007 ffbc 	bl	c710 <usb_serial_write>
    4798:	4860      	ldr	r0, [pc, #384]	; (491c <menu()+0x8c8>)
    479a:	f005 faeb 	bl	9d74 <Print::println()>
    479e:	211e      	movs	r1, #30
    47a0:	4860      	ldr	r0, [pc, #384]	; (4924 <menu()+0x8d0>)
    47a2:	f007 ffb5 	bl	c710 <usb_serial_write>
    47a6:	485d      	ldr	r0, [pc, #372]	; (491c <menu()+0x8c8>)
    47a8:	f005 fae4 	bl	9d74 <Print::println()>
    47ac:	485e      	ldr	r0, [pc, #376]	; (4928 <menu()+0x8d4>)
    47ae:	211a      	movs	r1, #26
    47b0:	f007 ffae 	bl	c710 <usb_serial_write>
        switch (settings.cursens) {
    47b4:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    47b6:	2b02      	cmp	r3, #2
    47b8:	f001 8350 	beq.w	5e5c <menu()+0x1e08>
    47bc:	2b03      	cmp	r3, #3
    47be:	f001 8344 	beq.w	5e4a <menu()+0x1df6>
    47c2:	2b01      	cmp	r3, #1
    47c4:	f001 8338 	beq.w	5e38 <menu()+0x1de4>
    47c8:	4858      	ldr	r0, [pc, #352]	; (492c <menu()+0x8d8>)
    47ca:	2109      	movs	r1, #9
    47cc:	f007 ffa0 	bl	c710 <usb_serial_write>
    47d0:	4852      	ldr	r0, [pc, #328]	; (491c <menu()+0x8c8>)
    47d2:	f005 facf 	bl	9d74 <Print::println()>
    47d6:	2114      	movs	r1, #20
    47d8:	4855      	ldr	r0, [pc, #340]	; (4930 <menu()+0x8dc>)
    47da:	f007 ff99 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    47de:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    47e0:	484e      	ldr	r0, [pc, #312]	; (491c <menu()+0x8c8>)
    47e2:	f005 fabf 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    47e6:	484d      	ldr	r0, [pc, #308]	; (491c <menu()+0x8c8>)
    47e8:	f005 fac4 	bl	9d74 <Print::println()>
    47ec:	211c      	movs	r1, #28
    47ee:	4851      	ldr	r0, [pc, #324]	; (4934 <menu()+0x8e0>)
    47f0:	f007 ff8e 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    47f4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    47f8:	4848      	ldr	r0, [pc, #288]	; (491c <menu()+0x8c8>)
    47fa:	f005 fab3 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    47fe:	4847      	ldr	r0, [pc, #284]	; (491c <menu()+0x8c8>)
    4800:	f005 fab8 	bl	9d74 <Print::println()>
    4804:	211c      	movs	r1, #28
    4806:	484c      	ldr	r0, [pc, #304]	; (4938 <menu()+0x8e4>)
    4808:	f007 ff82 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    480c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
    4810:	4842      	ldr	r0, [pc, #264]	; (491c <menu()+0x8c8>)
    4812:	f005 faa7 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4816:	4841      	ldr	r0, [pc, #260]	; (491c <menu()+0x8c8>)
    4818:	f005 faac 	bl	9d74 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    481c:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    481e:	f023 0202 	bic.w	r2, r3, #2
    4822:	2a01      	cmp	r2, #1
    4824:	f001 825e 	beq.w	5ce4 <menu()+0x1c90>
        if (settings.cursens == Canbus) {
    4828:	2b02      	cmp	r3, #2
    482a:	f001 8320 	beq.w	5e6e <menu()+0x1e1a>
    482e:	2113      	movs	r1, #19
    4830:	4842      	ldr	r0, [pc, #264]	; (493c <menu()+0x8e8>)
    4832:	f007 ff6d 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4836:	4839      	ldr	r0, [pc, #228]	; (491c <menu()+0x8c8>)
    4838:	f005 fa9c 	bl	9d74 <Print::println()>
        menuload = 2;
    483c:	2302      	movs	r3, #2
    483e:	6023      	str	r3, [r4, #0]
        break;
    4840:	e428      	b.n	4094 <menu()+0x40>
        menuload = 1;
    4842:	2301      	movs	r3, #1
    4844:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    4846:	f007 ff31 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    484a:	2800      	cmp	r0, #0
    484c:	f301 82d1 	bgt.w	5df2 <menu()+0x1d9e>
    4850:	4e31      	ldr	r6, [pc, #196]	; (4918 <menu()+0x8c4>)
        menuload = 1;
    4852:	2201      	movs	r2, #1
        incomingByte = 'c';
    4854:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    4856:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4858:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    485a:	e786      	b.n	476a <menu()+0x716>
        settings.voltsoc = !settings.voltsoc;
    485c:	4e2e      	ldr	r6, [pc, #184]	; (4918 <menu()+0x8c4>)
    485e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    4862:	fab3 f383 	clz	r3, r3
    4866:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4868:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    486a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        incomingByte = 'c';
    486e:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    4870:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4872:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4874:	e779      	b.n	476a <menu()+0x716>
        menuload = 1;
    4876:	2301      	movs	r3, #1
    4878:	6023      	str	r3, [r4, #0]
    487a:	f007 ff17 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    487e:	2800      	cmp	r0, #0
    4880:	dd07      	ble.n	4892 <menu()+0x83e>
          settings.convlow = Serial.parseInt();
    4882:	4826      	ldr	r0, [pc, #152]	; (491c <menu()+0x8c8>)
    4884:	4e24      	ldr	r6, [pc, #144]	; (4918 <menu()+0x8c4>)
    4886:	f005 fbd3 	bl	a030 <Stream::parseInt()>
    488a:	f008 fdd3 	bl	d434 <__aeabi_i2f>
    488e:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
  if (menuload == 8) {
    4892:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'c';
    4894:	2063      	movs	r0, #99	; 0x63
  if (menuload == 7) {
    4896:	2b07      	cmp	r3, #7
        incomingByte = 'c';
    4898:	6028      	str	r0, [r5, #0]
  if (menuload == 7) {
    489a:	f43f abf2 	beq.w	4082 <menu()+0x2e>
  if (menuload == 5) {
    489e:	2b05      	cmp	r3, #5
    48a0:	f041 8346 	bne.w	5f30 <menu()+0x1edc>
        incomingByte = 'c';
    48a4:	2305      	movs	r3, #5
    48a6:	f7ff bbec 	b.w	4082 <menu()+0x2e>
        calcur();
    48aa:	f7fe fd2d 	bl	3308 <calcur()>
  if (menuload == 8) {
    48ae:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    48b0:	6828      	ldr	r0, [r5, #0]
  if (menuload == 8) {
    48b2:	2b08      	cmp	r3, #8
    48b4:	d115      	bne.n	48e2 <menu()+0x88e>
    switch (incomingByte) {
    48b6:	2834      	cmp	r0, #52	; 0x34
    48b8:	f73f abdd 	bgt.w	4076 <menu()+0x22>
    48bc:	2830      	cmp	r0, #48	; 0x30
    48be:	f77f abe0 	ble.w	4082 <menu()+0x2e>
    48c2:	3832      	subs	r0, #50	; 0x32
    48c4:	2802      	cmp	r0, #2
    48c6:	f201 83a8 	bhi.w	601a <menu()+0x1fc6>
    48ca:	e8df f010 	tbh	[pc, r0, lsl #1]
    48ce:	01ec      	.short	0x01ec
    48d0:	01670003 	.word	0x01670003
    48d4:	f007 feea 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    48d8:	2800      	cmp	r0, #0
    48da:	f300 8601 	bgt.w	54e0 <menu()+0x148c>
  if (menuload == 7) {
    48de:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    48e0:	6828      	ldr	r0, [r5, #0]
  if (menuload == 7) {
    48e2:	2b07      	cmp	r3, #7
    48e4:	d133      	bne.n	494e <menu()+0x8fa>
    switch (incomingByte) {
    48e6:	2834      	cmp	r0, #52	; 0x34
    48e8:	f300 85e8 	bgt.w	54bc <menu()+0x1468>
    48ec:	2830      	cmp	r0, #48	; 0x30
    48ee:	f77f abc8 	ble.w	4082 <menu()+0x2e>
    48f2:	3832      	subs	r0, #50	; 0x32
    48f4:	2802      	cmp	r0, #2
    48f6:	f201 837b 	bhi.w	5ff0 <menu()+0x1f9c>
    48fa:	e8df f010 	tbh	[pc, r0, lsl #1]
    48fe:	00b7      	.short	0x00b7
    4900:	013f0021 	.word	0x013f0021
    4904:	1fff900c 	.word	0x1fff900c
    4908:	1fffbe34 	.word	0x1fffbe34
    490c:	1fffbed8 	.word	0x1fffbed8
    4910:	1fff8fbc 	.word	0x1fff8fbc
    4914:	1fff874c 	.word	0x1fff874c
    4918:	1fffc0b4 	.word	0x1fffc0b4
    491c:	1fff8824 	.word	0x1fff8824
    4920:	00014fc8 	.word	0x00014fc8
    4924:	00014fe8 	.word	0x00014fe8
    4928:	00015008 	.word	0x00015008
    492c:	00015080 	.word	0x00015080
    4930:	0001508c 	.word	0x0001508c
    4934:	000150a4 	.word	0x000150a4
    4938:	000150c4 	.word	0x000150c4
    493c:	00014a78 	.word	0x00014a78
    4940:	f007 feb4 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4944:	2800      	cmp	r0, #0
    4946:	f300 85be 	bgt.w	54c6 <menu()+0x1472>
  if (menuload == 6)  //Charging settings
    494a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    494c:	6828      	ldr	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    494e:	2b06      	cmp	r3, #6
    4950:	f040 81c6 	bne.w	4ce0 <menu()+0xc8c>
    switch (incomingByte) {
    4954:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4958:	2a41      	cmp	r2, #65	; 0x41
    495a:	f63f ab92 	bhi.w	4082 <menu()+0x2e>
    495e:	a101      	add	r1, pc, #4	; (adr r1, 4964 <menu()+0x910>)
    4960:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4964:	000051ff 	.word	0x000051ff
    4968:	00005231 	.word	0x00005231
    496c:	000051d7 	.word	0x000051d7
    4970:	000051b1 	.word	0x000051b1
    4974:	0000518b 	.word	0x0000518b
    4978:	00005259 	.word	0x00005259
    497c:	0000516b 	.word	0x0000516b
    4980:	00004ff5 	.word	0x00004ff5
    4984:	00004083 	.word	0x00004083
    4988:	00004cd3 	.word	0x00004cd3
    498c:	00004083 	.word	0x00004083
    4990:	00004083 	.word	0x00004083
    4994:	00004083 	.word	0x00004083
    4998:	00004083 	.word	0x00004083
    499c:	00004083 	.word	0x00004083
    49a0:	00004083 	.word	0x00004083
    49a4:	00004083 	.word	0x00004083
    49a8:	00004083 	.word	0x00004083
    49ac:	00004083 	.word	0x00004083
    49b0:	00004083 	.word	0x00004083
    49b4:	00004083 	.word	0x00004083
    49b8:	00004083 	.word	0x00004083
    49bc:	00004083 	.word	0x00004083
    49c0:	00004083 	.word	0x00004083
    49c4:	00004083 	.word	0x00004083
    49c8:	00004083 	.word	0x00004083
    49cc:	00004083 	.word	0x00004083
    49d0:	00004083 	.word	0x00004083
    49d4:	00004083 	.word	0x00004083
    49d8:	00004083 	.word	0x00004083
    49dc:	00004083 	.word	0x00004083
    49e0:	00004083 	.word	0x00004083
    49e4:	00004083 	.word	0x00004083
    49e8:	00004083 	.word	0x00004083
    49ec:	00004083 	.word	0x00004083
    49f0:	00004083 	.word	0x00004083
    49f4:	00004083 	.word	0x00004083
    49f8:	00004083 	.word	0x00004083
    49fc:	00004083 	.word	0x00004083
    4a00:	00004083 	.word	0x00004083
    4a04:	00004083 	.word	0x00004083
    4a08:	00004083 	.word	0x00004083
    4a0c:	00004083 	.word	0x00004083
    4a10:	00004083 	.word	0x00004083
    4a14:	00004083 	.word	0x00004083
    4a18:	00004083 	.word	0x00004083
    4a1c:	00004083 	.word	0x00004083
    4a20:	00004083 	.word	0x00004083
    4a24:	00004083 	.word	0x00004083
    4a28:	00004083 	.word	0x00004083
    4a2c:	00004083 	.word	0x00004083
    4a30:	00004083 	.word	0x00004083
    4a34:	00004083 	.word	0x00004083
    4a38:	00004083 	.word	0x00004083
    4a3c:	00004083 	.word	0x00004083
    4a40:	00004083 	.word	0x00004083
    4a44:	00004083 	.word	0x00004083
    4a48:	00004083 	.word	0x00004083
    4a4c:	00004083 	.word	0x00004083
    4a50:	00004083 	.word	0x00004083
    4a54:	00004083 	.word	0x00004083
    4a58:	00004083 	.word	0x00004083
    4a5c:	00004083 	.word	0x00004083
    4a60:	00004083 	.word	0x00004083
    4a64:	00004083 	.word	0x00004083
    4a68:	0000407b 	.word	0x0000407b
    4a6c:	f007 fe1e 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4a70:	2800      	cmp	r0, #0
    4a72:	f77f af6a 	ble.w	494a <menu()+0x8f6>
          settings.CellGap = Serial.parseInt();
    4a76:	48ab      	ldr	r0, [pc, #684]	; (4d24 <menu()+0xcd0>)
          settings.CellGap = settings.CellGap * 0.001;
    4a78:	4eab      	ldr	r6, [pc, #684]	; (4d28 <menu()+0xcd4>)
          settings.CellGap = Serial.parseInt();
    4a7a:	f005 fad9 	bl	a030 <Stream::parseInt()>
    4a7e:	f008 fcd9 	bl	d434 <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    4a82:	49aa      	ldr	r1, [pc, #680]	; (4d2c <menu()+0xcd8>)
    4a84:	f008 fd2a 	bl	d4dc <__aeabi_fmul>
          menuload = 1;
    4a88:	2301      	movs	r3, #1
    4a8a:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4a8c:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    4a8e:	63f0      	str	r0, [r6, #60]	; 0x3c
          incomingByte = 'a';
    4a90:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4a92:	e001      	b.n	4a98 <menu()+0xa44>
        virtual int read() { return usb_serial_getchar(); }
    4a94:	f007 fdce 	bl	c634 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4a98:	f007 fe08 	bl	c6ac <usb_serial_available>
        while (Serial.available()) {
    4a9c:	4605      	mov	r5, r0
    4a9e:	2800      	cmp	r0, #0
    4aa0:	d1f8      	bne.n	4a94 <menu()+0xa40>
        SERIALCONSOLE.println();
    4aa2:	48a0      	ldr	r0, [pc, #640]	; (4d24 <menu()+0xcd0>)
    4aa4:	f005 f966 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4aa8:	489e      	ldr	r0, [pc, #632]	; (4d24 <menu()+0xcd0>)
    4aaa:	f005 f963 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4aae:	489d      	ldr	r0, [pc, #628]	; (4d24 <menu()+0xcd0>)
    4ab0:	f005 f960 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4ab4:	489b      	ldr	r0, [pc, #620]	; (4d24 <menu()+0xcd0>)
    4ab6:	f005 f95d 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4aba:	489a      	ldr	r0, [pc, #616]	; (4d24 <menu()+0xcd0>)
    4abc:	f005 f95a 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4ac0:	211f      	movs	r1, #31
    4ac2:	489b      	ldr	r0, [pc, #620]	; (4d30 <menu()+0xcdc>)
    4ac4:	f007 fe24 	bl	c710 <usb_serial_write>
    4ac8:	4896      	ldr	r0, [pc, #600]	; (4d24 <menu()+0xcd0>)
    4aca:	f005 f953 	bl	9d74 <Print::println()>
    4ace:	211c      	movs	r1, #28
    4ad0:	4898      	ldr	r0, [pc, #608]	; (4d34 <menu()+0xce0>)
    4ad2:	f007 fe1d 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    4ad6:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4ad8:	4997      	ldr	r1, [pc, #604]	; (4d38 <menu()+0xce4>)
    4ada:	f008 fcff 	bl	d4dc <__aeabi_fmul>
    4ade:	f008 fad9 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4ae2:	9500      	str	r5, [sp, #0]
    4ae4:	4602      	mov	r2, r0
    4ae6:	460b      	mov	r3, r1
    4ae8:	488e      	ldr	r0, [pc, #568]	; (4d24 <menu()+0xcd0>)
    4aea:	f005 f965 	bl	9db8 <Print::printFloat(double, unsigned char)>
    4aee:	2102      	movs	r1, #2
    4af0:	4892      	ldr	r0, [pc, #584]	; (4d3c <menu()+0xce8>)
    4af2:	f007 fe0d 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4af6:	488b      	ldr	r0, [pc, #556]	; (4d24 <menu()+0xcd0>)
    4af8:	f005 f93c 	bl	9d74 <Print::println()>
    4afc:	2123      	movs	r1, #35	; 0x23
    4afe:	4890      	ldr	r0, [pc, #576]	; (4d40 <menu()+0xcec>)
    4b00:	f007 fe06 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    4b04:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    4b06:	498c      	ldr	r1, [pc, #560]	; (4d38 <menu()+0xce4>)
    4b08:	f008 fce8 	bl	d4dc <__aeabi_fmul>
    4b0c:	f008 fac2 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4b10:	9500      	str	r5, [sp, #0]
    4b12:	4602      	mov	r2, r0
    4b14:	460b      	mov	r3, r1
    4b16:	4883      	ldr	r0, [pc, #524]	; (4d24 <menu()+0xcd0>)
    4b18:	f005 f94e 	bl	9db8 <Print::printFloat(double, unsigned char)>
    4b1c:	2102      	movs	r1, #2
    4b1e:	4887      	ldr	r0, [pc, #540]	; (4d3c <menu()+0xce8>)
    4b20:	f007 fdf6 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4b24:	487f      	ldr	r0, [pc, #508]	; (4d24 <menu()+0xcd0>)
    4b26:	f005 f925 	bl	9d74 <Print::println()>
    4b2a:	2119      	movs	r1, #25
    4b2c:	4885      	ldr	r0, [pc, #532]	; (4d44 <menu()+0xcf0>)
    4b2e:	f007 fdef 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    4b32:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4b34:	f008 faae 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4b38:	2502      	movs	r5, #2
    4b3a:	460b      	mov	r3, r1
    4b3c:	4602      	mov	r2, r0
    4b3e:	9500      	str	r5, [sp, #0]
    4b40:	4878      	ldr	r0, [pc, #480]	; (4d24 <menu()+0xcd0>)
    4b42:	f005 f939 	bl	9db8 <Print::printFloat(double, unsigned char)>
    4b46:	4629      	mov	r1, r5
    4b48:	487f      	ldr	r0, [pc, #508]	; (4d48 <menu()+0xcf4>)
    4b4a:	f007 fde1 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4b4e:	4875      	ldr	r0, [pc, #468]	; (4d24 <menu()+0xcd0>)
    4b50:	f005 f910 	bl	9d74 <Print::println()>
    4b54:	2110      	movs	r1, #16
    4b56:	487d      	ldr	r0, [pc, #500]	; (4d4c <menu()+0xcf8>)
    4b58:	f007 fdda 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4b5c:	f8b6 10bc 	ldrh.w	r1, [r6, #188]	; 0xbc
    4b60:	4870      	ldr	r0, [pc, #448]	; (4d24 <menu()+0xcd0>)
    4b62:	f005 f8ff 	bl	9d64 <Print::print(long)>
    4b66:	2103      	movs	r1, #3
    4b68:	4879      	ldr	r0, [pc, #484]	; (4d50 <menu()+0xcfc>)
    4b6a:	f007 fdd1 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4b6e:	486d      	ldr	r0, [pc, #436]	; (4d24 <menu()+0xcd0>)
    4b70:	f005 f900 	bl	9d74 <Print::println()>
        menuload = 7;
    4b74:	2307      	movs	r3, #7
    4b76:	6023      	str	r3, [r4, #0]
        break;
    4b78:	f7ff ba8c 	b.w	4094 <menu()+0x40>
        virtual int available() { return usb_serial_available(); }
    4b7c:	f007 fd96 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4b80:	2800      	cmp	r0, #0
    4b82:	f77f aee2 	ble.w	494a <menu()+0x8f6>
          settings.triptime = Serial.parseInt();
    4b86:	4867      	ldr	r0, [pc, #412]	; (4d24 <menu()+0xcd0>)
    4b88:	4e67      	ldr	r6, [pc, #412]	; (4d28 <menu()+0xcd4>)
    4b8a:	f005 fa51 	bl	a030 <Stream::parseInt()>
          menuload = 1;
    4b8e:	2301      	movs	r3, #1
    4b90:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4b92:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    4b94:	f8a6 00bc 	strh.w	r0, [r6, #188]	; 0xbc
          incomingByte = 'a';
    4b98:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4b9a:	e77d      	b.n	4a98 <menu()+0xa44>
    4b9c:	f007 fd86 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4ba0:	2800      	cmp	r0, #0
    4ba2:	f77f ae9c 	ble.w	48de <menu()+0x88a>
          settings.TempOff = Serial.parseInt();
    4ba6:	485f      	ldr	r0, [pc, #380]	; (4d24 <menu()+0xcd0>)
          settings.TempOff = settings.TempOff * -1;
    4ba8:	4e5f      	ldr	r6, [pc, #380]	; (4d28 <menu()+0xcd4>)
          settings.TempOff = Serial.parseInt();
    4baa:	f005 fa41 	bl	a030 <Stream::parseInt()>
          settings.TempOff = settings.TempOff * -1;
    4bae:	4240      	negs	r0, r0
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    4bb0:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    4bb4:	9000      	str	r0, [sp, #0]
          settings.TempOff = settings.TempOff * -1;
    4bb6:	f8c6 00cc 	str.w	r0, [r6, #204]	; 0xcc
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    4bba:	6cb2      	ldr	r2, [r6, #72]	; 0x48
    4bbc:	f896 1044 	ldrb.w	r1, [r6, #68]	; 0x44
    4bc0:	4864      	ldr	r0, [pc, #400]	; (4d54 <menu()+0xd00>)
    4bc2:	f7fc faa7 	bl	1114 <BMSModuleManager::setSensors(int, float, float, int)>
          menuload = 1;
    4bc6:	2201      	movs	r2, #1
          incomingByte = 'i';
    4bc8:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    4bca:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    4bcc:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4bce:	e001      	b.n	4bd4 <menu()+0xb80>
        virtual int read() { return usb_serial_getchar(); }
    4bd0:	f007 fd30 	bl	c634 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4bd4:	f007 fd6a 	bl	c6ac <usb_serial_available>
        while (Serial.available()) {
    4bd8:	4605      	mov	r5, r0
    4bda:	2800      	cmp	r0, #0
    4bdc:	d1f8      	bne.n	4bd0 <menu()+0xb7c>
        SERIALCONSOLE.println();
    4bde:	4851      	ldr	r0, [pc, #324]	; (4d24 <menu()+0xcd0>)
    4be0:	f005 f8c8 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4be4:	484f      	ldr	r0, [pc, #316]	; (4d24 <menu()+0xcd0>)
    4be6:	f005 f8c5 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4bea:	484e      	ldr	r0, [pc, #312]	; (4d24 <menu()+0xcd0>)
    4bec:	f005 f8c2 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4bf0:	484c      	ldr	r0, [pc, #304]	; (4d24 <menu()+0xcd0>)
    4bf2:	f005 f8bf 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4bf6:	484b      	ldr	r0, [pc, #300]	; (4d24 <menu()+0xcd0>)
    4bf8:	f005 f8bc 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4bfc:	2115      	movs	r1, #21
    4bfe:	4856      	ldr	r0, [pc, #344]	; (4d58 <menu()+0xd04>)
    4c00:	f007 fd86 	bl	c710 <usb_serial_write>
    4c04:	4847      	ldr	r0, [pc, #284]	; (4d24 <menu()+0xcd0>)
    4c06:	f005 f8b5 	bl	9d74 <Print::println()>
    4c0a:	2118      	movs	r1, #24
    4c0c:	4853      	ldr	r0, [pc, #332]	; (4d5c <menu()+0xd08>)
    4c0e:	f007 fd7f 	bl	c710 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4c12:	462b      	mov	r3, r5
    4c14:	220a      	movs	r2, #10
    4c16:	f896 1044 	ldrb.w	r1, [r6, #68]	; 0x44
    4c1a:	4842      	ldr	r0, [pc, #264]	; (4d24 <menu()+0xcd0>)
    4c1c:	f005 f8c2 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    4c20:	4840      	ldr	r0, [pc, #256]	; (4d24 <menu()+0xcd0>)
    4c22:	f005 f8a7 	bl	9d74 <Print::println()>
    4c26:	2128      	movs	r1, #40	; 0x28
    4c28:	484d      	ldr	r0, [pc, #308]	; (4d60 <menu()+0xd0c>)
    4c2a:	f007 fd71 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    4c2e:	6cb0      	ldr	r0, [r6, #72]	; 0x48
    4c30:	4941      	ldr	r1, [pc, #260]	; (4d38 <menu()+0xce4>)
    4c32:	f008 fc53 	bl	d4dc <__aeabi_fmul>
    4c36:	f008 fa2d 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4c3a:	9500      	str	r5, [sp, #0]
    4c3c:	4602      	mov	r2, r0
    4c3e:	460b      	mov	r3, r1
    4c40:	4838      	ldr	r0, [pc, #224]	; (4d24 <menu()+0xcd0>)
    4c42:	f005 f8b9 	bl	9db8 <Print::printFloat(double, unsigned char)>
    4c46:	2102      	movs	r1, #2
    4c48:	483c      	ldr	r0, [pc, #240]	; (4d3c <menu()+0xce8>)
    4c4a:	f007 fd61 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c4e:	4835      	ldr	r0, [pc, #212]	; (4d24 <menu()+0xcd0>)
    4c50:	f005 f890 	bl	9d74 <Print::println()>
    4c54:	2119      	movs	r1, #25
    4c56:	4843      	ldr	r0, [pc, #268]	; (4d64 <menu()+0xd10>)
    4c58:	f007 fd5a 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println(settings.TempConv, 4);
    4c5c:	f8d6 00c8 	ldr.w	r0, [r6, #200]	; 0xc8
    4c60:	f008 fa18 	bl	d094 <__aeabi_f2d>
    4c64:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4c66:	2104      	movs	r1, #4
    4c68:	4602      	mov	r2, r0
    4c6a:	9100      	str	r1, [sp, #0]
    4c6c:	482d      	ldr	r0, [pc, #180]	; (4d24 <menu()+0xcd0>)
    4c6e:	f005 f8a3 	bl	9db8 <Print::printFloat(double, unsigned char)>
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    4c72:	482c      	ldr	r0, [pc, #176]	; (4d24 <menu()+0xcd0>)
    4c74:	f005 f87e 	bl	9d74 <Print::println()>
    4c78:	2118      	movs	r1, #24
    4c7a:	483b      	ldr	r0, [pc, #236]	; (4d68 <menu()+0xd14>)
    4c7c:	f007 fd48 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4c80:	f8d6 10cc 	ldr.w	r1, [r6, #204]	; 0xcc
    4c84:	4827      	ldr	r0, [pc, #156]	; (4d24 <menu()+0xcd0>)
    4c86:	f005 f86d 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4c8a:	4826      	ldr	r0, [pc, #152]	; (4d24 <menu()+0xcd0>)
    4c8c:	f005 f872 	bl	9d74 <Print::println()>
    4c90:	2113      	movs	r1, #19
    4c92:	4836      	ldr	r0, [pc, #216]	; (4d6c <menu()+0xd18>)
    4c94:	f007 fd3c 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c98:	4822      	ldr	r0, [pc, #136]	; (4d24 <menu()+0xcd0>)
    4c9a:	f005 f86b 	bl	9d74 <Print::println()>
        menuload = 8;
    4c9e:	2308      	movs	r3, #8
    4ca0:	6023      	str	r3, [r4, #0]
        break;
    4ca2:	f7ff b9f7 	b.w	4094 <menu()+0x40>
        virtual int available() { return usb_serial_available(); }
    4ca6:	f007 fd01 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4caa:	2800      	cmp	r0, #0
    4cac:	f77f ae17 	ble.w	48de <menu()+0x88a>
          settings.IgnoreVolt = Serial.parseInt();
    4cb0:	481c      	ldr	r0, [pc, #112]	; (4d24 <menu()+0xcd0>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4cb2:	4e1d      	ldr	r6, [pc, #116]	; (4d28 <menu()+0xcd4>)
          settings.IgnoreVolt = Serial.parseInt();
    4cb4:	f005 f9bc 	bl	a030 <Stream::parseInt()>
    4cb8:	f008 fbbc 	bl	d434 <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4cbc:	491b      	ldr	r1, [pc, #108]	; (4d2c <menu()+0xcd8>)
    4cbe:	f008 fc0d 	bl	d4dc <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    4cc2:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
    4cc6:	9300      	str	r3, [sp, #0]
    4cc8:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4ccc:	64b0      	str	r0, [r6, #72]	; 0x48
    4cce:	4602      	mov	r2, r0
    4cd0:	e774      	b.n	4bbc <menu()+0xb68>
    4cd2:	f007 fceb 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4cd6:	2800      	cmp	r0, #0
    4cd8:	f301 8070 	bgt.w	5dbc <menu()+0x1d68>
  if (menuload == 5) {
    4cdc:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4cde:	6828      	ldr	r0, [r5, #0]
  if (menuload == 5) {
    4ce0:	2b05      	cmp	r3, #5
    4ce2:	f040 80b5 	bne.w	4e50 <menu()+0xdfc>
    switch (incomingByte) {
    4ce6:	2837      	cmp	r0, #55	; 0x37
    4ce8:	f300 83dd 	bgt.w	54a6 <menu()+0x1452>
    4cec:	2830      	cmp	r0, #48	; 0x30
    4cee:	f77f a9c8 	ble.w	4082 <menu()+0x2e>
    4cf2:	3832      	subs	r0, #50	; 0x32
    4cf4:	2805      	cmp	r0, #5
    4cf6:	f201 8133 	bhi.w	5f60 <menu()+0x1f0c>
    4cfa:	e8df f010 	tbh	[pc, r0, lsl #1]
    4cfe:	0160      	.short	0x0160
    4d00:	013b0150 	.word	0x013b0150
    4d04:	000600a2 	.word	0x000600a2
    4d08:	0170      	.short	0x0170
        settings.tripcont = !settings.tripcont;
    4d0a:	4e07      	ldr	r6, [pc, #28]	; (4d28 <menu()+0xcd4>)
    4d0c:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
          menuload = 1;
    4d10:	2201      	movs	r2, #1
        settings.tripcont = !settings.tripcont;
    4d12:	fab3 f383 	clz	r3, r3
          menuload = 1;
    4d16:	6022      	str	r2, [r4, #0]
        settings.tripcont = !settings.tripcont;
    4d18:	095b      	lsrs	r3, r3, #5
          incomingByte = 'k';
    4d1a:	226b      	movs	r2, #107	; 0x6b
        settings.tripcont = !settings.tripcont;
    4d1c:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
          incomingByte = 'k';
    4d20:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4d22:	e027      	b.n	4d74 <menu()+0xd20>
    4d24:	1fff8824 	.word	0x1fff8824
    4d28:	1fffc0b4 	.word	0x1fffc0b4
    4d2c:	3a83126f 	.word	0x3a83126f
    4d30:	00014cec 	.word	0x00014cec
    4d34:	00014d0c 	.word	0x00014d0c
    4d38:	447a0000 	.word	0x447a0000
    4d3c:	00014ad4 	.word	0x00014ad4
    4d40:	00014d2c 	.word	0x00014d2c
    4d44:	00014d50 	.word	0x00014d50
    4d48:	00014cc8 	.word	0x00014cc8
    4d4c:	00014d6c 	.word	0x00014d6c
    4d50:	00014d80 	.word	0x00014d80
    4d54:	1fff900c 	.word	0x1fff900c
    4d58:	00015548 	.word	0x00015548
    4d5c:	00014a8c 	.word	0x00014a8c
    4d60:	00014aa8 	.word	0x00014aa8
    4d64:	00014ad8 	.word	0x00014ad8
    4d68:	00014af4 	.word	0x00014af4
    4d6c:	00014a78 	.word	0x00014a78
        virtual int read() { return usb_serial_getchar(); }
    4d70:	f007 fc60 	bl	c634 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4d74:	f007 fc9a 	bl	c6ac <usb_serial_available>
        while (Serial.available()) {
    4d78:	2800      	cmp	r0, #0
    4d7a:	d1f9      	bne.n	4d70 <menu()+0xd1c>
        SERIALCONSOLE.println();
    4d7c:	48a3      	ldr	r0, [pc, #652]	; (500c <menu()+0xfb8>)
    4d7e:	f004 fff9 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4d82:	48a2      	ldr	r0, [pc, #648]	; (500c <menu()+0xfb8>)
    4d84:	f004 fff6 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4d88:	48a0      	ldr	r0, [pc, #640]	; (500c <menu()+0xfb8>)
    4d8a:	f004 fff3 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4d8e:	489f      	ldr	r0, [pc, #636]	; (500c <menu()+0xfb8>)
    4d90:	f004 fff0 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    4d94:	489d      	ldr	r0, [pc, #628]	; (500c <menu()+0xfb8>)
    4d96:	f004 ffed 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4d9a:	2121      	movs	r1, #33	; 0x21
    4d9c:	489c      	ldr	r0, [pc, #624]	; (5010 <menu()+0xfbc>)
    4d9e:	f007 fcb7 	bl	c710 <usb_serial_write>
    4da2:	489a      	ldr	r0, [pc, #616]	; (500c <menu()+0xfb8>)
    4da4:	f004 ffe6 	bl	9d74 <Print::println()>
    4da8:	2115      	movs	r1, #21
    4daa:	489a      	ldr	r0, [pc, #616]	; (5014 <menu()+0xfc0>)
    4dac:	f007 fcb0 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4db0:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
    4db4:	4895      	ldr	r0, [pc, #596]	; (500c <menu()+0xfb8>)
    4db6:	f004 ffd5 	bl	9d64 <Print::print(long)>
    4dba:	2102      	movs	r1, #2
    4dbc:	4896      	ldr	r0, [pc, #600]	; (5018 <menu()+0xfc4>)
    4dbe:	f007 fca7 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4dc2:	4892      	ldr	r0, [pc, #584]	; (500c <menu()+0xfb8>)
    4dc4:	f004 ffd6 	bl	9d74 <Print::println()>
    4dc8:	211e      	movs	r1, #30
    4dca:	4894      	ldr	r0, [pc, #592]	; (501c <menu()+0xfc8>)
    4dcc:	f007 fca0 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4dd0:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
    4dd4:	488d      	ldr	r0, [pc, #564]	; (500c <menu()+0xfb8>)
    4dd6:	f004 ffc5 	bl	9d64 <Print::print(long)>
    4dda:	2103      	movs	r1, #3
    4ddc:	4890      	ldr	r0, [pc, #576]	; (5020 <menu()+0xfcc>)
    4dde:	f007 fc97 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4de2:	488a      	ldr	r0, [pc, #552]	; (500c <menu()+0xfb8>)
    4de4:	f004 ffc6 	bl	9d74 <Print::println()>
    4de8:	211e      	movs	r1, #30
    4dea:	488e      	ldr	r0, [pc, #568]	; (5024 <menu()+0xfd0>)
    4dec:	f007 fc90 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4df0:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    4df4:	4885      	ldr	r0, [pc, #532]	; (500c <menu()+0xfb8>)
    4df6:	f004 ffb5 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4dfa:	4884      	ldr	r0, [pc, #528]	; (500c <menu()+0xfb8>)
    4dfc:	f004 ffba 	bl	9d74 <Print::println()>
    4e00:	211d      	movs	r1, #29
    4e02:	4889      	ldr	r0, [pc, #548]	; (5028 <menu()+0xfd4>)
    4e04:	f007 fc84 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4e08:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
    4e0c:	487f      	ldr	r0, [pc, #508]	; (500c <menu()+0xfb8>)
    4e0e:	f004 ffa9 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4e12:	487e      	ldr	r0, [pc, #504]	; (500c <menu()+0xfb8>)
    4e14:	f004 ffae 	bl	9d74 <Print::println()>
    4e18:	211e      	movs	r1, #30
    4e1a:	4884      	ldr	r0, [pc, #528]	; (502c <menu()+0xfd8>)
    4e1c:	f007 fc78 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4e20:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    4e24:	4879      	ldr	r0, [pc, #484]	; (500c <menu()+0xfb8>)
    4e26:	f004 ff9d 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4e2a:	4878      	ldr	r0, [pc, #480]	; (500c <menu()+0xfb8>)
    4e2c:	f004 ffa2 	bl	9d74 <Print::println()>
        if (settings.ESSmode == 1) {
    4e30:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
    4e34:	2b01      	cmp	r3, #1
    4e36:	f001 802d 	beq.w	5e94 <menu()+0x1e40>
        menuload = 5;
    4e3a:	2305      	movs	r3, #5
    4e3c:	6023      	str	r3, [r4, #0]
        break;
    4e3e:	f7ff b929 	b.w	4094 <menu()+0x40>
        virtual int available() { return usb_serial_available(); }
    4e42:	f007 fc33 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4e46:	2800      	cmp	r0, #0
    4e48:	f300 835b 	bgt.w	5502 <menu()+0x14ae>
  if (menuload == 3) {
    4e4c:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4e4e:	6828      	ldr	r0, [r5, #0]
  if (menuload == 3) {
    4e50:	2b03      	cmp	r3, #3
    4e52:	f040 8374 	bne.w	553e <menu()+0x14ea>
    switch (incomingByte) {
    4e56:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4e5a:	2a42      	cmp	r2, #66	; 0x42
    4e5c:	f63f a911 	bhi.w	4082 <menu()+0x2e>
    4e60:	a101      	add	r1, pc, #4	; (adr r1, 4e68 <menu()+0xe14>)
    4e62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4e66:	bf00      	nop
    4e68:	00005a51 	.word	0x00005a51
    4e6c:	00005549 	.word	0x00005549
    4e70:	00005531 	.word	0x00005531
    4e74:	00005ccb 	.word	0x00005ccb
    4e78:	00005cb1 	.word	0x00005cb1
    4e7c:	00005c91 	.word	0x00005c91
    4e80:	00005c33 	.word	0x00005c33
    4e84:	00005c1d 	.word	0x00005c1d
    4e88:	00005bff 	.word	0x00005bff
    4e8c:	00005bdf 	.word	0x00005bdf
    4e90:	00004083 	.word	0x00004083
    4e94:	00004083 	.word	0x00004083
    4e98:	00004083 	.word	0x00004083
    4e9c:	00004083 	.word	0x00004083
    4ea0:	00004083 	.word	0x00004083
    4ea4:	00004083 	.word	0x00004083
    4ea8:	00004083 	.word	0x00004083
    4eac:	00004083 	.word	0x00004083
    4eb0:	00004083 	.word	0x00004083
    4eb4:	00004083 	.word	0x00004083
    4eb8:	00004083 	.word	0x00004083
    4ebc:	00004083 	.word	0x00004083
    4ec0:	00004083 	.word	0x00004083
    4ec4:	00004083 	.word	0x00004083
    4ec8:	00004083 	.word	0x00004083
    4ecc:	00004083 	.word	0x00004083
    4ed0:	00004083 	.word	0x00004083
    4ed4:	00004083 	.word	0x00004083
    4ed8:	00004083 	.word	0x00004083
    4edc:	00004083 	.word	0x00004083
    4ee0:	00004083 	.word	0x00004083
    4ee4:	00004083 	.word	0x00004083
    4ee8:	00004083 	.word	0x00004083
    4eec:	00004083 	.word	0x00004083
    4ef0:	00004083 	.word	0x00004083
    4ef4:	00004083 	.word	0x00004083
    4ef8:	00004083 	.word	0x00004083
    4efc:	00004083 	.word	0x00004083
    4f00:	00004083 	.word	0x00004083
    4f04:	00004083 	.word	0x00004083
    4f08:	00004083 	.word	0x00004083
    4f0c:	00004083 	.word	0x00004083
    4f10:	00004083 	.word	0x00004083
    4f14:	00004083 	.word	0x00004083
    4f18:	00004083 	.word	0x00004083
    4f1c:	00004083 	.word	0x00004083
    4f20:	00004083 	.word	0x00004083
    4f24:	00004083 	.word	0x00004083
    4f28:	00004083 	.word	0x00004083
    4f2c:	00005bc9 	.word	0x00005bc9
    4f30:	00005bb3 	.word	0x00005bb3
    4f34:	00005b9d 	.word	0x00005b9d
    4f38:	00005b87 	.word	0x00005b87
    4f3c:	00005b71 	.word	0x00005b71
    4f40:	00005b33 	.word	0x00005b33
    4f44:	00005b13 	.word	0x00005b13
    4f48:	00005af1 	.word	0x00005af1
    4f4c:	00004083 	.word	0x00004083
    4f50:	00005ad7 	.word	0x00005ad7
    4f54:	00005a89 	.word	0x00005a89
    4f58:	00004083 	.word	0x00004083
    4f5c:	00004083 	.word	0x00004083
    4f60:	00004083 	.word	0x00004083
    4f64:	00004083 	.word	0x00004083
    4f68:	00004083 	.word	0x00004083
    4f6c:	00005a7b 	.word	0x00005a7b
    4f70:	00005aa9 	.word	0x00005aa9
    4f74:	f007 fb9a 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4f78:	2800      	cmp	r0, #0
    4f7a:	f77f af67 	ble.w	4e4c <menu()+0xdf8>
          settings.gaugelow = Serial.parseInt();
    4f7e:	4823      	ldr	r0, [pc, #140]	; (500c <menu()+0xfb8>)
    4f80:	4e2b      	ldr	r6, [pc, #172]	; (5030 <menu()+0xfdc>)
    4f82:	f005 f855 	bl	a030 <Stream::parseInt()>
          gaugedebug = 2;
    4f86:	4b2b      	ldr	r3, [pc, #172]	; (5034 <menu()+0xfe0>)
          settings.gaugelow = Serial.parseInt();
    4f88:	f8c6 00a8 	str.w	r0, [r6, #168]	; 0xa8
          gaugedebug = 2;
    4f8c:	2202      	movs	r2, #2
          gaugedebug = 3;
    4f8e:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    4f90:	f7fc ff46 	bl	1e20 <gaugeupdate()>
          menuload = 1;
    4f94:	2201      	movs	r2, #1
          incomingByte = 'k';
    4f96:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    4f98:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    4f9a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4f9c:	e6ea      	b.n	4d74 <menu()+0xd20>
    4f9e:	f007 fb85 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4fa2:	2800      	cmp	r0, #0
    4fa4:	f77f af52 	ble.w	4e4c <menu()+0xdf8>
          settings.conthold = Serial.parseInt();
    4fa8:	4818      	ldr	r0, [pc, #96]	; (500c <menu()+0xfb8>)
    4faa:	4e21      	ldr	r6, [pc, #132]	; (5030 <menu()+0xfdc>)
    4fac:	f005 f840 	bl	a030 <Stream::parseInt()>
          menuload = 1;
    4fb0:	2301      	movs	r3, #1
    4fb2:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4fb4:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    4fb6:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
          incomingByte = 'k';
    4fba:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4fbc:	e6da      	b.n	4d74 <menu()+0xd20>
    4fbe:	f007 fb75 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    4fc2:	2800      	cmp	r0, #0
    4fc4:	f77f af42 	ble.w	4e4c <menu()+0xdf8>
          settings.Precurrent = Serial.parseInt();
    4fc8:	4810      	ldr	r0, [pc, #64]	; (500c <menu()+0xfb8>)
    4fca:	4e19      	ldr	r6, [pc, #100]	; (5030 <menu()+0xfdc>)
    4fcc:	f005 f830 	bl	a030 <Stream::parseInt()>
          menuload = 1;
    4fd0:	2301      	movs	r3, #1
    4fd2:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4fd4:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    4fd6:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
          incomingByte = 'k';
    4fda:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4fdc:	e6ca      	b.n	4d74 <menu()+0xd20>
        if (settings.ChargerDirect == 1) {
    4fde:	4e14      	ldr	r6, [pc, #80]	; (5030 <menu()+0xfdc>)
    4fe0:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
          menuload = 1;
    4fe4:	2201      	movs	r2, #1
        if (settings.ChargerDirect == 1) {
    4fe6:	4053      	eors	r3, r2
          menuload = 1;
    4fe8:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    4fea:	226b      	movs	r2, #107	; 0x6b
    4fec:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    4ff0:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4ff2:	e6bf      	b.n	4d74 <menu()+0xd20>
        if (settings.ChargerDirect == 1) {
    4ff4:	4e0e      	ldr	r6, [pc, #56]	; (5030 <menu()+0xfdc>)
    4ff6:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
          menuload = 1;
    4ffa:	2201      	movs	r2, #1
        if (settings.ChargerDirect == 1) {
    4ffc:	4053      	eors	r3, r2
          menuload = 1;
    4ffe:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    5000:	2265      	movs	r2, #101	; 0x65
    5002:	f886 30c4 	strb.w	r3, [r6, #196]	; 0xc4
    5006:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    5008:	e018      	b.n	503c <menu()+0xfe8>
    500a:	bf00      	nop
    500c:	1fff8824 	.word	0x1fff8824
    5010:	00014d84 	.word	0x00014d84
    5014:	00014da8 	.word	0x00014da8
    5018:	00014c5c 	.word	0x00014c5c
    501c:	00014dc0 	.word	0x00014dc0
    5020:	000148d4 	.word	0x000148d4
    5024:	00014de0 	.word	0x00014de0
    5028:	00014e00 	.word	0x00014e00
    502c:	00014e20 	.word	0x00014e20
    5030:	1fffc0b4 	.word	0x1fffc0b4
    5034:	1fffbed8 	.word	0x1fffbed8
        virtual int read() { return usb_serial_getchar(); }
    5038:	f007 fafc 	bl	c634 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    503c:	f007 fb36 	bl	c6ac <usb_serial_available>
        while (Serial.available()) {
    5040:	4605      	mov	r5, r0
    5042:	2800      	cmp	r0, #0
    5044:	d1f8      	bne.n	5038 <menu()+0xfe4>
        SERIALCONSOLE.println();
    5046:	48b1      	ldr	r0, [pc, #708]	; (530c <menu()+0x12b8>)
    5048:	f004 fe94 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    504c:	48af      	ldr	r0, [pc, #700]	; (530c <menu()+0x12b8>)
    504e:	f004 fe91 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    5052:	48ae      	ldr	r0, [pc, #696]	; (530c <menu()+0x12b8>)
    5054:	f004 fe8e 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    5058:	48ac      	ldr	r0, [pc, #688]	; (530c <menu()+0x12b8>)
    505a:	f004 fe8b 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    505e:	48ab      	ldr	r0, [pc, #684]	; (530c <menu()+0x12b8>)
    5060:	f004 fe88 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5064:	2111      	movs	r1, #17
    5066:	48aa      	ldr	r0, [pc, #680]	; (5310 <menu()+0x12bc>)
    5068:	f007 fb52 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    506c:	48a7      	ldr	r0, [pc, #668]	; (530c <menu()+0x12b8>)
    506e:	f004 fe81 	bl	9d74 <Print::println()>
    5072:	2128      	movs	r1, #40	; 0x28
    5074:	48a7      	ldr	r0, [pc, #668]	; (5314 <menu()+0x12c0>)
    5076:	f007 fb4b 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    507a:	6970      	ldr	r0, [r6, #20]
    507c:	49a6      	ldr	r1, [pc, #664]	; (5318 <menu()+0x12c4>)
    507e:	f008 fa2d 	bl	d4dc <__aeabi_fmul>
    5082:	f008 f807 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5086:	9500      	str	r5, [sp, #0]
    5088:	4602      	mov	r2, r0
    508a:	460b      	mov	r3, r1
    508c:	489f      	ldr	r0, [pc, #636]	; (530c <menu()+0x12b8>)
    508e:	f004 fe93 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5092:	2102      	movs	r1, #2
    5094:	48a1      	ldr	r0, [pc, #644]	; (531c <menu()+0x12c8>)
    5096:	f007 fb3b 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    509a:	489c      	ldr	r0, [pc, #624]	; (530c <menu()+0x12b8>)
    509c:	f004 fe6a 	bl	9d74 <Print::println()>
    50a0:	2116      	movs	r1, #22
    50a2:	489f      	ldr	r0, [pc, #636]	; (5320 <menu()+0x12cc>)
    50a4:	f007 fb34 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0);
    50a8:	69f0      	ldr	r0, [r6, #28]
    50aa:	499b      	ldr	r1, [pc, #620]	; (5318 <menu()+0x12c4>)
    50ac:	f008 fa16 	bl	d4dc <__aeabi_fmul>
    50b0:	f007 fff0 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    50b4:	9500      	str	r5, [sp, #0]
    50b6:	460b      	mov	r3, r1
    50b8:	4602      	mov	r2, r0
    50ba:	4894      	ldr	r0, [pc, #592]	; (530c <menu()+0x12b8>)
    50bc:	f004 fe7c 	bl	9db8 <Print::printFloat(double, unsigned char)>
    50c0:	2102      	movs	r1, #2
    50c2:	4896      	ldr	r0, [pc, #600]	; (531c <menu()+0x12c8>)
    50c4:	f007 fb24 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    50c8:	4890      	ldr	r0, [pc, #576]	; (530c <menu()+0x12b8>)
    50ca:	f004 fe53 	bl	9d74 <Print::println()>
        if (settings.chargertype > 0) {
    50ce:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    50d2:	2b00      	cmp	r3, #0
    50d4:	dd34      	ble.n	5140 <menu()+0x10ec>
    50d6:	211d      	movs	r1, #29
    50d8:	4892      	ldr	r0, [pc, #584]	; (5324 <menu()+0x12d0>)
    50da:	f007 fb19 	bl	c710 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    50de:	f9b6 0060 	ldrsh.w	r0, [r6, #96]	; 0x60
    50e2:	f008 f9a7 	bl	d434 <__aeabi_i2f>
    50e6:	4990      	ldr	r1, [pc, #576]	; (5328 <menu()+0x12d4>)
    50e8:	f008 f9f8 	bl	d4dc <__aeabi_fmul>
    50ec:	f007 ffd2 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    50f0:	2502      	movs	r5, #2
    50f2:	4602      	mov	r2, r0
    50f4:	460b      	mov	r3, r1
    50f6:	4885      	ldr	r0, [pc, #532]	; (530c <menu()+0x12b8>)
    50f8:	9500      	str	r5, [sp, #0]
    50fa:	f004 fe5d 	bl	9db8 <Print::printFloat(double, unsigned char)>
    50fe:	2101      	movs	r1, #1
    5100:	488a      	ldr	r0, [pc, #552]	; (532c <menu()+0x12d8>)
    5102:	f007 fb05 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5106:	4881      	ldr	r0, [pc, #516]	; (530c <menu()+0x12b8>)
    5108:	f004 fe34 	bl	9d74 <Print::println()>
    510c:	211f      	movs	r1, #31
    510e:	4888      	ldr	r0, [pc, #544]	; (5330 <menu()+0x12dc>)
    5110:	f007 fafe 	bl	c710 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    5114:	f9b6 0062 	ldrsh.w	r0, [r6, #98]	; 0x62
    5118:	f008 f98c 	bl	d434 <__aeabi_i2f>
    511c:	4982      	ldr	r1, [pc, #520]	; (5328 <menu()+0x12d4>)
    511e:	f008 f9dd 	bl	d4dc <__aeabi_fmul>
    5122:	f007 ffb7 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5126:	9500      	str	r5, [sp, #0]
    5128:	4602      	mov	r2, r0
    512a:	460b      	mov	r3, r1
    512c:	4877      	ldr	r0, [pc, #476]	; (530c <menu()+0x12b8>)
    512e:	f004 fe43 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5132:	487e      	ldr	r0, [pc, #504]	; (532c <menu()+0x12d8>)
    5134:	2101      	movs	r1, #1
    5136:	f007 faeb 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    513a:	4874      	ldr	r0, [pc, #464]	; (530c <menu()+0x12b8>)
    513c:	f004 fe1a 	bl	9d74 <Print::println()>
    5140:	487c      	ldr	r0, [pc, #496]	; (5334 <menu()+0x12e0>)
    5142:	2111      	movs	r1, #17
    5144:	f007 fae4 	bl	c710 <usb_serial_write>
        switch (settings.chargertype) {
    5148:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    514c:	2b09      	cmp	r3, #9
    514e:	f200 80f9 	bhi.w	5344 <menu()+0x12f0>
    5152:	e8df f013 	tbh	[pc, r3, lsl #1]
    5156:	017e      	.short	0x017e
    5158:	01790183 	.word	0x01790183
    515c:	016f0174 	.word	0x016f0174
    5160:	0165016a 	.word	0x0165016a
    5164:	00f3015b 	.word	0x00f3015b
    5168:	0160      	.short	0x0160
        virtual int available() { return usb_serial_available(); }
    516a:	f007 fa9f 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    516e:	2800      	cmp	r0, #0
    5170:	f77f adb4 	ble.w	4cdc <menu()+0xc88>
          settings.chargerspd = Serial.parseInt();
    5174:	4865      	ldr	r0, [pc, #404]	; (530c <menu()+0x12b8>)
    5176:	4e70      	ldr	r6, [pc, #448]	; (5338 <menu()+0x12e4>)
    5178:	f004 ff5a 	bl	a030 <Stream::parseInt()>
          menuload = 1;
    517c:	2301      	movs	r3, #1
    517e:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    5180:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    5182:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
          incomingByte = 'e';
    5186:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5188:	e758      	b.n	503c <menu()+0xfe8>
    518a:	f007 fa8f 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    518e:	2800      	cmp	r0, #0
    5190:	f77f ada4 	ble.w	4cdc <menu()+0xc88>
          settings.chargecurrentend = Serial.parseInt() * 10;
    5194:	485d      	ldr	r0, [pc, #372]	; (530c <menu()+0x12b8>)
    5196:	4e68      	ldr	r6, [pc, #416]	; (5338 <menu()+0x12e4>)
    5198:	f004 ff4a 	bl	a030 <Stream::parseInt()>
    519c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    51a0:	0043      	lsls	r3, r0, #1
          menuload = 1;
    51a2:	2201      	movs	r2, #1
          settings.chargecurrentend = Serial.parseInt() * 10;
    51a4:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
          incomingByte = 'e';
    51a8:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    51aa:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    51ac:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    51ae:	e745      	b.n	503c <menu()+0xfe8>
    51b0:	f007 fa7c 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    51b4:	2800      	cmp	r0, #0
    51b6:	f77f ad91 	ble.w	4cdc <menu()+0xc88>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    51ba:	4854      	ldr	r0, [pc, #336]	; (530c <menu()+0x12b8>)
    51bc:	4e5e      	ldr	r6, [pc, #376]	; (5338 <menu()+0x12e4>)
    51be:	f004 ff37 	bl	a030 <Stream::parseInt()>
    51c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    51c6:	0043      	lsls	r3, r0, #1
          menuload = 1;
    51c8:	2201      	movs	r2, #1
          settings.chargecurrentmax = Serial.parseInt() * 10;
    51ca:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
          incomingByte = 'e';
    51ce:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    51d0:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    51d2:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    51d4:	e732      	b.n	503c <menu()+0xfe8>
    51d6:	f007 fa69 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    51da:	2800      	cmp	r0, #0
    51dc:	f77f ad7e 	ble.w	4cdc <menu()+0xc88>
          settings.ChargeHys = Serial.parseInt();
    51e0:	484a      	ldr	r0, [pc, #296]	; (530c <menu()+0x12b8>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    51e2:	4e55      	ldr	r6, [pc, #340]	; (5338 <menu()+0x12e4>)
          settings.ChargeHys = Serial.parseInt();
    51e4:	f004 ff24 	bl	a030 <Stream::parseInt()>
    51e8:	f008 f924 	bl	d434 <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    51ec:	494a      	ldr	r1, [pc, #296]	; (5318 <menu()+0x12c4>)
    51ee:	f008 fa29 	bl	d644 <__aeabi_fdiv>
          menuload = 1;
    51f2:	2301      	movs	r3, #1
    51f4:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    51f6:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    51f8:	61f0      	str	r0, [r6, #28]
          incomingByte = 'e';
    51fa:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    51fc:	e71e      	b.n	503c <menu()+0xfe8>
    51fe:	f007 fa55 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5202:	2800      	cmp	r0, #0
    5204:	f77f ad6a 	ble.w	4cdc <menu()+0xc88>
          settings.chargecurrentcold = Serial.parseInt() * 10;
    5208:	4840      	ldr	r0, [pc, #256]	; (530c <menu()+0x12b8>)
    520a:	4e4b      	ldr	r6, [pc, #300]	; (5338 <menu()+0x12e4>)
    520c:	f004 ff10 	bl	a030 <Stream::parseInt()>
    5210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5214:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    5218:	0043      	lsls	r3, r0, #1
    521a:	b21b      	sxth	r3, r3
    521c:	4293      	cmp	r3, r2
    521e:	bfa8      	it	ge
    5220:	4613      	movge	r3, r2
    5222:	f8a6 30de 	strh.w	r3, [r6, #222]	; 0xde
          menuload = 1;
    5226:	2201      	movs	r2, #1
          incomingByte = 'e';
    5228:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    522a:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    522c:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    522e:	e705      	b.n	503c <menu()+0xfe8>
    5230:	f007 fa3c 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5234:	2800      	cmp	r0, #0
    5236:	f77f ad51 	ble.w	4cdc <menu()+0xc88>
          settings.ChargeVsetpoint = Serial.parseInt();
    523a:	4834      	ldr	r0, [pc, #208]	; (530c <menu()+0x12b8>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    523c:	4e3e      	ldr	r6, [pc, #248]	; (5338 <menu()+0x12e4>)
          settings.ChargeVsetpoint = Serial.parseInt();
    523e:	f004 fef7 	bl	a030 <Stream::parseInt()>
    5242:	f008 f8f7 	bl	d434 <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    5246:	4934      	ldr	r1, [pc, #208]	; (5318 <menu()+0x12c4>)
    5248:	f008 f9fc 	bl	d644 <__aeabi_fdiv>
          menuload = 1;
    524c:	2301      	movs	r3, #1
    524e:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    5250:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    5252:	6170      	str	r0, [r6, #20]
          incomingByte = 'e';
    5254:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5256:	e6f1      	b.n	503c <menu()+0xfe8>
        settings.chargertype = settings.chargertype + 1;
    5258:	4e37      	ldr	r6, [pc, #220]	; (5338 <menu()+0x12e4>)
    525a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
          menuload = 1;
    525e:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    5260:	4413      	add	r3, r2
          settings.chargertype = 0;
    5262:	2b0a      	cmp	r3, #10
          menuload = 1;
    5264:	6022      	str	r2, [r4, #0]
          settings.chargertype = 0;
    5266:	bfa8      	it	ge
    5268:	2300      	movge	r3, #0
          incomingByte = 'e';
    526a:	2265      	movs	r2, #101	; 0x65
    526c:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
    5270:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    5272:	e6e3      	b.n	503c <menu()+0xfe8>
        menuload = 1;
    5274:	2301      	movs	r3, #1
    5276:	6023      	str	r3, [r4, #0]
    5278:	f007 fa18 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    527c:	2800      	cmp	r0, #0
    527e:	f77f ab08 	ble.w	4892 <menu()+0x83e>
          settings.convhigh = Serial.parseInt();
    5282:	4822      	ldr	r0, [pc, #136]	; (530c <menu()+0x12b8>)
    5284:	4e2c      	ldr	r6, [pc, #176]	; (5338 <menu()+0x12e4>)
    5286:	f004 fed3 	bl	a030 <Stream::parseInt()>
    528a:	f008 f8d3 	bl	d434 <__aeabi_i2f>
    528e:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
    5292:	f7ff bafe 	b.w	4892 <menu()+0x83e>
        menuload = 1;
    5296:	2301      	movs	r3, #1
    5298:	6023      	str	r3, [r4, #0]
    529a:	f007 fa07 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    529e:	2800      	cmp	r0, #0
    52a0:	f77f aaf7 	ble.w	4892 <menu()+0x83e>
          settings.CurDead = Serial.parseInt();
    52a4:	4819      	ldr	r0, [pc, #100]	; (530c <menu()+0x12b8>)
    52a6:	4e24      	ldr	r6, [pc, #144]	; (5338 <menu()+0x12e4>)
    52a8:	f004 fec2 	bl	a030 <Stream::parseInt()>
    52ac:	f8a6 00be 	strh.w	r0, [r6, #190]	; 0xbe
    52b0:	f7ff baef 	b.w	4892 <menu()+0x83e>
        settings.curcan++;
    52b4:	4e20      	ldr	r6, [pc, #128]	; (5338 <menu()+0x12e4>)
    52b6:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
        menuload = 1;
    52ba:	2201      	movs	r2, #1
        settings.curcan++;
    52bc:	4413      	add	r3, r2
          settings.curcan = 1;
    52be:	2b05      	cmp	r3, #5
    52c0:	bfa8      	it	ge
    52c2:	4613      	movge	r3, r2
        menuload = 1;
    52c4:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    52c6:	2263      	movs	r2, #99	; 0x63
    52c8:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    52cc:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    52ce:	f7ff ba4c 	b.w	476a <menu()+0x716>
        menuload = 1;
    52d2:	2301      	movs	r3, #1
    52d4:	6023      	str	r3, [r4, #0]
    52d6:	f007 f9e9 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    52da:	2800      	cmp	r0, #0
    52dc:	f77f aab8 	ble.w	4850 <menu()+0x7fc>
          settings.changecur = Serial.parseInt();
    52e0:	480a      	ldr	r0, [pc, #40]	; (530c <menu()+0x12b8>)
    52e2:	4e15      	ldr	r6, [pc, #84]	; (5338 <menu()+0x12e4>)
    52e4:	f004 fea4 	bl	a030 <Stream::parseInt()>
    52e8:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
    52ec:	f7ff bab1 	b.w	4852 <menu()+0x7fe>
        settings.cursens++;
    52f0:	4e11      	ldr	r6, [pc, #68]	; (5338 <menu()+0x12e4>)
    52f2:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
        menuload = 1;
    52f4:	2201      	movs	r2, #1
        settings.cursens++;
    52f6:	4413      	add	r3, r2
          settings.cursens = 0;
    52f8:	2b04      	cmp	r3, #4
        menuload = 1;
    52fa:	6022      	str	r2, [r4, #0]
          settings.cursens = 0;
    52fc:	bfa8      	it	ge
    52fe:	2300      	movge	r3, #0
        incomingByte = 'c';
    5300:	2263      	movs	r2, #99	; 0x63
    5302:	67f3      	str	r3, [r6, #124]	; 0x7c
    5304:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    5306:	f7ff ba30 	b.w	476a <menu()+0x716>
    530a:	bf00      	nop
    530c:	1fff8824 	.word	0x1fff8824
    5310:	000154ec 	.word	0x000154ec
    5314:	00014b10 	.word	0x00014b10
    5318:	447a0000 	.word	0x447a0000
    531c:	00014ad4 	.word	0x00014ad4
    5320:	00014b3c 	.word	0x00014b3c
    5324:	00014b54 	.word	0x00014b54
    5328:	3dcccccd 	.word	0x3dcccccd
    532c:	00015108 	.word	0x00015108
    5330:	00014b74 	.word	0x00014b74
    5334:	00014b94 	.word	0x00014b94
    5338:	1fffc0b4 	.word	0x1fffc0b4
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    533c:	488c      	ldr	r0, [pc, #560]	; (5570 <menu()+0x151c>)
    533e:	2110      	movs	r1, #16
    5340:	f007 f9e6 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println();
    5344:	488b      	ldr	r0, [pc, #556]	; (5574 <menu()+0x1520>)
    5346:	f004 fd15 	bl	9d74 <Print::println()>
        if (settings.chargertype > 0) {
    534a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    534e:	2b00      	cmp	r3, #0
    5350:	dd12      	ble.n	5378 <menu()+0x1324>
    5352:	2118      	movs	r1, #24
    5354:	4888      	ldr	r0, [pc, #544]	; (5578 <menu()+0x1524>)
    5356:	f007 f9db 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    535a:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
    535e:	4885      	ldr	r0, [pc, #532]	; (5574 <menu()+0x1520>)
    5360:	f004 fd00 	bl	9d64 <Print::print(long)>
    5364:	2102      	movs	r1, #2
    5366:	4885      	ldr	r0, [pc, #532]	; (557c <menu()+0x1528>)
    5368:	f007 f9d2 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    536c:	4881      	ldr	r0, [pc, #516]	; (5574 <menu()+0x1520>)
    536e:	f004 fd01 	bl	9d74 <Print::println()>
          SERIALCONSOLE.println();
    5372:	4880      	ldr	r0, [pc, #512]	; (5574 <menu()+0x1520>)
    5374:	f004 fcfe 	bl	9d74 <Print::println()>
    5378:	4881      	ldr	r0, [pc, #516]	; (5580 <menu()+0x152c>)
    537a:	211b      	movs	r1, #27
    537c:	f007 f9c8 	bl	c710 <usb_serial_write>
        switch (settings.ChargerDirect) {
    5380:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    5384:	2b00      	cmp	r3, #0
    5386:	f040 80c5 	bne.w	5514 <menu()+0x14c0>
    538a:	487e      	ldr	r0, [pc, #504]	; (5584 <menu()+0x1530>)
    538c:	2112      	movs	r1, #18
    538e:	f007 f9bf 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.println();
    5392:	4878      	ldr	r0, [pc, #480]	; (5574 <menu()+0x1520>)
    5394:	f004 fcee 	bl	9d74 <Print::println()>
    5398:	211f      	movs	r1, #31
    539a:	487b      	ldr	r0, [pc, #492]	; (5588 <menu()+0x1534>)
    539c:	f007 f9b8 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeTSetpoint);
    53a0:	6b30      	ldr	r0, [r6, #48]	; 0x30
    53a2:	f007 fe77 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    53a6:	2502      	movs	r5, #2
    53a8:	4602      	mov	r2, r0
    53aa:	460b      	mov	r3, r1
    53ac:	4871      	ldr	r0, [pc, #452]	; (5574 <menu()+0x1520>)
    53ae:	9500      	str	r5, [sp, #0]
    53b0:	f004 fd02 	bl	9db8 <Print::printFloat(double, unsigned char)>
    53b4:	4629      	mov	r1, r5
    53b6:	4875      	ldr	r0, [pc, #468]	; (558c <menu()+0x1538>)
    53b8:	f007 f9aa 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    53bc:	486d      	ldr	r0, [pc, #436]	; (5574 <menu()+0x1520>)
    53be:	f004 fcd9 	bl	9d74 <Print::println()>
    53c2:	211e      	movs	r1, #30
    53c4:	4872      	ldr	r0, [pc, #456]	; (5590 <menu()+0x153c>)
    53c6:	f007 f9a3 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.chargecurrentcold * 0.1);
    53ca:	f9b6 00de 	ldrsh.w	r0, [r6, #222]	; 0xde
    53ce:	f008 f831 	bl	d434 <__aeabi_i2f>
    53d2:	4970      	ldr	r1, [pc, #448]	; (5594 <menu()+0x1540>)
    53d4:	f008 f882 	bl	d4dc <__aeabi_fmul>
    53d8:	f007 fe5c 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    53dc:	9500      	str	r5, [sp, #0]
    53de:	460b      	mov	r3, r1
    53e0:	4602      	mov	r2, r0
    53e2:	4864      	ldr	r0, [pc, #400]	; (5574 <menu()+0x1520>)
    53e4:	f004 fce8 	bl	9db8 <Print::printFloat(double, unsigned char)>
    53e8:	2101      	movs	r1, #1
    53ea:	486b      	ldr	r0, [pc, #428]	; (5598 <menu()+0x1544>)
    53ec:	f007 f990 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    53f0:	4860      	ldr	r0, [pc, #384]	; (5574 <menu()+0x1520>)
    53f2:	f004 fcbf 	bl	9d74 <Print::println()>
    53f6:	2113      	movs	r1, #19
    53f8:	4868      	ldr	r0, [pc, #416]	; (559c <menu()+0x1548>)
    53fa:	f007 f989 	bl	c710 <usb_serial_write>
    53fe:	485d      	ldr	r0, [pc, #372]	; (5574 <menu()+0x1520>)
    5400:	f004 fcb8 	bl	9d74 <Print::println()>
        menuload = 6;
    5404:	2306      	movs	r3, #6
    5406:	6023      	str	r3, [r4, #0]
        break;
    5408:	f7fe be44 	b.w	4094 <menu()+0x40>
    540c:	2110      	movs	r1, #16
    540e:	4864      	ldr	r0, [pc, #400]	; (55a0 <menu()+0x154c>)
    5410:	f007 f97e 	bl	c710 <usb_serial_write>
    5414:	e796      	b.n	5344 <menu()+0x12f0>
    5416:	2109      	movs	r1, #9
    5418:	4862      	ldr	r0, [pc, #392]	; (55a4 <menu()+0x1550>)
    541a:	f007 f979 	bl	c710 <usb_serial_write>
    541e:	e791      	b.n	5344 <menu()+0x12f0>
    5420:	2104      	movs	r1, #4
    5422:	4861      	ldr	r0, [pc, #388]	; (55a8 <menu()+0x1554>)
    5424:	f007 f974 	bl	c710 <usb_serial_write>
    5428:	e78c      	b.n	5344 <menu()+0x12f0>
    542a:	210b      	movs	r1, #11
    542c:	485f      	ldr	r0, [pc, #380]	; (55ac <menu()+0x1558>)
    542e:	f007 f96f 	bl	c710 <usb_serial_write>
    5432:	e787      	b.n	5344 <menu()+0x12f0>
    5434:	210d      	movs	r1, #13
    5436:	485e      	ldr	r0, [pc, #376]	; (55b0 <menu()+0x155c>)
    5438:	f007 f96a 	bl	c710 <usb_serial_write>
    543c:	e782      	b.n	5344 <menu()+0x12f0>
    543e:	210d      	movs	r1, #13
    5440:	485c      	ldr	r0, [pc, #368]	; (55b4 <menu()+0x1560>)
    5442:	f007 f965 	bl	c710 <usb_serial_write>
    5446:	e77d      	b.n	5344 <menu()+0x12f0>
    5448:	210c      	movs	r1, #12
    544a:	485b      	ldr	r0, [pc, #364]	; (55b8 <menu()+0x1564>)
    544c:	f007 f960 	bl	c710 <usb_serial_write>
    5450:	e778      	b.n	5344 <menu()+0x12f0>
    5452:	210d      	movs	r1, #13
    5454:	4859      	ldr	r0, [pc, #356]	; (55bc <menu()+0x1568>)
    5456:	f007 f95b 	bl	c710 <usb_serial_write>
    545a:	e773      	b.n	5344 <menu()+0x12f0>
    545c:	210c      	movs	r1, #12
    545e:	4858      	ldr	r0, [pc, #352]	; (55c0 <menu()+0x156c>)
    5460:	f007 f956 	bl	c710 <usb_serial_write>
    5464:	e76e      	b.n	5344 <menu()+0x12f0>
  if (incomingByte == 115 & menuload == 0) {
    5466:	6823      	ldr	r3, [r4, #0]
    5468:	2b00      	cmp	r3, #0
    546a:	bf08      	it	eq
    546c:	2873      	cmpeq	r0, #115	; 0x73
    546e:	bf0c      	ite	eq
    5470:	2301      	moveq	r3, #1
    5472:	2300      	movne	r3, #0
    5474:	f7fe be0b 	b.w	408e <menu()+0x3a>
        CPU_REBOOT;
    5478:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    547c:	4a51      	ldr	r2, [pc, #324]	; (55c4 <menu()+0x1570>)
    547e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
        break;
    5482:	f7fe be07 	b.w	4094 <menu()+0x40>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    5486:	22e0      	movs	r2, #224	; 0xe0
    5488:	2100      	movs	r1, #0
    548a:	484f      	ldr	r0, [pc, #316]	; (55c8 <menu()+0x1574>)
        debug = 1;
    548c:	4e4f      	ldr	r6, [pc, #316]	; (55cc <menu()+0x1578>)
    548e:	f004 fecb 	bl	a228 <eeprom_write_block>
  if (incomingByte == 115 & menuload == 0) {
    5492:	682b      	ldr	r3, [r5, #0]
        menuload = 0;
    5494:	2100      	movs	r1, #0
        debug = 1;
    5496:	2201      	movs	r2, #1
  if (incomingByte == 115 & menuload == 0) {
    5498:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    549a:	6021      	str	r1, [r4, #0]
        debug = 1;
    549c:	6032      	str	r2, [r6, #0]
  if (incomingByte == 115 & menuload == 0) {
    549e:	f47e adf9 	bne.w	4094 <menu()+0x40>
    54a2:	f7fe bf18 	b.w	42d6 <menu()+0x282>
    switch (incomingByte) {
    54a6:	2871      	cmp	r0, #113	; 0x71
    54a8:	f47f a9fc 	bne.w	48a4 <menu()+0x850>
        gaugedebug = 0;
    54ac:	4a48      	ldr	r2, [pc, #288]	; (55d0 <menu()+0x157c>)
    54ae:	2300      	movs	r3, #0
          incomingByte = 'k';
    54b0:	2073      	movs	r0, #115	; 0x73
        gaugedebug = 0;
    54b2:	6013      	str	r3, [r2, #0]
          menuload = 1;
    54b4:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    54b6:	6028      	str	r0, [r5, #0]
  if (menuload == 1) {
    54b8:	f7fe bde3 	b.w	4082 <menu()+0x2e>
    switch (incomingByte) {
    54bc:	2871      	cmp	r0, #113	; 0x71
    54be:	f43e addc 	beq.w	407a <menu()+0x26>
    54c2:	f7ff b92e 	b.w	4722 <menu()+0x6ce>
          settings.WarnToff = Serial.parseInt();
    54c6:	482b      	ldr	r0, [pc, #172]	; (5574 <menu()+0x1520>)
    54c8:	4e3f      	ldr	r6, [pc, #252]	; (55c8 <menu()+0x1574>)
    54ca:	f004 fdb1 	bl	a030 <Stream::parseInt()>
    54ce:	f007 ffb1 	bl	d434 <__aeabi_i2f>
          menuload = 1;
    54d2:	2301      	movs	r3, #1
    54d4:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    54d6:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    54d8:	63b0      	str	r0, [r6, #56]	; 0x38
          incomingByte = 'a';
    54da:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    54dc:	f7ff badc 	b.w	4a98 <menu()+0xa44>
          settings.TempConv = Serial.parseInt();
    54e0:	4824      	ldr	r0, [pc, #144]	; (5574 <menu()+0x1520>)
          settings.TempConv = settings.TempConv * 0.0001;
    54e2:	4e39      	ldr	r6, [pc, #228]	; (55c8 <menu()+0x1574>)
          settings.TempConv = Serial.parseInt();
    54e4:	f004 fda4 	bl	a030 <Stream::parseInt()>
    54e8:	f007 ffa4 	bl	d434 <__aeabi_i2f>
          settings.TempConv = settings.TempConv * 0.0001;
    54ec:	4939      	ldr	r1, [pc, #228]	; (55d4 <menu()+0x1580>)
    54ee:	f007 fff5 	bl	d4dc <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    54f2:	f8d6 20cc 	ldr.w	r2, [r6, #204]	; 0xcc
    54f6:	9200      	str	r2, [sp, #0]
          settings.TempConv = settings.TempConv * 0.0001;
    54f8:	4603      	mov	r3, r0
    54fa:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    54fe:	f7ff bb5c 	b.w	4bba <menu()+0xb66>
          settings.gaugehigh = Serial.parseInt();
    5502:	481c      	ldr	r0, [pc, #112]	; (5574 <menu()+0x1520>)
    5504:	4e30      	ldr	r6, [pc, #192]	; (55c8 <menu()+0x1574>)
    5506:	f004 fd93 	bl	a030 <Stream::parseInt()>
          gaugedebug = 3;
    550a:	4b31      	ldr	r3, [pc, #196]	; (55d0 <menu()+0x157c>)
          settings.gaugehigh = Serial.parseInt();
    550c:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
          gaugedebug = 3;
    5510:	2203      	movs	r2, #3
    5512:	e53c      	b.n	4f8e <menu()+0xf3a>
    5514:	2114      	movs	r1, #20
    5516:	4830      	ldr	r0, [pc, #192]	; (55d8 <menu()+0x1584>)
    5518:	f007 f8fa 	bl	c710 <usb_serial_write>
    551c:	e739      	b.n	5392 <menu()+0x133e>
    551e:	2111      	movs	r1, #17
    5520:	482e      	ldr	r0, [pc, #184]	; (55dc <menu()+0x1588>)
    5522:	f007 f8f5 	bl	c710 <usb_serial_write>
    5526:	4813      	ldr	r0, [pc, #76]	; (5574 <menu()+0x1520>)
    5528:	f004 fc24 	bl	9d74 <Print::println()>
    552c:	f7ff b870 	b.w	4610 <menu()+0x5bc>
        virtual int available() { return usb_serial_available(); }
    5530:	f007 f8bc 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5534:	2800      	cmp	r0, #0
    5536:	f300 84cb 	bgt.w	5ed0 <menu()+0x1e7c>
  if (menuload == 1) {
    553a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    553c:	6828      	ldr	r0, [r5, #0]
  if (menuload == 1) {
    553e:	2b01      	cmp	r3, #1
    5540:	f47e ad9f 	bne.w	4082 <menu()+0x2e>
    5544:	f7fe bf60 	b.w	4408 <menu()+0x3b4>
    5548:	f007 f8b0 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    554c:	2800      	cmp	r0, #0
    554e:	ddf4      	ble.n	553a <menu()+0x14e6>
          settings.OverVSetpoint = Serial.parseInt();
    5550:	4808      	ldr	r0, [pc, #32]	; (5574 <menu()+0x1520>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    5552:	4e1d      	ldr	r6, [pc, #116]	; (55c8 <menu()+0x1574>)
          settings.OverVSetpoint = Serial.parseInt();
    5554:	f004 fd6c 	bl	a030 <Stream::parseInt()>
    5558:	f007 ff6c 	bl	d434 <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    555c:	4920      	ldr	r1, [pc, #128]	; (55e0 <menu()+0x158c>)
    555e:	f008 f871 	bl	d644 <__aeabi_fdiv>
    5562:	60f0      	str	r0, [r6, #12]
        menuload = 1;
    5564:	2201      	movs	r2, #1
        incomingByte = 'b';
    5566:	2362      	movs	r3, #98	; 0x62
        menuload = 1;
    5568:	6022      	str	r2, [r4, #0]
        incomingByte = 'b';
    556a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    556c:	e03c      	b.n	55e8 <menu()+0x1594>
    556e:	bf00      	nop
    5570:	00014c20 	.word	0x00014c20
    5574:	1fff8824 	.word	0x1fff8824
    5578:	00014c40 	.word	0x00014c40
    557c:	00014c5c 	.word	0x00014c5c
    5580:	00014c60 	.word	0x00014c60
    5584:	00014c7c 	.word	0x00014c7c
    5588:	00014ca8 	.word	0x00014ca8
    558c:	00014cc8 	.word	0x00014cc8
    5590:	00014ccc 	.word	0x00014ccc
    5594:	3dcccccd 	.word	0x3dcccccd
    5598:	00015108 	.word	0x00015108
    559c:	00014a78 	.word	0x00014a78
    55a0:	00014c0c 	.word	0x00014c0c
    55a4:	00014c34 	.word	0x00014c34
    55a8:	00014c04 	.word	0x00014c04
    55ac:	00014bf8 	.word	0x00014bf8
    55b0:	00014be8 	.word	0x00014be8
    55b4:	00014bd8 	.word	0x00014bd8
    55b8:	00014bc8 	.word	0x00014bc8
    55bc:	00014ba8 	.word	0x00014ba8
    55c0:	00014bb8 	.word	0x00014bb8
    55c4:	05fa0004 	.word	0x05fa0004
    55c8:	1fffc0b4 	.word	0x1fffc0b4
    55cc:	1fff8748 	.word	0x1fff8748
    55d0:	1fffbed8 	.word	0x1fffbed8
    55d4:	38d1b717 	.word	0x38d1b717
    55d8:	00014c90 	.word	0x00014c90
    55dc:	00014a64 	.word	0x00014a64
    55e0:	447a0000 	.word	0x447a0000
        virtual int read() { return usb_serial_getchar(); }
    55e4:	f007 f826 	bl	c634 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    55e8:	f007 f860 	bl	c6ac <usb_serial_available>
        while (Serial.available()) {
    55ec:	4605      	mov	r5, r0
    55ee:	2800      	cmp	r0, #0
    55f0:	d1f8      	bne.n	55e4 <menu()+0x1590>
        SERIALCONSOLE.println();
    55f2:	48c3      	ldr	r0, [pc, #780]	; (5900 <menu()+0x18ac>)
    55f4:	f004 fbbe 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    55f8:	48c1      	ldr	r0, [pc, #772]	; (5900 <menu()+0x18ac>)
    55fa:	f004 fbbb 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    55fe:	48c0      	ldr	r0, [pc, #768]	; (5900 <menu()+0x18ac>)
    5600:	f004 fbb8 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    5604:	48be      	ldr	r0, [pc, #760]	; (5900 <menu()+0x18ac>)
    5606:	f004 fbb5 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    560a:	48bd      	ldr	r0, [pc, #756]	; (5900 <menu()+0x18ac>)
    560c:	f004 fbb2 	bl	9d74 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5610:	2115      	movs	r1, #21
    5612:	48bc      	ldr	r0, [pc, #752]	; (5904 <menu()+0x18b0>)
    5614:	f007 f87c 	bl	c710 <usb_serial_write>
    5618:	48b9      	ldr	r0, [pc, #740]	; (5900 <menu()+0x18ac>)
    561a:	f004 fbab 	bl	9d74 <Print::println()>
    561e:	2114      	movs	r1, #20
    5620:	48b9      	ldr	r0, [pc, #740]	; (5908 <menu()+0x18b4>)
    5622:	f007 f875 	bl	c710 <usb_serial_write>
    5626:	48b6      	ldr	r0, [pc, #728]	; (5900 <menu()+0x18ac>)
    5628:	f004 fba4 	bl	9d74 <Print::println()>
    562c:	211b      	movs	r1, #27
    562e:	48b7      	ldr	r0, [pc, #732]	; (590c <menu()+0x18b8>)
    5630:	f007 f86e 	bl	c710 <usb_serial_write>
    5634:	48b2      	ldr	r0, [pc, #712]	; (5900 <menu()+0x18ac>)
    5636:	f004 fb9d 	bl	9d74 <Print::println()>
    563a:	2113      	movs	r1, #19
    563c:	48b4      	ldr	r0, [pc, #720]	; (5910 <menu()+0x18bc>)
    563e:	f007 f867 	bl	c710 <usb_serial_write>
    5642:	48af      	ldr	r0, [pc, #700]	; (5900 <menu()+0x18ac>)
    5644:	f004 fb96 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    5648:	48ad      	ldr	r0, [pc, #692]	; (5900 <menu()+0x18ac>)
    564a:	f004 fb93 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    564e:	48ac      	ldr	r0, [pc, #688]	; (5900 <menu()+0x18ac>)
    5650:	f004 fb90 	bl	9d74 <Print::println()>
    5654:	2120      	movs	r1, #32
    5656:	48af      	ldr	r0, [pc, #700]	; (5914 <menu()+0x18c0>)
    5658:	f007 f85a 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    565c:	68f0      	ldr	r0, [r6, #12]
    565e:	49ae      	ldr	r1, [pc, #696]	; (5918 <menu()+0x18c4>)
    5660:	f007 ff3c 	bl	d4dc <__aeabi_fmul>
    5664:	f007 fd16 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5668:	9500      	str	r5, [sp, #0]
    566a:	4602      	mov	r2, r0
    566c:	460b      	mov	r3, r1
    566e:	48a4      	ldr	r0, [pc, #656]	; (5900 <menu()+0x18ac>)
    5670:	f004 fba2 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5674:	2102      	movs	r1, #2
    5676:	48a9      	ldr	r0, [pc, #676]	; (591c <menu()+0x18c8>)
    5678:	f007 f84a 	bl	c710 <usb_serial_write>
    567c:	2102      	movs	r1, #2
    567e:	48a8      	ldr	r0, [pc, #672]	; (5920 <menu()+0x18cc>)
    5680:	f007 f846 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5684:	489e      	ldr	r0, [pc, #632]	; (5900 <menu()+0x18ac>)
    5686:	f004 fb75 	bl	9d74 <Print::println()>
    568a:	2121      	movs	r1, #33	; 0x21
    568c:	48a5      	ldr	r0, [pc, #660]	; (5924 <menu()+0x18d0>)
    568e:	f007 f83f 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    5692:	6930      	ldr	r0, [r6, #16]
    5694:	49a0      	ldr	r1, [pc, #640]	; (5918 <menu()+0x18c4>)
    5696:	f007 ff21 	bl	d4dc <__aeabi_fmul>
    569a:	f007 fcfb 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    569e:	9500      	str	r5, [sp, #0]
    56a0:	4602      	mov	r2, r0
    56a2:	460b      	mov	r3, r1
    56a4:	4896      	ldr	r0, [pc, #600]	; (5900 <menu()+0x18ac>)
    56a6:	f004 fb87 	bl	9db8 <Print::printFloat(double, unsigned char)>
    56aa:	2102      	movs	r1, #2
    56ac:	489b      	ldr	r0, [pc, #620]	; (591c <menu()+0x18c8>)
    56ae:	f007 f82f 	bl	c710 <usb_serial_write>
    56b2:	2102      	movs	r1, #2
    56b4:	489a      	ldr	r0, [pc, #616]	; (5920 <menu()+0x18cc>)
    56b6:	f007 f82b 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    56ba:	4891      	ldr	r0, [pc, #580]	; (5900 <menu()+0x18ac>)
    56bc:	f004 fb5a 	bl	9d74 <Print::println()>
    56c0:	211f      	movs	r1, #31
    56c2:	4899      	ldr	r0, [pc, #612]	; (5928 <menu()+0x18d4>)
    56c4:	f007 f824 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    56c8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    56ca:	f007 fce3 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    56ce:	2702      	movs	r7, #2
    56d0:	4602      	mov	r2, r0
    56d2:	460b      	mov	r3, r1
    56d4:	488a      	ldr	r0, [pc, #552]	; (5900 <menu()+0x18ac>)
    56d6:	9700      	str	r7, [sp, #0]
    56d8:	f004 fb6e 	bl	9db8 <Print::printFloat(double, unsigned char)>
    56dc:	2101      	movs	r1, #1
    56de:	4893      	ldr	r0, [pc, #588]	; (592c <menu()+0x18d8>)
    56e0:	f007 f816 	bl	c710 <usb_serial_write>
    56e4:	4639      	mov	r1, r7
    56e6:	488e      	ldr	r0, [pc, #568]	; (5920 <menu()+0x18cc>)
    56e8:	f007 f812 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    56ec:	4884      	ldr	r0, [pc, #528]	; (5900 <menu()+0x18ac>)
    56ee:	f004 fb41 	bl	9d74 <Print::println()>
    56f2:	2120      	movs	r1, #32
    56f4:	488e      	ldr	r0, [pc, #568]	; (5930 <menu()+0x18dc>)
    56f6:	f007 f80b 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    56fa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    56fc:	f007 fcca 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5700:	9700      	str	r7, [sp, #0]
    5702:	4602      	mov	r2, r0
    5704:	460b      	mov	r3, r1
    5706:	487e      	ldr	r0, [pc, #504]	; (5900 <menu()+0x18ac>)
    5708:	f004 fb56 	bl	9db8 <Print::printFloat(double, unsigned char)>
    570c:	2101      	movs	r1, #1
    570e:	4887      	ldr	r0, [pc, #540]	; (592c <menu()+0x18d8>)
    5710:	f006 fffe 	bl	c710 <usb_serial_write>
    5714:	4639      	mov	r1, r7
    5716:	4882      	ldr	r0, [pc, #520]	; (5920 <menu()+0x18cc>)
    5718:	f006 fffa 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    571c:	4878      	ldr	r0, [pc, #480]	; (5900 <menu()+0x18ac>)
    571e:	f004 fb29 	bl	9d74 <Print::println()>
    5722:	2123      	movs	r1, #35	; 0x23
    5724:	4883      	ldr	r0, [pc, #524]	; (5934 <menu()+0x18e0>)
    5726:	f006 fff3 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    572a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    572c:	497a      	ldr	r1, [pc, #488]	; (5918 <menu()+0x18c4>)
    572e:	f007 fed5 	bl	d4dc <__aeabi_fmul>
    5732:	f007 fcaf 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5736:	9500      	str	r5, [sp, #0]
    5738:	4602      	mov	r2, r0
    573a:	460b      	mov	r3, r1
    573c:	4870      	ldr	r0, [pc, #448]	; (5900 <menu()+0x18ac>)
    573e:	f004 fb3b 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5742:	4639      	mov	r1, r7
    5744:	4875      	ldr	r0, [pc, #468]	; (591c <menu()+0x18c8>)
    5746:	f006 ffe3 	bl	c710 <usb_serial_write>
    574a:	4639      	mov	r1, r7
    574c:	4874      	ldr	r0, [pc, #464]	; (5920 <menu()+0x18cc>)
    574e:	f006 ffdf 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5752:	486b      	ldr	r0, [pc, #428]	; (5900 <menu()+0x18ac>)
    5754:	f004 fb0e 	bl	9d74 <Print::println()>
    5758:	211f      	movs	r1, #31
    575a:	4877      	ldr	r0, [pc, #476]	; (5938 <menu()+0x18e4>)
    575c:	f006 ffd8 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    5760:	6d30      	ldr	r0, [r6, #80]	; 0x50
    5762:	496d      	ldr	r1, [pc, #436]	; (5918 <menu()+0x18c4>)
    5764:	f007 feba 	bl	d4dc <__aeabi_fmul>
    5768:	f007 fc94 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    576c:	9500      	str	r5, [sp, #0]
    576e:	4602      	mov	r2, r0
    5770:	460b      	mov	r3, r1
    5772:	4863      	ldr	r0, [pc, #396]	; (5900 <menu()+0x18ac>)
    5774:	f004 fb20 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5778:	4639      	mov	r1, r7
    577a:	4868      	ldr	r0, [pc, #416]	; (591c <menu()+0x18c8>)
    577c:	f006 ffc8 	bl	c710 <usb_serial_write>
    5780:	4639      	mov	r1, r7
    5782:	4867      	ldr	r0, [pc, #412]	; (5920 <menu()+0x18cc>)
    5784:	f006 ffc4 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5788:	485d      	ldr	r0, [pc, #372]	; (5900 <menu()+0x18ac>)
    578a:	f004 faf3 	bl	9d74 <Print::println()>
    578e:	2119      	movs	r1, #25
    5790:	486a      	ldr	r0, [pc, #424]	; (593c <menu()+0x18e8>)
    5792:	f006 ffbd 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5796:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    5798:	4859      	ldr	r0, [pc, #356]	; (5900 <menu()+0x18ac>)
    579a:	f004 fae3 	bl	9d64 <Print::print(long)>
    579e:	4639      	mov	r1, r7
    57a0:	4867      	ldr	r0, [pc, #412]	; (5940 <menu()+0x18ec>)
    57a2:	f006 ffb5 	bl	c710 <usb_serial_write>
    57a6:	4639      	mov	r1, r7
    57a8:	485d      	ldr	r0, [pc, #372]	; (5920 <menu()+0x18cc>)
    57aa:	f006 ffb1 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    57ae:	4854      	ldr	r0, [pc, #336]	; (5900 <menu()+0x18ac>)
    57b0:	f004 fae0 	bl	9d74 <Print::println()>
    57b4:	2118      	movs	r1, #24
    57b6:	4863      	ldr	r0, [pc, #396]	; (5944 <menu()+0x18f0>)
    57b8:	f006 ffaa 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    57bc:	f9b6 0064 	ldrsh.w	r0, [r6, #100]	; 0x64
    57c0:	f007 fe38 	bl	d434 <__aeabi_i2f>
    57c4:	4960      	ldr	r1, [pc, #384]	; (5948 <menu()+0x18f4>)
    57c6:	f007 fe89 	bl	d4dc <__aeabi_fmul>
    57ca:	f007 fc63 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    57ce:	9700      	str	r7, [sp, #0]
    57d0:	4602      	mov	r2, r0
    57d2:	460b      	mov	r3, r1
    57d4:	484a      	ldr	r0, [pc, #296]	; (5900 <menu()+0x18ac>)
    57d6:	f004 faef 	bl	9db8 <Print::printFloat(double, unsigned char)>
    57da:	2101      	movs	r1, #1
    57dc:	485b      	ldr	r0, [pc, #364]	; (594c <menu()+0x18f8>)
    57de:	f006 ff97 	bl	c710 <usb_serial_write>
    57e2:	4639      	mov	r1, r7
    57e4:	484e      	ldr	r0, [pc, #312]	; (5920 <menu()+0x18cc>)
    57e6:	f006 ff93 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    57ea:	4845      	ldr	r0, [pc, #276]	; (5900 <menu()+0x18ac>)
    57ec:	f004 fac2 	bl	9d74 <Print::println()>
    57f0:	212b      	movs	r1, #43	; 0x2b
    57f2:	4857      	ldr	r0, [pc, #348]	; (5950 <menu()+0x18fc>)
    57f4:	f006 ff8c 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    57f8:	69b0      	ldr	r0, [r6, #24]
    57fa:	4947      	ldr	r1, [pc, #284]	; (5918 <menu()+0x18c4>)
    57fc:	f007 fe6e 	bl	d4dc <__aeabi_fmul>
    5800:	f007 fc48 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5804:	9500      	str	r5, [sp, #0]
    5806:	4602      	mov	r2, r0
    5808:	460b      	mov	r3, r1
    580a:	483d      	ldr	r0, [pc, #244]	; (5900 <menu()+0x18ac>)
    580c:	f004 fad4 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5810:	4639      	mov	r1, r7
    5812:	4842      	ldr	r0, [pc, #264]	; (591c <menu()+0x18c8>)
    5814:	f006 ff7c 	bl	c710 <usb_serial_write>
    5818:	4639      	mov	r1, r7
    581a:	4841      	ldr	r0, [pc, #260]	; (5920 <menu()+0x18cc>)
    581c:	f006 ff78 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5820:	4837      	ldr	r0, [pc, #220]	; (5900 <menu()+0x18ac>)
    5822:	f004 faa7 	bl	9d74 <Print::println()>
    5826:	211f      	movs	r1, #31
    5828:	484a      	ldr	r0, [pc, #296]	; (5954 <menu()+0x1900>)
    582a:	f006 ff71 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    582e:	6db1      	ldr	r1, [r6, #88]	; 0x58
    5830:	4833      	ldr	r0, [pc, #204]	; (5900 <menu()+0x18ac>)
    5832:	f004 fa97 	bl	9d64 <Print::print(long)>
    5836:	4639      	mov	r1, r7
    5838:	4839      	ldr	r0, [pc, #228]	; (5920 <menu()+0x18cc>)
    583a:	f006 ff69 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    583e:	4830      	ldr	r0, [pc, #192]	; (5900 <menu()+0x18ac>)
    5840:	f004 fa98 	bl	9d74 <Print::println()>
    5844:	2120      	movs	r1, #32
    5846:	4844      	ldr	r0, [pc, #272]	; (5958 <menu()+0x1904>)
    5848:	f006 ff62 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    584c:	6d71      	ldr	r1, [r6, #84]	; 0x54
    584e:	482c      	ldr	r0, [pc, #176]	; (5900 <menu()+0x18ac>)
    5850:	f004 fa88 	bl	9d64 <Print::print(long)>
    5854:	4639      	mov	r1, r7
    5856:	4832      	ldr	r0, [pc, #200]	; (5920 <menu()+0x18cc>)
    5858:	f006 ff5a 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    585c:	4828      	ldr	r0, [pc, #160]	; (5900 <menu()+0x18ac>)
    585e:	f004 fa89 	bl	9d74 <Print::println()>
    5862:	2110      	movs	r1, #16
    5864:	483d      	ldr	r0, [pc, #244]	; (595c <menu()+0x1908>)
    5866:	f006 ff53 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    586a:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    586c:	4824      	ldr	r0, [pc, #144]	; (5900 <menu()+0x18ac>)
    586e:	f004 fa79 	bl	9d64 <Print::print(long)>
    5872:	4639      	mov	r1, r7
    5874:	4829      	ldr	r0, [pc, #164]	; (591c <menu()+0x18c8>)
    5876:	f006 ff4b 	bl	c710 <usb_serial_write>
    587a:	4639      	mov	r1, r7
    587c:	4828      	ldr	r0, [pc, #160]	; (5920 <menu()+0x18cc>)
    587e:	f006 ff47 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5882:	481f      	ldr	r0, [pc, #124]	; (5900 <menu()+0x18ac>)
    5884:	f004 fa76 	bl	9d74 <Print::println()>
    5888:	2113      	movs	r1, #19
    588a:	4835      	ldr	r0, [pc, #212]	; (5960 <menu()+0x190c>)
    588c:	f006 ff40 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5890:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
    5892:	481b      	ldr	r0, [pc, #108]	; (5900 <menu()+0x18ac>)
    5894:	f004 fa66 	bl	9d64 <Print::print(long)>
    5898:	2101      	movs	r1, #1
    589a:	4832      	ldr	r0, [pc, #200]	; (5964 <menu()+0x1910>)
    589c:	f006 ff38 	bl	c710 <usb_serial_write>
    58a0:	4639      	mov	r1, r7
    58a2:	481f      	ldr	r0, [pc, #124]	; (5920 <menu()+0x18cc>)
    58a4:	f006 ff34 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    58a8:	4815      	ldr	r0, [pc, #84]	; (5900 <menu()+0x18ac>)
    58aa:	f004 fa63 	bl	9d74 <Print::println()>
    58ae:	2110      	movs	r1, #16
    58b0:	482d      	ldr	r0, [pc, #180]	; (5968 <menu()+0x1914>)
    58b2:	f006 ff2d 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    58b6:	6f31      	ldr	r1, [r6, #112]	; 0x70
    58b8:	4811      	ldr	r0, [pc, #68]	; (5900 <menu()+0x18ac>)
    58ba:	f004 fa53 	bl	9d64 <Print::print(long)>
    58be:	4639      	mov	r1, r7
    58c0:	4816      	ldr	r0, [pc, #88]	; (591c <menu()+0x18c8>)
    58c2:	f006 ff25 	bl	c710 <usb_serial_write>
    58c6:	4639      	mov	r1, r7
    58c8:	4815      	ldr	r0, [pc, #84]	; (5920 <menu()+0x18cc>)
    58ca:	f006 ff21 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    58ce:	480c      	ldr	r0, [pc, #48]	; (5900 <menu()+0x18ac>)
    58d0:	f004 fa50 	bl	9d74 <Print::println()>
    58d4:	2114      	movs	r1, #20
    58d6:	4825      	ldr	r0, [pc, #148]	; (596c <menu()+0x1918>)
    58d8:	f006 ff1a 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    58dc:	6f71      	ldr	r1, [r6, #116]	; 0x74
    58de:	4808      	ldr	r0, [pc, #32]	; (5900 <menu()+0x18ac>)
    58e0:	f004 fa40 	bl	9d64 <Print::print(long)>
    58e4:	2101      	movs	r1, #1
    58e6:	481f      	ldr	r0, [pc, #124]	; (5964 <menu()+0x1910>)
    58e8:	f006 ff12 	bl	c710 <usb_serial_write>
    58ec:	4639      	mov	r1, r7
    58ee:	480c      	ldr	r0, [pc, #48]	; (5920 <menu()+0x18cc>)
    58f0:	f006 ff0e 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    58f4:	4802      	ldr	r0, [pc, #8]	; (5900 <menu()+0x18ac>)
    58f6:	f004 fa3d 	bl	9d74 <Print::println()>
    58fa:	2116      	movs	r1, #22
    58fc:	e038      	b.n	5970 <menu()+0x191c>
    58fe:	bf00      	nop
    5900:	1fff8824 	.word	0x1fff8824
    5904:	000151cc 	.word	0x000151cc
    5908:	000151e4 	.word	0x000151e4
    590c:	000151fc 	.word	0x000151fc
    5910:	00014a78 	.word	0x00014a78
    5914:	00015218 	.word	0x00015218
    5918:	447a0000 	.word	0x447a0000
    591c:	00014ad4 	.word	0x00014ad4
    5920:	000155bc 	.word	0x000155bc
    5924:	0001523c 	.word	0x0001523c
    5928:	00015260 	.word	0x00015260
    592c:	000146c0 	.word	0x000146c0
    5930:	00015280 	.word	0x00015280
    5934:	000152a4 	.word	0x000152a4
    5938:	000152c8 	.word	0x000152c8
    593c:	000152e8 	.word	0x000152e8
    5940:	00015304 	.word	0x00015304
    5944:	00015308 	.word	0x00015308
    5948:	3dcccccd 	.word	0x3dcccccd
    594c:	00015108 	.word	0x00015108
    5950:	00015324 	.word	0x00015324
    5954:	00015350 	.word	0x00015350
    5958:	00015370 	.word	0x00015370
    595c:	00015394 	.word	0x00015394
    5960:	000153a8 	.word	0x000153a8
    5964:	000153bc 	.word	0x000153bc
    5968:	000153c0 	.word	0x000153c0
    596c:	000153d4 	.word	0x000153d4
    5970:	48b8      	ldr	r0, [pc, #736]	; (5c54 <menu()+0x1c00>)
    5972:	f006 fecd 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0);
    5976:	6a30      	ldr	r0, [r6, #32]
    5978:	49b7      	ldr	r1, [pc, #732]	; (5c58 <menu()+0x1c04>)
    597a:	f007 fdaf 	bl	d4dc <__aeabi_fmul>
    597e:	f007 fb89 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5982:	9500      	str	r5, [sp, #0]
    5984:	4602      	mov	r2, r0
    5986:	460b      	mov	r3, r1
    5988:	48b4      	ldr	r0, [pc, #720]	; (5c5c <menu()+0x1c08>)
    598a:	f004 fa15 	bl	9db8 <Print::printFloat(double, unsigned char)>
    598e:	4639      	mov	r1, r7
    5990:	48b3      	ldr	r0, [pc, #716]	; (5c60 <menu()+0x1c0c>)
    5992:	f006 febd 	bl	c710 <usb_serial_write>
    5996:	4639      	mov	r1, r7
    5998:	48b2      	ldr	r0, [pc, #712]	; (5c64 <menu()+0x1c10>)
    599a:	f006 feb9 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    599e:	48af      	ldr	r0, [pc, #700]	; (5c5c <menu()+0x1c08>)
    59a0:	f004 f9e8 	bl	9d74 <Print::println()>
    59a4:	2124      	movs	r1, #36	; 0x24
    59a6:	48b0      	ldr	r0, [pc, #704]	; (5c68 <menu()+0x1c14>)
    59a8:	f006 feb2 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0);
    59ac:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    59b0:	49a9      	ldr	r1, [pc, #676]	; (5c58 <menu()+0x1c04>)
    59b2:	f007 fd93 	bl	d4dc <__aeabi_fmul>
    59b6:	f007 fb6d 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    59ba:	9500      	str	r5, [sp, #0]
    59bc:	4602      	mov	r2, r0
    59be:	460b      	mov	r3, r1
    59c0:	48a6      	ldr	r0, [pc, #664]	; (5c5c <menu()+0x1c08>)
    59c2:	f004 f9f9 	bl	9db8 <Print::printFloat(double, unsigned char)>
    59c6:	4639      	mov	r1, r7
    59c8:	48a5      	ldr	r0, [pc, #660]	; (5c60 <menu()+0x1c0c>)
    59ca:	f006 fea1 	bl	c710 <usb_serial_write>
    59ce:	4639      	mov	r1, r7
    59d0:	48a4      	ldr	r0, [pc, #656]	; (5c64 <menu()+0x1c10>)
    59d2:	f006 fe9d 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    59d6:	48a1      	ldr	r0, [pc, #644]	; (5c5c <menu()+0x1c08>)
    59d8:	f004 f9cc 	bl	9d74 <Print::println()>
    59dc:	212b      	movs	r1, #43	; 0x2b
    59de:	48a3      	ldr	r0, [pc, #652]	; (5c6c <menu()+0x1c18>)
    59e0:	f006 fe96 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTSetpoint);
    59e4:	6b70      	ldr	r0, [r6, #52]	; 0x34
    59e6:	f007 fb55 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    59ea:	9700      	str	r7, [sp, #0]
    59ec:	4602      	mov	r2, r0
    59ee:	460b      	mov	r3, r1
    59f0:	489a      	ldr	r0, [pc, #616]	; (5c5c <menu()+0x1c08>)
    59f2:	f004 f9e1 	bl	9db8 <Print::printFloat(double, unsigned char)>
    59f6:	2101      	movs	r1, #1
    59f8:	489d      	ldr	r0, [pc, #628]	; (5c70 <menu()+0x1c1c>)
    59fa:	f006 fe89 	bl	c710 <usb_serial_write>
    59fe:	4639      	mov	r1, r7
    5a00:	4898      	ldr	r0, [pc, #608]	; (5c64 <menu()+0x1c10>)
    5a02:	f006 fe85 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a06:	4895      	ldr	r0, [pc, #596]	; (5c5c <menu()+0x1c08>)
    5a08:	f004 f9b4 	bl	9d74 <Print::println()>
    5a0c:	2127      	movs	r1, #39	; 0x27
    5a0e:	4899      	ldr	r0, [pc, #612]	; (5c74 <menu()+0x1c20>)
    5a10:	f006 fe7e 	bl	c710 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischHys * 1000, 0);
    5a14:	6c30      	ldr	r0, [r6, #64]	; 0x40
    5a16:	4990      	ldr	r1, [pc, #576]	; (5c58 <menu()+0x1c04>)
    5a18:	f007 fd60 	bl	d4dc <__aeabi_fmul>
    5a1c:	f007 fb3a 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5a20:	9500      	str	r5, [sp, #0]
    5a22:	460b      	mov	r3, r1
    5a24:	4602      	mov	r2, r0
    5a26:	488d      	ldr	r0, [pc, #564]	; (5c5c <menu()+0x1c08>)
    5a28:	f004 f9c6 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5a2c:	4639      	mov	r1, r7
    5a2e:	488c      	ldr	r0, [pc, #560]	; (5c60 <menu()+0x1c0c>)
    5a30:	f006 fe6e 	bl	c710 <usb_serial_write>
    5a34:	4639      	mov	r1, r7
    5a36:	488b      	ldr	r0, [pc, #556]	; (5c64 <menu()+0x1c10>)
    5a38:	f006 fe6a 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a3c:	4887      	ldr	r0, [pc, #540]	; (5c5c <menu()+0x1c08>)
    5a3e:	f004 f999 	bl	9d74 <Print::println()>
        SERIALCONSOLE.println();
    5a42:	4886      	ldr	r0, [pc, #536]	; (5c5c <menu()+0x1c08>)
    5a44:	f004 f996 	bl	9d74 <Print::println()>
        menuload = 3;
    5a48:	2303      	movs	r3, #3
    5a4a:	6023      	str	r3, [r4, #0]
        break;
    5a4c:	f7fe bb22 	b.w	4094 <menu()+0x40>
        virtual int available() { return usb_serial_available(); }
    5a50:	f006 fe2c 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5a54:	2800      	cmp	r0, #0
    5a56:	f77f ad70 	ble.w	553a <menu()+0x14e6>
          settings.Pstrings = Serial.parseInt();
    5a5a:	4880      	ldr	r0, [pc, #512]	; (5c5c <menu()+0x1c08>)
    5a5c:	4e86      	ldr	r6, [pc, #536]	; (5c78 <menu()+0x1c24>)
    5a5e:	f004 fae7 	bl	a030 <Stream::parseInt()>
          menuload = 1;
    5a62:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    5a64:	4601      	mov	r1, r0
          menuload = 1;
    5a66:	6023      	str	r3, [r4, #0]
          bms.setPstrings(settings.Pstrings);
    5a68:	4884      	ldr	r0, [pc, #528]	; (5c7c <menu()+0x1c28>)
          settings.Pstrings = Serial.parseInt();
    5a6a:	65b1      	str	r1, [r6, #88]	; 0x58
          incomingByte = 'b';
    5a6c:	2362      	movs	r3, #98	; 0x62
    5a6e:	602b      	str	r3, [r5, #0]
          bms.setPstrings(settings.Pstrings);
    5a70:	f7fb fb4e 	bl	1110 <BMSModuleManager::setPstrings(int)>
  if (menuload == 1) {
    5a74:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    5a76:	6828      	ldr	r0, [r5, #0]
    5a78:	e561      	b.n	553e <menu()+0x14ea>
        menuload = 0;
    5a7a:	2200      	movs	r2, #0
        incomingByte = 115;
    5a7c:	2373      	movs	r3, #115	; 0x73
    5a7e:	4e80      	ldr	r6, [pc, #512]	; (5c80 <menu()+0x1c2c>)
        menuload = 0;
    5a80:	6022      	str	r2, [r4, #0]
        incomingByte = 115;
    5a82:	602b      	str	r3, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    5a84:	f7fe bc27 	b.w	42d6 <menu()+0x282>
    5a88:	f006 fe10 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5a8c:	2800      	cmp	r0, #0
    5a8e:	f77f ad54 	ble.w	553a <menu()+0x14e6>
          settings.DischHys = Serial.parseInt();
    5a92:	4872      	ldr	r0, [pc, #456]	; (5c5c <menu()+0x1c08>)
          settings.DischHys = settings.DischHys / 1000;
    5a94:	4e78      	ldr	r6, [pc, #480]	; (5c78 <menu()+0x1c24>)
          settings.DischHys = Serial.parseInt();
    5a96:	f004 facb 	bl	a030 <Stream::parseInt()>
    5a9a:	f007 fccb 	bl	d434 <__aeabi_i2f>
          settings.DischHys = settings.DischHys / 1000;
    5a9e:	496e      	ldr	r1, [pc, #440]	; (5c58 <menu()+0x1c04>)
    5aa0:	f007 fdd0 	bl	d644 <__aeabi_fdiv>
    5aa4:	6430      	str	r0, [r6, #64]	; 0x40
          incomingByte = 'b';
    5aa6:	e55d      	b.n	5564 <menu()+0x1510>
        SOCreset = 1;
    5aa8:	4b76      	ldr	r3, [pc, #472]	; (5c84 <menu()+0x1c30>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5aaa:	486e      	ldr	r0, [pc, #440]	; (5c64 <menu()+0x1c10>)
    5aac:	2102      	movs	r1, #2
    5aae:	2201      	movs	r2, #1
    5ab0:	601a      	str	r2, [r3, #0]
    5ab2:	f006 fe2d 	bl	c710 <usb_serial_write>
    5ab6:	4869      	ldr	r0, [pc, #420]	; (5c5c <menu()+0x1c08>)
    5ab8:	f004 f95c 	bl	9d74 <Print::println()>
    5abc:	4872      	ldr	r0, [pc, #456]	; (5c88 <menu()+0x1c34>)
    5abe:	210b      	movs	r1, #11
    5ac0:	f006 fe26 	bl	c710 <usb_serial_write>
    5ac4:	2102      	movs	r1, #2
    5ac6:	4867      	ldr	r0, [pc, #412]	; (5c64 <menu()+0x1c10>)
    5ac8:	4e6b      	ldr	r6, [pc, #428]	; (5c78 <menu()+0x1c24>)
    5aca:	f006 fe21 	bl	c710 <usb_serial_write>
    5ace:	4863      	ldr	r0, [pc, #396]	; (5c5c <menu()+0x1c08>)
    5ad0:	f004 f950 	bl	9d74 <Print::println()>
        break;
    5ad4:	e546      	b.n	5564 <menu()+0x1510>
        virtual int available() { return usb_serial_available(); }
    5ad6:	f006 fde9 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5ada:	2800      	cmp	r0, #0
    5adc:	f77f ad2d 	ble.w	553a <menu()+0x14e6>
          settings.DisTSetpoint = Serial.parseInt();
    5ae0:	485e      	ldr	r0, [pc, #376]	; (5c5c <menu()+0x1c08>)
    5ae2:	4e65      	ldr	r6, [pc, #404]	; (5c78 <menu()+0x1c24>)
    5ae4:	f004 faa4 	bl	a030 <Stream::parseInt()>
    5ae8:	f007 fca4 	bl	d434 <__aeabi_i2f>
    5aec:	6370      	str	r0, [r6, #52]	; 0x34
          incomingByte = 'b';
    5aee:	e539      	b.n	5564 <menu()+0x1510>
    5af0:	f006 fddc 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5af4:	2800      	cmp	r0, #0
    5af6:	f77f ad20 	ble.w	553a <menu()+0x14e6>
          settings.DisTaper = Serial.parseInt();
    5afa:	4858      	ldr	r0, [pc, #352]	; (5c5c <menu()+0x1c08>)
          settings.DisTaper = settings.DisTaper / 1000;
    5afc:	4e5e      	ldr	r6, [pc, #376]	; (5c78 <menu()+0x1c24>)
          settings.DisTaper = Serial.parseInt();
    5afe:	f004 fa97 	bl	a030 <Stream::parseInt()>
    5b02:	f007 fc97 	bl	d434 <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    5b06:	4954      	ldr	r1, [pc, #336]	; (5c58 <menu()+0x1c04>)
    5b08:	f007 fd9c 	bl	d644 <__aeabi_fdiv>
    5b0c:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
          incomingByte = 'b';
    5b10:	e528      	b.n	5564 <menu()+0x1510>
    5b12:	f006 fdcb 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5b16:	2800      	cmp	r0, #0
    5b18:	f77f ad0f 	ble.w	553a <menu()+0x14e6>
          settings.StoreVsetpoint = Serial.parseInt();
    5b1c:	484f      	ldr	r0, [pc, #316]	; (5c5c <menu()+0x1c08>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5b1e:	4e56      	ldr	r6, [pc, #344]	; (5c78 <menu()+0x1c24>)
          settings.StoreVsetpoint = Serial.parseInt();
    5b20:	f004 fa86 	bl	a030 <Stream::parseInt()>
    5b24:	f007 fc86 	bl	d434 <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5b28:	494b      	ldr	r1, [pc, #300]	; (5c58 <menu()+0x1c04>)
    5b2a:	f007 fd8b 	bl	d644 <__aeabi_fdiv>
    5b2e:	6230      	str	r0, [r6, #32]
          incomingByte = 'b';
    5b30:	e518      	b.n	5564 <menu()+0x1510>
        loadSettings();
    5b32:	f7fc f831 	bl	1b98 <loadSettings()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5b36:	2102      	movs	r1, #2
    5b38:	484a      	ldr	r0, [pc, #296]	; (5c64 <menu()+0x1c10>)
    5b3a:	f006 fde9 	bl	c710 <usb_serial_write>
    5b3e:	4847      	ldr	r0, [pc, #284]	; (5c5c <menu()+0x1c08>)
    5b40:	f004 f918 	bl	9d74 <Print::println()>
    5b44:	2102      	movs	r1, #2
    5b46:	4847      	ldr	r0, [pc, #284]	; (5c64 <menu()+0x1c10>)
    5b48:	f006 fde2 	bl	c710 <usb_serial_write>
    5b4c:	4843      	ldr	r0, [pc, #268]	; (5c5c <menu()+0x1c08>)
    5b4e:	f004 f911 	bl	9d74 <Print::println()>
    5b52:	2102      	movs	r1, #2
    5b54:	4843      	ldr	r0, [pc, #268]	; (5c64 <menu()+0x1c10>)
    5b56:	f006 fddb 	bl	c710 <usb_serial_write>
    5b5a:	4840      	ldr	r0, [pc, #256]	; (5c5c <menu()+0x1c08>)
    5b5c:	f004 f90a 	bl	9d74 <Print::println()>
    5b60:	2117      	movs	r1, #23
    5b62:	484a      	ldr	r0, [pc, #296]	; (5c8c <menu()+0x1c38>)
    5b64:	f006 fdd4 	bl	c710 <usb_serial_write>
    5b68:	483c      	ldr	r0, [pc, #240]	; (5c5c <menu()+0x1c08>)
    5b6a:	f004 f903 	bl	9d74 <Print::println()>
    5b6e:	e7a9      	b.n	5ac4 <menu()+0x1a70>
        virtual int available() { return usb_serial_available(); }
    5b70:	f006 fd9c 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5b74:	2800      	cmp	r0, #0
    5b76:	f77f ace0 	ble.w	553a <menu()+0x14e6>
          settings.socvolt[3] = Serial.parseInt();
    5b7a:	4838      	ldr	r0, [pc, #224]	; (5c5c <menu()+0x1c08>)
    5b7c:	4e3e      	ldr	r6, [pc, #248]	; (5c78 <menu()+0x1c24>)
    5b7e:	f004 fa57 	bl	a030 <Stream::parseInt()>
    5b82:	6770      	str	r0, [r6, #116]	; 0x74
          incomingByte = 'b';
    5b84:	e4ee      	b.n	5564 <menu()+0x1510>
    5b86:	f006 fd91 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5b8a:	2800      	cmp	r0, #0
    5b8c:	f77f acd5 	ble.w	553a <menu()+0x14e6>
          settings.socvolt[2] = Serial.parseInt();
    5b90:	4832      	ldr	r0, [pc, #200]	; (5c5c <menu()+0x1c08>)
    5b92:	4e39      	ldr	r6, [pc, #228]	; (5c78 <menu()+0x1c24>)
    5b94:	f004 fa4c 	bl	a030 <Stream::parseInt()>
    5b98:	6730      	str	r0, [r6, #112]	; 0x70
          incomingByte = 'b';
    5b9a:	e4e3      	b.n	5564 <menu()+0x1510>
    5b9c:	f006 fd86 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5ba0:	2800      	cmp	r0, #0
    5ba2:	f77f acca 	ble.w	553a <menu()+0x14e6>
          settings.socvolt[1] = Serial.parseInt();
    5ba6:	482d      	ldr	r0, [pc, #180]	; (5c5c <menu()+0x1c08>)
    5ba8:	4e33      	ldr	r6, [pc, #204]	; (5c78 <menu()+0x1c24>)
    5baa:	f004 fa41 	bl	a030 <Stream::parseInt()>
    5bae:	66f0      	str	r0, [r6, #108]	; 0x6c
          incomingByte = 'b';
    5bb0:	e4d8      	b.n	5564 <menu()+0x1510>
    5bb2:	f006 fd7b 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5bb6:	2800      	cmp	r0, #0
    5bb8:	f77f acbf 	ble.w	553a <menu()+0x14e6>
          settings.socvolt[0] = Serial.parseInt();
    5bbc:	4827      	ldr	r0, [pc, #156]	; (5c5c <menu()+0x1c08>)
    5bbe:	4e2e      	ldr	r6, [pc, #184]	; (5c78 <menu()+0x1c24>)
    5bc0:	f004 fa36 	bl	a030 <Stream::parseInt()>
    5bc4:	66b0      	str	r0, [r6, #104]	; 0x68
          incomingByte = 'b';
    5bc6:	e4cd      	b.n	5564 <menu()+0x1510>
    5bc8:	f006 fd70 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5bcc:	2800      	cmp	r0, #0
    5bce:	f77f acb4 	ble.w	553a <menu()+0x14e6>
          settings.Scells = Serial.parseInt();
    5bd2:	4822      	ldr	r0, [pc, #136]	; (5c5c <menu()+0x1c08>)
    5bd4:	4e28      	ldr	r6, [pc, #160]	; (5c78 <menu()+0x1c24>)
    5bd6:	f004 fa2b 	bl	a030 <Stream::parseInt()>
    5bda:	6570      	str	r0, [r6, #84]	; 0x54
          incomingByte = 'b';
    5bdc:	e4c2      	b.n	5564 <menu()+0x1510>
    5bde:	f006 fd65 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5be2:	2800      	cmp	r0, #0
    5be4:	f77f aca9 	ble.w	553a <menu()+0x14e6>
          settings.DischVsetpoint = Serial.parseInt();
    5be8:	481c      	ldr	r0, [pc, #112]	; (5c5c <menu()+0x1c08>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    5bea:	4e23      	ldr	r6, [pc, #140]	; (5c78 <menu()+0x1c24>)
          settings.DischVsetpoint = Serial.parseInt();
    5bec:	f004 fa20 	bl	a030 <Stream::parseInt()>
    5bf0:	f007 fc20 	bl	d434 <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    5bf4:	4918      	ldr	r1, [pc, #96]	; (5c58 <menu()+0x1c04>)
    5bf6:	f007 fd25 	bl	d644 <__aeabi_fdiv>
    5bfa:	61b0      	str	r0, [r6, #24]
          incomingByte = 'b';
    5bfc:	e4b2      	b.n	5564 <menu()+0x1510>
    5bfe:	f006 fd55 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5c02:	2800      	cmp	r0, #0
    5c04:	f77f ac99 	ble.w	553a <menu()+0x14e6>
          settings.discurrentmax = Serial.parseInt() * 10;
    5c08:	4814      	ldr	r0, [pc, #80]	; (5c5c <menu()+0x1c08>)
    5c0a:	4e1b      	ldr	r6, [pc, #108]	; (5c78 <menu()+0x1c24>)
    5c0c:	f004 fa10 	bl	a030 <Stream::parseInt()>
    5c10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5c14:	0043      	lsls	r3, r0, #1
    5c16:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
          incomingByte = 'b';
    5c1a:	e4a3      	b.n	5564 <menu()+0x1510>
    5c1c:	f006 fd46 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5c20:	2800      	cmp	r0, #0
    5c22:	f77f ac8a 	ble.w	553a <menu()+0x14e6>
          settings.CAP = Serial.parseInt();
    5c26:	480d      	ldr	r0, [pc, #52]	; (5c5c <menu()+0x1c08>)
    5c28:	4e13      	ldr	r6, [pc, #76]	; (5c78 <menu()+0x1c24>)
    5c2a:	f004 fa01 	bl	a030 <Stream::parseInt()>
    5c2e:	65f0      	str	r0, [r6, #92]	; 0x5c
          incomingByte = 'b';
    5c30:	e498      	b.n	5564 <menu()+0x1510>
    5c32:	f006 fd3b 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5c36:	2800      	cmp	r0, #0
    5c38:	f77f ac7f 	ble.w	553a <menu()+0x14e6>
          settings.balanceHyst = Serial.parseInt();
    5c3c:	4807      	ldr	r0, [pc, #28]	; (5c5c <menu()+0x1c08>)
          settings.balanceHyst = settings.balanceHyst / 1000;
    5c3e:	4e0e      	ldr	r6, [pc, #56]	; (5c78 <menu()+0x1c24>)
          settings.balanceHyst = Serial.parseInt();
    5c40:	f004 f9f6 	bl	a030 <Stream::parseInt()>
    5c44:	f007 fbf6 	bl	d434 <__aeabi_i2f>
          settings.balanceHyst = settings.balanceHyst / 1000;
    5c48:	4903      	ldr	r1, [pc, #12]	; (5c58 <menu()+0x1c04>)
    5c4a:	f007 fcfb 	bl	d644 <__aeabi_fdiv>
    5c4e:	6530      	str	r0, [r6, #80]	; 0x50
          incomingByte = 'b';
    5c50:	e488      	b.n	5564 <menu()+0x1510>
    5c52:	bf00      	nop
    5c54:	000153ec 	.word	0x000153ec
    5c58:	447a0000 	.word	0x447a0000
    5c5c:	1fff8824 	.word	0x1fff8824
    5c60:	00014ad4 	.word	0x00014ad4
    5c64:	000155bc 	.word	0x000155bc
    5c68:	00015404 	.word	0x00015404
    5c6c:	0001542c 	.word	0x0001542c
    5c70:	000146c0 	.word	0x000146c0
    5c74:	00015458 	.word	0x00015458
    5c78:	1fffc0b4 	.word	0x1fffc0b4
    5c7c:	1fff900c 	.word	0x1fff900c
    5c80:	1fff8748 	.word	0x1fff8748
    5c84:	1fff8fe8 	.word	0x1fff8fe8
    5c88:	00014a38 	.word	0x00014a38
    5c8c:	00014a20 	.word	0x00014a20
    5c90:	f006 fd0c 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5c94:	2800      	cmp	r0, #0
    5c96:	f77f ac50 	ble.w	553a <menu()+0x14e6>
          settings.balanceVoltage = Serial.parseInt();
    5c9a:	48ba      	ldr	r0, [pc, #744]	; (5f84 <menu()+0x1f30>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5c9c:	4eba      	ldr	r6, [pc, #744]	; (5f88 <menu()+0x1f34>)
          settings.balanceVoltage = Serial.parseInt();
    5c9e:	f004 f9c7 	bl	a030 <Stream::parseInt()>
    5ca2:	f007 fbc7 	bl	d434 <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5ca6:	49b9      	ldr	r1, [pc, #740]	; (5f8c <menu()+0x1f38>)
    5ca8:	f007 fccc 	bl	d644 <__aeabi_fdiv>
    5cac:	64f0      	str	r0, [r6, #76]	; 0x4c
          incomingByte = 'b';
    5cae:	e459      	b.n	5564 <menu()+0x1510>
    5cb0:	f006 fcfc 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5cb4:	2800      	cmp	r0, #0
    5cb6:	f77f ac40 	ble.w	553a <menu()+0x14e6>
          settings.UnderTSetpoint = Serial.parseInt();
    5cba:	48b2      	ldr	r0, [pc, #712]	; (5f84 <menu()+0x1f30>)
    5cbc:	4eb2      	ldr	r6, [pc, #712]	; (5f88 <menu()+0x1f34>)
    5cbe:	f004 f9b7 	bl	a030 <Stream::parseInt()>
    5cc2:	f007 fbb7 	bl	d434 <__aeabi_i2f>
    5cc6:	62f0      	str	r0, [r6, #44]	; 0x2c
          incomingByte = 'b';
    5cc8:	e44c      	b.n	5564 <menu()+0x1510>
    5cca:	f006 fcef 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5cce:	2800      	cmp	r0, #0
    5cd0:	f77f ac33 	ble.w	553a <menu()+0x14e6>
          settings.OverTSetpoint = Serial.parseInt();
    5cd4:	48ab      	ldr	r0, [pc, #684]	; (5f84 <menu()+0x1f30>)
    5cd6:	4eac      	ldr	r6, [pc, #688]	; (5f88 <menu()+0x1f34>)
    5cd8:	f004 f9aa 	bl	a030 <Stream::parseInt()>
    5cdc:	f007 fbaa 	bl	d434 <__aeabi_i2f>
    5ce0:	62b0      	str	r0, [r6, #40]	; 0x28
          incomingByte = 'b';
    5ce2:	e43f      	b.n	5564 <menu()+0x1510>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5ce4:	211c      	movs	r1, #28
    5ce6:	48aa      	ldr	r0, [pc, #680]	; (5f90 <menu()+0x1f3c>)
    5ce8:	f006 fd12 	bl	c710 <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.01, 2);
    5cec:	f8d6 0090 	ldr.w	r0, [r6, #144]	; 0x90
    5cf0:	49a8      	ldr	r1, [pc, #672]	; (5f94 <menu()+0x1f40>)
    5cf2:	f007 fbf3 	bl	d4dc <__aeabi_fmul>
    5cf6:	f007 f9cd 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5cfa:	2502      	movs	r5, #2
    5cfc:	460b      	mov	r3, r1
    5cfe:	4602      	mov	r2, r0
    5d00:	9500      	str	r5, [sp, #0]
    5d02:	48a0      	ldr	r0, [pc, #640]	; (5f84 <menu()+0x1f30>)
    5d04:	f004 f858 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5d08:	2105      	movs	r1, #5
    5d0a:	48a3      	ldr	r0, [pc, #652]	; (5f98 <menu()+0x1f44>)
    5d0c:	f006 fd00 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d10:	489c      	ldr	r0, [pc, #624]	; (5f84 <menu()+0x1f30>)
    5d12:	f004 f82f 	bl	9d74 <Print::println()>
        if (settings.cursens == Analoguedual) {
    5d16:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    5d18:	2b01      	cmp	r3, #1
    5d1a:	d118      	bne.n	5d4e <menu()+0x1cfa>
    5d1c:	211d      	movs	r1, #29
    5d1e:	489f      	ldr	r0, [pc, #636]	; (5f9c <menu()+0x1f48>)
    5d20:	f006 fcf6 	bl	c710 <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.01, 2);
    5d24:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
    5d28:	499a      	ldr	r1, [pc, #616]	; (5f94 <menu()+0x1f40>)
    5d2a:	f007 fbd7 	bl	d4dc <__aeabi_fmul>
    5d2e:	f007 f9b1 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5d32:	9500      	str	r5, [sp, #0]
    5d34:	460b      	mov	r3, r1
    5d36:	4602      	mov	r2, r0
    5d38:	4892      	ldr	r0, [pc, #584]	; (5f84 <menu()+0x1f30>)
    5d3a:	f004 f83d 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5d3e:	2105      	movs	r1, #5
    5d40:	4895      	ldr	r0, [pc, #596]	; (5f98 <menu()+0x1f44>)
    5d42:	f006 fce5 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d46:	488f      	ldr	r0, [pc, #572]	; (5f84 <menu()+0x1f30>)
    5d48:	f004 f814 	bl	9d74 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    5d4c:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    5d4e:	f023 0202 	bic.w	r2, r3, #2
    5d52:	2a01      	cmp	r2, #1
    5d54:	f47e ad68 	bne.w	4828 <menu()+0x7d4>
    5d58:	211c      	movs	r1, #28
    5d5a:	4891      	ldr	r0, [pc, #580]	; (5fa0 <menu()+0x1f4c>)
    5d5c:	f006 fcd8 	bl	c710 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5d60:	f8b6 10be 	ldrh.w	r1, [r6, #190]	; 0xbe
    5d64:	4887      	ldr	r0, [pc, #540]	; (5f84 <menu()+0x1f30>)
    5d66:	f003 fffd 	bl	9d64 <Print::print(long)>
    5d6a:	2103      	movs	r1, #3
    5d6c:	488d      	ldr	r0, [pc, #564]	; (5fa4 <menu()+0x1f50>)
    5d6e:	f006 fccf 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d72:	4884      	ldr	r0, [pc, #528]	; (5f84 <menu()+0x1f30>)
    5d74:	f003 fffe 	bl	9d74 <Print::println()>
        if (settings.cursens == Analoguedual) {
    5d78:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    5d7a:	2b01      	cmp	r3, #1
    5d7c:	f47e ad54 	bne.w	4828 <menu()+0x7d4>
    5d80:	211f      	movs	r1, #31
    5d82:	4889      	ldr	r0, [pc, #548]	; (5fa8 <menu()+0x1f54>)
    5d84:	f006 fcc4 	bl	c710 <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    5d88:	f8d6 0094 	ldr.w	r0, [r6, #148]	; 0x94
    5d8c:	f007 fb52 	bl	d434 <__aeabi_i2f>
    5d90:	4986      	ldr	r1, [pc, #536]	; (5fac <menu()+0x1f58>)
    5d92:	f007 fba3 	bl	d4dc <__aeabi_fmul>
    5d96:	f007 f97d 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5d9a:	2502      	movs	r5, #2
    5d9c:	460b      	mov	r3, r1
    5d9e:	4602      	mov	r2, r0
    5da0:	9500      	str	r5, [sp, #0]
    5da2:	4878      	ldr	r0, [pc, #480]	; (5f84 <menu()+0x1f30>)
    5da4:	f004 f808 	bl	9db8 <Print::printFloat(double, unsigned char)>
    5da8:	4629      	mov	r1, r5
    5daa:	4881      	ldr	r0, [pc, #516]	; (5fb0 <menu()+0x1f5c>)
    5dac:	f006 fcb0 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5db0:	4874      	ldr	r0, [pc, #464]	; (5f84 <menu()+0x1f30>)
    5db2:	f003 ffdf 	bl	9d74 <Print::println()>
        if (settings.cursens == Canbus) {
    5db6:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    5db8:	f7fe bd36 	b.w	4828 <menu()+0x7d4>
          settings.ChargeTSetpoint = Serial.parseInt();
    5dbc:	4871      	ldr	r0, [pc, #452]	; (5f84 <menu()+0x1f30>)
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    5dbe:	4e72      	ldr	r6, [pc, #456]	; (5f88 <menu()+0x1f34>)
          settings.ChargeTSetpoint = Serial.parseInt();
    5dc0:	f004 f936 	bl	a030 <Stream::parseInt()>
    5dc4:	f007 fb36 	bl	d434 <__aeabi_i2f>
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    5dc8:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    5dca:	4639      	mov	r1, r7
          settings.ChargeTSetpoint = Serial.parseInt();
    5dcc:	4680      	mov	r8, r0
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    5dce:	f007 fd23 	bl	d818 <__aeabi_fcmplt>
    5dd2:	b900      	cbnz	r0, 5dd6 <menu()+0x1d82>
            settings.ChargeTSetpoint = settings.UnderTSetpoint;
    5dd4:	4647      	mov	r7, r8
          menuload = 1;
    5dd6:	2301      	movs	r3, #1
    5dd8:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    5dda:	2365      	movs	r3, #101	; 0x65
    5ddc:	6337      	str	r7, [r6, #48]	; 0x30
    5dde:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5de0:	f7ff b92c 	b.w	503c <menu()+0xfe8>
          debugdigits = Serial.parseInt();
    5de4:	4867      	ldr	r0, [pc, #412]	; (5f84 <menu()+0x1f30>)
    5de6:	f004 f923 	bl	a030 <Stream::parseInt()>
    5dea:	4b72      	ldr	r3, [pc, #456]	; (5fb4 <menu()+0x1f60>)
    5dec:	6018      	str	r0, [r3, #0]
    5dee:	f7fe bca7 	b.w	4740 <menu()+0x6ec>
          settings.ncur = Serial.parseInt();
    5df2:	4864      	ldr	r0, [pc, #400]	; (5f84 <menu()+0x1f30>)
    5df4:	4e64      	ldr	r6, [pc, #400]	; (5f88 <menu()+0x1f34>)
    5df6:	f004 f91b 	bl	a030 <Stream::parseInt()>
    5dfa:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    5dfe:	f7fe bd28 	b.w	4852 <menu()+0x7fe>
  if (menuload == 2) {
    5e02:	2064      	movs	r0, #100	; 0x64
  if (menuload == 5) {
    5e04:	f7fe b93d 	b.w	4082 <menu()+0x2e>
          contctrl = 0;
    5e08:	4b6b      	ldr	r3, [pc, #428]	; (5fb8 <menu()+0x1f64>)
    5e0a:	2600      	movs	r6, #0
          digitalWrite(OUT1, LOW);
    5e0c:	200b      	movs	r0, #11
    5e0e:	4631      	mov	r1, r6
          contctrl = 0;
    5e10:	601e      	str	r6, [r3, #0]
          digitalWrite(OUT1, LOW);
    5e12:	f004 fe0b 	bl	aa2c <digitalWrite>
          digitalWrite(OUT2, LOW);
    5e16:	4631      	mov	r1, r6
    5e18:	200c      	movs	r0, #12
    5e1a:	f004 fe07 	bl	aa2c <digitalWrite>
          digitalWrite(OUT3, LOW);
    5e1e:	4631      	mov	r1, r6
    5e20:	2014      	movs	r0, #20
    5e22:	f004 fe03 	bl	aa2c <digitalWrite>
          digitalWrite(OUT4, LOW);
    5e26:	4631      	mov	r1, r6
    5e28:	2015      	movs	r0, #21
    5e2a:	f004 fdff 	bl	aa2c <digitalWrite>
        incomingByte = 'd';
    5e2e:	2264      	movs	r2, #100	; 0x64
  if (menuload == 9) {
    5e30:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    5e32:	602a      	str	r2, [r5, #0]
        break;
    5e34:	f7fe bc6a 	b.w	470c <menu()+0x6b8>
    5e38:	211e      	movs	r1, #30
    5e3a:	4860      	ldr	r0, [pc, #384]	; (5fbc <menu()+0x1f68>)
    5e3c:	f006 fc68 	bl	c710 <usb_serial_write>
    5e40:	4850      	ldr	r0, [pc, #320]	; (5f84 <menu()+0x1f30>)
    5e42:	f003 ff97 	bl	9d74 <Print::println()>
    5e46:	f7fe bcc6 	b.w	47d6 <menu()+0x782>
    5e4a:	2120      	movs	r1, #32
    5e4c:	485c      	ldr	r0, [pc, #368]	; (5fc0 <menu()+0x1f6c>)
    5e4e:	f006 fc5f 	bl	c710 <usb_serial_write>
    5e52:	484c      	ldr	r0, [pc, #304]	; (5f84 <menu()+0x1f30>)
    5e54:	f003 ff8e 	bl	9d74 <Print::println()>
    5e58:	f7fe bcbd 	b.w	47d6 <menu()+0x782>
    5e5c:	2117      	movs	r1, #23
    5e5e:	4859      	ldr	r0, [pc, #356]	; (5fc4 <menu()+0x1f70>)
    5e60:	f006 fc56 	bl	c710 <usb_serial_write>
    5e64:	4847      	ldr	r0, [pc, #284]	; (5f84 <menu()+0x1f30>)
    5e66:	f003 ff85 	bl	9d74 <Print::println()>
    5e6a:	f7fe bcb4 	b.w	47d6 <menu()+0x782>
    5e6e:	4856      	ldr	r0, [pc, #344]	; (5fc8 <menu()+0x1f74>)
    5e70:	2117      	movs	r1, #23
    5e72:	f006 fc4d 	bl	c710 <usb_serial_write>
          if (settings.curcan == LemCAB300) {
    5e76:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    5e7a:	2b01      	cmp	r3, #1
    5e7c:	d041      	beq.n	5f02 <menu()+0x1eae>
          } else if (settings.curcan == LemCAB500) {
    5e7e:	2b02      	cmp	r3, #2
    5e80:	d048      	beq.n	5f14 <menu()+0x1ec0>
          } else if (settings.curcan == IsaScale) {
    5e82:	2b03      	cmp	r3, #3
    5e84:	f47e acd3 	bne.w	482e <menu()+0x7da>
            SERIALCONSOLE.println(" IsaScale IVT-S ");
    5e88:	4950      	ldr	r1, [pc, #320]	; (5fcc <menu()+0x1f78>)
    5e8a:	483e      	ldr	r0, [pc, #248]	; (5f84 <menu()+0x1f30>)
    5e8c:	f7fb fe72 	bl	1b74 <Print::println(char const*) [clone .isra.0]>
    5e90:	f7fe bccd 	b.w	482e <menu()+0x7da>
    5e94:	484e      	ldr	r0, [pc, #312]	; (5fd0 <menu()+0x1f7c>)
    5e96:	2120      	movs	r1, #32
    5e98:	f006 fc3a 	bl	c710 <usb_serial_write>
          if (settings.tripcont == 0) {
    5e9c:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
    5ea0:	bb3b      	cbnz	r3, 5ef2 <menu()+0x1e9e>
    5ea2:	484c      	ldr	r0, [pc, #304]	; (5fd4 <menu()+0x1f80>)
    5ea4:	210a      	movs	r1, #10
    5ea6:	f006 fc33 	bl	c710 <usb_serial_write>
    5eaa:	4836      	ldr	r0, [pc, #216]	; (5f84 <menu()+0x1f30>)
    5eac:	f003 ff62 	bl	9d74 <Print::println()>
    5eb0:	4849      	ldr	r0, [pc, #292]	; (5fd8 <menu()+0x1f84>)
    5eb2:	211d      	movs	r1, #29
    5eb4:	f006 fc2c 	bl	c710 <usb_serial_write>
          switch (settings.ChargerDirect) {
    5eb8:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
    5ebc:	b9a3      	cbnz	r3, 5ee8 <menu()+0x1e94>
    5ebe:	4847      	ldr	r0, [pc, #284]	; (5fdc <menu()+0x1f88>)
    5ec0:	210b      	movs	r1, #11
    5ec2:	f006 fc25 	bl	c710 <usb_serial_write>
          SERIALCONSOLE.println();
    5ec6:	482f      	ldr	r0, [pc, #188]	; (5f84 <menu()+0x1f30>)
    5ec8:	f003 ff54 	bl	9d74 <Print::println()>
    5ecc:	f7fe bfb5 	b.w	4e3a <menu()+0xde6>
          settings.UnderVSetpoint = Serial.parseInt();
    5ed0:	482c      	ldr	r0, [pc, #176]	; (5f84 <menu()+0x1f30>)
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    5ed2:	4e2d      	ldr	r6, [pc, #180]	; (5f88 <menu()+0x1f34>)
          settings.UnderVSetpoint = Serial.parseInt();
    5ed4:	f004 f8ac 	bl	a030 <Stream::parseInt()>
    5ed8:	f007 faac 	bl	d434 <__aeabi_i2f>
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    5edc:	492b      	ldr	r1, [pc, #172]	; (5f8c <menu()+0x1f38>)
    5ede:	f007 fbb1 	bl	d644 <__aeabi_fdiv>
    5ee2:	6130      	str	r0, [r6, #16]
          incomingByte = 'b';
    5ee4:	f7ff bb3e 	b.w	5564 <menu()+0x1510>
    5ee8:	210a      	movs	r1, #10
    5eea:	483d      	ldr	r0, [pc, #244]	; (5fe0 <menu()+0x1f8c>)
    5eec:	f006 fc10 	bl	c710 <usb_serial_write>
    5ef0:	e7e9      	b.n	5ec6 <menu()+0x1e72>
    5ef2:	211c      	movs	r1, #28
    5ef4:	483b      	ldr	r0, [pc, #236]	; (5fe4 <menu()+0x1f90>)
    5ef6:	f006 fc0b 	bl	c710 <usb_serial_write>
    5efa:	4822      	ldr	r0, [pc, #136]	; (5f84 <menu()+0x1f30>)
    5efc:	f003 ff3a 	bl	9d74 <Print::println()>
    5f00:	e7d6      	b.n	5eb0 <menu()+0x1e5c>
    5f02:	2117      	movs	r1, #23
    5f04:	4838      	ldr	r0, [pc, #224]	; (5fe8 <menu()+0x1f94>)
    5f06:	f006 fc03 	bl	c710 <usb_serial_write>
    5f0a:	481e      	ldr	r0, [pc, #120]	; (5f84 <menu()+0x1f30>)
    5f0c:	f003 ff32 	bl	9d74 <Print::println()>
    5f10:	f7fe bc8d 	b.w	482e <menu()+0x7da>
    5f14:	2114      	movs	r1, #20
    5f16:	4835      	ldr	r0, [pc, #212]	; (5fec <menu()+0x1f98>)
    5f18:	f006 fbfa 	bl	c710 <usb_serial_write>
    5f1c:	4819      	ldr	r0, [pc, #100]	; (5f84 <menu()+0x1f30>)
    5f1e:	f003 ff29 	bl	9d74 <Print::println()>
    5f22:	f7fe bc84 	b.w	482e <menu()+0x7da>
  if (menuload == 6)  //Charging settings
    5f26:	2b06      	cmp	r3, #6
    5f28:	f43e a8ab 	beq.w	4082 <menu()+0x2e>
    5f2c:	f7fe bed8 	b.w	4ce0 <menu()+0xc8c>
  if (menuload == 3) {
    5f30:	2b03      	cmp	r3, #3
    5f32:	f43f ae33 	beq.w	5b9c <menu()+0x1b48>
  if (menuload == 1) {
    5f36:	2b01      	cmp	r3, #1
    5f38:	f47e a8a3 	bne.w	4082 <menu()+0x2e>
    5f3c:	4e12      	ldr	r6, [pc, #72]	; (5f88 <menu()+0x1f34>)
    5f3e:	f7fe bc14 	b.w	476a <menu()+0x716>
    5f42:	4e11      	ldr	r6, [pc, #68]	; (5f88 <menu()+0x1f34>)
    5f44:	f7ff bb50 	b.w	55e8 <menu()+0x1594>
    5f48:	4e0f      	ldr	r6, [pc, #60]	; (5f88 <menu()+0x1f34>)
    5f4a:	f7fe bda5 	b.w	4a98 <menu()+0xa44>
    5f4e:	4e0e      	ldr	r6, [pc, #56]	; (5f88 <menu()+0x1f34>)
    5f50:	f7fe bf10 	b.w	4d74 <menu()+0xd20>
    5f54:	4e0c      	ldr	r6, [pc, #48]	; (5f88 <menu()+0x1f34>)
    5f56:	f7fe be3d 	b.w	4bd4 <menu()+0xb80>
    5f5a:	4e0b      	ldr	r6, [pc, #44]	; (5f88 <menu()+0x1f34>)
    5f5c:	f7ff b86e 	b.w	503c <menu()+0xfe8>
        virtual int available() { return usb_serial_available(); }
    5f60:	f006 fba4 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5f64:	2800      	cmp	r0, #0
    5f66:	f77e af71 	ble.w	4e4c <menu()+0xdf8>
          settings.Pretime = Serial.parseInt();
    5f6a:	4806      	ldr	r0, [pc, #24]	; (5f84 <menu()+0x1f30>)
    5f6c:	4e06      	ldr	r6, [pc, #24]	; (5f88 <menu()+0x1f34>)
    5f6e:	f004 f85f 	bl	a030 <Stream::parseInt()>
          menuload = 1;
    5f72:	2301      	movs	r3, #1
    5f74:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5f76:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    5f78:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
          incomingByte = 'k';
    5f7c:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5f7e:	f7fe bef9 	b.w	4d74 <menu()+0xd20>
    5f82:	bf00      	nop
    5f84:	1fff8824 	.word	0x1fff8824
    5f88:	1fffc0b4 	.word	0x1fffc0b4
    5f8c:	447a0000 	.word	0x447a0000
    5f90:	000150e4 	.word	0x000150e4
    5f94:	3c23d70a 	.word	0x3c23d70a
    5f98:	00015104 	.word	0x00015104
    5f9c:	0001510c 	.word	0x0001510c
    5fa0:	0001512c 	.word	0x0001512c
    5fa4:	0001514c 	.word	0x0001514c
    5fa8:	00015150 	.word	0x00015150
    5fac:	3a83126f 	.word	0x3a83126f
    5fb0:	000148a8 	.word	0x000148a8
    5fb4:	1fff874c 	.word	0x1fff874c
    5fb8:	1fffbea8 	.word	0x1fffbea8
    5fbc:	00015024 	.word	0x00015024
    5fc0:	00015044 	.word	0x00015044
    5fc4:	00015068 	.word	0x00015068
    5fc8:	00015170 	.word	0x00015170
    5fcc:	000151b8 	.word	0x000151b8
    5fd0:	00014e40 	.word	0x00014e40
    5fd4:	00014e64 	.word	0x00014e64
    5fd8:	00014e90 	.word	0x00014e90
    5fdc:	00014eb0 	.word	0x00014eb0
    5fe0:	00014ebc 	.word	0x00014ebc
    5fe4:	00014e70 	.word	0x00014e70
    5fe8:	00015188 	.word	0x00015188
    5fec:	000151a0 	.word	0x000151a0
    5ff0:	f006 fb5c 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    5ff4:	2800      	cmp	r0, #0
    5ff6:	f77e aca8 	ble.w	494a <menu()+0x8f6>
          settings.WarnOff = Serial.parseInt();
    5ffa:	481a      	ldr	r0, [pc, #104]	; (6064 <menu()+0x2010>)
          settings.WarnOff = settings.WarnOff * 0.001;
    5ffc:	4e1a      	ldr	r6, [pc, #104]	; (6068 <menu()+0x2014>)
          settings.WarnOff = Serial.parseInt();
    5ffe:	f004 f817 	bl	a030 <Stream::parseInt()>
    6002:	f007 fa17 	bl	d434 <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    6006:	4919      	ldr	r1, [pc, #100]	; (606c <menu()+0x2018>)
    6008:	f007 fa68 	bl	d4dc <__aeabi_fmul>
          menuload = 1;
    600c:	2301      	movs	r3, #1
    600e:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    6010:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    6012:	6270      	str	r0, [r6, #36]	; 0x24
          incomingByte = 'a';
    6014:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    6016:	f7fe bd3f 	b.w	4a98 <menu()+0xa44>
    601a:	f006 fb47 	bl	c6ac <usb_serial_available>
        if (Serial.available() > 0) {
    601e:	2800      	cmp	r0, #0
    6020:	dc14      	bgt.n	604c <menu()+0x1ff8>
        if (settings.IgnoreTemp > 3) {
    6022:	4e11      	ldr	r6, [pc, #68]	; (6068 <menu()+0x2014>)
    6024:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
    6028:	2b03      	cmp	r3, #3
    602a:	d906      	bls.n	603a <menu()+0x1fe6>
          if (settings.IgnoreTemp == 23 || settings.IgnoreTemp == 12 || settings.IgnoreTemp == 13) {
    602c:	2b0d      	cmp	r3, #13
    602e:	d815      	bhi.n	605c <menu()+0x2008>
    6030:	2b0b      	cmp	r3, #11
    6032:	d802      	bhi.n	603a <menu()+0x1fe6>
            settings.IgnoreTemp = 0;
    6034:	2300      	movs	r3, #0
    6036:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
    603a:	4619      	mov	r1, r3
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    603c:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
    6040:	9300      	str	r3, [sp, #0]
    6042:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    6046:	6cb2      	ldr	r2, [r6, #72]	; 0x48
    6048:	f7fe bdba 	b.w	4bc0 <menu()+0xb6c>
          settings.IgnoreTemp = Serial.parseInt();
    604c:	4805      	ldr	r0, [pc, #20]	; (6064 <menu()+0x2010>)
    604e:	4e06      	ldr	r6, [pc, #24]	; (6068 <menu()+0x2014>)
    6050:	f003 ffee 	bl	a030 <Stream::parseInt()>
    6054:	b2c3      	uxtb	r3, r0
    6056:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
    605a:	e7e5      	b.n	6028 <menu()+0x1fd4>
    605c:	2b17      	cmp	r3, #23
    605e:	d1e9      	bne.n	6034 <menu()+0x1fe0>
    6060:	e7eb      	b.n	603a <menu()+0x1fe6>
    6062:	bf00      	nop
    6064:	1fff8824 	.word	0x1fff8824
    6068:	1fffc0b4 	.word	0x1fffc0b4
    606c:	3a83126f 	.word	0x3a83126f

00006070 <CAB300()>:
void CAB300() {
    6070:	b538      	push	{r3, r4, r5, lr}
    6072:	4c17      	ldr	r4, [pc, #92]	; (60d0 <CAB300()+0x60>)
    6074:	4b17      	ldr	r3, [pc, #92]	; (60d4 <CAB300()+0x64>)
    6076:	6822      	ldr	r2, [r4, #0]
    6078:	1d18      	adds	r0, r3, #4
    inbox = (inbox << 8) | inMsg.buf[i];
    607a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++) {
    607e:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    6080:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++) {
    6084:	d1f9      	bne.n	607a <CAB300()+0xa>
  if (settings.cursens == Canbus) {
    6086:	4b14      	ldr	r3, [pc, #80]	; (60d8 <CAB300()+0x68>)
    6088:	4d14      	ldr	r5, [pc, #80]	; (60dc <CAB300()+0x6c>)
    608a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    608c:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    608e:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if (settings.cursens == Canbus) {
    6092:	2b02      	cmp	r3, #2
    6094:	6028      	str	r0, [r5, #0]
    6096:	d004      	beq.n	60a2 <CAB300()+0x32>
  if (candebug == 1) {
    6098:	4b11      	ldr	r3, [pc, #68]	; (60e0 <CAB300()+0x70>)
    609a:	681b      	ldr	r3, [r3, #0]
    609c:	2b01      	cmp	r3, #1
    609e:	d00a      	beq.n	60b6 <CAB300()+0x46>
}
    60a0:	bd38      	pop	{r3, r4, r5, pc}
    RawCur = CANmilliamps;
    60a2:	f007 f9c7 	bl	d434 <__aeabi_i2f>
    60a6:	4c0f      	ldr	r4, [pc, #60]	; (60e4 <CAB300()+0x74>)
    60a8:	6020      	str	r0, [r4, #0]
    getcurrent();
    60aa:	f7fc fa1b 	bl	24e4 <getcurrent()>
  if (candebug == 1) {
    60ae:	4b0c      	ldr	r3, [pc, #48]	; (60e0 <CAB300()+0x70>)
    60b0:	681b      	ldr	r3, [r3, #0]
    60b2:	2b01      	cmp	r3, #1
    60b4:	d1f4      	bne.n	60a0 <CAB300()+0x30>
    Serial.println();
    60b6:	480c      	ldr	r0, [pc, #48]	; (60e8 <CAB300()+0x78>)
    60b8:	f003 fe5c 	bl	9d74 <Print::println()>
    Serial.print(CANmilliamps);
    60bc:	6829      	ldr	r1, [r5, #0]
    60be:	480a      	ldr	r0, [pc, #40]	; (60e8 <CAB300()+0x78>)
    60c0:	f003 fe50 	bl	9d64 <Print::print(long)>
}
    60c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    60c8:	4808      	ldr	r0, [pc, #32]	; (60ec <CAB300()+0x7c>)
    60ca:	2103      	movs	r1, #3
    60cc:	f006 bb20 	b.w	c710 <usb_serial_write>
    60d0:	1fffbeec 	.word	0x1fffbeec
    60d4:	1fffbee3 	.word	0x1fffbee3
    60d8:	1fffc0b4 	.word	0x1fffc0b4
    60dc:	1fff8fb8 	.word	0x1fff8fb8
    60e0:	1fffbe30 	.word	0x1fffbe30
    60e4:	1fff8fe0 	.word	0x1fff8fe0
    60e8:	1fff8824 	.word	0x1fff8824
    60ec:	000155ac 	.word	0x000155ac

000060f0 <CAB500()>:
void CAB500() {
    60f0:	b570      	push	{r4, r5, r6, lr}
    inbox = (inbox << 8) | inMsg.buf[i];
    60f2:	4b1d      	ldr	r3, [pc, #116]	; (6168 <CAB500()+0x78>)
  if (candebug == 1) {
    60f4:	4c1d      	ldr	r4, [pc, #116]	; (616c <CAB500()+0x7c>)
    inbox = (inbox << 8) | inMsg.buf[i];
    60f6:	7a59      	ldrb	r1, [r3, #9]
    60f8:	7a9a      	ldrb	r2, [r3, #10]
    60fa:	7adb      	ldrb	r3, [r3, #11]
  CANmilliamps = inbox;
    60fc:	4d1c      	ldr	r5, [pc, #112]	; (6170 <CAB500()+0x80>)
    inbox = (inbox << 8) | inMsg.buf[i];
    60fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6102:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (candebug == 1) {
    6106:	6822      	ldr	r2, [r4, #0]
    6108:	491a      	ldr	r1, [pc, #104]	; (6174 <CAB500()+0x84>)
  CANmilliamps = inbox;
    610a:	602b      	str	r3, [r5, #0]
  if (candebug == 1) {
    610c:	2a01      	cmp	r2, #1
    610e:	600b      	str	r3, [r1, #0]
    6110:	d00b      	beq.n	612a <CAB500()+0x3a>
    6112:	4618      	mov	r0, r3
  if (settings.cursens == Canbus) {
    6114:	4b18      	ldr	r3, [pc, #96]	; (6178 <CAB500()+0x88>)
    6116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    CANmilliamps = (0x800000 - CANmilliamps) * -1;
    6118:	f5a0 0000 	sub.w	r0, r0, #8388608	; 0x800000
  if (settings.cursens == Canbus) {
    611c:	2b02      	cmp	r3, #2
    611e:	6028      	str	r0, [r5, #0]
    6120:	d01b      	beq.n	615a <CAB500()+0x6a>
  if (candebug == 1) {
    6122:	6823      	ldr	r3, [r4, #0]
    6124:	2b01      	cmp	r3, #1
    6126:	d00b      	beq.n	6140 <CAB500()+0x50>
}
    6128:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println();
    612a:	4814      	ldr	r0, [pc, #80]	; (617c <CAB500()+0x8c>)
    612c:	f003 fe22 	bl	9d74 <Print::println()>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    6130:	6829      	ldr	r1, [r5, #0]
    6132:	4812      	ldr	r0, [pc, #72]	; (617c <CAB500()+0x8c>)
    6134:	2300      	movs	r3, #0
    6136:	2210      	movs	r2, #16
    6138:	f003 fe34 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  if (CANmilliamps > 0x800000) {
    613c:	6828      	ldr	r0, [r5, #0]
    613e:	e7e9      	b.n	6114 <CAB500()+0x24>
    Serial.println();
    6140:	480e      	ldr	r0, [pc, #56]	; (617c <CAB500()+0x8c>)
    6142:	f003 fe17 	bl	9d74 <Print::println()>
    Serial.print(CANmilliamps);
    6146:	6829      	ldr	r1, [r5, #0]
    6148:	480c      	ldr	r0, [pc, #48]	; (617c <CAB500()+0x8c>)
    614a:	f003 fe0b 	bl	9d64 <Print::print(long)>
}
    614e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6152:	480b      	ldr	r0, [pc, #44]	; (6180 <CAB500()+0x90>)
    6154:	2103      	movs	r1, #3
    6156:	f006 badb 	b.w	c710 <usb_serial_write>
    RawCur = CANmilliamps;
    615a:	f007 f96b 	bl	d434 <__aeabi_i2f>
    615e:	4e09      	ldr	r6, [pc, #36]	; (6184 <CAB500()+0x94>)
    6160:	6030      	str	r0, [r6, #0]
    getcurrent();
    6162:	f7fc f9bf 	bl	24e4 <getcurrent()>
    6166:	e7dc      	b.n	6122 <CAB500()+0x32>
    6168:	1fffbedc 	.word	0x1fffbedc
    616c:	1fffbe30 	.word	0x1fffbe30
    6170:	1fff8fb8 	.word	0x1fff8fb8
    6174:	1fffbeec 	.word	0x1fffbeec
    6178:	1fffc0b4 	.word	0x1fffc0b4
    617c:	1fff8824 	.word	0x1fff8824
    6180:	000155ac 	.word	0x000155ac
    6184:	1fff8fe0 	.word	0x1fff8fe0

00006188 <currentlimit()>:
void currentlimit() {
    6188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error) {
    618c:	4b96      	ldr	r3, [pc, #600]	; (63e8 <currentlimit()+0x260>)
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	2b05      	cmp	r3, #5
    6192:	d106      	bne.n	61a2 <currentlimit()+0x1a>
    discurrent = 0;
    6194:	4995      	ldr	r1, [pc, #596]	; (63ec <currentlimit()+0x264>)
    chargecurrent = 0;
    6196:	4a96      	ldr	r2, [pc, #600]	; (63f0 <currentlimit()+0x268>)
    discurrent = 0;
    6198:	2300      	movs	r3, #0
    619a:	800b      	strh	r3, [r1, #0]
    chargecurrent = 0;
    619c:	8013      	strh	r3, [r2, #0]
}
    619e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    discurrent = settings.discurrentmax;
    61a2:	4c94      	ldr	r4, [pc, #592]	; (63f4 <currentlimit()+0x26c>)
    61a4:	4e91      	ldr	r6, [pc, #580]	; (63ec <currentlimit()+0x264>)
    chargecurrent = settings.chargecurrentmax;
    61a6:	4d92      	ldr	r5, [pc, #584]	; (63f0 <currentlimit()+0x268>)
    discurrent = settings.discurrentmax;
    61a8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    chargecurrent = settings.chargecurrentmax;
    61ac:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    61b0:	4891      	ldr	r0, [pc, #580]	; (63f8 <currentlimit()+0x270>)
    discurrent = settings.discurrentmax;
    61b2:	8032      	strh	r2, [r6, #0]
    chargecurrent = settings.chargecurrentmax;
    61b4:	802b      	strh	r3, [r5, #0]
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    61b6:	f7fb f86b 	bl	1290 <BMSModuleManager::getLowTemperature()>
    61ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    61bc:	f007 fb2c 	bl	d818 <__aeabi_fcmplt>
    61c0:	b110      	cbz	r0, 61c8 <currentlimit()+0x40>
      chargecurrent = settings.chargecurrentcold;
    61c2:	f8b4 30de 	ldrh.w	r3, [r4, #222]	; 0xde
    61c6:	802b      	strh	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    61c8:	488b      	ldr	r0, [pc, #556]	; (63f8 <currentlimit()+0x270>)
    61ca:	f7fb f859 	bl	1280 <BMSModuleManager::getHighTemperature()>
    61ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    61d0:	f007 fb40 	bl	d854 <__aeabi_fcmpgt>
    61d4:	b110      	cbz	r0, 61dc <currentlimit()+0x54>
      discurrent = 0;
    61d6:	2300      	movs	r3, #0
    61d8:	8033      	strh	r3, [r6, #0]
      chargecurrent = 0;
    61da:	802b      	strh	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    61dc:	4886      	ldr	r0, [pc, #536]	; (63f8 <currentlimit()+0x270>)
    61de:	f7fa fdf9 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    61e2:	68e1      	ldr	r1, [r4, #12]
    61e4:	f007 fb36 	bl	d854 <__aeabi_fcmpgt>
    61e8:	b108      	cbz	r0, 61ee <currentlimit()+0x66>
      chargecurrent = 0;
    61ea:	2300      	movs	r3, #0
    61ec:	802b      	strh	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    61ee:	4882      	ldr	r0, [pc, #520]	; (63f8 <currentlimit()+0x270>)
    61f0:	f7fa fdf0 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    61f4:	68e1      	ldr	r1, [r4, #12]
    61f6:	f007 fb2d 	bl	d854 <__aeabi_fcmpgt>
    61fa:	b108      	cbz	r0, 6200 <currentlimit()+0x78>
      chargecurrent = 0;
    61fc:	2300      	movs	r3, #0
    61fe:	802b      	strh	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6200:	487d      	ldr	r0, [pc, #500]	; (63f8 <currentlimit()+0x270>)
    6202:	f7fa fdb3 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    6206:	6921      	ldr	r1, [r4, #16]
    6208:	f007 fb06 	bl	d818 <__aeabi_fcmplt>
    620c:	b1b8      	cbz	r0, 623e <currentlimit()+0xb6>
      discurrent = 0;
    620e:	2300      	movs	r3, #0
    6210:	8033      	strh	r3, [r6, #0]
    if (chargecurrent > settings.chargecurrentcold) {
    6212:	f9b4 20de 	ldrsh.w	r2, [r4, #222]	; 0xde
    6216:	f9b5 3000 	ldrsh.w	r3, [r5]
    621a:	429a      	cmp	r2, r3
    621c:	db68      	blt.n	62f0 <currentlimit()+0x168>
  if (discurrent < 0) {
    621e:	f9b6 3000 	ldrsh.w	r3, [r6]
    6222:	2b00      	cmp	r3, #0
  if (chargecurrent < 0) {
    6224:	bfb7      	itett	lt
    6226:	f9b5 3000 	ldrshlt.w	r3, [r5]
    622a:	f9b5 3000 	ldrshge.w	r3, [r5]
    discurrent = 0;
    622e:	2200      	movlt	r2, #0
    6230:	8032      	strhlt	r2, [r6, #0]
  if (chargecurrent < 0) {
    6232:	2b00      	cmp	r3, #0
    chargecurrent = 0;
    6234:	bfbc      	itt	lt
    6236:	2300      	movlt	r3, #0
    6238:	802b      	strhlt	r3, [r5, #0]
}
    623a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    623e:	486e      	ldr	r0, [pc, #440]	; (63f8 <currentlimit()+0x270>)
    6240:	f7fa fd94 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    6244:	69a1      	ldr	r1, [r4, #24]
    6246:	f007 fae7 	bl	d818 <__aeabi_fcmplt>
    624a:	2800      	cmp	r0, #0
    624c:	d1df      	bne.n	620e <currentlimit()+0x86>
    if (discurrent > 0) {
    624e:	f9b6 3000 	ldrsh.w	r3, [r6]
    6252:	2b00      	cmp	r3, #0
    6254:	dddd      	ble.n	6212 <currentlimit()+0x8a>
      if (bms.getHighTemperature() > settings.DisTSetpoint) {
    6256:	4868      	ldr	r0, [pc, #416]	; (63f8 <currentlimit()+0x270>)
    6258:	f7fb f812 	bl	1280 <BMSModuleManager::getHighTemperature()>
    625c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    625e:	f007 faf9 	bl	d854 <__aeabi_fcmpgt>
    6262:	2800      	cmp	r0, #0
    6264:	f040 8094 	bne.w	6390 <currentlimit()+0x208>
      if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper)) {
    6268:	4863      	ldr	r0, [pc, #396]	; (63f8 <currentlimit()+0x270>)
    626a:	f7fa fd7f 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    626e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
    6272:	4607      	mov	r7, r0
    6274:	69a0      	ldr	r0, [r4, #24]
    6276:	f007 f829 	bl	d2cc <__addsf3>
    627a:	4601      	mov	r1, r0
    627c:	4638      	mov	r0, r7
    627e:	f007 facb 	bl	d818 <__aeabi_fcmplt>
    6282:	2800      	cmp	r0, #0
    6284:	d0c5      	beq.n	6212 <currentlimit()+0x8a>
        discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    6286:	f9b6 0000 	ldrsh.w	r0, [r6]
    628a:	f007 f8d3 	bl	d434 <__aeabi_i2f>
    628e:	4680      	mov	r8, r0
    6290:	4859      	ldr	r0, [pc, #356]	; (63f8 <currentlimit()+0x270>)
    6292:	f7fa fd6b 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    6296:	4681      	mov	r9, r0
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    6298:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
    629c:	f8d4 a018 	ldr.w	sl, [r4, #24]
    62a0:	f007 f8c8 	bl	d434 <__aeabi_i2f>
    62a4:	4651      	mov	r1, sl
    62a6:	4607      	mov	r7, r0
    62a8:	4648      	mov	r0, r9
    62aa:	f007 f80d 	bl	d2c8 <__aeabi_fsub>
    62ae:	4639      	mov	r1, r7
    62b0:	4681      	mov	r9, r0
    62b2:	2000      	movs	r0, #0
    62b4:	f007 f808 	bl	d2c8 <__aeabi_fsub>
    62b8:	4601      	mov	r1, r0
    62ba:	4648      	mov	r0, r9
    62bc:	f007 f90e 	bl	d4dc <__aeabi_fmul>
    62c0:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
    62c4:	4681      	mov	r9, r0
    62c6:	4650      	mov	r0, sl
    62c8:	f007 f800 	bl	d2cc <__addsf3>
    62cc:	4651      	mov	r1, sl
    62ce:	f006 fffb 	bl	d2c8 <__aeabi_fsub>
    62d2:	4601      	mov	r1, r0
    62d4:	4648      	mov	r0, r9
    62d6:	f007 f9b5 	bl	d644 <__aeabi_fdiv>
    62da:	4639      	mov	r1, r7
    62dc:	f006 fff6 	bl	d2cc <__addsf3>
    62e0:	4601      	mov	r1, r0
    62e2:	4640      	mov	r0, r8
    62e4:	f006 fff0 	bl	d2c8 <__aeabi_fsub>
    62e8:	f007 fabe 	bl	d868 <__aeabi_f2iz>
    62ec:	8030      	strh	r0, [r6, #0]
    62ee:	e790      	b.n	6212 <currentlimit()+0x8a>
      if (bms.getLowTemperature() < settings.ChargeTSetpoint) {
    62f0:	4841      	ldr	r0, [pc, #260]	; (63f8 <currentlimit()+0x270>)
    62f2:	f7fa ffcd 	bl	1290 <BMSModuleManager::getLowTemperature()>
    62f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    62f8:	f007 fa8e 	bl	d818 <__aeabi_fcmplt>
    62fc:	2800      	cmp	r0, #0
    62fe:	f040 80c6 	bne.w	648e <currentlimit()+0x306>
      if (storagemode == 1) {
    6302:	4b3e      	ldr	r3, [pc, #248]	; (63fc <currentlimit()+0x274>)
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    6304:	483c      	ldr	r0, [pc, #240]	; (63f8 <currentlimit()+0x270>)
      if (storagemode == 1) {
    6306:	681b      	ldr	r3, [r3, #0]
    6308:	2b01      	cmp	r3, #1
    630a:	d079      	beq.n	6400 <currentlimit()+0x278>
        if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    630c:	f7fa fd62 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    6310:	69e1      	ldr	r1, [r4, #28]
    6312:	4607      	mov	r7, r0
    6314:	6960      	ldr	r0, [r4, #20]
    6316:	f006 ffd7 	bl	d2c8 <__aeabi_fsub>
    631a:	4601      	mov	r1, r0
    631c:	4638      	mov	r0, r7
    631e:	f007 fa99 	bl	d854 <__aeabi_fcmpgt>
    6322:	2800      	cmp	r0, #0
    6324:	f43f af7b 	beq.w	621e <currentlimit()+0x96>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrentmax - settings.chargecurrentend));
    6328:	f9b5 0000 	ldrsh.w	r0, [r5]
    632c:	f007 f882 	bl	d434 <__aeabi_i2f>
    6330:	4680      	mov	r8, r0
    6332:	4831      	ldr	r0, [pc, #196]	; (63f8 <currentlimit()+0x270>)
    6334:	f7fa fd4e 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    6338:	f8d4 9014 	ldr.w	r9, [r4, #20]
    633c:	69e1      	ldr	r1, [r4, #28]
    633e:	4682      	mov	sl, r0
    6340:	4648      	mov	r0, r9
    6342:	f006 ffc1 	bl	d2c8 <__aeabi_fsub>
    6346:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
    634a:	4607      	mov	r7, r0
    634c:	f9b4 0060 	ldrsh.w	r0, [r4, #96]	; 0x60
    6350:	1ac0      	subs	r0, r0, r3
    6352:	f007 f86f 	bl	d434 <__aeabi_i2f>
    6356:	4639      	mov	r1, r7
    6358:	4604      	mov	r4, r0
    635a:	4650      	mov	r0, sl
    635c:	f006 ffb4 	bl	d2c8 <__aeabi_fsub>
    6360:	4601      	mov	r1, r0
    6362:	4620      	mov	r0, r4
    6364:	f007 f8ba 	bl	d4dc <__aeabi_fmul>
    6368:	4639      	mov	r1, r7
    636a:	4604      	mov	r4, r0
    636c:	4648      	mov	r0, r9
    636e:	f006 ffab 	bl	d2c8 <__aeabi_fsub>
    6372:	4601      	mov	r1, r0
    6374:	4620      	mov	r0, r4
    6376:	f007 f965 	bl	d644 <__aeabi_fdiv>
    637a:	2100      	movs	r1, #0
    637c:	f006 ffa6 	bl	d2cc <__addsf3>
    6380:	4601      	mov	r1, r0
    6382:	4640      	mov	r0, r8
    6384:	f006 ffa0 	bl	d2c8 <__aeabi_fsub>
    6388:	f007 fa6e 	bl	d868 <__aeabi_f2iz>
    638c:	8028      	strh	r0, [r5, #0]
    638e:	e746      	b.n	621e <currentlimit()+0x96>
        discurrent = discurrent - map(bms.getHighTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    6390:	f9b6 0000 	ldrsh.w	r0, [r6]
    6394:	f007 f84e 	bl	d434 <__aeabi_i2f>
    6398:	4607      	mov	r7, r0
    639a:	4817      	ldr	r0, [pc, #92]	; (63f8 <currentlimit()+0x270>)
    639c:	f7fa ff70 	bl	1280 <BMSModuleManager::getHighTemperature()>
    63a0:	4681      	mov	r9, r0
    63a2:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
    63a6:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
    63aa:	f007 f843 	bl	d434 <__aeabi_i2f>
    63ae:	4651      	mov	r1, sl
    63b0:	4680      	mov	r8, r0
    63b2:	4648      	mov	r0, r9
    63b4:	f006 ff88 	bl	d2c8 <__aeabi_fsub>
    63b8:	4601      	mov	r1, r0
    63ba:	4640      	mov	r0, r8
    63bc:	f007 f88e 	bl	d4dc <__aeabi_fmul>
    63c0:	4651      	mov	r1, sl
    63c2:	4680      	mov	r8, r0
    63c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    63c6:	f006 ff7f 	bl	d2c8 <__aeabi_fsub>
    63ca:	4601      	mov	r1, r0
    63cc:	4640      	mov	r0, r8
    63ce:	f007 f939 	bl	d644 <__aeabi_fdiv>
    63d2:	2100      	movs	r1, #0
    63d4:	f006 ff7a 	bl	d2cc <__addsf3>
    63d8:	4601      	mov	r1, r0
    63da:	4638      	mov	r0, r7
    63dc:	f006 ff74 	bl	d2c8 <__aeabi_fsub>
    63e0:	f007 fa42 	bl	d868 <__aeabi_f2iz>
    63e4:	8030      	strh	r0, [r6, #0]
    63e6:	e73f      	b.n	6268 <currentlimit()+0xe0>
    63e8:	1fffbe2c 	.word	0x1fffbe2c
    63ec:	1fffbecc 	.word	0x1fffbecc
    63f0:	1fffbe38 	.word	0x1fffbe38
    63f4:	1fffc0b4 	.word	0x1fffc0b4
    63f8:	1fff900c 	.word	0x1fff900c
    63fc:	1fffc198 	.word	0x1fffc198
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    6400:	f7fa fce8 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    6404:	69e1      	ldr	r1, [r4, #28]
    6406:	4607      	mov	r7, r0
    6408:	6a20      	ldr	r0, [r4, #32]
    640a:	f006 ff5d 	bl	d2c8 <__aeabi_fsub>
    640e:	4601      	mov	r1, r0
    6410:	4638      	mov	r0, r7
    6412:	f007 fa1f 	bl	d854 <__aeabi_fcmpgt>
    6416:	2800      	cmp	r0, #0
    6418:	f43f af01 	beq.w	621e <currentlimit()+0x96>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    641c:	f9b5 0000 	ldrsh.w	r0, [r5]
    6420:	f007 f808 	bl	d434 <__aeabi_i2f>
    6424:	4681      	mov	r9, r0
    6426:	4834      	ldr	r0, [pc, #208]	; (64f8 <currentlimit()+0x370>)
    6428:	f7fa fcd4 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    642c:	f8d4 a020 	ldr.w	sl, [r4, #32]
    6430:	69e1      	ldr	r1, [r4, #28]
    6432:	4683      	mov	fp, r0
    6434:	4650      	mov	r0, sl
    6436:	f006 ff47 	bl	d2c8 <__aeabi_fsub>
    643a:	4680      	mov	r8, r0
    643c:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
    6440:	f006 fff8 	bl	d434 <__aeabi_i2f>
    6444:	4607      	mov	r7, r0
    6446:	f9b4 0060 	ldrsh.w	r0, [r4, #96]	; 0x60
    644a:	f006 fff3 	bl	d434 <__aeabi_i2f>
    644e:	4639      	mov	r1, r7
    6450:	f006 ff3a 	bl	d2c8 <__aeabi_fsub>
    6454:	4641      	mov	r1, r8
    6456:	4604      	mov	r4, r0
    6458:	4658      	mov	r0, fp
    645a:	f006 ff35 	bl	d2c8 <__aeabi_fsub>
    645e:	4601      	mov	r1, r0
    6460:	4620      	mov	r0, r4
    6462:	f007 f83b 	bl	d4dc <__aeabi_fmul>
    6466:	4641      	mov	r1, r8
    6468:	4604      	mov	r4, r0
    646a:	4650      	mov	r0, sl
    646c:	f006 ff2c 	bl	d2c8 <__aeabi_fsub>
    6470:	4601      	mov	r1, r0
    6472:	4620      	mov	r0, r4
    6474:	f007 f8e6 	bl	d644 <__aeabi_fdiv>
    6478:	4639      	mov	r1, r7
    647a:	f006 ff27 	bl	d2cc <__addsf3>
    647e:	4601      	mov	r1, r0
    6480:	4648      	mov	r0, r9
    6482:	f006 ff21 	bl	d2c8 <__aeabi_fsub>
    6486:	f007 f9ef 	bl	d868 <__aeabi_f2iz>
    648a:	8028      	strh	r0, [r5, #0]
    648c:	e6c7      	b.n	621e <currentlimit()+0x96>
        chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, (settings.chargecurrentmax - settings.chargecurrentcold), 0);
    648e:	f9b5 0000 	ldrsh.w	r0, [r5]
    6492:	f006 ffcf 	bl	d434 <__aeabi_i2f>
    6496:	4680      	mov	r8, r0
    6498:	4817      	ldr	r0, [pc, #92]	; (64f8 <currentlimit()+0x370>)
    649a:	f7fa fef9 	bl	1290 <BMSModuleManager::getLowTemperature()>
    649e:	f9b4 30de 	ldrsh.w	r3, [r4, #222]	; 0xde
    64a2:	4681      	mov	r9, r0
    64a4:	f9b4 0060 	ldrsh.w	r0, [r4, #96]	; 0x60
    64a8:	1ac0      	subs	r0, r0, r3
    64aa:	f006 ffc3 	bl	d434 <__aeabi_i2f>
    64ae:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
    64b2:	4607      	mov	r7, r0
    64b4:	4651      	mov	r1, sl
    64b6:	4648      	mov	r0, r9
    64b8:	f006 ff06 	bl	d2c8 <__aeabi_fsub>
    64bc:	4639      	mov	r1, r7
    64be:	4681      	mov	r9, r0
    64c0:	2000      	movs	r0, #0
    64c2:	f006 ff01 	bl	d2c8 <__aeabi_fsub>
    64c6:	4601      	mov	r1, r0
    64c8:	4648      	mov	r0, r9
    64ca:	f007 f807 	bl	d4dc <__aeabi_fmul>
    64ce:	4651      	mov	r1, sl
    64d0:	4681      	mov	r9, r0
    64d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    64d4:	f006 fef8 	bl	d2c8 <__aeabi_fsub>
    64d8:	4601      	mov	r1, r0
    64da:	4648      	mov	r0, r9
    64dc:	f007 f8b2 	bl	d644 <__aeabi_fdiv>
    64e0:	4639      	mov	r1, r7
    64e2:	f006 fef3 	bl	d2cc <__addsf3>
    64e6:	4601      	mov	r1, r0
    64e8:	4640      	mov	r0, r8
    64ea:	f006 feed 	bl	d2c8 <__aeabi_fsub>
    64ee:	f007 f9bb 	bl	d868 <__aeabi_f2iz>
    64f2:	8028      	strh	r0, [r5, #0]
    64f4:	e705      	b.n	6302 <currentlimit()+0x17a>
    64f6:	bf00      	nop
    64f8:	1fff900c 	.word	0x1fff900c

000064fc <inputdebug()>:
void inputdebug() {
    64fc:	b508      	push	{r3, lr}
  Serial.println();
    64fe:	4828      	ldr	r0, [pc, #160]	; (65a0 <inputdebug()+0xa4>)
    6500:	f003 fc38 	bl	9d74 <Print::println()>
    6504:	4827      	ldr	r0, [pc, #156]	; (65a4 <inputdebug()+0xa8>)
    6506:	2107      	movs	r1, #7
    6508:	f006 f902 	bl	c710 <usb_serial_write>
  if (digitalRead(IN1)) {
    650c:	2011      	movs	r0, #17
    650e:	f004 fab3 	bl	aa78 <digitalRead>
    6512:	b300      	cbz	r0, 6556 <inputdebug()+0x5a>
    6514:	4824      	ldr	r0, [pc, #144]	; (65a8 <inputdebug()+0xac>)
    6516:	2106      	movs	r1, #6
    6518:	f006 f8fa 	bl	c710 <usb_serial_write>
  if (digitalRead(IN3)) {
    651c:	2012      	movs	r0, #18
    651e:	f004 faab 	bl	aa78 <digitalRead>
    6522:	b308      	cbz	r0, 6568 <inputdebug()+0x6c>
    6524:	4821      	ldr	r0, [pc, #132]	; (65ac <inputdebug()+0xb0>)
    6526:	2106      	movs	r1, #6
    6528:	f006 f8f2 	bl	c710 <usb_serial_write>
  if (digitalRead(IN3)) {
    652c:	2012      	movs	r0, #18
    652e:	f004 faa3 	bl	aa78 <digitalRead>
    6532:	b310      	cbz	r0, 657a <inputdebug()+0x7e>
    6534:	481e      	ldr	r0, [pc, #120]	; (65b0 <inputdebug()+0xb4>)
    6536:	2106      	movs	r1, #6
    6538:	f006 f8ea 	bl	c710 <usb_serial_write>
  if (digitalRead(IN4)) {
    653c:	2013      	movs	r0, #19
    653e:	f004 fa9b 	bl	aa78 <digitalRead>
    6542:	b318      	cbz	r0, 658c <inputdebug()+0x90>
    6544:	481b      	ldr	r0, [pc, #108]	; (65b4 <inputdebug()+0xb8>)
    6546:	2106      	movs	r1, #6
    6548:	f006 f8e2 	bl	c710 <usb_serial_write>
}
    654c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    6550:	4813      	ldr	r0, [pc, #76]	; (65a0 <inputdebug()+0xa4>)
    6552:	f003 bc0f 	b.w	9d74 <Print::println()>
    6556:	4818      	ldr	r0, [pc, #96]	; (65b8 <inputdebug()+0xbc>)
    6558:	2106      	movs	r1, #6
    655a:	f006 f8d9 	bl	c710 <usb_serial_write>
  if (digitalRead(IN3)) {
    655e:	2012      	movs	r0, #18
    6560:	f004 fa8a 	bl	aa78 <digitalRead>
    6564:	2800      	cmp	r0, #0
    6566:	d1dd      	bne.n	6524 <inputdebug()+0x28>
    6568:	4814      	ldr	r0, [pc, #80]	; (65bc <inputdebug()+0xc0>)
    656a:	2106      	movs	r1, #6
    656c:	f006 f8d0 	bl	c710 <usb_serial_write>
  if (digitalRead(IN3)) {
    6570:	2012      	movs	r0, #18
    6572:	f004 fa81 	bl	aa78 <digitalRead>
    6576:	2800      	cmp	r0, #0
    6578:	d1dc      	bne.n	6534 <inputdebug()+0x38>
    657a:	4811      	ldr	r0, [pc, #68]	; (65c0 <inputdebug()+0xc4>)
    657c:	2106      	movs	r1, #6
    657e:	f006 f8c7 	bl	c710 <usb_serial_write>
  if (digitalRead(IN4)) {
    6582:	2013      	movs	r0, #19
    6584:	f004 fa78 	bl	aa78 <digitalRead>
    6588:	2800      	cmp	r0, #0
    658a:	d1db      	bne.n	6544 <inputdebug()+0x48>
    658c:	480d      	ldr	r0, [pc, #52]	; (65c4 <inputdebug()+0xc8>)
    658e:	2106      	movs	r1, #6
    6590:	f006 f8be 	bl	c710 <usb_serial_write>
}
    6594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    6598:	4801      	ldr	r0, [pc, #4]	; (65a0 <inputdebug()+0xa4>)
    659a:	f003 bbeb 	b.w	9d74 <Print::println()>
    659e:	bf00      	nop
    65a0:	1fff8824 	.word	0x1fff8824
    65a4:	000155b0 	.word	0x000155b0
    65a8:	000155b8 	.word	0x000155b8
    65ac:	000155c8 	.word	0x000155c8
    65b0:	000155d8 	.word	0x000155d8
    65b4:	000155e8 	.word	0x000155e8
    65b8:	000155c0 	.word	0x000155c0
    65bc:	000155d0 	.word	0x000155d0
    65c0:	000155e0 	.word	0x000155e0
    65c4:	000155f0 	.word	0x000155f0

000065c8 <outputdebug()>:
void outputdebug() {
    65c8:	b510      	push	{r4, lr}
  if (outputstate < 5) {
    65ca:	4c29      	ldr	r4, [pc, #164]	; (6670 <outputdebug()+0xa8>)
    65cc:	6823      	ldr	r3, [r4, #0]
    65ce:	2b04      	cmp	r3, #4
    65d0:	dc26      	bgt.n	6620 <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    65d2:	2101      	movs	r1, #1
    65d4:	200b      	movs	r0, #11
    65d6:	f004 fa29 	bl	aa2c <digitalWrite>
    digitalWrite(OUT2, HIGH);
    65da:	2101      	movs	r1, #1
    65dc:	200c      	movs	r0, #12
    65de:	f004 fa25 	bl	aa2c <digitalWrite>
    digitalWrite(OUT3, HIGH);
    65e2:	2101      	movs	r1, #1
    65e4:	2014      	movs	r0, #20
    65e6:	f004 fa21 	bl	aa2c <digitalWrite>
    digitalWrite(OUT4, HIGH);
    65ea:	2101      	movs	r1, #1
    65ec:	2015      	movs	r0, #21
    65ee:	f004 fa1d 	bl	aa2c <digitalWrite>
    analogWrite(OUT5, 255);
    65f2:	21ff      	movs	r1, #255	; 0xff
    65f4:	2016      	movs	r0, #22
    65f6:	f004 f89d 	bl	a734 <analogWrite>
    analogWrite(OUT6, 255);
    65fa:	21ff      	movs	r1, #255	; 0xff
    65fc:	2017      	movs	r0, #23
    65fe:	f004 f899 	bl	a734 <analogWrite>
    analogWrite(OUT7, 255);
    6602:	21ff      	movs	r1, #255	; 0xff
    6604:	2005      	movs	r0, #5
    6606:	f004 f895 	bl	a734 <analogWrite>
    analogWrite(OUT8, 255);
    660a:	21ff      	movs	r1, #255	; 0xff
    660c:	2006      	movs	r0, #6
    660e:	f004 f891 	bl	a734 <analogWrite>
    outputstate++;
    6612:	6823      	ldr	r3, [r4, #0]
    6614:	3301      	adds	r3, #1
  if (outputstate > 10) {
    6616:	2b0a      	cmp	r3, #10
    outputstate = 0;
    6618:	bfc8      	it	gt
    661a:	2300      	movgt	r3, #0
    661c:	6023      	str	r3, [r4, #0]
}
    661e:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    6620:	2100      	movs	r1, #0
    6622:	200b      	movs	r0, #11
    6624:	f004 fa02 	bl	aa2c <digitalWrite>
    digitalWrite(OUT2, LOW);
    6628:	2100      	movs	r1, #0
    662a:	200c      	movs	r0, #12
    662c:	f004 f9fe 	bl	aa2c <digitalWrite>
    digitalWrite(OUT3, LOW);
    6630:	2100      	movs	r1, #0
    6632:	2014      	movs	r0, #20
    6634:	f004 f9fa 	bl	aa2c <digitalWrite>
    digitalWrite(OUT4, LOW);
    6638:	2100      	movs	r1, #0
    663a:	2015      	movs	r0, #21
    663c:	f004 f9f6 	bl	aa2c <digitalWrite>
    analogWrite(OUT5, 0);
    6640:	2100      	movs	r1, #0
    6642:	2016      	movs	r0, #22
    6644:	f004 f876 	bl	a734 <analogWrite>
    analogWrite(OUT6, 0);
    6648:	2100      	movs	r1, #0
    664a:	2017      	movs	r0, #23
    664c:	f004 f872 	bl	a734 <analogWrite>
    analogWrite(OUT7, 0);
    6650:	2100      	movs	r1, #0
    6652:	2005      	movs	r0, #5
    6654:	f004 f86e 	bl	a734 <analogWrite>
    analogWrite(OUT8, 0);
    6658:	2100      	movs	r1, #0
    665a:	2006      	movs	r0, #6
    665c:	f004 f86a 	bl	a734 <analogWrite>
    outputstate++;
    6660:	6823      	ldr	r3, [r4, #0]
    6662:	3301      	adds	r3, #1
  if (outputstate > 10) {
    6664:	2b0a      	cmp	r3, #10
    outputstate = 0;
    6666:	bfc8      	it	gt
    6668:	2300      	movgt	r3, #0
    666a:	6023      	str	r3, [r4, #0]
}
    666c:	bd10      	pop	{r4, pc}
    666e:	bf00      	nop
    6670:	1fffc0a8 	.word	0x1fffc0a8

00006674 <dashupdate()>:
void dashupdate() {
    6674:	b530      	push	{r4, r5, lr}
					  serial2_write((const uint8_t *)str, len);
    6676:	48ad      	ldr	r0, [pc, #692]	; (692c <dashupdate()+0x2b8>)
    6678:	b083      	sub	sp, #12
    667a:	2109      	movs	r1, #9
    667c:	f004 fd1c 	bl	b0b8 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6680:	2022      	movs	r0, #34	; 0x22
    6682:	f004 fc9d 	bl	afc0 <serial2_putchar>
  if (settings.ESSmode == 1) {
    6686:	4baa      	ldr	r3, [pc, #680]	; (6930 <dashupdate()+0x2bc>)
    6688:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    668c:	2b01      	cmp	r3, #1
    switch (bmsstatus) {
    668e:	4ba9      	ldr	r3, [pc, #676]	; (6934 <dashupdate()+0x2c0>)
    6690:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1) {
    6692:	d009      	beq.n	66a8 <dashupdate()+0x34>
    switch (bmsstatus) {
    6694:	2b05      	cmp	r3, #5
    6696:	d810      	bhi.n	66ba <dashupdate()+0x46>
    6698:	e8df f013 	tbh	[pc, r3, lsl #1]
    669c:	0134012f 	.word	0x0134012f
    66a0:	013e0139 	.word	0x013e0139
    66a4:	000b012a 	.word	0x000b012a
    switch (bmsstatus) {
    66a8:	2b00      	cmp	r3, #0
    66aa:	f000 813a 	beq.w	6922 <dashupdate()+0x2ae>
    66ae:	2b05      	cmp	r3, #5
    66b0:	d103      	bne.n	66ba <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    66b2:	48a1      	ldr	r0, [pc, #644]	; (6938 <dashupdate()+0x2c4>)
    66b4:	2107      	movs	r1, #7
    66b6:	f004 fcff 	bl	b0b8 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    66ba:	2022      	movs	r0, #34	; 0x22
    66bc:	f004 fc80 	bl	afc0 <serial2_putchar>
    66c0:	20ff      	movs	r0, #255	; 0xff
    66c2:	f004 fc7d 	bl	afc0 <serial2_putchar>
    66c6:	20ff      	movs	r0, #255	; 0xff
    66c8:	f004 fc7a 	bl	afc0 <serial2_putchar>
  Serial2.print(SOC);
    66cc:	4c9b      	ldr	r4, [pc, #620]	; (693c <dashupdate()+0x2c8>)
    66ce:	20ff      	movs	r0, #255	; 0xff
    66d0:	f004 fc76 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    66d4:	489a      	ldr	r0, [pc, #616]	; (6940 <dashupdate()+0x2cc>)
    66d6:	2108      	movs	r1, #8
    66d8:	f004 fcee 	bl	b0b8 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    66dc:	6821      	ldr	r1, [r4, #0]
    66de:	4899      	ldr	r0, [pc, #612]	; (6944 <dashupdate()+0x2d0>)
    66e0:	f003 fb40 	bl	9d64 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    66e4:	20ff      	movs	r0, #255	; 0xff
    66e6:	f004 fc6b 	bl	afc0 <serial2_putchar>
    66ea:	20ff      	movs	r0, #255	; 0xff
    66ec:	f004 fc68 	bl	afc0 <serial2_putchar>
    66f0:	20ff      	movs	r0, #255	; 0xff
    66f2:	f004 fc65 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    66f6:	4894      	ldr	r0, [pc, #592]	; (6948 <dashupdate()+0x2d4>)
    66f8:	2109      	movs	r1, #9
    66fa:	f004 fcdd 	bl	b0b8 <serial2_write>
    66fe:	6821      	ldr	r1, [r4, #0]
    6700:	4890      	ldr	r0, [pc, #576]	; (6944 <dashupdate()+0x2d0>)
    6702:	f003 fb2f 	bl	9d64 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6706:	20ff      	movs	r0, #255	; 0xff
    6708:	f004 fc5a 	bl	afc0 <serial2_putchar>
    670c:	20ff      	movs	r0, #255	; 0xff
    670e:	f004 fc57 	bl	afc0 <serial2_putchar>
    6712:	20ff      	movs	r0, #255	; 0xff
    6714:	f004 fc54 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6718:	488c      	ldr	r0, [pc, #560]	; (694c <dashupdate()+0x2d8>)
    671a:	210c      	movs	r1, #12
    671c:	f004 fccc 	bl	b0b8 <serial2_write>
  Serial2.print(currentact / 100, 0);
    6720:	4b8b      	ldr	r3, [pc, #556]	; (6950 <dashupdate()+0x2dc>)
    6722:	498c      	ldr	r1, [pc, #560]	; (6954 <dashupdate()+0x2e0>)
    6724:	6818      	ldr	r0, [r3, #0]
    6726:	f006 ff8d 	bl	d644 <__aeabi_fdiv>
    672a:	f006 fcb3 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    672e:	2400      	movs	r4, #0
    6730:	4602      	mov	r2, r0
    6732:	460b      	mov	r3, r1
    6734:	9400      	str	r4, [sp, #0]
    6736:	4883      	ldr	r0, [pc, #524]	; (6944 <dashupdate()+0x2d0>)
    6738:	f003 fb3e 	bl	9db8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    673c:	20ff      	movs	r0, #255	; 0xff
    673e:	f004 fc3f 	bl	afc0 <serial2_putchar>
    6742:	20ff      	movs	r0, #255	; 0xff
    6744:	f004 fc3c 	bl	afc0 <serial2_putchar>
    6748:	20ff      	movs	r0, #255	; 0xff
    674a:	f004 fc39 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    674e:	2109      	movs	r1, #9
    6750:	4881      	ldr	r0, [pc, #516]	; (6958 <dashupdate()+0x2e4>)
    6752:	f004 fcb1 	bl	b0b8 <serial2_write>
  Serial2.print(bms.getAvgTemperature(), 0);
    6756:	4881      	ldr	r0, [pc, #516]	; (695c <dashupdate()+0x2e8>)
    6758:	f7fa fd16 	bl	1188 <BMSModuleManager::getAvgTemperature()>
    675c:	f006 fc9a 	bl	d094 <__aeabi_f2d>
    6760:	9400      	str	r4, [sp, #0]
    6762:	4602      	mov	r2, r0
    6764:	460b      	mov	r3, r1
    6766:	4877      	ldr	r0, [pc, #476]	; (6944 <dashupdate()+0x2d0>)
    6768:	f003 fb26 	bl	9db8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    676c:	20ff      	movs	r0, #255	; 0xff
    676e:	f004 fc27 	bl	afc0 <serial2_putchar>
    6772:	20ff      	movs	r0, #255	; 0xff
    6774:	f004 fc24 	bl	afc0 <serial2_putchar>
    6778:	20ff      	movs	r0, #255	; 0xff
    677a:	f004 fc21 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    677e:	210c      	movs	r1, #12
    6780:	4877      	ldr	r0, [pc, #476]	; (6960 <dashupdate()+0x2ec>)
    6782:	f004 fc99 	bl	b0b8 <serial2_write>
  Serial2.print(bms.getLowTemperature(), 0);
    6786:	4875      	ldr	r0, [pc, #468]	; (695c <dashupdate()+0x2e8>)
    6788:	f7fa fd82 	bl	1290 <BMSModuleManager::getLowTemperature()>
    678c:	f006 fc82 	bl	d094 <__aeabi_f2d>
    6790:	9400      	str	r4, [sp, #0]
    6792:	4602      	mov	r2, r0
    6794:	460b      	mov	r3, r1
    6796:	486b      	ldr	r0, [pc, #428]	; (6944 <dashupdate()+0x2d0>)
    6798:	f003 fb0e 	bl	9db8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    679c:	20ff      	movs	r0, #255	; 0xff
    679e:	f004 fc0f 	bl	afc0 <serial2_putchar>
    67a2:	20ff      	movs	r0, #255	; 0xff
    67a4:	f004 fc0c 	bl	afc0 <serial2_putchar>
    67a8:	20ff      	movs	r0, #255	; 0xff
    67aa:	f004 fc09 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    67ae:	210d      	movs	r1, #13
    67b0:	486c      	ldr	r0, [pc, #432]	; (6964 <dashupdate()+0x2f0>)
    67b2:	f004 fc81 	bl	b0b8 <serial2_write>
  Serial2.print(bms.getHighTemperature(), 0);
    67b6:	4869      	ldr	r0, [pc, #420]	; (695c <dashupdate()+0x2e8>)
    67b8:	f7fa fd62 	bl	1280 <BMSModuleManager::getHighTemperature()>
    67bc:	f006 fc6a 	bl	d094 <__aeabi_f2d>
    67c0:	9400      	str	r4, [sp, #0]
    67c2:	4602      	mov	r2, r0
    67c4:	460b      	mov	r3, r1
    67c6:	485f      	ldr	r0, [pc, #380]	; (6944 <dashupdate()+0x2d0>)
    67c8:	f003 faf6 	bl	9db8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    67cc:	20ff      	movs	r0, #255	; 0xff
    67ce:	f004 fbf7 	bl	afc0 <serial2_putchar>
    67d2:	20ff      	movs	r0, #255	; 0xff
    67d4:	f004 fbf4 	bl	afc0 <serial2_putchar>
    67d8:	20ff      	movs	r0, #255	; 0xff
    67da:	f004 fbf1 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    67de:	2109      	movs	r1, #9
    67e0:	4861      	ldr	r0, [pc, #388]	; (6968 <dashupdate()+0x2f4>)
    67e2:	f004 fc69 	bl	b0b8 <serial2_write>
  Serial2.print(bms.getPackVoltage() * 10, 0);
    67e6:	485d      	ldr	r0, [pc, #372]	; (695c <dashupdate()+0x2e8>)
    67e8:	f7fa fc90 	bl	110c <BMSModuleManager::getPackVoltage()>
    67ec:	495f      	ldr	r1, [pc, #380]	; (696c <dashupdate()+0x2f8>)
    67ee:	f006 fe75 	bl	d4dc <__aeabi_fmul>
    67f2:	f006 fc4f 	bl	d094 <__aeabi_f2d>
    67f6:	9400      	str	r4, [sp, #0]
    67f8:	4602      	mov	r2, r0
    67fa:	460b      	mov	r3, r1
    67fc:	4851      	ldr	r0, [pc, #324]	; (6944 <dashupdate()+0x2d0>)
    67fe:	f003 fadb 	bl	9db8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6802:	20ff      	movs	r0, #255	; 0xff
    6804:	f004 fbdc 	bl	afc0 <serial2_putchar>
    6808:	20ff      	movs	r0, #255	; 0xff
    680a:	f004 fbd9 	bl	afc0 <serial2_putchar>
    680e:	20ff      	movs	r0, #255	; 0xff
    6810:	f004 fbd6 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6814:	210c      	movs	r1, #12
    6816:	4856      	ldr	r0, [pc, #344]	; (6970 <dashupdate()+0x2fc>)
    6818:	f004 fc4e 	bl	b0b8 <serial2_write>
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    681c:	484f      	ldr	r0, [pc, #316]	; (695c <dashupdate()+0x2e8>)
    681e:	f7fa faa5 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    6822:	4954      	ldr	r1, [pc, #336]	; (6974 <dashupdate()+0x300>)
    6824:	f006 fe5a 	bl	d4dc <__aeabi_fmul>
    6828:	f006 fc34 	bl	d094 <__aeabi_f2d>
    682c:	9400      	str	r4, [sp, #0]
    682e:	4602      	mov	r2, r0
    6830:	460b      	mov	r3, r1
    6832:	4844      	ldr	r0, [pc, #272]	; (6944 <dashupdate()+0x2d0>)
    6834:	f003 fac0 	bl	9db8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6838:	20ff      	movs	r0, #255	; 0xff
    683a:	f004 fbc1 	bl	afc0 <serial2_putchar>
    683e:	20ff      	movs	r0, #255	; 0xff
    6840:	f004 fbbe 	bl	afc0 <serial2_putchar>
    6844:	20ff      	movs	r0, #255	; 0xff
    6846:	f004 fbbb 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    684a:	210d      	movs	r1, #13
    684c:	484a      	ldr	r0, [pc, #296]	; (6978 <dashupdate()+0x304>)
    684e:	f004 fc33 	bl	b0b8 <serial2_write>
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    6852:	4842      	ldr	r0, [pc, #264]	; (695c <dashupdate()+0x2e8>)
    6854:	f7fa fabe 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    6858:	4946      	ldr	r1, [pc, #280]	; (6974 <dashupdate()+0x300>)
    685a:	f006 fe3f 	bl	d4dc <__aeabi_fmul>
    685e:	f006 fc19 	bl	d094 <__aeabi_f2d>
    6862:	9400      	str	r4, [sp, #0]
    6864:	4602      	mov	r2, r0
    6866:	460b      	mov	r3, r1
    6868:	4836      	ldr	r0, [pc, #216]	; (6944 <dashupdate()+0x2d0>)
    686a:	f003 faa5 	bl	9db8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    686e:	20ff      	movs	r0, #255	; 0xff
    6870:	f004 fba6 	bl	afc0 <serial2_putchar>
    6874:	20ff      	movs	r0, #255	; 0xff
    6876:	f004 fba3 	bl	afc0 <serial2_putchar>
    687a:	20ff      	movs	r0, #255	; 0xff
    687c:	f004 fba0 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6880:	483e      	ldr	r0, [pc, #248]	; (697c <dashupdate()+0x308>)
    6882:	2109      	movs	r1, #9
    6884:	f004 fc18 	bl	b0b8 <serial2_write>
  Serial2.print(firmver);
    6888:	4b3d      	ldr	r3, [pc, #244]	; (6980 <dashupdate()+0x30c>)
	size_t print(int n)				{ return print((long)n); }
    688a:	482e      	ldr	r0, [pc, #184]	; (6944 <dashupdate()+0x2d0>)
    688c:	6819      	ldr	r1, [r3, #0]
    688e:	f003 fa69 	bl	9d64 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6892:	20ff      	movs	r0, #255	; 0xff
    6894:	f004 fb94 	bl	afc0 <serial2_putchar>
    6898:	20ff      	movs	r0, #255	; 0xff
    689a:	f004 fb91 	bl	afc0 <serial2_putchar>
    689e:	20ff      	movs	r0, #255	; 0xff
    68a0:	f004 fb8e 	bl	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    68a4:	210e      	movs	r1, #14
    68a6:	4837      	ldr	r0, [pc, #220]	; (6984 <dashupdate()+0x310>)
    68a8:	f004 fc06 	bl	b0b8 <serial2_write>
  Serial2.print((bms.getHighCellVolt() - bms.getLowCellVolt()) * 1000, 0);
    68ac:	482b      	ldr	r0, [pc, #172]	; (695c <dashupdate()+0x2e8>)
    68ae:	f7fa fa91 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    68b2:	4605      	mov	r5, r0
    68b4:	4829      	ldr	r0, [pc, #164]	; (695c <dashupdate()+0x2e8>)
    68b6:	f7fa fa59 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    68ba:	4601      	mov	r1, r0
    68bc:	4628      	mov	r0, r5
    68be:	f006 fd03 	bl	d2c8 <__aeabi_fsub>
    68c2:	492c      	ldr	r1, [pc, #176]	; (6974 <dashupdate()+0x300>)
    68c4:	f006 fe0a 	bl	d4dc <__aeabi_fmul>
    68c8:	f006 fbe4 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    68cc:	9400      	str	r4, [sp, #0]
    68ce:	4602      	mov	r2, r0
    68d0:	460b      	mov	r3, r1
    68d2:	481c      	ldr	r0, [pc, #112]	; (6944 <dashupdate()+0x2d0>)
    68d4:	f003 fa70 	bl	9db8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    68d8:	20ff      	movs	r0, #255	; 0xff
    68da:	f004 fb71 	bl	afc0 <serial2_putchar>
    68de:	20ff      	movs	r0, #255	; 0xff
    68e0:	f004 fb6e 	bl	afc0 <serial2_putchar>
    68e4:	20ff      	movs	r0, #255	; 0xff
}
    68e6:	b003      	add	sp, #12
    68e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    68ec:	f004 bb68 	b.w	afc0 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    68f0:	4825      	ldr	r0, [pc, #148]	; (6988 <dashupdate()+0x314>)
    68f2:	210b      	movs	r1, #11
    68f4:	f004 fbe0 	bl	b0b8 <serial2_write>
    68f8:	e6df      	b.n	66ba <dashupdate()+0x46>
    68fa:	4824      	ldr	r0, [pc, #144]	; (698c <dashupdate()+0x318>)
    68fc:	2106      	movs	r1, #6
    68fe:	f004 fbdb 	bl	b0b8 <serial2_write>
    6902:	e6da      	b.n	66ba <dashupdate()+0x46>
    6904:	4822      	ldr	r0, [pc, #136]	; (6990 <dashupdate()+0x31c>)
    6906:	2107      	movs	r1, #7
    6908:	f004 fbd6 	bl	b0b8 <serial2_write>
    690c:	e6d5      	b.n	66ba <dashupdate()+0x46>
    690e:	4821      	ldr	r0, [pc, #132]	; (6994 <dashupdate()+0x320>)
    6910:	2107      	movs	r1, #7
    6912:	f004 fbd1 	bl	b0b8 <serial2_write>
    6916:	e6d0      	b.n	66ba <dashupdate()+0x46>
    6918:	481f      	ldr	r0, [pc, #124]	; (6998 <dashupdate()+0x324>)
    691a:	2108      	movs	r1, #8
    691c:	f004 fbcc 	bl	b0b8 <serial2_write>
    6920:	e6cb      	b.n	66ba <dashupdate()+0x46>
    6922:	481e      	ldr	r0, [pc, #120]	; (699c <dashupdate()+0x328>)
    6924:	2108      	movs	r1, #8
    6926:	f004 fbc7 	bl	b0b8 <serial2_write>
    692a:	e6c6      	b.n	66ba <dashupdate()+0x46>
    692c:	000155f8 	.word	0x000155f8
    6930:	1fffc0b4 	.word	0x1fffc0b4
    6934:	1fffbe2c 	.word	0x1fffbe2c
    6938:	00014814 	.word	0x00014814
    693c:	1fff8728 	.word	0x1fff8728
    6940:	00015610 	.word	0x00015610
    6944:	1fff87b4 	.word	0x1fff87b4
    6948:	0001561c 	.word	0x0001561c
    694c:	00015628 	.word	0x00015628
    6950:	1fffbec0 	.word	0x1fffbec0
    6954:	42c80000 	.word	0x42c80000
    6958:	00015638 	.word	0x00015638
    695c:	1fff900c 	.word	0x1fff900c
    6960:	00015644 	.word	0x00015644
    6964:	00015654 	.word	0x00015654
    6968:	00015664 	.word	0x00015664
    696c:	41200000 	.word	0x41200000
    6970:	00015670 	.word	0x00015670
    6974:	447a0000 	.word	0x447a0000
    6978:	00015680 	.word	0x00015680
    697c:	00015690 	.word	0x00015690
    6980:	1fff8754 	.word	0x1fff8754
    6984:	0001569c 	.word	0x0001569c
    6988:	000147f4 	.word	0x000147f4
    698c:	000147e4 	.word	0x000147e4
    6990:	000147ec 	.word	0x000147ec
    6994:	00014800 	.word	0x00014800
    6998:	00014808 	.word	0x00014808
    699c:	00015604 	.word	0x00015604

000069a0 <chargercomms()>:
void chargercomms() {
    69a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Elcon) {
    69a2:	4e8e      	ldr	r6, [pc, #568]	; (6bdc <chargercomms()+0x23c>)
    69a4:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
    69a8:	2d04      	cmp	r5, #4
    69aa:	f000 8204 	beq.w	6db6 <chargercomms()+0x416>
  if (settings.chargertype == Eltek) {
    69ae:	2d03      	cmp	r5, #3
    69b0:	f000 81c6 	beq.w	6d40 <chargercomms()+0x3a0>
  if (settings.chargertype == BrusaNLG5) {
    69b4:	2d01      	cmp	r5, #1
    69b6:	f000 812b 	beq.w	6c10 <chargercomms()+0x270>
  if (settings.chargertype == ChevyVolt) {
    69ba:	2d02      	cmp	r5, #2
    69bc:	f000 80b6 	beq.w	6b2c <chargercomms()+0x18c>
  if (settings.chargertype == Coda) {
    69c0:	2d06      	cmp	r5, #6
    69c2:	d062      	beq.n	6a8a <chargercomms()+0xea>
  if (settings.chargertype == EltekPC) {
    69c4:	2d07      	cmp	r5, #7
    69c6:	d000      	beq.n	69ca <chargercomms()+0x2a>
}
    69c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    powerout = (chargecurrent / ncharger);
    69ca:	4b85      	ldr	r3, [pc, #532]	; (6be0 <chargercomms()+0x240>)
    69cc:	4a85      	ldr	r2, [pc, #532]	; (6be4 <chargercomms()+0x244>)
    69ce:	f9b3 3000 	ldrsh.w	r3, [r3]
    69d2:	6812      	ldr	r2, [r2, #0]
    69d4:	fb93 f3f2 	sdiv	r3, r3, r2
    69d8:	b29b      	uxth	r3, r3
    if (powerout > 100) {
    69da:	2b64      	cmp	r3, #100	; 0x64
    69dc:	f200 8233 	bhi.w	6e46 <chargercomms()+0x4a6>
      powerout = powerout * 10;
    69e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    69e4:	005f      	lsls	r7, r3, #1
    msg.buf[2] = highByte(powerout);
    69e6:	f3c3 15c7 	ubfx	r5, r3, #7, #8
    msg.buf[3] = lowByte(powerout);
    69ea:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    msg.id = 0x351;
    69ee:	4c7e      	ldr	r4, [pc, #504]	; (6be8 <chargercomms()+0x248>)
    69f0:	f240 3351 	movw	r3, #849	; 0x351
    69f4:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    69f6:	2307      	movs	r3, #7
    69f8:	71e3      	strb	r3, [r4, #7]
    msg.buf[6] = 0x01;
    69fa:	2201      	movs	r2, #1
      msg.buf[i] = ChargerSerial[i];
    69fc:	4b7b      	ldr	r3, [pc, #492]	; (6bec <chargercomms()+0x24c>)
    msg.buf[6] = 0x01;
    69fe:	73a2      	strb	r2, [r4, #14]
      msg.buf[i] = ChargerSerial[i];
    6a00:	e893 0003 	ldmia.w	r3, {r0, r1}
    6a04:	60a0      	str	r0, [r4, #8]
    6a06:	81a1      	strh	r1, [r4, #12]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6a08:	4879      	ldr	r0, [pc, #484]	; (6bf0 <chargercomms()+0x250>)
    6a0a:	4621      	mov	r1, r4
    6a0c:	f002 f862 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6a10:	b970      	cbnz	r0, 6a30 <chargercomms()+0x90>
    6a12:	4b78      	ldr	r3, [pc, #480]	; (6bf4 <chargercomms()+0x254>)
    6a14:	4978      	ldr	r1, [pc, #480]	; (6bf8 <chargercomms()+0x258>)
    6a16:	681a      	ldr	r2, [r3, #0]
    6a18:	680b      	ldr	r3, [r1, #0]
    6a1a:	4293      	cmp	r3, r2
    6a1c:	da08      	bge.n	6a30 <chargercomms()+0x90>
      msgbuf[sendCnt] = msg;
    6a1e:	4a77      	ldr	r2, [pc, #476]	; (6bfc <chargercomms()+0x25c>)
    6a20:	eb02 1c03 	add.w	ip, r2, r3, lsl #4
      sendCnt++;
    6a24:	3301      	adds	r3, #1
    6a26:	600b      	str	r3, [r1, #0]
      msgbuf[sendCnt] = msg;
    6a28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6a2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    msg.id = 0x352;
    6a30:	f240 3352 	movw	r3, #850	; 0x352
    6a34:	6023      	str	r3, [r4, #0]
    msg.len = 6;
    6a36:	2306      	movs	r3, #6
    6a38:	71e3      	strb	r3, [r4, #7]
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a3a:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.buf[2] = highByte(powerout);
    6a3c:	72a5      	strb	r5, [r4, #10]
    msg.buf[0] = 0xFF;
    6a3e:	f240 13ff 	movw	r3, #511	; 0x1ff
    6a42:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(powerout);
    6a44:	72e7      	strb	r7, [r4, #11]
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a46:	f006 fcf5 	bl	d434 <__aeabi_i2f>
    6a4a:	6971      	ldr	r1, [r6, #20]
    6a4c:	f006 fd46 	bl	d4dc <__aeabi_fmul>
    6a50:	496b      	ldr	r1, [pc, #428]	; (6c00 <chargercomms()+0x260>)
    6a52:	f006 fd43 	bl	d4dc <__aeabi_fmul>
    6a56:	f006 ff2d 	bl	d8b4 <__aeabi_f2uiz>
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6a5a:	4963      	ldr	r1, [pc, #396]	; (6be8 <chargercomms()+0x248>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a5c:	ba43      	rev16	r3, r0
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6a5e:	4864      	ldr	r0, [pc, #400]	; (6bf0 <chargercomms()+0x250>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a60:	81a3      	strh	r3, [r4, #12]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6a62:	f002 f837 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6a66:	2800      	cmp	r0, #0
    6a68:	d1ae      	bne.n	69c8 <chargercomms()+0x28>
    6a6a:	4a63      	ldr	r2, [pc, #396]	; (6bf8 <chargercomms()+0x258>)
    6a6c:	4961      	ldr	r1, [pc, #388]	; (6bf4 <chargercomms()+0x254>)
    6a6e:	6813      	ldr	r3, [r2, #0]
    6a70:	6809      	ldr	r1, [r1, #0]
    6a72:	428b      	cmp	r3, r1
    6a74:	daa8      	bge.n	69c8 <chargercomms()+0x28>
      msgbuf[sendCnt] = msg;
    6a76:	4d61      	ldr	r5, [pc, #388]	; (6bfc <chargercomms()+0x25c>)
    6a78:	eb05 1503 	add.w	r5, r5, r3, lsl #4
      sendCnt++;
    6a7c:	3301      	adds	r3, #1
    6a7e:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    6a80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6a84:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    6a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg.id = 0x050;
    6a8a:	4c57      	ldr	r4, [pc, #348]	; (6be8 <chargercomms()+0x248>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6a8c:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.len = 8;
    6a8e:	2308      	movs	r3, #8
    msg.id = 0x050;
    6a90:	2250      	movs	r2, #80	; 0x50
    msg.len = 8;
    6a92:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = 0x00;
    6a94:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
    msg.id = 0x050;
    6a98:	6022      	str	r2, [r4, #0]
    msg.buf[0] = 0x00;
    6a9a:	8123      	strh	r3, [r4, #8]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6a9c:	f006 fcca 	bl	d434 <__aeabi_i2f>
    6aa0:	6971      	ldr	r1, [r6, #20]
    6aa2:	f006 fd1b 	bl	d4dc <__aeabi_fmul>
    6aa6:	4957      	ldr	r1, [pc, #348]	; (6c04 <chargercomms()+0x264>)
    6aa8:	4605      	mov	r5, r0
    6aaa:	f006 fed3 	bl	d854 <__aeabi_fcmpgt>
    6aae:	2800      	cmp	r0, #0
    6ab0:	f040 81bf 	bne.w	6e32 <chargercomms()+0x492>
    6ab4:	2201      	movs	r2, #1
    6ab6:	2390      	movs	r3, #144	; 0x90
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6ab8:	72a2      	strb	r2, [r4, #10]
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    6aba:	4a49      	ldr	r2, [pc, #292]	; (6be0 <chargercomms()+0x240>)
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6abc:	72e3      	strb	r3, [r4, #11]
    msg.buf[4] = 0x00;
    6abe:	2100      	movs	r1, #0
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    6ac0:	f9b2 0000 	ldrsh.w	r0, [r2]
    msg.buf[4] = 0x00;
    6ac4:	7321      	strb	r1, [r4, #12]
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    6ac6:	f006 fcb5 	bl	d434 <__aeabi_i2f>
    6aca:	4629      	mov	r1, r5
    6acc:	f006 fd06 	bl	d4dc <__aeabi_fmul>
    6ad0:	494d      	ldr	r1, [pc, #308]	; (6c08 <chargercomms()+0x268>)
    6ad2:	4605      	mov	r5, r0
    6ad4:	f006 fea0 	bl	d818 <__aeabi_fcmplt>
    6ad8:	2800      	cmp	r0, #0
    6ada:	f000 81c9 	beq.w	6e70 <chargercomms()+0x4d0>
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    6ade:	494b      	ldr	r1, [pc, #300]	; (6c0c <chargercomms()+0x26c>)
    6ae0:	4628      	mov	r0, r5
    6ae2:	f006 fdaf 	bl	d644 <__aeabi_fdiv>
    6ae6:	f006 fee5 	bl	d8b4 <__aeabi_f2uiz>
    6aea:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    6aee:	4618      	mov	r0, r3
    msg.buf[7] = 0x01;  //HV charging
    6af0:	2201      	movs	r2, #1
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    6af2:	7360      	strb	r0, [r4, #13]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6af4:	493c      	ldr	r1, [pc, #240]	; (6be8 <chargercomms()+0x248>)
    6af6:	483e      	ldr	r0, [pc, #248]	; (6bf0 <chargercomms()+0x250>)
    msg.buf[7] = 0x01;  //HV charging
    6af8:	73e2      	strb	r2, [r4, #15]
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    6afa:	73a3      	strb	r3, [r4, #14]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6afc:	f001 ffea 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6b00:	2800      	cmp	r0, #0
    6b02:	f040 81b2 	bne.w	6e6a <chargercomms()+0x4ca>
    6b06:	4a3c      	ldr	r2, [pc, #240]	; (6bf8 <chargercomms()+0x258>)
    6b08:	493a      	ldr	r1, [pc, #232]	; (6bf4 <chargercomms()+0x254>)
    6b0a:	6813      	ldr	r3, [r2, #0]
    6b0c:	6809      	ldr	r1, [r1, #0]
    6b0e:	428b      	cmp	r3, r1
    6b10:	f280 81ab 	bge.w	6e6a <chargercomms()+0x4ca>
      msgbuf[sendCnt] = msg;
    6b14:	4f39      	ldr	r7, [pc, #228]	; (6bfc <chargercomms()+0x25c>)
  if (settings.chargertype == EltekPC) {
    6b16:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
      msgbuf[sendCnt] = msg;
    6b1a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
      sendCnt++;
    6b1e:	3301      	adds	r3, #1
    6b20:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    6b22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6b26:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
      sendCnt++;
    6b2a:	e74b      	b.n	69c4 <chargercomms()+0x24>
    msg.id = 0x30E;
    6b2c:	4c2e      	ldr	r4, [pc, #184]	; (6be8 <chargercomms()+0x248>)
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6b2e:	4830      	ldr	r0, [pc, #192]	; (6bf0 <chargercomms()+0x250>)
    msg.buf[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    6b30:	7225      	strb	r5, [r4, #8]
    msg.id = 0x30E;
    6b32:	f240 330e 	movw	r3, #782	; 0x30e
    6b36:	6023      	str	r3, [r4, #0]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6b38:	4621      	mov	r1, r4
    msg.len = 1;
    6b3a:	2301      	movs	r3, #1
    6b3c:	71e3      	strb	r3, [r4, #7]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6b3e:	f001 ffc9 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6b42:	b970      	cbnz	r0, 6b62 <chargercomms()+0x1c2>
    6b44:	4a2c      	ldr	r2, [pc, #176]	; (6bf8 <chargercomms()+0x258>)
    6b46:	492b      	ldr	r1, [pc, #172]	; (6bf4 <chargercomms()+0x254>)
    6b48:	6813      	ldr	r3, [r2, #0]
    6b4a:	6809      	ldr	r1, [r1, #0]
    6b4c:	428b      	cmp	r3, r1
    6b4e:	da08      	bge.n	6b62 <chargercomms()+0x1c2>
      msgbuf[sendCnt] = msg;
    6b50:	4d2a      	ldr	r5, [pc, #168]	; (6bfc <chargercomms()+0x25c>)
    6b52:	eb05 1503 	add.w	r5, r5, r3, lsl #4
      sendCnt++;
    6b56:	3301      	adds	r3, #1
    6b58:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    6b5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6b5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if ((chargecurrent * 2) > 255) {
    6b62:	4b1f      	ldr	r3, [pc, #124]	; (6be0 <chargercomms()+0x240>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6b64:	6d70      	ldr	r0, [r6, #84]	; 0x54
    if ((chargecurrent * 2) > 255) {
    6b66:	f9b3 3000 	ldrsh.w	r3, [r3]
    6b6a:	005b      	lsls	r3, r3, #1
    6b6c:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    6b6e:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    6b72:	bfd4      	ite	le
    6b74:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    6b76:	23ff      	movgt	r3, #255	; 0xff
    msg.id = 0x304;
    6b78:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    6b7c:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40;  //fixed
    6b7e:	2240      	movs	r2, #64	; 0x40
    msg.id = 0x304;
    6b80:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40;  //fixed
    6b82:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    6b84:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6b86:	f006 fc55 	bl	d434 <__aeabi_i2f>
    6b8a:	6971      	ldr	r1, [r6, #20]
    6b8c:	f006 fca6 	bl	d4dc <__aeabi_fmul>
    6b90:	491c      	ldr	r1, [pc, #112]	; (6c04 <chargercomms()+0x264>)
    6b92:	4605      	mov	r5, r0
    6b94:	f006 fe5e 	bl	d854 <__aeabi_fcmpgt>
    6b98:	2800      	cmp	r0, #0
    6b9a:	f040 815c 	bne.w	6e56 <chargercomms()+0x4b6>
    6b9e:	2301      	movs	r3, #1
    6ba0:	2090      	movs	r0, #144	; 0x90
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6ba2:	72e0      	strb	r0, [r4, #11]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6ba4:	4910      	ldr	r1, [pc, #64]	; (6be8 <chargercomms()+0x248>)
    6ba6:	4812      	ldr	r0, [pc, #72]	; (6bf0 <chargercomms()+0x250>)
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6ba8:	72a3      	strb	r3, [r4, #10]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6baa:	f001 ff93 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6bae:	2800      	cmp	r0, #0
    6bb0:	f040 8160 	bne.w	6e74 <chargercomms()+0x4d4>
    6bb4:	4a10      	ldr	r2, [pc, #64]	; (6bf8 <chargercomms()+0x258>)
    6bb6:	490f      	ldr	r1, [pc, #60]	; (6bf4 <chargercomms()+0x254>)
    6bb8:	6813      	ldr	r3, [r2, #0]
    6bba:	6809      	ldr	r1, [r1, #0]
    6bbc:	428b      	cmp	r3, r1
    6bbe:	f280 8159 	bge.w	6e74 <chargercomms()+0x4d4>
      msgbuf[sendCnt] = msg;
    6bc2:	4f0e      	ldr	r7, [pc, #56]	; (6bfc <chargercomms()+0x25c>)
  if (settings.chargertype == Coda) {
    6bc4:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
      msgbuf[sendCnt] = msg;
    6bc8:	eb07 1703 	add.w	r7, r7, r3, lsl #4
      sendCnt++;
    6bcc:	3301      	adds	r3, #1
    6bce:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    6bd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6bd4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
      sendCnt++;
    6bd8:	e6f2      	b.n	69c0 <chargercomms()+0x20>
    6bda:	bf00      	nop
    6bdc:	1fffc0b4 	.word	0x1fffc0b4
    6be0:	1fffbe38 	.word	0x1fffbe38
    6be4:	1fff8760 	.word	0x1fff8760
    6be8:	1fffbf30 	.word	0x1fffbf30
    6bec:	1fff8fc4 	.word	0x1fff8fc4
    6bf0:	1fffc1c0 	.word	0x1fffc1c0
    6bf4:	1fff876c 	.word	0x1fff876c
    6bf8:	1fffc0b0 	.word	0x1fffc0b0
    6bfc:	1fffbfc0 	.word	0x1fffbfc0
    6c00:	41200000 	.word	0x41200000
    6c04:	43480000 	.word	0x43480000
    6c08:	454e4000 	.word	0x454e4000
    6c0c:	43700000 	.word	0x43700000
    msg.id = chargerid1;
    6c10:	4b9c      	ldr	r3, [pc, #624]	; (6e84 <chargercomms()+0x4e4>)
    6c12:	4c9d      	ldr	r4, [pc, #628]	; (6e88 <chargercomms()+0x4e8>)
    6c14:	6819      	ldr	r1, [r3, #0]
    6c16:	6021      	str	r1, [r4, #0]
    msg.len = 7;
    6c18:	2207      	movs	r2, #7
    msg.buf[0] = 0x80;
    6c1a:	2380      	movs	r3, #128	; 0x80
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6c1c:	2010      	movs	r0, #16
    msg.len = 7;
    6c1e:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x80;
    6c20:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6c22:	f003 ff29 	bl	aa78 <digitalRead>
    6c26:	2800      	cmp	r0, #0
    6c28:	f000 8113 	beq.w	6e52 <chargercomms()+0x4b2>
      msg.buf[1] = highByte(maxac2 * 10);
    6c2c:	4b97      	ldr	r3, [pc, #604]	; (6e8c <chargercomms()+0x4ec>)
    6c2e:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6c30:	4f97      	ldr	r7, [pc, #604]	; (6e90 <chargercomms()+0x4f0>)
    6c32:	4d98      	ldr	r5, [pc, #608]	; (6e94 <chargercomms()+0x4f4>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6c34:	6d70      	ldr	r0, [r6, #84]	; 0x54
      msg.buf[1] = highByte(maxac2 * 10);
    6c36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6c3a:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    6c3c:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    6c3e:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    6c42:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    6c44:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6c46:	f9b7 3000 	ldrsh.w	r3, [r7]
    6c4a:	682a      	ldr	r2, [r5, #0]
    6c4c:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    6c50:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6c52:	121b      	asrs	r3, r3, #8
    6c54:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6c56:	f006 fbed 	bl	d434 <__aeabi_i2f>
    6c5a:	6971      	ldr	r1, [r6, #20]
    6c5c:	f006 fc3e 	bl	d4dc <__aeabi_fmul>
    6c60:	4b8d      	ldr	r3, [pc, #564]	; (6e98 <chargercomms()+0x4f8>)
    6c62:	6819      	ldr	r1, [r3, #0]
    6c64:	f006 fb30 	bl	d2c8 <__aeabi_fsub>
    6c68:	498c      	ldr	r1, [pc, #560]	; (6e9c <chargercomms()+0x4fc>)
    6c6a:	f006 fc37 	bl	d4dc <__aeabi_fmul>
    6c6e:	f006 fe21 	bl	d8b4 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6c72:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6c74:	f3c0 2007 	ubfx	r0, r0, #8, #8
    6c78:	72e0      	strb	r0, [r4, #11]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6c7a:	4983      	ldr	r1, [pc, #524]	; (6e88 <chargercomms()+0x4e8>)
    6c7c:	4888      	ldr	r0, [pc, #544]	; (6ea0 <chargercomms()+0x500>)
    6c7e:	f001 ff29 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6c82:	b970      	cbnz	r0, 6ca2 <chargercomms()+0x302>
    6c84:	4b87      	ldr	r3, [pc, #540]	; (6ea4 <chargercomms()+0x504>)
    6c86:	4988      	ldr	r1, [pc, #544]	; (6ea8 <chargercomms()+0x508>)
    6c88:	681a      	ldr	r2, [r3, #0]
    6c8a:	680b      	ldr	r3, [r1, #0]
    6c8c:	4293      	cmp	r3, r2
    6c8e:	da08      	bge.n	6ca2 <chargercomms()+0x302>
      msgbuf[sendCnt] = msg;
    6c90:	4a86      	ldr	r2, [pc, #536]	; (6eac <chargercomms()+0x50c>)
    6c92:	eb02 1c03 	add.w	ip, r2, r3, lsl #4
      sendCnt++;
    6c96:	3301      	adds	r3, #1
    6c98:	600b      	str	r3, [r1, #0]
      msgbuf[sendCnt] = msg;
    6c9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6c9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    delay(2);
    6ca2:	2002      	movs	r0, #2
    6ca4:	f003 ff52 	bl	ab4c <delay>
    msg.id = chargerid2;
    6ca8:	4b81      	ldr	r3, [pc, #516]	; (6eb0 <chargercomms()+0x510>)
    6caa:	681b      	ldr	r3, [r3, #0]
    6cac:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    6cae:	2307      	movs	r3, #7
    6cb0:	71e3      	strb	r3, [r4, #7]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6cb2:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    6cb4:	2380      	movs	r3, #128	; 0x80
    6cb6:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6cb8:	f003 fede 	bl	aa78 <digitalRead>
    6cbc:	2800      	cmp	r0, #0
    6cbe:	f040 80df 	bne.w	6e80 <chargercomms()+0x4e0>
      msg.buf[1] = highByte(maxac1 * 10);
    6cc2:	4b7c      	ldr	r3, [pc, #496]	; (6eb4 <chargercomms()+0x514>)
      msg.buf[1] = highByte(maxac2 * 10);
    6cc4:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6cc6:	6d70      	ldr	r0, [r6, #84]	; 0x54
      msg.buf[1] = highByte(maxac2 * 10);
    6cc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6ccc:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    6cce:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    6cd0:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    6cd4:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    6cd6:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6cd8:	f006 fbac 	bl	d434 <__aeabi_i2f>
    6cdc:	6971      	ldr	r1, [r6, #20]
    6cde:	f006 fbfd 	bl	d4dc <__aeabi_fmul>
    6ce2:	4b75      	ldr	r3, [pc, #468]	; (6eb8 <chargercomms()+0x518>)
    6ce4:	6819      	ldr	r1, [r3, #0]
    6ce6:	f006 faef 	bl	d2c8 <__aeabi_fsub>
    6cea:	496c      	ldr	r1, [pc, #432]	; (6e9c <chargercomms()+0x4fc>)
    6cec:	f006 fbf6 	bl	d4dc <__aeabi_fmul>
    6cf0:	f006 fde0 	bl	d8b4 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6cf4:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6cf6:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6cfa:	682a      	ldr	r2, [r5, #0]
    6cfc:	f9b7 3000 	ldrsh.w	r3, [r7]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6d00:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6d02:	fb93 f3f2 	sdiv	r3, r3, r2
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6d06:	4960      	ldr	r1, [pc, #384]	; (6e88 <chargercomms()+0x4e8>)
    6d08:	4865      	ldr	r0, [pc, #404]	; (6ea0 <chargercomms()+0x500>)
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    6d0a:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6d0c:	121a      	asrs	r2, r3, #8
    6d0e:	7362      	strb	r2, [r4, #13]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6d10:	f001 fee0 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6d14:	2800      	cmp	r0, #0
    6d16:	f040 80b0 	bne.w	6e7a <chargercomms()+0x4da>
    6d1a:	4a63      	ldr	r2, [pc, #396]	; (6ea8 <chargercomms()+0x508>)
    6d1c:	4961      	ldr	r1, [pc, #388]	; (6ea4 <chargercomms()+0x504>)
    6d1e:	6813      	ldr	r3, [r2, #0]
    6d20:	6809      	ldr	r1, [r1, #0]
    6d22:	428b      	cmp	r3, r1
    6d24:	f280 80a9 	bge.w	6e7a <chargercomms()+0x4da>
      msgbuf[sendCnt] = msg;
    6d28:	4f60      	ldr	r7, [pc, #384]	; (6eac <chargercomms()+0x50c>)
  if (settings.chargertype == ChevyVolt) {
    6d2a:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
      msgbuf[sendCnt] = msg;
    6d2e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
      sendCnt++;
    6d32:	3301      	adds	r3, #1
    6d34:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    6d36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6d3a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
      sendCnt++;
    6d3e:	e63c      	b.n	69ba <chargercomms()+0x1a>
    msg.id = 0x2FF;  //broadcast to all Elteks
    6d40:	4c51      	ldr	r4, [pc, #324]	; (6e88 <chargercomms()+0x4e8>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6d42:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.buf[2] = highByte(1000);
    6d44:	72a5      	strb	r5, [r4, #10]
    msg.id = 0x2FF;  //broadcast to all Elteks
    6d46:	f240 23ff 	movw	r3, #767	; 0x2ff
    6d4a:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    6d4c:	2307      	movs	r3, #7
    6d4e:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = 0x01;
    6d50:	f64e 0301 	movw	r3, #59393	; 0xe801
    6d54:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6d56:	f006 fb6d 	bl	d434 <__aeabi_i2f>
    6d5a:	6971      	ldr	r1, [r6, #20]
    6d5c:	f006 fbbe 	bl	d4dc <__aeabi_fmul>
    6d60:	494e      	ldr	r1, [pc, #312]	; (6e9c <chargercomms()+0x4fc>)
    6d62:	f006 fbbb 	bl	d4dc <__aeabi_fmul>
    6d66:	f006 fda5 	bl	d8b4 <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    6d6a:	4a4a      	ldr	r2, [pc, #296]	; (6e94 <chargercomms()+0x4f4>)
    6d6c:	4b48      	ldr	r3, [pc, #288]	; (6e90 <chargercomms()+0x4f0>)
    6d6e:	6811      	ldr	r1, [r2, #0]
    6d70:	f9b3 3000 	ldrsh.w	r3, [r3]
    6d74:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6d78:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6d7a:	0a02      	lsrs	r2, r0, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6d7c:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    6d7e:	7363      	strb	r3, [r4, #13]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6d80:	4847      	ldr	r0, [pc, #284]	; (6ea0 <chargercomms()+0x500>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6d82:	7322      	strb	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    6d84:	121b      	asrs	r3, r3, #8
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6d86:	4621      	mov	r1, r4
    msg.buf[6] = highByte(chargecurrent / ncharger);
    6d88:	73a3      	strb	r3, [r4, #14]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6d8a:	f001 fea3 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6d8e:	2800      	cmp	r0, #0
    6d90:	d15c      	bne.n	6e4c <chargercomms()+0x4ac>
    6d92:	4a45      	ldr	r2, [pc, #276]	; (6ea8 <chargercomms()+0x508>)
    6d94:	4943      	ldr	r1, [pc, #268]	; (6ea4 <chargercomms()+0x504>)
    6d96:	6813      	ldr	r3, [r2, #0]
    6d98:	6809      	ldr	r1, [r1, #0]
    6d9a:	428b      	cmp	r3, r1
    6d9c:	da56      	bge.n	6e4c <chargercomms()+0x4ac>
      msgbuf[sendCnt] = msg;
    6d9e:	4f43      	ldr	r7, [pc, #268]	; (6eac <chargercomms()+0x50c>)
  if (settings.chargertype == BrusaNLG5) {
    6da0:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
      msgbuf[sendCnt] = msg;
    6da4:	eb07 1703 	add.w	r7, r7, r3, lsl #4
      sendCnt++;
    6da8:	3301      	adds	r3, #1
    6daa:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    6dac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6db0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
      sendCnt++;
    6db4:	e5fe      	b.n	69b4 <chargercomms()+0x14>
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    6db6:	4c34      	ldr	r4, [pc, #208]	; (6e88 <chargercomms()+0x4e8>)
    6db8:	4a40      	ldr	r2, [pc, #256]	; (6ebc <chargercomms()+0x51c>)
    msg.ext = 1;
    6dba:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6dbc:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    6dbe:	6022      	str	r2, [r4, #0]
    msg.ext = 1;
    6dc0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    6dc8:	f043 0301 	orr.w	r3, r3, #1
    6dcc:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6dce:	f006 fb31 	bl	d434 <__aeabi_i2f>
    6dd2:	6971      	ldr	r1, [r6, #20]
    6dd4:	f006 fb82 	bl	d4dc <__aeabi_fmul>
    6dd8:	4930      	ldr	r1, [pc, #192]	; (6e9c <chargercomms()+0x4fc>)
    6dda:	f006 fb7f 	bl	d4dc <__aeabi_fmul>
    6dde:	f006 fd69 	bl	d8b4 <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6de2:	4a2c      	ldr	r2, [pc, #176]	; (6e94 <chargercomms()+0x4f4>)
    6de4:	4b2a      	ldr	r3, [pc, #168]	; (6e90 <chargercomms()+0x4f0>)
    6de6:	6811      	ldr	r1, [r2, #0]
    6de8:	f9b3 3000 	ldrsh.w	r3, [r3]
    6dec:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[4] = 0x00;
    6df0:	2100      	movs	r1, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6df2:	ba42      	rev16	r2, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6df4:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    6df6:	60e1      	str	r1, [r4, #12]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6df8:	4829      	ldr	r0, [pc, #164]	; (6ea0 <chargercomms()+0x500>)
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6dfa:	8122      	strh	r2, [r4, #8]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6dfc:	4621      	mov	r1, r4
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6dfe:	8163      	strh	r3, [r4, #10]
    if (Can0.write(msg) == 0 && sendCnt < sendbufsize) {
    6e00:	f001 fe68 	bl	8ad4 <FlexCAN::write(CAN_message_t const&)>
    6e04:	b970      	cbnz	r0, 6e24 <chargercomms()+0x484>
    6e06:	4a28      	ldr	r2, [pc, #160]	; (6ea8 <chargercomms()+0x508>)
    6e08:	4926      	ldr	r1, [pc, #152]	; (6ea4 <chargercomms()+0x504>)
    6e0a:	6813      	ldr	r3, [r2, #0]
    6e0c:	6809      	ldr	r1, [r1, #0]
    6e0e:	428b      	cmp	r3, r1
    6e10:	da08      	bge.n	6e24 <chargercomms()+0x484>
      msgbuf[sendCnt] = msg;
    6e12:	4d26      	ldr	r5, [pc, #152]	; (6eac <chargercomms()+0x50c>)
    6e14:	eb05 1503 	add.w	r5, r5, r3, lsl #4
      sendCnt++;
    6e18:	3301      	adds	r3, #1
    6e1a:	6013      	str	r3, [r2, #0]
      msgbuf[sendCnt] = msg;
    6e1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6e20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    msg.ext = 0;
    6e24:	79a3      	ldrb	r3, [r4, #6]
  if (settings.chargertype == Eltek) {
    6e26:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
    msg.ext = 0;
    6e2a:	f36f 0300 	bfc	r3, #0, #1
    6e2e:	71a3      	strb	r3, [r4, #6]
    6e30:	e5bd      	b.n	69ae <chargercomms()+0xe>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6e32:	491a      	ldr	r1, [pc, #104]	; (6e9c <chargercomms()+0x4fc>)
    6e34:	4628      	mov	r0, r5
    6e36:	f006 fb51 	bl	d4dc <__aeabi_fmul>
    6e3a:	f006 fd3b 	bl	d8b4 <__aeabi_f2uiz>
    6e3e:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6e42:	b2c3      	uxtb	r3, r0
    6e44:	e638      	b.n	6ab8 <chargercomms()+0x118>
    6e46:	27e8      	movs	r7, #232	; 0xe8
    6e48:	2503      	movs	r5, #3
    6e4a:	e5d0      	b.n	69ee <chargercomms()+0x4e>
  if (settings.chargertype == BrusaNLG5) {
    6e4c:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
    6e50:	e5b0      	b.n	69b4 <chargercomms()+0x14>
      msg.buf[1] = highByte(maxac1 * 10);
    6e52:	4b18      	ldr	r3, [pc, #96]	; (6eb4 <chargercomms()+0x514>)
    6e54:	e6eb      	b.n	6c2e <chargercomms()+0x28e>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6e56:	4629      	mov	r1, r5
    6e58:	4628      	mov	r0, r5
    6e5a:	f006 fa37 	bl	d2cc <__addsf3>
    6e5e:	f006 fd29 	bl	d8b4 <__aeabi_f2uiz>
    6e62:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6e66:	b2c0      	uxtb	r0, r0
    6e68:	e69b      	b.n	6ba2 <chargercomms()+0x202>
  if (settings.chargertype == EltekPC) {
    6e6a:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
    6e6e:	e5a9      	b.n	69c4 <chargercomms()+0x24>
    6e70:	2396      	movs	r3, #150	; 0x96
    6e72:	e63d      	b.n	6af0 <chargercomms()+0x150>
  if (settings.chargertype == Coda) {
    6e74:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
    6e78:	e5a2      	b.n	69c0 <chargercomms()+0x20>
  if (settings.chargertype == ChevyVolt) {
    6e7a:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
    6e7e:	e59c      	b.n	69ba <chargercomms()+0x1a>
      msg.buf[1] = highByte(maxac2 * 10);
    6e80:	4b02      	ldr	r3, [pc, #8]	; (6e8c <chargercomms()+0x4ec>)
    6e82:	e71f      	b.n	6cc4 <chargercomms()+0x324>
    6e84:	1fff8740 	.word	0x1fff8740
    6e88:	1fffbf30 	.word	0x1fffbf30
    6e8c:	1fff875c 	.word	0x1fff875c
    6e90:	1fffbe38 	.word	0x1fffbe38
    6e94:	1fff8760 	.word	0x1fff8760
    6e98:	1fffbe40 	.word	0x1fffbe40
    6e9c:	41200000 	.word	0x41200000
    6ea0:	1fffc1c0 	.word	0x1fffc1c0
    6ea4:	1fff876c 	.word	0x1fff876c
    6ea8:	1fffc0b0 	.word	0x1fffc0b0
    6eac:	1fffbfc0 	.word	0x1fffbfc0
    6eb0:	1fff8744 	.word	0x1fff8744
    6eb4:	1fff8758 	.word	0x1fff8758
    6eb8:	1fffbe3c 	.word	0x1fffbe3c
    6ebc:	1806e5f4 	.word	0x1806e5f4

00006ec0 <handleVictronLynx()>:
  } else {
    return canId;  // not sure if this is really right?
  }
}

void handleVictronLynx() {
    6ec0:	b538      	push	{r3, r4, r5, lr}
  if (inMsg.buf[4] == 0xff && inMsg.buf[3] == 0xff) return;
    6ec2:	4b17      	ldr	r3, [pc, #92]	; (6f20 <handleVictronLynx()+0x60>)
    6ec4:	7b1a      	ldrb	r2, [r3, #12]
    6ec6:	7adb      	ldrb	r3, [r3, #11]
    6ec8:	ea02 0103 	and.w	r1, r2, r3
    6ecc:	29ff      	cmp	r1, #255	; 0xff
    6ece:	d011      	beq.n	6ef4 <handleVictronLynx()+0x34>
  int16_t current = (int)inMsg.buf[4] << 8;  // in 0.1A increments
  current |= inMsg.buf[3];
    6ed0:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
  CANmilliamps = current * 100;
  if (settings.cursens == Canbus) {
    6ed4:	4b13      	ldr	r3, [pc, #76]	; (6f24 <handleVictronLynx()+0x64>)
  CANmilliamps = current * 100;
    6ed6:	4c14      	ldr	r4, [pc, #80]	; (6f28 <handleVictronLynx()+0x68>)
  if (settings.cursens == Canbus) {
    6ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  CANmilliamps = current * 100;
    6eda:	b200      	sxth	r0, r0
    6edc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6ee0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6ee4:	0080      	lsls	r0, r0, #2
  if (settings.cursens == Canbus) {
    6ee6:	2b02      	cmp	r3, #2
  CANmilliamps = current * 100;
    6ee8:	6020      	str	r0, [r4, #0]
  if (settings.cursens == Canbus) {
    6eea:	d011      	beq.n	6f10 <handleVictronLynx()+0x50>
    RawCur = CANmilliamps;
    getcurrent();
  }
  if (candebug == 1) {
    6eec:	4b0f      	ldr	r3, [pc, #60]	; (6f2c <handleVictronLynx()+0x6c>)
    6eee:	681b      	ldr	r3, [r3, #0]
    6ef0:	2b01      	cmp	r3, #1
    6ef2:	d000      	beq.n	6ef6 <handleVictronLynx()+0x36>
    Serial.println();
    Serial.print(CANmilliamps);
    Serial.print("mA ");
  }
}
    6ef4:	bd38      	pop	{r3, r4, r5, pc}
    Serial.println();
    6ef6:	480e      	ldr	r0, [pc, #56]	; (6f30 <handleVictronLynx()+0x70>)
    6ef8:	f002 ff3c 	bl	9d74 <Print::println()>
    Serial.print(CANmilliamps);
    6efc:	6821      	ldr	r1, [r4, #0]
    6efe:	480c      	ldr	r0, [pc, #48]	; (6f30 <handleVictronLynx()+0x70>)
    6f00:	f002 ff30 	bl	9d64 <Print::print(long)>
}
    6f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6f08:	480a      	ldr	r0, [pc, #40]	; (6f34 <handleVictronLynx()+0x74>)
    6f0a:	2103      	movs	r1, #3
    6f0c:	f005 bc00 	b.w	c710 <usb_serial_write>
    RawCur = CANmilliamps;
    6f10:	f006 fa90 	bl	d434 <__aeabi_i2f>
    6f14:	4d08      	ldr	r5, [pc, #32]	; (6f38 <handleVictronLynx()+0x78>)
    6f16:	6028      	str	r0, [r5, #0]
    getcurrent();
    6f18:	f7fb fae4 	bl	24e4 <getcurrent()>
    6f1c:	e7e6      	b.n	6eec <handleVictronLynx()+0x2c>
    6f1e:	bf00      	nop
    6f20:	1fffbedc 	.word	0x1fffbedc
    6f24:	1fffc0b4 	.word	0x1fffc0b4
    6f28:	1fff8fb8 	.word	0x1fff8fb8
    6f2c:	1fffbe30 	.word	0x1fffbe30
    6f30:	1fff8824 	.word	0x1fff8824
    6f34:	000155ac 	.word	0x000155ac
    6f38:	1fff8fe0 	.word	0x1fff8fe0

00006f3c <canread()>:
void canread() {
    6f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Can0.read(inMsg);
    6f3e:	4c83      	ldr	r4, [pc, #524]	; (714c <canread()+0x210>)
  if (settings.cursens == Canbus) {
    6f40:	4d83      	ldr	r5, [pc, #524]	; (7150 <canread()+0x214>)
  Can0.read(inMsg);
    6f42:	4884      	ldr	r0, [pc, #528]	; (7154 <canread()+0x218>)
void canread() {
    6f44:	b083      	sub	sp, #12
  Can0.read(inMsg);
    6f46:	4621      	mov	r1, r4
    6f48:	f001 fd08 	bl	895c <FlexCAN::read(CAN_message_t&)>
  if (settings.cursens == Canbus) {
    6f4c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    if (settings.curcan == 1) {
    6f4e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
  if (settings.cursens == Canbus) {
    6f52:	2b02      	cmp	r3, #2
      switch (inMsg.id) {
    6f54:	6823      	ldr	r3, [r4, #0]
  if (settings.cursens == Canbus) {
    6f56:	d077      	beq.n	7048 <canread()+0x10c>
  if (settings.curcan == 4) {
    6f58:	2a04      	cmp	r2, #4
    6f5a:	d013      	beq.n	6f84 <canread()+0x48>
  if (inMsg.id > 0x600 && inMsg.id < 0x800)  //do mitsubishi magic if ids are ones identified to be modules
    6f5c:	f46f 61c0 	mvn.w	r1, #1536	; 0x600
    6f60:	185a      	adds	r2, r3, r1
    6f62:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
    6f66:	d91a      	bls.n	6f9e <canread()+0x62>
  if (inMsg.id > 0x80000600 && inMsg.id < 0x80000800)  //do mitsubishi magic if ids are ones identified to be modules
    6f68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    6f6c:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
    6f70:	4413      	add	r3, r2
    6f72:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
    6f76:	d91f      	bls.n	6fb8 <canread()+0x7c>
  if (debug == 1) {
    6f78:	4b77      	ldr	r3, [pc, #476]	; (7158 <canread()+0x21c>)
    6f7a:	681b      	ldr	r3, [r3, #0]
    6f7c:	2b01      	cmp	r3, #1
    6f7e:	d023      	beq.n	6fc8 <canread()+0x8c>
}
    6f80:	b003      	add	sp, #12
    6f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((canId & 0x10000000) == 0x10000000) {
    6f84:	00d8      	lsls	r0, r3, #3
    if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    6f86:	4a75      	ldr	r2, [pc, #468]	; (715c <canread()+0x220>)
  if ((canId & 0x10000000) == 0x10000000) {
    6f88:	f100 808b 	bmi.w	70a2 <canread()+0x166>
    if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    6f8c:	4293      	cmp	r3, r2
    6f8e:	d1e5      	bne.n	6f5c <canread()+0x20>
    6f90:	7a22      	ldrb	r2, [r4, #8]
    6f92:	2a00      	cmp	r2, #0
    6f94:	d1e2      	bne.n	6f5c <canread()+0x20>
      handleVictronLynx();
    6f96:	f7ff ff93 	bl	6ec0 <handleVictronLynx()>
  if (inMsg.id > 0x600 && inMsg.id < 0x800)  //do mitsubishi magic if ids are ones identified to be modules
    6f9a:	6823      	ldr	r3, [r4, #0]
    6f9c:	e7de      	b.n	6f5c <canread()+0x20>
    bms.decodecan(inMsg);  //do mitsubishi magic if ids are ones identified to be modules
    6f9e:	496b      	ldr	r1, [pc, #428]	; (714c <canread()+0x210>)
    6fa0:	486f      	ldr	r0, [pc, #444]	; (7160 <canread()+0x224>)
    6fa2:	f7f9 fea9 	bl	cf8 <BMSModuleManager::decodecan(CAN_message_t&)>
  if (inMsg.id > 0x80000600 && inMsg.id < 0x80000800)  //do mitsubishi magic if ids are ones identified to be modules
    6fa6:	6823      	ldr	r3, [r4, #0]
    6fa8:	f46f 62c0 	mvn.w	r2, #1536	; 0x600
    6fac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    6fb0:	4413      	add	r3, r2
    6fb2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
    6fb6:	d8df      	bhi.n	6f78 <canread()+0x3c>
    bms.decodecan(inMsg);  //do mitsubishi magic if ids are ones identified to be modules
    6fb8:	4964      	ldr	r1, [pc, #400]	; (714c <canread()+0x210>)
    6fba:	4869      	ldr	r0, [pc, #420]	; (7160 <canread()+0x224>)
    6fbc:	f7f9 fe9c 	bl	cf8 <BMSModuleManager::decodecan(CAN_message_t&)>
  if (debug == 1) {
    6fc0:	4b65      	ldr	r3, [pc, #404]	; (7158 <canread()+0x21c>)
    6fc2:	681b      	ldr	r3, [r3, #0]
    6fc4:	2b01      	cmp	r3, #1
    6fc6:	d1db      	bne.n	6f80 <canread()+0x44>
    if (candebug == 1) {
    6fc8:	4b66      	ldr	r3, [pc, #408]	; (7164 <canread()+0x228>)
    6fca:	681b      	ldr	r3, [r3, #0]
    6fcc:	2b01      	cmp	r3, #1
    6fce:	d1d7      	bne.n	6f80 <canread()+0x44>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6fd0:	4b65      	ldr	r3, [pc, #404]	; (7168 <canread()+0x22c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    6fd2:	4866      	ldr	r0, [pc, #408]	; (716c <canread()+0x230>)
    6fd4:	681b      	ldr	r3, [r3, #0]
    6fd6:	9301      	str	r3, [sp, #4]
	return ret;
    6fd8:	9901      	ldr	r1, [sp, #4]
    6fda:	2300      	movs	r3, #0
    6fdc:	220a      	movs	r2, #10
    6fde:	f002 fee1 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    6fe2:	6822      	ldr	r2, [r4, #0]
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    6fe4:	79e3      	ldrb	r3, [r4, #7]
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    6fe6:	4862      	ldr	r0, [pc, #392]	; (7170 <canread()+0x234>)
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    6fe8:	2a00      	cmp	r2, #0
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    6fea:	bfb6      	itet	lt
    6fec:	4961      	ldrlt	r1, [pc, #388]	; (7174 <canread()+0x238>)
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    6fee:	4962      	ldrge	r1, [pc, #392]	; (7178 <canread()+0x23c>)
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    6ff0:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    6ff4:	f007 fa18 	bl	e428 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6ff8:	485d      	ldr	r0, [pc, #372]	; (7170 <canread()+0x234>)
    6ffa:	f007 fc21 	bl	e840 <strlen>
    6ffe:	4601      	mov	r1, r0
    7000:	485b      	ldr	r0, [pc, #364]	; (7170 <canread()+0x234>)
    7002:	f005 fb85 	bl	c710 <usb_serial_write>
      if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    7006:	6825      	ldr	r5, [r4, #0]
    7008:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    700c:	d16a      	bne.n	70e4 <canread()+0x1a8>
        for (byte i = 0; i < inMsg.len; i++) {
    700e:	79e3      	ldrb	r3, [r4, #7]
    7010:	b1a3      	cbz	r3, 703c <canread()+0x100>
          sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    7012:	4f5a      	ldr	r7, [pc, #360]	; (717c <canread()+0x240>)
    7014:	4e56      	ldr	r6, [pc, #344]	; (7170 <canread()+0x234>)
    7016:	462b      	mov	r3, r5
    7018:	4423      	add	r3, r4
    701a:	4639      	mov	r1, r7
    701c:	7a1a      	ldrb	r2, [r3, #8]
    701e:	4630      	mov	r0, r6
    7020:	f007 fa02 	bl	e428 <sprintf>
    7024:	4630      	mov	r0, r6
    7026:	f007 fc0b 	bl	e840 <strlen>
    702a:	4601      	mov	r1, r0
    702c:	4630      	mov	r0, r6
    702e:	f005 fb6f 	bl	c710 <usb_serial_write>
        for (byte i = 0; i < inMsg.len; i++) {
    7032:	3501      	adds	r5, #1
    7034:	79e2      	ldrb	r2, [r4, #7]
    7036:	b2eb      	uxtb	r3, r5
    7038:	429a      	cmp	r2, r3
    703a:	d8ed      	bhi.n	7018 <canread()+0xdc>
      Serial.println();
    703c:	484b      	ldr	r0, [pc, #300]	; (716c <canread()+0x230>)
}
    703e:	b003      	add	sp, #12
    7040:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Serial.println();
    7044:	f002 be96 	b.w	9d74 <Print::println()>
    if (settings.curcan == 1) {
    7048:	2a01      	cmp	r2, #1
    704a:	d03c      	beq.n	70c6 <canread()+0x18a>
    if (settings.curcan == 2) {
    704c:	2a02      	cmp	r2, #2
    704e:	d02e      	beq.n	70ae <canread()+0x172>
    if (settings.curcan == 3) {
    7050:	2a03      	cmp	r2, #3
    7052:	d181      	bne.n	6f58 <canread()+0x1c>
      switch (inMsg.id) {
    7054:	f240 5222 	movw	r2, #1314	; 0x522
    7058:	4293      	cmp	r3, r2
    705a:	d069      	beq.n	7130 <canread()+0x1f4>
    705c:	f240 5223 	movw	r2, #1315	; 0x523
    7060:	4293      	cmp	r3, r2
    7062:	d058      	beq.n	7116 <canread()+0x1da>
    7064:	f240 5221 	movw	r2, #1313	; 0x521
    7068:	4293      	cmp	r3, r2
    706a:	f47f af77 	bne.w	6f5c <canread()+0x20>
          CANmilliamps = inMsg.buf[5] + (inMsg.buf[4] << 8) + (inMsg.buf[3] << 16) + (inMsg.buf[2] << 24);
    706e:	7b22      	ldrb	r2, [r4, #12]
    7070:	7b60      	ldrb	r0, [r4, #13]
    7072:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    7076:	7ae2      	ldrb	r2, [r4, #11]
    7078:	eb00 4002 	add.w	r0, r0, r2, lsl #16
    707c:	7aa2      	ldrb	r2, [r4, #10]
    707e:	eb00 6002 	add.w	r0, r0, r2, lsl #24
    7082:	4a3f      	ldr	r2, [pc, #252]	; (7180 <canread()+0x244>)
    7084:	6010      	str	r0, [r2, #0]
          if (settings.cursens == Canbus) {
    7086:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    7088:	2a02      	cmp	r2, #2
    708a:	f47f af6d 	bne.w	6f68 <canread()+0x2c>
            RawCur = CANmilliamps;
    708e:	f006 f9d1 	bl	d434 <__aeabi_i2f>
    7092:	4e3c      	ldr	r6, [pc, #240]	; (7184 <canread()+0x248>)
    7094:	6030      	str	r0, [r6, #0]
            getcurrent();
    7096:	f7fb fa25 	bl	24e4 <getcurrent()>
  if (settings.curcan == 4) {
    709a:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    709e:	6823      	ldr	r3, [r4, #0]
    70a0:	e75a      	b.n	6f58 <canread()+0x1c>
    return (canId & 0x03FFFF00) >> 8;
    70a2:	f3c3 2111 	ubfx	r1, r3, #8, #18
    if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    70a6:	4291      	cmp	r1, r2
    70a8:	f47f af5e 	bne.w	6f68 <canread()+0x2c>
    70ac:	e770      	b.n	6f90 <canread()+0x54>
      switch (inMsg.id) {
    70ae:	f46f 7670 	mvn.w	r6, #960	; 0x3c0
    70b2:	199a      	adds	r2, r3, r6
    70b4:	2a01      	cmp	r2, #1
    70b6:	f63f af51 	bhi.w	6f5c <canread()+0x20>
          CAB500();
    70ba:	f7ff f819 	bl	60f0 <CAB500()>
    if (settings.curcan == 3) {
    70be:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
      switch (inMsg.id) {
    70c2:	6823      	ldr	r3, [r4, #0]
          break;
    70c4:	e7c4      	b.n	7050 <canread()+0x114>
      switch (inMsg.id) {
    70c6:	f240 32c1 	movw	r2, #961	; 0x3c1
    70ca:	4293      	cmp	r3, r2
    70cc:	d01d      	beq.n	710a <canread()+0x1ce>
    70ce:	f240 32c2 	movw	r2, #962	; 0x3c2
    70d2:	4293      	cmp	r3, r2
    70d4:	f47f af42 	bne.w	6f5c <canread()+0x20>
          CAB300();
    70d8:	f7fe ffca 	bl	6070 <CAB300()>
    if (settings.curcan == 2) {
    70dc:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
      switch (inMsg.id) {
    70e0:	6823      	ldr	r3, [r4, #0]
          break;
    70e2:	e7b3      	b.n	704c <canread()+0x110>
        sprintf(msgString, " REMOTE REQUEST FRAME");
    70e4:	4d28      	ldr	r5, [pc, #160]	; (7188 <canread()+0x24c>)
    70e6:	4c22      	ldr	r4, [pc, #136]	; (7170 <canread()+0x234>)
    70e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    70ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    70ec:	e895 0003 	ldmia.w	r5, {r0, r1}
    70f0:	f844 0b04 	str.w	r0, [r4], #4
    70f4:	4620      	mov	r0, r4
    70f6:	f820 1914 	strh.w	r1, [r0], #-20
    70fa:	f007 fba1 	bl	e840 <strlen>
    70fe:	4601      	mov	r1, r0
    7100:	f1a4 0014 	sub.w	r0, r4, #20
    7104:	f005 fb04 	bl	c710 <usb_serial_write>
    7108:	e798      	b.n	703c <canread()+0x100>
          CAB500();
    710a:	f7fe fff1 	bl	60f0 <CAB500()>
    if (settings.curcan == 2) {
    710e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
      switch (inMsg.id) {
    7112:	6823      	ldr	r3, [r4, #0]
          break;
    7114:	e79a      	b.n	704c <canread()+0x110>
          voltage2 = inMsg.buf[5] + (inMsg.buf[4] << 8) + (inMsg.buf[3] << 16) + (inMsg.buf[2] << 24);
    7116:	7b21      	ldrb	r1, [r4, #12]
    7118:	7b62      	ldrb	r2, [r4, #13]
    711a:	7ae0      	ldrb	r0, [r4, #11]
    711c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    7120:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    7124:	7aa0      	ldrb	r0, [r4, #10]
    7126:	4919      	ldr	r1, [pc, #100]	; (718c <canread()+0x250>)
    7128:	eb02 6200 	add.w	r2, r2, r0, lsl #24
    712c:	600a      	str	r2, [r1, #0]
          break;
    712e:	e71b      	b.n	6f68 <canread()+0x2c>
          voltage1 = inMsg.buf[5] + (inMsg.buf[4] << 8) + (inMsg.buf[3] << 16) + (inMsg.buf[2] << 24);
    7130:	7b21      	ldrb	r1, [r4, #12]
    7132:	7b62      	ldrb	r2, [r4, #13]
    7134:	7ae0      	ldrb	r0, [r4, #11]
    7136:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    713a:	eb02 4200 	add.w	r2, r2, r0, lsl #16
    713e:	7aa0      	ldrb	r0, [r4, #10]
    7140:	4913      	ldr	r1, [pc, #76]	; (7190 <canread()+0x254>)
    7142:	eb02 6200 	add.w	r2, r2, r0, lsl #24
    7146:	600a      	str	r2, [r1, #0]
          break;
    7148:	e70e      	b.n	6f68 <canread()+0x2c>
    714a:	bf00      	nop
    714c:	1fffbedc 	.word	0x1fffbedc
    7150:	1fffc0b4 	.word	0x1fffc0b4
    7154:	1fffc1c0 	.word	0x1fffc1c0
    7158:	1fff8748 	.word	0x1fff8748
    715c:	0001f214 	.word	0x0001f214
    7160:	1fff900c 	.word	0x1fff900c
    7164:	1fffbe30 	.word	0x1fffbe30
    7168:	1fffc3b4 	.word	0x1fffc3b4
    716c:	1fff8824 	.word	0x1fff8824
    7170:	1fffbf40 	.word	0x1fffbf40
    7174:	000156ac 	.word	0x000156ac
    7178:	000156d4 	.word	0x000156d4
    717c:	00015700 	.word	0x00015700
    7180:	1fff8fb8 	.word	0x1fff8fb8
    7184:	1fff8fe0 	.word	0x1fff8fe0
    7188:	000156e8 	.word	0x000156e8
    718c:	1fffc1a8 	.word	0x1fffc1a8
    7190:	1fffc1a4 	.word	0x1fffc1a4

00007194 <loop>:
void loop() {
    7194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (Can0.available()) {
    7198:	4c86      	ldr	r4, [pc, #536]	; (73b4 <loop+0x220>)
void loop() {
    719a:	b099      	sub	sp, #100	; 0x64
  while (Can0.available()) {
    719c:	e001      	b.n	71a2 <loop+0xe>
    canread();
    719e:	f7ff fecd 	bl	6f3c <canread()>
  while (Can0.available()) {
    71a2:	4620      	mov	r0, r4
    71a4:	f001 fba8 	bl	88f8 <FlexCAN::available()>
    71a8:	2800      	cmp	r0, #0
    71aa:	d1f8      	bne.n	719e <loop+0xa>
        virtual int available() { return usb_serial_available(); }
    71ac:	f005 fa7e 	bl	c6ac <usb_serial_available>
  if (SERIALCONSOLE.available() > 0) {
    71b0:	2800      	cmp	r0, #0
    71b2:	dd01      	ble.n	71b8 <loop+0x24>
    menu();
    71b4:	f7fc ff4e 	bl	4054 <menu()>
  if (outputcheck != 1) {
    71b8:	4e7f      	ldr	r6, [pc, #508]	; (73b8 <loop+0x224>)
    if (settings.ESSmode == 1) {
    71ba:	4c80      	ldr	r4, [pc, #512]	; (73bc <loop+0x228>)
  if (outputcheck != 1) {
    71bc:	6833      	ldr	r3, [r6, #0]
    71be:	2b01      	cmp	r3, #1
    71c0:	d124      	bne.n	720c <loop+0x78>
    71c2:	4d7f      	ldr	r5, [pc, #508]	; (73c0 <loop+0x22c>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71c4:	682b      	ldr	r3, [r5, #0]
  if (millis() - looptime > 500) {
    71c6:	4a7f      	ldr	r2, [pc, #508]	; (73c4 <loop+0x230>)
    71c8:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    71ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    71cc:	6811      	ldr	r1, [r2, #0]
    71ce:	1a5b      	subs	r3, r3, r1
    71d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    71d4:	d82d      	bhi.n	7232 <loop+0x9e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71d6:	682b      	ldr	r3, [r5, #0]
  if (millis() - looptime1 > settings.chargerspd) {
    71d8:	4a7b      	ldr	r2, [pc, #492]	; (73c8 <loop+0x234>)
    71da:	9316      	str	r3, [sp, #88]	; 0x58
    71dc:	6811      	ldr	r1, [r2, #0]
	return ret;
    71de:	9b16      	ldr	r3, [sp, #88]	; 0x58
    71e0:	1a5b      	subs	r3, r3, r1
    71e2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
    71e6:	428b      	cmp	r3, r1
    71e8:	d90d      	bls.n	7206 <loop+0x72>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71ea:	682b      	ldr	r3, [r5, #0]
    71ec:	9317      	str	r3, [sp, #92]	; 0x5c
    if (settings.ESSmode == 1) {
    71ee:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	return ret;
    71f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    looptime1 = millis();
    71f4:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1) {
    71f6:	2b01      	cmp	r3, #1
    71f8:	f000 80a5 	beq.w	7346 <loop+0x1b2>
      if (bmsstatus == Charge) {
    71fc:	4b73      	ldr	r3, [pc, #460]	; (73cc <loop+0x238>)
    71fe:	781b      	ldrb	r3, [r3, #0]
    7200:	2b03      	cmp	r3, #3
    7202:	f000 80a0 	beq.w	7346 <loop+0x1b2>
}
    7206:	b019      	add	sp, #100	; 0x64
    7208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    contcon();
    720c:	f7fb ff82 	bl	3114 <contcon()>
    if (settings.ESSmode == 1) {
    7210:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    7214:	2b01      	cmp	r3, #1
    7216:	f000 80f7 	beq.w	7408 <loop+0x274>
      switch (bmsstatus) {
    721a:	4f6c      	ldr	r7, [pc, #432]	; (73cc <loop+0x238>)
    721c:	783b      	ldrb	r3, [r7, #0]
    721e:	2b05      	cmp	r3, #5
    7220:	d87d      	bhi.n	731e <loop+0x18a>
    7222:	e8df f013 	tbh	[pc, r3, lsl #1]
    7226:	0228      	.short	0x0228
    7228:	024101ea 	.word	0x024101ea
    722c:	02ac028b 	.word	0x02ac028b
    7230:	02b3      	.short	0x02b3
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7232:	682b      	ldr	r3, [r5, #0]
    7234:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    7236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bms.getAllVoltTemp();
    7238:	4865      	ldr	r0, [pc, #404]	; (73d0 <loop+0x23c>)
    looptime = millis();
    723a:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    723c:	f7f9 fdfc 	bl	e38 <BMSModuleManager::getAllVoltTemp()>
    if (settings.ESSmode == 1) {
    7240:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
      if (SOCset != 0) {
    7244:	4f63      	ldr	r7, [pc, #396]	; (73d4 <loop+0x240>)
    if (settings.ESSmode == 1) {
    7246:	2b01      	cmp	r3, #1
      if (SOCset != 0) {
    7248:	683b      	ldr	r3, [r7, #0]
    if (settings.ESSmode == 1) {
    724a:	f000 8165 	beq.w	7518 <loop+0x384>
      if (SOCset != 0) {
    724e:	2b00      	cmp	r3, #0
    7250:	d17e      	bne.n	7350 <loop+0x1bc>
    if (debug != 0) {
    7252:	f8df 9184 	ldr.w	r9, [pc, #388]	; 73d8 <loop+0x244>
    7256:	f8d9 3000 	ldr.w	r3, [r9]
    725a:	2b00      	cmp	r3, #0
    725c:	f040 819e 	bne.w	759c <loop+0x408>
    if (CSVdebug != 0) {
    7260:	f8df 8178 	ldr.w	r8, [pc, #376]	; 73dc <loop+0x248>
    7264:	f8d8 3000 	ldr.w	r3, [r8]
    7268:	2b00      	cmp	r3, #0
    726a:	f040 818c 	bne.w	7586 <loop+0x3f2>
    if (inputcheck != 0) {
    726e:	4b5c      	ldr	r3, [pc, #368]	; (73e0 <loop+0x24c>)
    7270:	681b      	ldr	r3, [r3, #0]
    7272:	2b00      	cmp	r3, #0
    7274:	f040 8184 	bne.w	7580 <loop+0x3ec>
    if (outputcheck != 0) {
    7278:	6833      	ldr	r3, [r6, #0]
    727a:	2b00      	cmp	r3, #0
    727c:	d160      	bne.n	7340 <loop+0x1ac>
      gaugeupdate();
    727e:	f7fa fdcf 	bl	1e20 <gaugeupdate()>
    updateSOC();
    7282:	f7fb fcd1 	bl	2c28 <updateSOC()>
    currentlimit();
    7286:	f7fe ff7f 	bl	6188 <currentlimit()>
    VEcan();
    728a:	f7fc f8ff 	bl	348c <VEcan()>
    if (SOCset == 1) {
    728e:	683b      	ldr	r3, [r7, #0]
    7290:	2b01      	cmp	r3, #1
    7292:	f000 815c 	beq.w	754e <loop+0x3ba>
    if (CSVdebug != 1) {
    7296:	f8d8 3000 	ldr.w	r3, [r8]
    729a:	2b01      	cmp	r3, #1
    729c:	d001      	beq.n	72a2 <loop+0x10e>
      dashupdate();  //Info on serial bus 2
    729e:	f7ff f9e9 	bl	6674 <dashupdate()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72a2:	682b      	ldr	r3, [r5, #0]
    if (millis() - cleartime > 10000) {
    72a4:	4e4f      	ldr	r6, [pc, #316]	; (73e4 <loop+0x250>)
    72a6:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    72a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    72aa:	6831      	ldr	r1, [r6, #0]
    72ac:	f242 7210 	movw	r2, #10000	; 0x2710
    72b0:	1a5b      	subs	r3, r3, r1
    72b2:	4293      	cmp	r3, r2
    72b4:	d907      	bls.n	72c6 <loop+0x132>
      if (SOCset == 1) {
    72b6:	683b      	ldr	r3, [r7, #0]
    72b8:	2b01      	cmp	r3, #1
    72ba:	f000 831a 	beq.w	78f2 <loop+0x75e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72be:	682b      	ldr	r3, [r5, #0]
    72c0:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    72c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
      cleartime = millis();
    72c4:	6033      	str	r3, [r6, #0]
  noInterrupts();  //   No - reset WDT
    72c6:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    72c8:	4b47      	ldr	r3, [pc, #284]	; (73e8 <loop+0x254>)
    72ca:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    72ce:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    72d2:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    72d4:	819a      	strh	r2, [r3, #12]
  interrupts();
    72d6:	b662      	cpsie	i
}
    72d8:	e77d      	b.n	71d6 <loop+0x42>
        if (digitalRead(IN2) == HIGH) {
    72da:	2010      	movs	r0, #16
    72dc:	f003 fbcc 	bl	aa78 <digitalRead>
    72e0:	2801      	cmp	r0, #1
    72e2:	f000 8096 	beq.w	7412 <loop+0x27e>
        OutputEnable = 1;
    72e6:	4b41      	ldr	r3, [pc, #260]	; (73ec <loop+0x258>)
    72e8:	701d      	strb	r5, [r3, #0]
        Discharge = 0;
    72ea:	4b41      	ldr	r3, [pc, #260]	; (73f0 <loop+0x25c>)
    72ec:	2500      	movs	r5, #0
        digitalWrite(OUT4, LOW);
    72ee:	2015      	movs	r0, #21
    72f0:	4629      	mov	r1, r5
        Discharge = 0;
    72f2:	601d      	str	r5, [r3, #0]
        digitalWrite(OUT4, LOW);
    72f4:	f003 fb9a 	bl	aa2c <digitalWrite>
        digitalWrite(OUT3, LOW);  //turn off charger
    72f8:	4629      	mov	r1, r5
    72fa:	2014      	movs	r0, #20
    72fc:	f003 fb96 	bl	aa2c <digitalWrite>
        digitalWrite(OUT2, LOW);
    7300:	4629      	mov	r1, r5
    7302:	200c      	movs	r0, #12
    7304:	f003 fb92 	bl	aa2c <digitalWrite>
        digitalWrite(OUT1, LOW);  //turn off discharge
    7308:	4629      	mov	r1, r5
    730a:	200b      	movs	r0, #11
    730c:	f003 fb8e 	bl	aa2c <digitalWrite>
        if (SOCset == 1) {
    7310:	4a30      	ldr	r2, [pc, #192]	; (73d4 <loop+0x240>)
        contctrl = 0;             //turn off out 5 and 6
    7312:	4b38      	ldr	r3, [pc, #224]	; (73f4 <loop+0x260>)
        if (SOCset == 1) {
    7314:	6811      	ldr	r1, [r2, #0]
        contctrl = 0;             //turn off out 5 and 6
    7316:	601d      	str	r5, [r3, #0]
        if (SOCset == 1) {
    7318:	2901      	cmp	r1, #1
    731a:	f000 8265 	beq.w	77e8 <loop+0x654>
    731e:	4d28      	ldr	r5, [pc, #160]	; (73c0 <loop+0x22c>)
    if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    7320:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    7322:	f023 0202 	bic.w	r2, r3, #2
    7326:	2a01      	cmp	r2, #1
    7328:	d006      	beq.n	7338 <loop+0x1a4>
    if (settings.cursens == 0) {
    732a:	2b00      	cmp	r3, #0
    732c:	f47f af4a 	bne.w	71c4 <loop+0x30>
      currentact = 0;
    7330:	4b31      	ldr	r3, [pc, #196]	; (73f8 <loop+0x264>)
    7332:	2200      	movs	r2, #0
    7334:	601a      	str	r2, [r3, #0]
    7336:	e745      	b.n	71c4 <loop+0x30>
      getcurrent();
    7338:	f7fb f8d4 	bl	24e4 <getcurrent()>
    if (settings.cursens == 0) {
    733c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    733e:	e7f4      	b.n	732a <loop+0x196>
      outputdebug();
    7340:	f7ff f942 	bl	65c8 <outputdebug()>
    7344:	e79d      	b.n	7282 <loop+0xee>
}
    7346:	b019      	add	sp, #100	; 0x64
    7348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      chargercomms();
    734c:	f7ff bb28 	b.w	69a0 <chargercomms()>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    7350:	481f      	ldr	r0, [pc, #124]	; (73d0 <loop+0x23c>)
    7352:	f7f9 fd0b 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    7356:	6921      	ldr	r1, [r4, #16]
    7358:	f006 fa5e 	bl	d818 <__aeabi_fcmplt>
    735c:	2800      	cmp	r0, #0
    735e:	f000 828c 	beq.w	787a <loop+0x6e6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7362:	682b      	ldr	r3, [r5, #0]
          if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    7364:	4a25      	ldr	r2, [pc, #148]	; (73fc <loop+0x268>)
    7366:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    7368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    736a:	6812      	ldr	r2, [r2, #0]
    736c:	429a      	cmp	r2, r3
    736e:	d207      	bcs.n	7380 <loop+0x1ec>
            bmsstatus = Error;
    7370:	4a16      	ldr	r2, [pc, #88]	; (73cc <loop+0x238>)
            ErrorReason = ErrorReason | 0x01;
    7372:	4b23      	ldr	r3, [pc, #140]	; (7400 <loop+0x26c>)
            bmsstatus = Error;
    7374:	2105      	movs	r1, #5
    7376:	7011      	strb	r1, [r2, #0]
            ErrorReason = ErrorReason | 0x01;
    7378:	881a      	ldrh	r2, [r3, #0]
    737a:	f042 0201 	orr.w	r2, r2, #1
    737e:	801a      	strh	r2, [r3, #0]
        if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    7380:	4813      	ldr	r0, [pc, #76]	; (73d0 <loop+0x23c>)
    7382:	f7f9 fd27 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7386:	68e1      	ldr	r1, [r4, #12]
    7388:	f006 fa64 	bl	d854 <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    738c:	682b      	ldr	r3, [r5, #0]
    738e:	2800      	cmp	r0, #0
    7390:	f000 8266 	beq.w	7860 <loop+0x6cc>
          if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    7394:	4a1b      	ldr	r2, [pc, #108]	; (7404 <loop+0x270>)
    7396:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    7398:	9b11      	ldr	r3, [sp, #68]	; 0x44
    739a:	6812      	ldr	r2, [r2, #0]
    739c:	429a      	cmp	r2, r3
    739e:	f4bf af58 	bcs.w	7252 <loop+0xbe>
            bmsstatus = Error;
    73a2:	4a0a      	ldr	r2, [pc, #40]	; (73cc <loop+0x238>)
            ErrorReason = ErrorReason | 0x02;
    73a4:	4b16      	ldr	r3, [pc, #88]	; (7400 <loop+0x26c>)
            bmsstatus = Error;
    73a6:	2105      	movs	r1, #5
    73a8:	7011      	strb	r1, [r2, #0]
            ErrorReason = ErrorReason | 0x02;
    73aa:	881a      	ldrh	r2, [r3, #0]
    73ac:	f042 0202 	orr.w	r2, r2, #2
    73b0:	801a      	strh	r2, [r3, #0]
    73b2:	e74e      	b.n	7252 <loop+0xbe>
    73b4:	1fffc1c0 	.word	0x1fffc1c0
    73b8:	1fffc0a4 	.word	0x1fffc0a4
    73bc:	1fffc0b4 	.word	0x1fffc0b4
    73c0:	1fffc3b4 	.word	0x1fffc3b4
    73c4:	1fffbf00 	.word	0x1fffbf00
    73c8:	1fffbf04 	.word	0x1fffbf04
    73cc:	1fffbe2c 	.word	0x1fffbe2c
    73d0:	1fff900c 	.word	0x1fff900c
    73d4:	1fff8fec 	.word	0x1fff8fec
    73d8:	1fff8748 	.word	0x1fff8748
    73dc:	1fff8fbc 	.word	0x1fff8fbc
    73e0:	1fffbef4 	.word	0x1fffbef4
    73e4:	1fffbe44 	.word	0x1fffbe44
    73e8:	40052000 	.word	0x40052000
    73ec:	1fff8fd2 	.word	0x1fff8fd2
    73f0:	1fff8fcc 	.word	0x1fff8fcc
    73f4:	1fffbea8 	.word	0x1fffbea8
    73f8:	1fffbec0 	.word	0x1fffbec0
    73fc:	1fff8ff8 	.word	0x1fff8ff8
    7400:	1fff8fd0 	.word	0x1fff8fd0
    7404:	1fff8fd4 	.word	0x1fff8fd4
      if (settings.ChargerDirect == 1) {
    7408:	f894 50c4 	ldrb.w	r5, [r4, #196]	; 0xc4
    740c:	2d00      	cmp	r5, #0
    740e:	f43f af64 	beq.w	72da <loop+0x146>
        OutputEnable = 1;
    7412:	4bb6      	ldr	r3, [pc, #728]	; (76ec <loop+0x558>)
      if (bmsstatus != Error && bmsstatus != Boot && OutputEnable == 1) {
    7414:	4fb6      	ldr	r7, [pc, #728]	; (76f0 <loop+0x55c>)
        OutputEnable = 1;
    7416:	2501      	movs	r5, #1
    7418:	701d      	strb	r5, [r3, #0]
      if (bmsstatus != Error && bmsstatus != Boot && OutputEnable == 1) {
    741a:	783b      	ldrb	r3, [r7, #0]
    741c:	2b05      	cmp	r3, #5
    741e:	f43f af64 	beq.w	72ea <loop+0x156>
    7422:	2b00      	cmp	r3, #0
    7424:	f43f af61 	beq.w	72ea <loop+0x156>
        contctrl = contctrl | 4;  //turn on negative contactor
    7428:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 76f4 <loop+0x560>
        if (settings.tripcont != 0) {
    742c:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
        contctrl = contctrl | 4;  //turn on negative contactor
    7430:	f8d8 3000 	ldr.w	r3, [r8]
    7434:	f043 0304 	orr.w	r3, r3, #4
    7438:	f8c8 3000 	str.w	r3, [r8]
        if (settings.tripcont != 0) {
    743c:	2a00      	cmp	r2, #0
    743e:	f040 8240 	bne.w	78c2 <loop+0x72e>
    7442:	4dad      	ldr	r5, [pc, #692]	; (76f8 <loop+0x564>)
          if (storagemode == 1) {
    7444:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 76fc <loop+0x568>
        if (digitalRead(IN1) == LOW)  //Key OFF
    7448:	2011      	movs	r0, #17
    744a:	f003 fb15 	bl	aa78 <digitalRead>
          if (storagemode == 1) {
    744e:	f8d9 3000 	ldr.w	r3, [r9]
        if (digitalRead(IN1) == LOW)  //Key OFF
    7452:	2800      	cmp	r0, #0
    7454:	f040 8285 	bne.w	7962 <loop+0x7ce>
          if (storagemode == 1) {
    7458:	2b01      	cmp	r3, #1
    745a:	d101      	bne.n	7460 <loop+0x2cc>
            storagemode = 0;
    745c:	f8c9 0000 	str.w	r0, [r9]
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    7460:	48a7      	ldr	r0, [pc, #668]	; (7700 <loop+0x56c>)
    7462:	f7f9 fcb7 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7466:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7468:	f006 f9f4 	bl	d854 <__aeabi_fcmpgt>
    746c:	2800      	cmp	r0, #0
    746e:	f040 8301 	bne.w	7a74 <loop+0x8e0>
        if (storagemode == 1) {
    7472:	f8d9 9000 	ldr.w	r9, [r9]
    7476:	4ba3      	ldr	r3, [pc, #652]	; (7704 <loop+0x570>)
    7478:	f1b9 0f01 	cmp.w	r9, #1
    747c:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    747e:	48a0      	ldr	r0, [pc, #640]	; (7700 <loop+0x56c>)
        if (storagemode == 1) {
    7480:	f000 82de 	beq.w	7a40 <loop+0x8ac>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    7484:	f7f9 fca6 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7488:	68e1      	ldr	r1, [r4, #12]
    748a:	f006 f9e3 	bl	d854 <__aeabi_fcmpgt>
    748e:	2800      	cmp	r0, #0
    7490:	f000 8336 	beq.w	7b00 <loop+0x96c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7494:	682b      	ldr	r3, [r5, #0]
    7496:	9307      	str	r3, [sp, #28]
            if ((millis() - overtriptimer) > settings.triptime) {
    7498:	4b9b      	ldr	r3, [pc, #620]	; (7708 <loop+0x574>)
    749a:	681a      	ldr	r2, [r3, #0]
	return ret;
    749c:	9b07      	ldr	r3, [sp, #28]
    749e:	1a9b      	subs	r3, r3, r2
    74a0:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
    74a4:	4293      	cmp	r3, r2
    74a6:	f200 8371 	bhi.w	7b8c <loop+0x9f8>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    74aa:	4895      	ldr	r0, [pc, #596]	; (7700 <loop+0x56c>)
    74ac:	f7f9 fc5e 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    74b0:	6921      	ldr	r1, [r4, #16]
    74b2:	f006 f9b1 	bl	d818 <__aeabi_fcmplt>
    74b6:	b940      	cbnz	r0, 74ca <loop+0x336>
    74b8:	4891      	ldr	r0, [pc, #580]	; (7700 <loop+0x56c>)
    74ba:	f7f9 fc57 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    74be:	69a1      	ldr	r1, [r4, #24]
    74c0:	f006 f9aa 	bl	d818 <__aeabi_fcmplt>
    74c4:	2800      	cmp	r0, #0
    74c6:	f000 8383 	beq.w	7bd0 <loop+0xa3c>
          if (digitalRead(OUT1) == 1) {
    74ca:	200b      	movs	r0, #11
    74cc:	f003 fad4 	bl	aa78 <digitalRead>
    74d0:	2801      	cmp	r0, #1
    74d2:	f000 82f9 	beq.w	7ac8 <loop+0x934>
        if (SOCset == 1) {
    74d6:	4b8d      	ldr	r3, [pc, #564]	; (770c <loop+0x578>)
    74d8:	681b      	ldr	r3, [r3, #0]
    74da:	2b01      	cmp	r3, #1
    74dc:	f47f af20 	bne.w	7320 <loop+0x18c>
          if (settings.tripcont == 0) {
    74e0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    74e4:	4886      	ldr	r0, [pc, #536]	; (7700 <loop+0x56c>)
          if (settings.tripcont == 0) {
    74e6:	2b00      	cmp	r3, #0
    74e8:	f040 8398 	bne.w	7c1c <loop+0xa88>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    74ec:	f7f9 fc3e 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    74f0:	6921      	ldr	r1, [r4, #16]
    74f2:	f006 f991 	bl	d818 <__aeabi_fcmplt>
    74f6:	b940      	cbnz	r0, 750a <loop+0x376>
    74f8:	4881      	ldr	r0, [pc, #516]	; (7700 <loop+0x56c>)
    74fa:	f7f9 fc6b 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    74fe:	68e1      	ldr	r1, [r4, #12]
    7500:	f006 f9a8 	bl	d854 <__aeabi_fcmpgt>
    7504:	2800      	cmp	r0, #0
    7506:	f000 83e7 	beq.w	7cd8 <loop+0xb44>
              digitalWrite(OUT2, HIGH);  //trip breaker
    750a:	2101      	movs	r1, #1
    750c:	200c      	movs	r0, #12
    750e:	f003 fa8d 	bl	aa2c <digitalWrite>
              bmsstatus = Error;
    7512:	2305      	movs	r3, #5
    7514:	703b      	strb	r3, [r7, #0]
    7516:	e703      	b.n	7320 <loop+0x18c>
      if (SOCset != 0) {
    7518:	2b00      	cmp	r3, #0
    751a:	f43f ae9a 	beq.w	7252 <loop+0xbe>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    751e:	4878      	ldr	r0, [pc, #480]	; (7700 <loop+0x56c>)
    7520:	f7f9 fc24 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    7524:	6921      	ldr	r1, [r4, #16]
    7526:	f006 f977 	bl	d818 <__aeabi_fcmplt>
    752a:	2800      	cmp	r0, #0
    752c:	f040 81f0 	bne.w	7910 <loop+0x77c>
    7530:	4873      	ldr	r0, [pc, #460]	; (7700 <loop+0x56c>)
    7532:	f7f9 fc4f 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7536:	6921      	ldr	r1, [r4, #16]
    7538:	f006 f96e 	bl	d818 <__aeabi_fcmplt>
    753c:	2800      	cmp	r0, #0
    753e:	f040 81e7 	bne.w	7910 <loop+0x77c>
          ErrorReason = ErrorReason & ~0x01;
    7542:	4b73      	ldr	r3, [pc, #460]	; (7710 <loop+0x57c>)
    7544:	881a      	ldrh	r2, [r3, #0]
    7546:	f022 0201 	bic.w	r2, r2, #1
    754a:	801a      	strh	r2, [r3, #0]
    754c:	e681      	b.n	7252 <loop+0xbe>
      if (cellspresent == 0) {
    754e:	4e71      	ldr	r6, [pc, #452]	; (7714 <loop+0x580>)
        cellspresent = bms.seriescells();
    7550:	486b      	ldr	r0, [pc, #428]	; (7700 <loop+0x56c>)
      if (cellspresent == 0) {
    7552:	6833      	ldr	r3, [r6, #0]
    7554:	bb63      	cbnz	r3, 75b0 <loop+0x41c>
        cellspresent = bms.seriescells();
    7556:	f7f9 fbb9 	bl	ccc <BMSModuleManager::seriescells()>
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    755a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
        cellspresent = bms.seriescells();
    755e:	6030      	str	r0, [r6, #0]
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    7560:	9300      	str	r3, [sp, #0]
    7562:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    7566:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7568:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    756c:	4864      	ldr	r0, [pc, #400]	; (7700 <loop+0x56c>)
    756e:	f7f9 fdd1 	bl	1114 <BMSModuleManager::setSensors(int, float, float, int)>
    if (SOCset == 1) {
    7572:	683b      	ldr	r3, [r7, #0]
    7574:	2b01      	cmp	r3, #1
    7576:	f47f ae8e 	bne.w	7296 <loop+0x102>
      alarmupdate();
    757a:	f7fa fbc5 	bl	1d08 <alarmupdate()>
    757e:	e68a      	b.n	7296 <loop+0x102>
      inputdebug();
    7580:	f7fe ffbc 	bl	64fc <inputdebug()>
    7584:	e678      	b.n	7278 <loop+0xe4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7586:	682b      	ldr	r3, [r5, #0]
    7588:	9313      	str	r3, [sp, #76]	; 0x4c
      bms.printAllCSV(millis(), currentact, SOC);
    758a:	4a63      	ldr	r2, [pc, #396]	; (7718 <loop+0x584>)
    758c:	4b63      	ldr	r3, [pc, #396]	; (771c <loop+0x588>)
	return ret;
    758e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7590:	681b      	ldr	r3, [r3, #0]
    7592:	6812      	ldr	r2, [r2, #0]
    7594:	485a      	ldr	r0, [pc, #360]	; (7700 <loop+0x56c>)
    7596:	f7fa f819 	bl	15cc <BMSModuleManager::printAllCSV(unsigned long, float, int)>
    759a:	e668      	b.n	726e <loop+0xda>
      printbmsstat();
    759c:	f7fa fd58 	bl	2050 <printbmsstat()>
      bms.printPackDetails(debugdigits, showbal);
    75a0:	4b5f      	ldr	r3, [pc, #380]	; (7720 <loop+0x58c>)
    75a2:	4857      	ldr	r0, [pc, #348]	; (7700 <loop+0x56c>)
    75a4:	781a      	ldrb	r2, [r3, #0]
    75a6:	4b5f      	ldr	r3, [pc, #380]	; (7724 <loop+0x590>)
    75a8:	6819      	ldr	r1, [r3, #0]
    75aa:	f7f9 fe9d 	bl	12e8 <BMSModuleManager::printPackDetails(int, bool)>
    75ae:	e657      	b.n	7260 <loop+0xcc>
        if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    75b0:	f7f9 fb8c 	bl	ccc <BMSModuleManager::seriescells()>
    75b4:	6833      	ldr	r3, [r6, #0]
    75b6:	4298      	cmp	r0, r3
    75b8:	f000 8176 	beq.w	78a8 <loop+0x714>
          if (debug != 0) {
    75bc:	f8d9 3000 	ldr.w	r3, [r9]
    75c0:	2b00      	cmp	r3, #0
    75c2:	d0d6      	beq.n	7572 <loop+0x3de>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    75c4:	2102      	movs	r1, #2
    75c6:	4858      	ldr	r0, [pc, #352]	; (7728 <loop+0x594>)
    75c8:	f005 f8a2 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    75cc:	4857      	ldr	r0, [pc, #348]	; (772c <loop+0x598>)
    75ce:	f002 fbd1 	bl	9d74 <Print::println()>
    75d2:	211d      	movs	r1, #29
    75d4:	4856      	ldr	r0, [pc, #344]	; (7730 <loop+0x59c>)
    75d6:	f005 f89b 	bl	c710 <usb_serial_write>
    75da:	2102      	movs	r1, #2
    75dc:	4852      	ldr	r0, [pc, #328]	; (7728 <loop+0x594>)
    75de:	f005 f897 	bl	c710 <usb_serial_write>
    75e2:	4852      	ldr	r0, [pc, #328]	; (772c <loop+0x598>)
    75e4:	f002 fbc6 	bl	9d74 <Print::println()>
            ErrorReason = ErrorReason | 0x04;
    75e8:	4b49      	ldr	r3, [pc, #292]	; (7710 <loop+0x57c>)
            bmsstatus = Error;
    75ea:	4941      	ldr	r1, [pc, #260]	; (76f0 <loop+0x55c>)
            ErrorReason = ErrorReason | 0x04;
    75ec:	881a      	ldrh	r2, [r3, #0]
    75ee:	f042 0204 	orr.w	r2, r2, #4
    75f2:	801a      	strh	r2, [r3, #0]
            bmsstatus = Error;
    75f4:	2305      	movs	r3, #5
    75f6:	700b      	strb	r3, [r1, #0]
            ErrorReason = ErrorReason | 0x04;
    75f8:	e7bb      	b.n	7572 <loop+0x3de>
          Discharge = 0;
    75fa:	4b4e      	ldr	r3, [pc, #312]	; (7734 <loop+0x5a0>)
    75fc:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    75fe:	4629      	mov	r1, r5
    7600:	2015      	movs	r0, #21
          Discharge = 0;
    7602:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    7604:	f003 fa12 	bl	aa2c <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    7608:	4629      	mov	r1, r5
    760a:	2014      	movs	r0, #20
    760c:	f003 fa0e 	bl	aa2c <digitalWrite>
          digitalWrite(OUT2, LOW);
    7610:	4629      	mov	r1, r5
    7612:	200c      	movs	r0, #12
    7614:	f003 fa0a 	bl	aa2c <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    7618:	4629      	mov	r1, r5
    761a:	200b      	movs	r0, #11
    761c:	f003 fa06 	bl	aa2c <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    7620:	4b34      	ldr	r3, [pc, #208]	; (76f4 <loop+0x560>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    7622:	4837      	ldr	r0, [pc, #220]	; (7700 <loop+0x56c>)
          contctrl = 0;             //turn off out 5 and 6
    7624:	601d      	str	r5, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    7626:	f7f9 fbd5 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    762a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    762c:	f006 f912 	bl	d854 <__aeabi_fcmpgt>
    7630:	2800      	cmp	r0, #0
    7632:	f040 81d0 	bne.w	79d6 <loop+0x842>
    7636:	4b33      	ldr	r3, [pc, #204]	; (7704 <loop+0x570>)
    7638:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    763a:	2012      	movs	r0, #18
    763c:	f003 fa1c 	bl	aa78 <digitalRead>
    7640:	2801      	cmp	r0, #1
    7642:	f000 8229 	beq.w	7a98 <loop+0x904>
    7646:	4d2c      	ldr	r5, [pc, #176]	; (76f8 <loop+0x564>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint)  //detect Key ON
    7648:	2011      	movs	r0, #17
    764a:	f003 fa15 	bl	aa78 <digitalRead>
    764e:	2801      	cmp	r0, #1
    7650:	f47f ae66 	bne.w	7320 <loop+0x18c>
    7654:	482a      	ldr	r0, [pc, #168]	; (7700 <loop+0x56c>)
    7656:	f7f9 fb89 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    765a:	69a1      	ldr	r1, [r4, #24]
    765c:	f006 f8fa 	bl	d854 <__aeabi_fcmpgt>
    7660:	2800      	cmp	r0, #0
    7662:	f43f ae5d 	beq.w	7320 <loop+0x18c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7666:	682a      	ldr	r2, [r5, #0]
    7668:	920c      	str	r2, [sp, #48]	; 0x30
            bmsstatus = Precharge;
    766a:	2304      	movs	r3, #4
    766c:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    766e:	4b32      	ldr	r3, [pc, #200]	; (7738 <loop+0x5a4>)
	return ret;
    7670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7672:	601a      	str	r2, [r3, #0]
    7674:	e654      	b.n	7320 <loop+0x18c>
          Discharge = 0;
    7676:	4b2f      	ldr	r3, [pc, #188]	; (7734 <loop+0x5a0>)
    7678:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    767a:	4629      	mov	r1, r5
    767c:	2015      	movs	r0, #21
          Discharge = 0;
    767e:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    7680:	f003 f9d4 	bl	aa2c <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    7684:	4629      	mov	r1, r5
    7686:	2014      	movs	r0, #20
    7688:	f003 f9d0 	bl	aa2c <digitalWrite>
          digitalWrite(OUT2, LOW);
    768c:	4629      	mov	r1, r5
    768e:	200c      	movs	r0, #12
    7690:	f003 f9cc 	bl	aa2c <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    7694:	4629      	mov	r1, r5
    7696:	200b      	movs	r0, #11
    7698:	f003 f9c8 	bl	aa2c <digitalWrite>
          contctrl = 0;
    769c:	4b15      	ldr	r3, [pc, #84]	; (76f4 <loop+0x560>)
    769e:	601d      	str	r5, [r3, #0]
          bmsstatus = Ready;
    76a0:	2301      	movs	r3, #1
    76a2:	4d15      	ldr	r5, [pc, #84]	; (76f8 <loop+0x564>)
    76a4:	703b      	strb	r3, [r7, #0]
          break;
    76a6:	e63b      	b.n	7320 <loop+0x18c>
          Discharge = 1;
    76a8:	4b22      	ldr	r3, [pc, #136]	; (7734 <loop+0x5a0>)
    76aa:	2501      	movs	r5, #1
          if (digitalRead(IN1) == LOW)  //Key OFF
    76ac:	2011      	movs	r0, #17
          Discharge = 1;
    76ae:	601d      	str	r5, [r3, #0]
          if (digitalRead(IN1) == LOW)  //Key OFF
    76b0:	f003 f9e2 	bl	aa78 <digitalRead>
    76b4:	b900      	cbnz	r0, 76b8 <loop+0x524>
            bmsstatus = Ready;
    76b6:	703d      	strb	r5, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    76b8:	2012      	movs	r0, #18
    76ba:	f003 f9dd 	bl	aa78 <digitalRead>
    76be:	2801      	cmp	r0, #1
    76c0:	f47f ae2d 	bne.w	731e <loop+0x18a>
    76c4:	480e      	ldr	r0, [pc, #56]	; (7700 <loop+0x56c>)
    76c6:	f7f9 fb85 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    76ca:	69e1      	ldr	r1, [r4, #28]
    76cc:	4605      	mov	r5, r0
    76ce:	6960      	ldr	r0, [r4, #20]
    76d0:	f005 fdfa 	bl	d2c8 <__aeabi_fsub>
    76d4:	4601      	mov	r1, r0
    76d6:	4628      	mov	r0, r5
    76d8:	f006 f89e 	bl	d818 <__aeabi_fcmplt>
    76dc:	2800      	cmp	r0, #0
    76de:	f43f ae1e 	beq.w	731e <loop+0x18a>
            bmsstatus = Charge;
    76e2:	2303      	movs	r3, #3
    76e4:	4d04      	ldr	r5, [pc, #16]	; (76f8 <loop+0x564>)
    76e6:	703b      	strb	r3, [r7, #0]
    76e8:	e61a      	b.n	7320 <loop+0x18c>
    76ea:	bf00      	nop
    76ec:	1fff8fd2 	.word	0x1fff8fd2
    76f0:	1fffbe2c 	.word	0x1fffbe2c
    76f4:	1fffbea8 	.word	0x1fffbea8
    76f8:	1fffc3b4 	.word	0x1fffc3b4
    76fc:	1fffc198 	.word	0x1fffc198
    7700:	1fff900c 	.word	0x1fff900c
    7704:	1fff9008 	.word	0x1fff9008
    7708:	1fffc0ac 	.word	0x1fffc0ac
    770c:	1fff8fec 	.word	0x1fff8fec
    7710:	1fff8fd0 	.word	0x1fff8fd0
    7714:	1fffbe34 	.word	0x1fffbe34
    7718:	1fffbec0 	.word	0x1fffbec0
    771c:	1fff8728 	.word	0x1fff8728
    7720:	1fffc194 	.word	0x1fffc194
    7724:	1fff874c 	.word	0x1fff874c
    7728:	000155bc 	.word	0x000155bc
    772c:	1fff8824 	.word	0x1fff8824
    7730:	000157b0 	.word	0x000157b0
    7734:	1fff8fcc 	.word	0x1fff8fcc
    7738:	1fff8fd8 	.word	0x1fff8fd8
          Discharge = 0;
    773c:	4baf      	ldr	r3, [pc, #700]	; (79fc <loop+0x868>)
    773e:	4db0      	ldr	r5, [pc, #704]	; (7a00 <loop+0x86c>)
    7740:	2200      	movs	r2, #0
          digitalWrite(OUT3, HIGH);  //enable charger
    7742:	2101      	movs	r1, #1
    7744:	2014      	movs	r0, #20
          Discharge = 0;
    7746:	601a      	str	r2, [r3, #0]
          digitalWrite(OUT3, HIGH);  //enable charger
    7748:	f003 f970 	bl	aa2c <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage) {
    774c:	48ad      	ldr	r0, [pc, #692]	; (7a04 <loop+0x870>)
    774e:	f7f9 fb41 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7752:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    7754:	f006 f87e 	bl	d854 <__aeabi_fcmpgt>
    7758:	3800      	subs	r0, #0
    775a:	bf18      	it	ne
    775c:	2001      	movne	r0, #1
    775e:	6028      	str	r0, [r5, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint) {
    7760:	48a8      	ldr	r0, [pc, #672]	; (7a04 <loop+0x870>)
    7762:	f7f9 fb37 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7766:	6961      	ldr	r1, [r4, #20]
    7768:	f006 f874 	bl	d854 <__aeabi_fcmpgt>
    776c:	2800      	cmp	r0, #0
    776e:	f040 810a 	bne.w	7986 <loop+0x7f2>
          if (digitalRead(IN3) == LOW)  //detect AC not present for charging
    7772:	2012      	movs	r0, #18
    7774:	f003 f980 	bl	aa78 <digitalRead>
    7778:	2800      	cmp	r0, #0
    777a:	d091      	beq.n	76a0 <loop+0x50c>
    777c:	e5cf      	b.n	731e <loop+0x18a>
          Discharge = 0;
    777e:	4b9f      	ldr	r3, [pc, #636]	; (79fc <loop+0x868>)
    7780:	4da1      	ldr	r5, [pc, #644]	; (7a08 <loop+0x874>)
    7782:	2200      	movs	r2, #0
    7784:	601a      	str	r2, [r3, #0]
          Prechargecon();
    7786:	f7fb fc53 	bl	3030 <Prechargecon()>
          break;
    778a:	e5c9      	b.n	7320 <loop+0x18c>
          Discharge = 0;
    778c:	4b9b      	ldr	r3, [pc, #620]	; (79fc <loop+0x868>)
    778e:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    7790:	4629      	mov	r1, r5
    7792:	2015      	movs	r0, #21
          Discharge = 0;
    7794:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    7796:	f003 f949 	bl	aa2c <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    779a:	4629      	mov	r1, r5
    779c:	2014      	movs	r0, #20
    779e:	f003 f945 	bl	aa2c <digitalWrite>
          digitalWrite(OUT2, LOW);
    77a2:	4629      	mov	r1, r5
    77a4:	200c      	movs	r0, #12
    77a6:	f003 f941 	bl	aa2c <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    77aa:	4629      	mov	r1, r5
    77ac:	200b      	movs	r0, #11
    77ae:	f003 f93d 	bl	aa2c <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    77b2:	4b96      	ldr	r3, [pc, #600]	; (7a0c <loop+0x878>)
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    77b4:	4893      	ldr	r0, [pc, #588]	; (7a04 <loop+0x870>)
          contctrl = 0;             //turn off out 5 and 6
    77b6:	601d      	str	r5, [r3, #0]
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    77b8:	f7f9 fad8 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    77bc:	6921      	ldr	r1, [r4, #16]
    77be:	f006 f83f 	bl	d840 <__aeabi_fcmpge>
    77c2:	2800      	cmp	r0, #0
    77c4:	f43f adab 	beq.w	731e <loop+0x18a>
    77c8:	488e      	ldr	r0, [pc, #568]	; (7a04 <loop+0x870>)
    77ca:	f7f9 fb03 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    77ce:	68e1      	ldr	r1, [r4, #12]
    77d0:	f006 f82c 	bl	d82c <__aeabi_fcmple>
    77d4:	2800      	cmp	r0, #0
    77d6:	f43f ada2 	beq.w	731e <loop+0x18a>
    77da:	2011      	movs	r0, #17
    77dc:	f003 f94c 	bl	aa78 <digitalRead>
    77e0:	2800      	cmp	r0, #0
    77e2:	f43f af5d 	beq.w	76a0 <loop+0x50c>
    77e6:	e59a      	b.n	731e <loop+0x18a>
          if (settings.tripcont == 0) {
    77e8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
            digitalWrite(OUT2, HIGH);  //trip breaker
    77ec:	200c      	movs	r0, #12
          if (settings.tripcont == 0) {
    77ee:	b123      	cbz	r3, 77fa <loop+0x666>
            digitalWrite(OUT2, LOW);  //turn off contactor
    77f0:	4629      	mov	r1, r5
    77f2:	f003 f91b 	bl	aa2c <digitalWrite>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    77f6:	4629      	mov	r1, r5
    77f8:	2015      	movs	r0, #21
    77fa:	f003 f917 	bl	aa2c <digitalWrite>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint && bms.getHighTemperature() < settings.OverTSetpoint && cellspresent == bms.seriescells() && cellspresent == (settings.Scells * settings.Pstrings)) {
    77fe:	4881      	ldr	r0, [pc, #516]	; (7a04 <loop+0x870>)
    7800:	f7f9 fab4 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    7804:	6921      	ldr	r1, [r4, #16]
    7806:	f006 f825 	bl	d854 <__aeabi_fcmpgt>
    780a:	2800      	cmp	r0, #0
    780c:	f43f ad87 	beq.w	731e <loop+0x18a>
    7810:	487c      	ldr	r0, [pc, #496]	; (7a04 <loop+0x870>)
    7812:	f7f9 fadf 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7816:	68e1      	ldr	r1, [r4, #12]
    7818:	f005 fffe 	bl	d818 <__aeabi_fcmplt>
    781c:	2800      	cmp	r0, #0
    781e:	f43f ad7e 	beq.w	731e <loop+0x18a>
    7822:	4878      	ldr	r0, [pc, #480]	; (7a04 <loop+0x870>)
    7824:	f7f9 fd2c 	bl	1280 <BMSModuleManager::getHighTemperature()>
    7828:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    782a:	f005 fff5 	bl	d818 <__aeabi_fcmplt>
    782e:	2800      	cmp	r0, #0
    7830:	f43f ad75 	beq.w	731e <loop+0x18a>
    7834:	4873      	ldr	r0, [pc, #460]	; (7a04 <loop+0x870>)
    7836:	f7f9 fa49 	bl	ccc <BMSModuleManager::seriescells()>
    783a:	4a75      	ldr	r2, [pc, #468]	; (7a10 <loop+0x87c>)
    783c:	6812      	ldr	r2, [r2, #0]
    783e:	4290      	cmp	r0, r2
    7840:	f47f ad6d 	bne.w	731e <loop+0x18a>
    7844:	6d62      	ldr	r2, [r4, #84]	; 0x54
    7846:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7848:	fb01 f202 	mul.w	r2, r1, r2
    784c:	4290      	cmp	r0, r2
    784e:	f47f ad66 	bne.w	731e <loop+0x18a>
            if (ErrorReason == 0) {
    7852:	4b70      	ldr	r3, [pc, #448]	; (7a14 <loop+0x880>)
    7854:	881b      	ldrh	r3, [r3, #0]
    7856:	2b00      	cmp	r3, #0
    7858:	f47f ad61 	bne.w	731e <loop+0x18a>
    785c:	4f6e      	ldr	r7, [pc, #440]	; (7a18 <loop+0x884>)
              bmsstatus = Ready;
    785e:	e71f      	b.n	76a0 <loop+0x50c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7860:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    7862:	9912      	ldr	r1, [sp, #72]	; 0x48
          ErrorReason = ErrorReason & ~0x02;
    7864:	4b6b      	ldr	r3, [pc, #428]	; (7a14 <loop+0x880>)
          OverTime = millis() + settings.triptime;
    7866:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
    786a:	440a      	add	r2, r1
          ErrorReason = ErrorReason & ~0x02;
    786c:	8819      	ldrh	r1, [r3, #0]
    786e:	f021 0102 	bic.w	r1, r1, #2
    7872:	8019      	strh	r1, [r3, #0]
          OverTime = millis() + settings.triptime;
    7874:	4b69      	ldr	r3, [pc, #420]	; (7a1c <loop+0x888>)
    7876:	601a      	str	r2, [r3, #0]
          ErrorReason = ErrorReason & ~0x02;
    7878:	e4eb      	b.n	7252 <loop+0xbe>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    787a:	4862      	ldr	r0, [pc, #392]	; (7a04 <loop+0x870>)
    787c:	f7f9 faaa 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7880:	6921      	ldr	r1, [r4, #16]
    7882:	f005 ffc9 	bl	d818 <__aeabi_fcmplt>
    7886:	2800      	cmp	r0, #0
    7888:	f47f ad6b 	bne.w	7362 <loop+0x1ce>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    788c:	682b      	ldr	r3, [r5, #0]
    788e:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    7890:	9910      	ldr	r1, [sp, #64]	; 0x40
          ErrorReason = ErrorReason & ~0x01;
    7892:	4b60      	ldr	r3, [pc, #384]	; (7a14 <loop+0x880>)
          UnderTime = millis() + settings.triptime;
    7894:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
    7898:	440a      	add	r2, r1
          ErrorReason = ErrorReason & ~0x01;
    789a:	8819      	ldrh	r1, [r3, #0]
    789c:	f021 0101 	bic.w	r1, r1, #1
    78a0:	8019      	strh	r1, [r3, #0]
          UnderTime = millis() + settings.triptime;
    78a2:	4b5f      	ldr	r3, [pc, #380]	; (7a20 <loop+0x88c>)
    78a4:	601a      	str	r2, [r3, #0]
          ErrorReason = ErrorReason & ~0x01;
    78a6:	e56b      	b.n	7380 <loop+0x1ec>
        if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    78a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    78aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
    78ac:	fb02 f303 	mul.w	r3, r2, r3
    78b0:	4298      	cmp	r0, r3
    78b2:	f47f ae83 	bne.w	75bc <loop+0x428>
          ErrorReason = ErrorReason & ~0x04;
    78b6:	4b57      	ldr	r3, [pc, #348]	; (7a14 <loop+0x880>)
    78b8:	881a      	ldrh	r2, [r3, #0]
    78ba:	f022 0204 	bic.w	r2, r2, #4
    78be:	801a      	strh	r2, [r3, #0]
    78c0:	e657      	b.n	7572 <loop+0x3de>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    78c2:	4850      	ldr	r0, [pc, #320]	; (7a04 <loop+0x870>)
    78c4:	f7f9 fa52 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    78c8:	6921      	ldr	r1, [r4, #16]
    78ca:	f005 ffc3 	bl	d854 <__aeabi_fcmpgt>
    78ce:	b140      	cbz	r0, 78e2 <loop+0x74e>
    78d0:	484c      	ldr	r0, [pc, #304]	; (7a04 <loop+0x870>)
    78d2:	f7f9 fa7f 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    78d6:	68e1      	ldr	r1, [r4, #12]
    78d8:	f005 ff9e 	bl	d818 <__aeabi_fcmplt>
    78dc:	2800      	cmp	r0, #0
    78de:	f040 81d9 	bne.w	7c94 <loop+0xb00>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    78e2:	2100      	movs	r1, #0
    78e4:	2015      	movs	r0, #21
    78e6:	f003 f8a1 	bl	aa2c <digitalWrite>
            mainconttimer = 0;
    78ea:	4b4e      	ldr	r3, [pc, #312]	; (7a24 <loop+0x890>)
    78ec:	2200      	movs	r2, #0
    78ee:	601a      	str	r2, [r3, #0]
    78f0:	e5a7      	b.n	7442 <loop+0x2ae>
        if (bms.checkcomms()) {
    78f2:	4844      	ldr	r0, [pc, #272]	; (7a04 <loop+0x870>)
    78f4:	f7f9 f9cc 	bl	c90 <BMSModuleManager::checkcomms()>
    78f8:	2800      	cmp	r0, #0
    78fa:	d039      	beq.n	7970 <loop+0x7dc>
          ErrorReason = ErrorReason & ~0x08;
    78fc:	4b45      	ldr	r3, [pc, #276]	; (7a14 <loop+0x880>)
    78fe:	881a      	ldrh	r2, [r3, #0]
    7900:	f022 0208 	bic.w	r2, r2, #8
    7904:	b292      	uxth	r2, r2
        bms.clearmodules();
    7906:	483f      	ldr	r0, [pc, #252]	; (7a04 <loop+0x870>)
          ErrorReason = ErrorReason & ~0x08;
    7908:	801a      	strh	r2, [r3, #0]
        bms.clearmodules();
    790a:	f7f9 f9a3 	bl	c54 <BMSModuleManager::clearmodules()>
    790e:	e4d6      	b.n	72be <loop+0x12a>
    7910:	2102      	movs	r1, #2
    7912:	4845      	ldr	r0, [pc, #276]	; (7a28 <loop+0x894>)
    7914:	f004 fefc 	bl	c710 <usb_serial_write>
    7918:	4844      	ldr	r0, [pc, #272]	; (7a2c <loop+0x898>)
    791a:	f002 fa2b 	bl	9d74 <Print::println()>
    791e:	211e      	movs	r1, #30
    7920:	4843      	ldr	r0, [pc, #268]	; (7a30 <loop+0x89c>)
    7922:	f004 fef5 	bl	c710 <usb_serial_write>
          SERIALCONSOLE.print(bms.getLowCellVolt());
    7926:	4837      	ldr	r0, [pc, #220]	; (7a04 <loop+0x870>)
    7928:	f7f9 fa20 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    792c:	f005 fbb2 	bl	d094 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    7930:	f04f 0802 	mov.w	r8, #2
    7934:	4602      	mov	r2, r0
    7936:	460b      	mov	r3, r1
    7938:	483c      	ldr	r0, [pc, #240]	; (7a2c <loop+0x898>)
    793a:	f8cd 8000 	str.w	r8, [sp]
    793e:	f002 fa3b 	bl	9db8 <Print::printFloat(double, unsigned char)>
    7942:	4641      	mov	r1, r8
    7944:	4838      	ldr	r0, [pc, #224]	; (7a28 <loop+0x894>)
    7946:	f004 fee3 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    794a:	4838      	ldr	r0, [pc, #224]	; (7a2c <loop+0x898>)
    794c:	f002 fa12 	bl	9d74 <Print::println()>
          bmsstatus = Error;
    7950:	4a31      	ldr	r2, [pc, #196]	; (7a18 <loop+0x884>)
          ErrorReason = ErrorReason & 0x01;
    7952:	4b30      	ldr	r3, [pc, #192]	; (7a14 <loop+0x880>)
          bmsstatus = Error;
    7954:	2105      	movs	r1, #5
    7956:	7011      	strb	r1, [r2, #0]
          ErrorReason = ErrorReason & 0x01;
    7958:	881a      	ldrh	r2, [r3, #0]
    795a:	f002 0201 	and.w	r2, r2, #1
    795e:	801a      	strh	r2, [r3, #0]
    7960:	e477      	b.n	7252 <loop+0xbe>
          if (storagemode == 0) {
    7962:	2b00      	cmp	r3, #0
    7964:	f47f ad7c 	bne.w	7460 <loop+0x2cc>
            storagemode = 1;
    7968:	2301      	movs	r3, #1
    796a:	f8c9 3000 	str.w	r3, [r9]
    796e:	e577      	b.n	7460 <loop+0x2cc>
          if (debug != 0) {
    7970:	f8d9 3000 	ldr.w	r3, [r9]
    7974:	2b00      	cmp	r3, #0
    7976:	f040 8171 	bne.w	7c5c <loop+0xac8>
          bmsstatus = Error;
    797a:	4b27      	ldr	r3, [pc, #156]	; (7a18 <loop+0x884>)
    797c:	2205      	movs	r2, #5
    797e:	701a      	strb	r2, [r3, #0]
          ErrorReason = ErrorReason | 0x08;
    7980:	4b24      	ldr	r3, [pc, #144]	; (7a14 <loop+0x880>)
          bmsstatus = Error;
    7982:	220a      	movs	r2, #10
    7984:	e7bf      	b.n	7906 <loop+0x772>
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    7986:	481f      	ldr	r0, [pc, #124]	; (7a04 <loop+0x870>)
    7988:	f7f9 fc84 	bl	1294 <BMSModuleManager::getAvgCellVolt()>
    798c:	69e1      	ldr	r1, [r4, #28]
    798e:	4605      	mov	r5, r0
    7990:	6960      	ldr	r0, [r4, #20]
    7992:	f005 fc99 	bl	d2c8 <__aeabi_fsub>
    7996:	4601      	mov	r1, r0
    7998:	4628      	mov	r0, r5
    799a:	f005 ff5b 	bl	d854 <__aeabi_fcmpgt>
    SOC = 100;
    799e:	4b25      	ldr	r3, [pc, #148]	; (7a34 <loop+0x8a0>)
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    79a0:	2800      	cmp	r0, #0
    79a2:	f000 80ab 	beq.w	7afc <loop+0x968>
    SOC = 100;
    79a6:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    79a8:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    79aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
    79ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    79ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    79b2:	fb02 f303 	mul.w	r3, r2, r3
    79b6:	fb03 f000 	mul.w	r0, r3, r0
    79ba:	f005 fd3b 	bl	d434 <__aeabi_i2f>
    79be:	491e      	ldr	r1, [pc, #120]	; (7a38 <loop+0x8a4>)
    79c0:	f005 fe40 	bl	d644 <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    79c4:	4a1d      	ldr	r2, [pc, #116]	; (7a3c <loop+0x8a8>)
            digitalWrite(OUT3, LOW);  //turn off charger
    79c6:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    79c8:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);  //turn off charger
    79ca:	2014      	movs	r0, #20
    79cc:	f003 f82e 	bl	aa2c <digitalWrite>
            bmsstatus = Ready;
    79d0:	2301      	movs	r3, #1
    79d2:	703b      	strb	r3, [r7, #0]
    79d4:	e6cd      	b.n	7772 <loop+0x5de>
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    79d6:	480b      	ldr	r0, [pc, #44]	; (7a04 <loop+0x870>)
    79d8:	f7f9 f9fc 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    79dc:	4605      	mov	r5, r0
    79de:	4809      	ldr	r0, [pc, #36]	; (7a04 <loop+0x870>)
    79e0:	f7f9 f9c4 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    79e4:	6d21      	ldr	r1, [r4, #80]	; 0x50
    79e6:	f005 fc71 	bl	d2cc <__addsf3>
    79ea:	4601      	mov	r1, r0
    79ec:	4628      	mov	r0, r5
    79ee:	f005 ff31 	bl	d854 <__aeabi_fcmpgt>
    79f2:	3800      	subs	r0, #0
    79f4:	bf18      	it	ne
    79f6:	2001      	movne	r0, #1
    79f8:	e61d      	b.n	7636 <loop+0x4a2>
    79fa:	bf00      	nop
    79fc:	1fff8fcc 	.word	0x1fff8fcc
    7a00:	1fff9008 	.word	0x1fff9008
    7a04:	1fff900c 	.word	0x1fff900c
    7a08:	1fffc3b4 	.word	0x1fffc3b4
    7a0c:	1fffbea8 	.word	0x1fffbea8
    7a10:	1fffbe34 	.word	0x1fffbe34
    7a14:	1fff8fd0 	.word	0x1fff8fd0
    7a18:	1fffbe2c 	.word	0x1fffbe2c
    7a1c:	1fff8fd4 	.word	0x1fff8fd4
    7a20:	1fff8ff8 	.word	0x1fff8ff8
    7a24:	1fffbf28 	.word	0x1fffbf28
    7a28:	000155bc 	.word	0x000155bc
    7a2c:	1fff8824 	.word	0x1fff8824
    7a30:	00015790 	.word	0x00015790
    7a34:	1fff8728 	.word	0x1fff8728
    7a38:	3e8e38e4 	.word	0x3e8e38e4
    7a3c:	1fff9004 	.word	0x1fff9004
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    7a40:	f7f9 f9c8 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7a44:	6a21      	ldr	r1, [r4, #32]
    7a46:	f005 ff05 	bl	d854 <__aeabi_fcmpgt>
    7a4a:	4682      	mov	sl, r0
    7a4c:	2800      	cmp	r0, #0
    7a4e:	f040 8081 	bne.w	7b54 <loop+0x9c0>
    7a52:	4bba      	ldr	r3, [pc, #744]	; (7d3c <loop+0xba8>)
    7a54:	f9b3 3000 	ldrsh.w	r3, [r3]
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d07b      	beq.n	7b54 <loop+0x9c0>
            if (Charged == 1) {
    7a5c:	4bb8      	ldr	r3, [pc, #736]	; (7d40 <loop+0xbac>)
    7a5e:	f8d3 b000 	ldr.w	fp, [r3]
    7a62:	f1bb 0f01 	cmp.w	fp, #1
    7a66:	f000 8150 	beq.w	7d0a <loop+0xb76>
                digitalWrite(OUT3, HIGH);  //turn on charger
    7a6a:	2101      	movs	r1, #1
    7a6c:	2014      	movs	r0, #20
    7a6e:	f002 ffdd 	bl	aa2c <digitalWrite>
    7a72:	e51a      	b.n	74aa <loop+0x316>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    7a74:	48b3      	ldr	r0, [pc, #716]	; (7d44 <loop+0xbb0>)
    7a76:	f7f9 f9ad 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7a7a:	4682      	mov	sl, r0
    7a7c:	48b1      	ldr	r0, [pc, #708]	; (7d44 <loop+0xbb0>)
    7a7e:	f7f9 f975 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    7a82:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7a84:	f005 fc22 	bl	d2cc <__addsf3>
    7a88:	4601      	mov	r1, r0
    7a8a:	4650      	mov	r0, sl
    7a8c:	f005 fee2 	bl	d854 <__aeabi_fcmpgt>
    7a90:	3800      	subs	r0, #0
    7a92:	bf18      	it	ne
    7a94:	2001      	movne	r0, #1
    7a96:	e4ec      	b.n	7472 <loop+0x2de>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    7a98:	48aa      	ldr	r0, [pc, #680]	; (7d44 <loop+0xbb0>)
    7a9a:	f7f9 f99b 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7a9e:	69e1      	ldr	r1, [r4, #28]
    7aa0:	4605      	mov	r5, r0
    7aa2:	6960      	ldr	r0, [r4, #20]
    7aa4:	f005 fc10 	bl	d2c8 <__aeabi_fsub>
    7aa8:	4601      	mov	r1, r0
    7aaa:	4628      	mov	r0, r5
    7aac:	f005 feb4 	bl	d818 <__aeabi_fcmplt>
    7ab0:	2800      	cmp	r0, #0
    7ab2:	f43f adc8 	beq.w	7646 <loop+0x4b2>
            if (settings.ChargerDirect == 1) {
    7ab6:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    7aba:	2b00      	cmp	r3, #0
    7abc:	f000 80e1 	beq.w	7c82 <loop+0xaee>
              bmsstatus = Charge;
    7ac0:	2303      	movs	r3, #3
    7ac2:	4da1      	ldr	r5, [pc, #644]	; (7d48 <loop+0xbb4>)
    7ac4:	703b      	strb	r3, [r7, #0]
    7ac6:	e5bf      	b.n	7648 <loop+0x4b4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ac8:	682b      	ldr	r3, [r5, #0]
    7aca:	9309      	str	r3, [sp, #36]	; 0x24
            if ((millis() - undertriptimer) > settings.triptime) {
    7acc:	4b9f      	ldr	r3, [pc, #636]	; (7d4c <loop+0xbb8>)
    7ace:	681a      	ldr	r2, [r3, #0]
	return ret;
    7ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7ad2:	1a9b      	subs	r3, r3, r2
    7ad4:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
    7ad8:	4293      	cmp	r3, r2
    7ada:	f67f acfc 	bls.w	74d6 <loop+0x342>
              Serial.println();
    7ade:	489c      	ldr	r0, [pc, #624]	; (7d50 <loop+0xbbc>)
    7ae0:	f002 f948 	bl	9d74 <Print::println()>
    7ae4:	2112      	movs	r1, #18
    7ae6:	489b      	ldr	r0, [pc, #620]	; (7d54 <loop+0xbc0>)
    7ae8:	f004 fe12 	bl	c710 <usb_serial_write>
    7aec:	4898      	ldr	r0, [pc, #608]	; (7d50 <loop+0xbbc>)
    7aee:	f002 f941 	bl	9d74 <Print::println()>
              digitalWrite(OUT1, LOW);  //turn off discharge
    7af2:	2100      	movs	r1, #0
    7af4:	200b      	movs	r0, #11
    7af6:	f002 ff99 	bl	aa2c <digitalWrite>
    7afa:	e4ec      	b.n	74d6 <loop+0x342>
    SOC = 95;
    7afc:	225f      	movs	r2, #95	; 0x5f
    7afe:	e753      	b.n	79a8 <loop+0x814>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    7b00:	4890      	ldr	r0, [pc, #576]	; (7d44 <loop+0xbb0>)
    7b02:	f7f9 f967 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7b06:	6961      	ldr	r1, [r4, #20]
    7b08:	f005 fea4 	bl	d854 <__aeabi_fcmpgt>
    7b0c:	2800      	cmp	r0, #0
    7b0e:	f47f acc1 	bne.w	7494 <loop+0x300>
    7b12:	4b8a      	ldr	r3, [pc, #552]	; (7d3c <loop+0xba8>)
    7b14:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b18:	2b00      	cmp	r3, #0
    7b1a:	f43f acbb 	beq.w	7494 <loop+0x300>
            if (Charged == 1) {
    7b1e:	f8df b220 	ldr.w	fp, [pc, #544]	; 7d40 <loop+0xbac>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b22:	682b      	ldr	r3, [r5, #0]
    7b24:	f8db a000 	ldr.w	sl, [fp]
    7b28:	9308      	str	r3, [sp, #32]
            overtriptimer = millis();
    7b2a:	4b8b      	ldr	r3, [pc, #556]	; (7d58 <loop+0xbc4>)
	return ret;
    7b2c:	9a08      	ldr	r2, [sp, #32]
    7b2e:	601a      	str	r2, [r3, #0]
            if (Charged == 1) {
    7b30:	f1ba 0f01 	cmp.w	sl, #1
    7b34:	f000 8126 	beq.w	7d84 <loop+0xbf0>
              if (digitalRead(OUT3) == 0) {
    7b38:	2014      	movs	r0, #20
    7b3a:	f002 ff9d 	bl	aa78 <digitalRead>
    7b3e:	2800      	cmp	r0, #0
    7b40:	f47f acb3 	bne.w	74aa <loop+0x316>
                Serial.println();
    7b44:	4882      	ldr	r0, [pc, #520]	; (7d50 <loop+0xbbc>)
    7b46:	f002 f915 	bl	9d74 <Print::println()>
                Serial.println("Reset Over Voltage Trip Not Charged");
    7b4a:	4984      	ldr	r1, [pc, #528]	; (7d5c <loop+0xbc8>)
    7b4c:	4880      	ldr	r0, [pc, #512]	; (7d50 <loop+0xbbc>)
    7b4e:	f7fa f811 	bl	1b74 <Print::println(char const*) [clone .isra.0]>
    7b52:	e78a      	b.n	7a6a <loop+0x8d6>
            digitalWrite(OUT3, LOW);  //turn off charger
    7b54:	2100      	movs	r1, #0
    7b56:	2014      	movs	r0, #20
    7b58:	f002 ff68 	bl	aa2c <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7b5c:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7b5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
            Charged = 1;
    7b60:	4977      	ldr	r1, [pc, #476]	; (7d40 <loop+0xbac>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7b62:	fb02 f303 	mul.w	r3, r2, r3
    7b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7b6a:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    7b6e:	4a7c      	ldr	r2, [pc, #496]	; (7d60 <loop+0xbcc>)
            Charged = 1;
    7b70:	2301      	movs	r3, #1
    7b72:	600b      	str	r3, [r1, #0]
    SOC = 100;
    7b74:	2364      	movs	r3, #100	; 0x64
    7b76:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7b78:	f005 fc5c 	bl	d434 <__aeabi_i2f>
    7b7c:	4979      	ldr	r1, [pc, #484]	; (7d64 <loop+0xbd0>)
    7b7e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 7d68 <loop+0xbd4>
    7b82:	f005 fd5f 	bl	d644 <__aeabi_fdiv>
    7b86:	f8c9 0000 	str.w	r0, [r9]
    7b8a:	e48e      	b.n	74aa <loop+0x316>
              if (digitalRead(OUT3) == 1) {
    7b8c:	2014      	movs	r0, #20
    7b8e:	f002 ff73 	bl	aa78 <digitalRead>
    7b92:	2801      	cmp	r0, #1
    7b94:	4681      	mov	r9, r0
    7b96:	f47f ac88 	bne.w	74aa <loop+0x316>
                Serial.println();
    7b9a:	486d      	ldr	r0, [pc, #436]	; (7d50 <loop+0xbbc>)
    7b9c:	f002 f8ea 	bl	9d74 <Print::println()>
    7ba0:	2111      	movs	r1, #17
    7ba2:	4872      	ldr	r0, [pc, #456]	; (7d6c <loop+0xbd8>)
    7ba4:	f004 fdb4 	bl	c710 <usb_serial_write>
    7ba8:	4869      	ldr	r0, [pc, #420]	; (7d50 <loop+0xbbc>)
    7baa:	f002 f8e3 	bl	9d74 <Print::println()>
                digitalWrite(OUT3, LOW);  //turn off charger
    7bae:	2014      	movs	r0, #20
    7bb0:	2100      	movs	r1, #0
    7bb2:	f002 ff3b 	bl	aa2c <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7bb6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7bb8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7bba:	fb02 f303 	mul.w	r3, r2, r3
                Charged = 1;
    7bbe:	4a60      	ldr	r2, [pc, #384]	; (7d40 <loop+0xbac>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                Charged = 1;
    7bc4:	f8c2 9000 	str.w	r9, [r2]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7bc8:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    7bcc:	4a64      	ldr	r2, [pc, #400]	; (7d60 <loop+0xbcc>)
    7bce:	e7d1      	b.n	7b74 <loop+0x9e0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bd0:	682b      	ldr	r3, [r5, #0]
    7bd2:	930a      	str	r3, [sp, #40]	; 0x28
          undertriptimer = millis();
    7bd4:	4b5d      	ldr	r3, [pc, #372]	; (7d4c <loop+0xbb8>)
	return ret;
    7bd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    7bd8:	485a      	ldr	r0, [pc, #360]	; (7d44 <loop+0xbb0>)
          undertriptimer = millis();
    7bda:	601a      	str	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    7bdc:	f7f9 f8c6 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    7be0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7be2:	4681      	mov	r9, r0
    7be4:	69a0      	ldr	r0, [r4, #24]
    7be6:	f005 fb71 	bl	d2cc <__addsf3>
    7bea:	4601      	mov	r1, r0
    7bec:	4648      	mov	r0, r9
    7bee:	f005 fe31 	bl	d854 <__aeabi_fcmpgt>
    7bf2:	2800      	cmp	r0, #0
    7bf4:	f43f ac6f 	beq.w	74d6 <loop+0x342>
            if (digitalRead(OUT1) == 0) {
    7bf8:	200b      	movs	r0, #11
    7bfa:	f002 ff3d 	bl	aa78 <digitalRead>
    7bfe:	2800      	cmp	r0, #0
    7c00:	f47f ac69 	bne.w	74d6 <loop+0x342>
              Serial.println();
    7c04:	4852      	ldr	r0, [pc, #328]	; (7d50 <loop+0xbbc>)
    7c06:	f002 f8b5 	bl	9d74 <Print::println()>
              Serial.println("Reset Under Voltage Trip");
    7c0a:	4959      	ldr	r1, [pc, #356]	; (7d70 <loop+0xbdc>)
    7c0c:	4850      	ldr	r0, [pc, #320]	; (7d50 <loop+0xbbc>)
    7c0e:	f7f9 ffb1 	bl	1b74 <Print::println(char const*) [clone .isra.0]>
              digitalWrite(OUT1, HIGH);  //turn on discharge
    7c12:	2101      	movs	r1, #1
    7c14:	200b      	movs	r0, #11
    7c16:	f002 ff09 	bl	aa2c <digitalWrite>
    7c1a:	e45c      	b.n	74d6 <loop+0x342>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7c1c:	f7f9 f8a6 	bl	d6c <BMSModuleManager::getLowCellVolt()>
    7c20:	6921      	ldr	r1, [r4, #16]
    7c22:	f005 fdf9 	bl	d818 <__aeabi_fcmplt>
    7c26:	b938      	cbnz	r0, 7c38 <loop+0xaa4>
    7c28:	4846      	ldr	r0, [pc, #280]	; (7d44 <loop+0xbb0>)
    7c2a:	f7f9 f8d3 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7c2e:	68e1      	ldr	r1, [r4, #12]
    7c30:	f005 fe10 	bl	d854 <__aeabi_fcmpgt>
    7c34:	2800      	cmp	r0, #0
    7c36:	d05e      	beq.n	7cf6 <loop+0xb62>
              digitalWrite(OUT2, LOW);    //turn off contactor
    7c38:	2100      	movs	r1, #0
    7c3a:	200c      	movs	r0, #12
    7c3c:	f002 fef6 	bl	aa2c <digitalWrite>
              contctrl = contctrl & 253;  //turn off contactor
    7c40:	f8d8 3000 	ldr.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    7c44:	2100      	movs	r1, #0
              contctrl = contctrl & 253;  //turn off contactor
    7c46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    7c4a:	2015      	movs	r0, #21
              contctrl = contctrl & 253;  //turn off contactor
    7c4c:	f8c8 3000 	str.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    7c50:	f002 feec 	bl	aa2c <digitalWrite>
              bmsstatus = Error;
    7c54:	2305      	movs	r3, #5
    7c56:	703b      	strb	r3, [r7, #0]
    7c58:	f7ff bb62 	b.w	7320 <loop+0x18c>
    7c5c:	2102      	movs	r1, #2
    7c5e:	4845      	ldr	r0, [pc, #276]	; (7d74 <loop+0xbe0>)
    7c60:	f004 fd56 	bl	c710 <usb_serial_write>
    7c64:	483a      	ldr	r0, [pc, #232]	; (7d50 <loop+0xbbc>)
    7c66:	f002 f885 	bl	9d74 <Print::println()>
    7c6a:	2119      	movs	r1, #25
    7c6c:	4842      	ldr	r0, [pc, #264]	; (7d78 <loop+0xbe4>)
    7c6e:	f004 fd4f 	bl	c710 <usb_serial_write>
    7c72:	2102      	movs	r1, #2
    7c74:	483f      	ldr	r0, [pc, #252]	; (7d74 <loop+0xbe0>)
    7c76:	f004 fd4b 	bl	c710 <usb_serial_write>
    7c7a:	4835      	ldr	r0, [pc, #212]	; (7d50 <loop+0xbbc>)
    7c7c:	f002 f87a 	bl	9d74 <Print::println()>
    7c80:	e67b      	b.n	797a <loop+0x7e6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c82:	4d31      	ldr	r5, [pc, #196]	; (7d48 <loop+0xbb4>)
              bmsstatus = Precharge;
    7c84:	2304      	movs	r3, #4
    7c86:	703b      	strb	r3, [r7, #0]
    7c88:	682b      	ldr	r3, [r5, #0]
    7c8a:	930b      	str	r3, [sp, #44]	; 0x2c
              Pretimer = millis();
    7c8c:	4b3b      	ldr	r3, [pc, #236]	; (7d7c <loop+0xbe8>)
	return ret;
    7c8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7c90:	601a      	str	r2, [r3, #0]
    7c92:	e4d9      	b.n	7648 <loop+0x4b4>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    7c94:	200c      	movs	r0, #12
    7c96:	f002 feef 	bl	aa78 <digitalRead>
    7c9a:	2800      	cmp	r0, #0
    7c9c:	f000 80b3 	beq.w	7e06 <loop+0xc72>
    7ca0:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 7d80 <loop+0xbec>
    7ca4:	4d28      	ldr	r5, [pc, #160]	; (7d48 <loop+0xbb4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ca6:	682b      	ldr	r3, [r5, #0]
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    7ca8:	f8d9 2000 	ldr.w	r2, [r9]
    7cac:	9304      	str	r3, [sp, #16]
    7cae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7cb2:	4413      	add	r3, r2
	return ret;
    7cb4:	9a04      	ldr	r2, [sp, #16]
    7cb6:	4293      	cmp	r3, r2
    7cb8:	f0c0 8089 	bcc.w	7dce <loop+0xc3a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7cbc:	682a      	ldr	r2, [r5, #0]
    7cbe:	9206      	str	r2, [sp, #24]
	return ret;
    7cc0:	9a06      	ldr	r2, [sp, #24]
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    7cc2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    7cc6:	4293      	cmp	r3, r2
    7cc8:	f4bf abbc 	bcs.w	7444 <loop+0x2b0>
              digitalWrite(OUT4, LOW);  //ensure precharge is low
    7ccc:	2100      	movs	r1, #0
    7cce:	2015      	movs	r0, #21
    7cd0:	f002 feac 	bl	aa2c <digitalWrite>
    7cd4:	f7ff bbb6 	b.w	7444 <loop+0x2b0>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7cd8:	481a      	ldr	r0, [pc, #104]	; (7d44 <loop+0xbb0>)
    7cda:	f7f9 fad1 	bl	1280 <BMSModuleManager::getHighTemperature()>
    7cde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7ce0:	f005 fdb8 	bl	d854 <__aeabi_fcmpgt>
    7ce4:	4601      	mov	r1, r0
    7ce6:	2800      	cmp	r0, #0
    7ce8:	f47f ac0f 	bne.w	750a <loop+0x376>
              digitalWrite(OUT2, LOW);  //trip breaker
    7cec:	200c      	movs	r0, #12
    7cee:	f002 fe9d 	bl	aa2c <digitalWrite>
    7cf2:	f7ff bb15 	b.w	7320 <loop+0x18c>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7cf6:	4813      	ldr	r0, [pc, #76]	; (7d44 <loop+0xbb0>)
    7cf8:	f7f9 fac2 	bl	1280 <BMSModuleManager::getHighTemperature()>
    7cfc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7cfe:	f005 fda9 	bl	d854 <__aeabi_fcmpgt>
    7d02:	2800      	cmp	r0, #0
    7d04:	d198      	bne.n	7c38 <loop+0xaa4>
    7d06:	f7ff bb0b 	b.w	7320 <loop+0x18c>
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys)) {
    7d0a:	480e      	ldr	r0, [pc, #56]	; (7d44 <loop+0xbb0>)
    7d0c:	f7f9 f862 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7d10:	69e1      	ldr	r1, [r4, #28]
    7d12:	4681      	mov	r9, r0
    7d14:	6a20      	ldr	r0, [r4, #32]
    7d16:	f005 fad7 	bl	d2c8 <__aeabi_fsub>
    7d1a:	4601      	mov	r1, r0
    7d1c:	4648      	mov	r0, r9
    7d1e:	f005 fd7b 	bl	d818 <__aeabi_fcmplt>
    7d22:	4b07      	ldr	r3, [pc, #28]	; (7d40 <loop+0xbac>)
    7d24:	2800      	cmp	r0, #0
    7d26:	f43f abc0 	beq.w	74aa <loop+0x316>
                digitalWrite(OUT3, HIGH);  //turn on charger
    7d2a:	4659      	mov	r1, fp
    7d2c:	2014      	movs	r0, #20
                Charged = 0;
    7d2e:	f8c3 a000 	str.w	sl, [r3]
                digitalWrite(OUT3, HIGH);  //turn on charger
    7d32:	f002 fe7b 	bl	aa2c <digitalWrite>
    7d36:	f7ff bbb8 	b.w	74aa <loop+0x316>
    7d3a:	bf00      	nop
    7d3c:	1fffbe38 	.word	0x1fffbe38
    7d40:	1fff8fc0 	.word	0x1fff8fc0
    7d44:	1fff900c 	.word	0x1fff900c
    7d48:	1fffc3b4 	.word	0x1fffc3b4
    7d4c:	1fffc19c 	.word	0x1fffc19c
    7d50:	1fff8824 	.word	0x1fff8824
    7d54:	00015760 	.word	0x00015760
    7d58:	1fffc0ac 	.word	0x1fffc0ac
    7d5c:	0001573c 	.word	0x0001573c
    7d60:	1fff8728 	.word	0x1fff8728
    7d64:	3e8e38e4 	.word	0x3e8e38e4
    7d68:	1fff9004 	.word	0x1fff9004
    7d6c:	00015728 	.word	0x00015728
    7d70:	00015774 	.word	0x00015774
    7d74:	000155bc 	.word	0x000155bc
    7d78:	000157d0 	.word	0x000157d0
    7d7c:	1fff8fd8 	.word	0x1fff8fd8
    7d80:	1fffbf28 	.word	0x1fffbf28
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) {
    7d84:	4843      	ldr	r0, [pc, #268]	; (7e94 <loop+0xd00>)
    7d86:	f7f9 f825 	bl	dd4 <BMSModuleManager::getHighCellVolt()>
    7d8a:	69e1      	ldr	r1, [r4, #28]
    7d8c:	4681      	mov	r9, r0
    7d8e:	6960      	ldr	r0, [r4, #20]
    7d90:	f005 fa9a 	bl	d2c8 <__aeabi_fsub>
    7d94:	4601      	mov	r1, r0
    7d96:	4648      	mov	r0, r9
    7d98:	f005 fd3e 	bl	d818 <__aeabi_fcmplt>
    7d9c:	2800      	cmp	r0, #0
    7d9e:	f43f ab84 	beq.w	74aa <loop+0x316>
                if (digitalRead(OUT3) == 0) {
    7da2:	2014      	movs	r0, #20
    7da4:	f002 fe68 	bl	aa78 <digitalRead>
    7da8:	4681      	mov	r9, r0
    7daa:	2800      	cmp	r0, #0
    7dac:	f47f ab7d 	bne.w	74aa <loop+0x316>
                  Serial.println();
    7db0:	4839      	ldr	r0, [pc, #228]	; (7e98 <loop+0xd04>)
    7db2:	f001 ffdf 	bl	9d74 <Print::println()>
                  Serial.println("Reset Over Voltage Trip Not Charged");
    7db6:	4939      	ldr	r1, [pc, #228]	; (7e9c <loop+0xd08>)
    7db8:	4837      	ldr	r0, [pc, #220]	; (7e98 <loop+0xd04>)
    7dba:	f7f9 fedb 	bl	1b74 <Print::println(char const*) [clone .isra.0]>
                  digitalWrite(OUT3, HIGH);  //turn on charger
    7dbe:	4651      	mov	r1, sl
    7dc0:	2014      	movs	r0, #20
                  Charged = 0;
    7dc2:	f8cb 9000 	str.w	r9, [fp]
                  digitalWrite(OUT3, HIGH);  //turn on charger
    7dc6:	f002 fe31 	bl	aa2c <digitalWrite>
    7dca:	f7ff bb6e 	b.w	74aa <loop+0x316>
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    7dce:	200c      	movs	r0, #12
    7dd0:	f002 fe52 	bl	aa78 <digitalRead>
    7dd4:	b988      	cbnz	r0, 7dfa <loop+0xc66>
    7dd6:	4b32      	ldr	r3, [pc, #200]	; (7ea0 <loop+0xd0c>)
    7dd8:	f8d3 a000 	ldr.w	sl, [r3]
    7ddc:	2100      	movs	r1, #0
    7dde:	4650      	mov	r0, sl
    7de0:	f005 fd38 	bl	d854 <__aeabi_fcmpgt>
    7de4:	b908      	cbnz	r0, 7dea <loop+0xc56>
    7de6:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    7dea:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    7dee:	f005 fb21 	bl	d434 <__aeabi_i2f>
    7df2:	4651      	mov	r1, sl
    7df4:	f005 fd2e 	bl	d854 <__aeabi_fcmpgt>
    7df8:	bb68      	cbnz	r0, 7e56 <loop+0xcc2>
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    7dfa:	f8d9 2000 	ldr.w	r2, [r9]
    7dfe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7e02:	4413      	add	r3, r2
    7e04:	e75a      	b.n	7cbc <loop+0xb28>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    7e06:	2015      	movs	r0, #21
    7e08:	f002 fe36 	bl	aa78 <digitalRead>
    7e0c:	4682      	mov	sl, r0
    7e0e:	2800      	cmp	r0, #0
    7e10:	f47f af46 	bne.w	7ca0 <loop+0xb0c>
              digitalWrite(OUT4, HIGH);  //Precharge start
    7e14:	4629      	mov	r1, r5
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e16:	4d23      	ldr	r5, [pc, #140]	; (7ea4 <loop+0xd10>)
              mainconttimer = millis();
    7e18:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7ea8 <loop+0xd14>
    7e1c:	682b      	ldr	r3, [r5, #0]
    7e1e:	9303      	str	r3, [sp, #12]
	return ret;
    7e20:	9b03      	ldr	r3, [sp, #12]
    7e22:	f8c9 3000 	str.w	r3, [r9]
              digitalWrite(OUT4, HIGH);  //Precharge start
    7e26:	2015      	movs	r0, #21
    7e28:	f002 fe00 	bl	aa2c <digitalWrite>
              Serial.println();
    7e2c:	481a      	ldr	r0, [pc, #104]	; (7e98 <loop+0xd04>)
    7e2e:	f001 ffa1 	bl	9d74 <Print::println()>
              Serial.println("Precharge!!!");
    7e32:	491e      	ldr	r1, [pc, #120]	; (7eac <loop+0xd18>)
    7e34:	4818      	ldr	r0, [pc, #96]	; (7e98 <loop+0xd04>)
    7e36:	f7f9 fe9d 	bl	1b74 <Print::println(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    7e3a:	f8d9 1000 	ldr.w	r1, [r9]
    7e3e:	4816      	ldr	r0, [pc, #88]	; (7e98 <loop+0xd04>)
    7e40:	4653      	mov	r3, sl
    7e42:	220a      	movs	r2, #10
    7e44:	f001 ffae 	bl	9da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    7e48:	4813      	ldr	r0, [pc, #76]	; (7e98 <loop+0xd04>)
    7e4a:	f001 ff93 	bl	9d74 <Print::println()>
              Serial.println();
    7e4e:	4812      	ldr	r0, [pc, #72]	; (7e98 <loop+0xd04>)
    7e50:	f001 ff90 	bl	9d74 <Print::println()>
    7e54:	e727      	b.n	7ca6 <loop+0xb12>
              digitalWrite(OUT2, HIGH);  //turn on contactor
    7e56:	2101      	movs	r1, #1
    7e58:	200c      	movs	r0, #12
    7e5a:	f002 fde7 	bl	aa2c <digitalWrite>
              contctrl = contctrl | 2;   //turn on contactor
    7e5e:	f8d8 3000 	ldr.w	r3, [r8]
              Serial.println();
    7e62:	480d      	ldr	r0, [pc, #52]	; (7e98 <loop+0xd04>)
              contctrl = contctrl | 2;   //turn on contactor
    7e64:	f043 0302 	orr.w	r3, r3, #2
    7e68:	f8c8 3000 	str.w	r3, [r8]
              Serial.println();
    7e6c:	f001 ff82 	bl	9d74 <Print::println()>
              Serial.println("Main On!!!");
    7e70:	490f      	ldr	r1, [pc, #60]	; (7eb0 <loop+0xd1c>)
    7e72:	4809      	ldr	r0, [pc, #36]	; (7e98 <loop+0xd04>)
    7e74:	f7f9 fe7e 	bl	1b74 <Print::println(char const*) [clone .isra.0]>
              Serial.println();
    7e78:	4807      	ldr	r0, [pc, #28]	; (7e98 <loop+0xd04>)
    7e7a:	f001 ff7b 	bl	9d74 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e7e:	682b      	ldr	r3, [r5, #0]
    7e80:	9305      	str	r3, [sp, #20]
	return ret;
    7e82:	9a05      	ldr	r2, [sp, #20]
              mainconttimer = millis() + settings.Pretime;
    7e84:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7e88:	441a      	add	r2, r3
    7e8a:	f8c9 2000 	str.w	r2, [r9]
    7e8e:	4413      	add	r3, r2
    7e90:	e714      	b.n	7cbc <loop+0xb28>
    7e92:	bf00      	nop
    7e94:	1fff900c 	.word	0x1fff900c
    7e98:	1fff8824 	.word	0x1fff8824
    7e9c:	0001573c 	.word	0x0001573c
    7ea0:	1fffbec0 	.word	0x1fffbec0
    7ea4:	1fffc3b4 	.word	0x1fffc3b4
    7ea8:	1fffbf28 	.word	0x1fffbf28
    7eac:	0001570c 	.word	0x0001570c
    7eb0:	0001571c 	.word	0x0001571c

00007eb4 <low_voltage_isr>:

void low_voltage_isr(void) {
  EEPROM.update(1000, uint8_t(SOC));
    7eb4:	4b0b      	ldr	r3, [pc, #44]	; (7ee4 <low_voltage_isr+0x30>)
void low_voltage_isr(void) {
    7eb6:	b510      	push	{r4, lr}
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  EEPROM.update(1000, uint8_t(SOC));
    7ebc:	781c      	ldrb	r4, [r3, #0]
    7ebe:	f002 f973 	bl	a1a8 <eeprom_read_byte>
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    7ec2:	4284      	cmp	r4, r0
    7ec4:	d004      	beq.n	7ed0 <low_voltage_isr+0x1c>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    7ec6:	4621      	mov	r1, r4
    7ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7ecc:	f002 f986 	bl	a1dc <eeprom_write_byte>

  PMC_LVDSC2 |= PMC_LVDSC2_LVWACK;  // clear if we can
    7ed0:	4b05      	ldr	r3, [pc, #20]	; (7ee8 <low_voltage_isr+0x34>)
    7ed2:	785a      	ldrb	r2, [r3, #1]
    7ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7ed8:	705a      	strb	r2, [r3, #1]
  PMC_LVDSC1 |= PMC_LVDSC1_LVDACK;
    7eda:	781a      	ldrb	r2, [r3, #0]
    7edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7ee0:	701a      	strb	r2, [r3, #0]
}
    7ee2:	bd10      	pop	{r4, pc}
    7ee4:	1fff8728 	.word	0x1fff8728
    7ee8:	4007d000 	.word	0x4007d000

00007eec <_GLOBAL__sub_I_can>:
    7eec:	b538      	push	{r3, r4, r5, lr}
    EEPROMClass()                        { eeprom_initialize(); }
    7eee:	f002 f925 	bl	a13c <eeprom_initialize>
BMSModuleManager bms;
    7ef2:	4818      	ldr	r0, [pc, #96]	; (7f54 <_GLOBAL__sub_I_can+0x68>)
    7ef4:	f7f8 fe54 	bl	ba0 <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    7ef8:	4817      	ldr	r0, [pc, #92]	; (7f58 <_GLOBAL__sub_I_can+0x6c>)
    7efa:	f000 fa99 	bl	8430 <SerialConsole::SerialConsole()>
		channel = NULL;
    7efe:	4817      	ldr	r0, [pc, #92]	; (7f5c <_GLOBAL__sub_I_can+0x70>)
IntervalTimer myTimer;
    7f00:	4a17      	ldr	r2, [pc, #92]	; (7f60 <_GLOBAL__sub_I_can+0x74>)
    7f02:	4918      	ldr	r1, [pc, #96]	; (7f64 <_GLOBAL__sub_I_can+0x78>)
    7f04:	2400      	movs	r4, #0
		nvic_priority = 128;
    7f06:	2380      	movs	r3, #128	; 0x80
    7f08:	7103      	strb	r3, [r0, #4]
		channel = NULL;
    7f0a:	6004      	str	r4, [r0, #0]
    7f0c:	f004 ff58 	bl	cdc0 <__aeabi_atexit>
FilterOnePole lowpassFilter(LOWPASS, filterFrequency);
    7f10:	4a15      	ldr	r2, [pc, #84]	; (7f68 <_GLOBAL__sub_I_can+0x7c>)
    7f12:	4816      	ldr	r0, [pc, #88]	; (7f6c <_GLOBAL__sub_I_can+0x80>)
    7f14:	6812      	ldr	r2, [r2, #0]
    7f16:	2300      	movs	r3, #0
    7f18:	2101      	movs	r1, #1
    7f1a:	f001 fba3 	bl	9664 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
ADC *adc = new ADC();  // adc object
    7f1e:	2094      	movs	r0, #148	; 0x94
    7f20:	f002 fb56 	bl	a5d0 <operator new(unsigned int)>
    7f24:	4605      	mov	r5, r0
    7f26:	f000 ffcb 	bl	8ec0 <ADC::ADC()>
    7f2a:	4811      	ldr	r0, [pc, #68]	; (7f70 <_GLOBAL__sub_I_can+0x84>)

class movingAvg
{
    public:
        movingAvg(int interval)
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
    7f2c:	4911      	ldr	r1, [pc, #68]	; (7f74 <_GLOBAL__sub_I_can+0x88>)
    7f2e:	4a12      	ldr	r2, [pc, #72]	; (7f78 <_GLOBAL__sub_I_can+0x8c>)
    7f30:	4b12      	ldr	r3, [pc, #72]	; (7f7c <_GLOBAL__sub_I_can+0x90>)
    7f32:	6005      	str	r5, [r0, #0]
    7f34:	203c      	movs	r0, #60	; 0x3c
    7f36:	e9c1 0400 	strd	r0, r4, [r1]
    7f3a:	608c      	str	r4, [r1, #8]
    7f3c:	60cc      	str	r4, [r1, #12]
    7f3e:	2164      	movs	r1, #100	; 0x64
    7f40:	e9c2 0400 	strd	r0, r4, [r2]
    7f44:	e9c3 1400 	strd	r1, r4, [r3]
    7f48:	6094      	str	r4, [r2, #8]
    7f4a:	60d4      	str	r4, [r2, #12]
    7f4c:	609c      	str	r4, [r3, #8]
    7f4e:	60dc      	str	r4, [r3, #12]
}
    7f50:	bd38      	pop	{r3, r4, r5, pc}
    7f52:	bf00      	nop
    7f54:	1fff900c 	.word	0x1fff900c
    7f58:	1fffbe48 	.word	0x1fffbe48
    7f5c:	1fffc09c 	.word	0x1fffc09c
    7f60:	1fff8720 	.word	0x1fff8720
    7f64:	00001ad9 	.word	0x00001ad9
    7f68:	1fff8750 	.word	0x1fff8750
    7f6c:	1fffbf08 	.word	0x1fffbf08
    7f70:	1fff8ffc 	.word	0x1fff8ffc
    7f74:	1fffc088 	.word	0x1fffc088
    7f78:	1fffc074 	.word	0x1fffc074
    7f7c:	1fffc060 	.word	0x1fffc060

00007f80 <setup>:
void setup() {
    7f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(IN1, INPUT);
    7f84:	2100      	movs	r1, #0
void setup() {
    7f86:	b085      	sub	sp, #20
  pinMode(IN1, INPUT);
    7f88:	2011      	movs	r0, #17
    7f8a:	f002 fd83 	bl	aa94 <pinMode>
  pinMode(IN2, INPUT);
    7f8e:	2100      	movs	r1, #0
    7f90:	2010      	movs	r0, #16
    7f92:	f002 fd7f 	bl	aa94 <pinMode>
  pinMode(IN3, INPUT);
    7f96:	2100      	movs	r1, #0
    7f98:	2012      	movs	r0, #18
    7f9a:	f002 fd7b 	bl	aa94 <pinMode>
  pinMode(IN4, INPUT);
    7f9e:	2100      	movs	r1, #0
    7fa0:	2013      	movs	r0, #19
    7fa2:	f002 fd77 	bl	aa94 <pinMode>
  pinMode(OUT1, OUTPUT);  // drive contactor
    7fa6:	2101      	movs	r1, #1
    7fa8:	200b      	movs	r0, #11
    7faa:	f002 fd73 	bl	aa94 <pinMode>
  pinMode(OUT2, OUTPUT);  // precharge
    7fae:	2101      	movs	r1, #1
    7fb0:	200c      	movs	r0, #12
    7fb2:	f002 fd6f 	bl	aa94 <pinMode>
  pinMode(OUT3, OUTPUT);  // charge relay
    7fb6:	2101      	movs	r1, #1
    7fb8:	2014      	movs	r0, #20
    7fba:	f002 fd6b 	bl	aa94 <pinMode>
  pinMode(OUT4, OUTPUT);  // Negative contactor
    7fbe:	2101      	movs	r1, #1
    7fc0:	2015      	movs	r0, #21
    7fc2:	f002 fd67 	bl	aa94 <pinMode>
  pinMode(OUT5, OUTPUT);  // pwm driver output
    7fc6:	2101      	movs	r1, #1
    7fc8:	2016      	movs	r0, #22
    7fca:	f002 fd63 	bl	aa94 <pinMode>
  pinMode(OUT6, OUTPUT);  // pwm driver output
    7fce:	2101      	movs	r1, #1
    7fd0:	2017      	movs	r0, #23
    7fd2:	f002 fd5f 	bl	aa94 <pinMode>
  pinMode(OUT7, OUTPUT);  // pwm driver output
    7fd6:	2101      	movs	r1, #1
    7fd8:	2005      	movs	r0, #5
    7fda:	f002 fd5b 	bl	aa94 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    7fde:	4cb4      	ldr	r4, [pc, #720]	; (82b0 <L_31169_delayMicroseconds+0xfc>)
    Can0.getFilter(filter, i);
    7fe0:	4fb4      	ldr	r7, [pc, #720]	; (82b4 <L_31169_delayMicroseconds+0x100>)
  pinMode(OUT8, OUTPUT);  // pwm driver output
    7fe2:	2101      	movs	r1, #1
    7fe4:	2006      	movs	r0, #6
    7fe6:	f002 fd55 	bl	aa94 <pinMode>
  pinMode(led, OUTPUT);
    7fea:	2101      	movs	r1, #1
    7fec:	200d      	movs	r0, #13
    7fee:	f002 fd51 	bl	aa94 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    7ff2:	8820      	ldrh	r0, [r4, #0]
    7ff4:	f005 fa1a 	bl	d42c <__aeabi_ui2f>
    7ff8:	4601      	mov	r1, r0
    7ffa:	2016      	movs	r0, #22
    7ffc:	f002 fcac 	bl	a958 <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    8000:	8820      	ldrh	r0, [r4, #0]
    8002:	f005 fa13 	bl	d42c <__aeabi_ui2f>
    8006:	4601      	mov	r1, r0
    8008:	2017      	movs	r0, #23
    800a:	f002 fca5 	bl	a958 <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    800e:	8820      	ldrh	r0, [r4, #0]
    8010:	f005 fa0c 	bl	d42c <__aeabi_ui2f>
    8014:	4601      	mov	r1, r0
    8016:	2005      	movs	r0, #5
    8018:	f002 fc9e 	bl	a958 <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    801c:	8820      	ldrh	r0, [r4, #0]
    801e:	4ca6      	ldr	r4, [pc, #664]	; (82b8 <L_31169_delayMicroseconds+0x104>)
    8020:	f005 fa04 	bl	d42c <__aeabi_ui2f>
  Can0.begin(500000);
    8024:	2500      	movs	r5, #0
  analogWriteFrequency(OUT8, pwmfreq);
    8026:	4601      	mov	r1, r0
    8028:	2006      	movs	r0, #6
    802a:	f002 fc95 	bl	a958 <analogWriteFrequency>
  Can0.begin(500000);
    802e:	4aa3      	ldr	r2, [pc, #652]	; (82bc <L_31169_delayMicroseconds+0x108>)
    8030:	49a3      	ldr	r1, [pc, #652]	; (82c0 <L_31169_delayMicroseconds+0x10c>)
    8032:	48a0      	ldr	r0, [pc, #640]	; (82b4 <L_31169_delayMicroseconds+0x100>)
    8034:	9500      	str	r5, [sp, #0]
    8036:	462b      	mov	r3, r5
    8038:	f000 fb82 	bl	8740 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
    Can0.getFilter(filter, i);
    803c:	b2ee      	uxtb	r6, r5
    803e:	4632      	mov	r2, r6
    8040:	4621      	mov	r1, r4
    8042:	4638      	mov	r0, r7
    8044:	f000 fb24 	bl	8690 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 0;
    8048:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    804a:	4632      	mov	r2, r6
    filter.flags.extended = 0;
    804c:	f36f 0300 	bfc	r3, #0, #1
    Can0.setFilter(filter, i);
    8050:	4621      	mov	r1, r4
    8052:	4638      	mov	r0, r7
  for (int i = 0; i < 8; i++) {
    8054:	3501      	adds	r5, #1
    filter.flags.extended = 0;
    8056:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    8058:	f000 fad8 	bl	860c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 0; i < 8; i++) {
    805c:	2d08      	cmp	r5, #8
    805e:	d1ed      	bne.n	803c <setup+0xbc>
    Can0.getFilter(filter, i);
    8060:	f8df 8254 	ldr.w	r8, [pc, #596]	; 82b8 <L_31169_delayMicroseconds+0x104>
    8064:	4f93      	ldr	r7, [pc, #588]	; (82b4 <L_31169_delayMicroseconds+0x100>)
  for (int i = 9; i < 13; i++) {
    8066:	2509      	movs	r5, #9
    Can0.getFilter(filter, i);
    8068:	b2ee      	uxtb	r6, r5
    806a:	4632      	mov	r2, r6
    806c:	4641      	mov	r1, r8
    806e:	4638      	mov	r0, r7
    8070:	f000 fb0e 	bl	8690 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 1;
    8074:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    8076:	4632      	mov	r2, r6
    filter.flags.extended = 1;
    8078:	f043 0301 	orr.w	r3, r3, #1
    Can0.setFilter(filter, i);
    807c:	4641      	mov	r1, r8
    807e:	4638      	mov	r0, r7
  for (int i = 9; i < 13; i++) {
    8080:	3501      	adds	r5, #1
    filter.flags.extended = 1;
    8082:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    8084:	f000 fac2 	bl	860c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 9; i < 13; i++) {
    8088:	2d0d      	cmp	r5, #13
    808a:	d1ed      	bne.n	8068 <setup+0xe8>
  adc->adc0->setAveraging(16);   // set number of averages
    808c:	4c8d      	ldr	r4, [pc, #564]	; (82c4 <L_31169_delayMicroseconds+0x110>)
		uint32_t millis_begin = systick_millis_count;
    808e:	4f8e      	ldr	r7, [pc, #568]	; (82c8 <L_31169_delayMicroseconds+0x114>)
    8090:	6823      	ldr	r3, [r4, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    8092:	4e8e      	ldr	r6, [pc, #568]	; (82cc <L_31169_delayMicroseconds+0x118>)
    8094:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    8098:	f8df 9234 	ldr.w	r9, [pc, #564]	; 82d0 <L_31169_delayMicroseconds+0x11c>
    809c:	2110      	movs	r1, #16
    809e:	f001 f991 	bl	93c4 <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16);  // set bits of resolution
    80a2:	6823      	ldr	r3, [r4, #0]
    80a4:	2110      	movs	r1, #16
    80a6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    80aa:	f001 f851 	bl	9150 <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    80ae:	6823      	ldr	r3, [r4, #0]
    80b0:	2102      	movs	r1, #2
    80b2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    80b6:	f000 ff33 	bl	8f20 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    80ba:	6823      	ldr	r3, [r4, #0]
    80bc:	2102      	movs	r1, #2
    80be:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    80c2:	f001 f92b 	bl	931c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    80c6:	6823      	ldr	r3, [r4, #0]
    80c8:	4c82      	ldr	r4, [pc, #520]	; (82d4 <L_31169_delayMicroseconds+0x120>)
    80ca:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    80ce:	210f      	movs	r1, #15
    80d0:	f001 f9d0 	bl	9474 <ADC_Module::startContinuous(unsigned char)>
		uint32_t millis_begin = systick_millis_count;
    80d4:	683d      	ldr	r5, [r7, #0]
				if (elapsed > 750) break;
    80d6:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
    80da:	f004 fc1f 	bl	c91c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    80de:	7823      	ldrb	r3, [r4, #0]
    80e0:	2b00      	cmp	r3, #0
    80e2:	f000 812b 	beq.w	833c <L_31169_delayMicroseconds+0x188>
    80e6:	7833      	ldrb	r3, [r6, #0]
    80e8:	07d8      	lsls	r0, r3, #31
    80ea:	f140 8127 	bpl.w	833c <L_31169_delayMicroseconds+0x188>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    80ee:	683b      	ldr	r3, [r7, #0]
    80f0:	f8d9 2000 	ldr.w	r2, [r9]
    80f4:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    80f6:	2b0e      	cmp	r3, #14
    80f8:	f240 8120 	bls.w	833c <L_31169_delayMicroseconds+0x188>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    80fc:	210c      	movs	r1, #12
    80fe:	4876      	ldr	r0, [pc, #472]	; (82d8 <L_31169_delayMicroseconds+0x124>)
    8100:	f004 fb06 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    8104:	4875      	ldr	r0, [pc, #468]	; (82dc <L_31169_delayMicroseconds+0x128>)
    8106:	f001 fe35 	bl	9d74 <Print::println()>
    810a:	2114      	movs	r1, #20
    810c:	4874      	ldr	r0, [pc, #464]	; (82e0 <L_31169_delayMicroseconds+0x12c>)
    810e:	f004 faff 	bl	c710 <usb_serial_write>
    8112:	4872      	ldr	r0, [pc, #456]	; (82dc <L_31169_delayMicroseconds+0x128>)
    8114:	f001 fe2e 	bl	9d74 <Print::println()>
  canSerial.begin(115200);
    8118:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    811c:	4871      	ldr	r0, [pc, #452]	; (82e4 <L_31169_delayMicroseconds+0x130>)
    811e:	f001 fbcd 	bl	98bc <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    8122:	486e      	ldr	r0, [pc, #440]	; (82dc <L_31169_delayMicroseconds+0x128>)
    8124:	f001 fe26 	bl	9d74 <Print::println()>
    8128:	2117      	movs	r1, #23
    812a:	486f      	ldr	r0, [pc, #444]	; (82e8 <L_31169_delayMicroseconds+0x134>)
    812c:	f004 faf0 	bl	c710 <usb_serial_write>
    8130:	486a      	ldr	r0, [pc, #424]	; (82dc <L_31169_delayMicroseconds+0x128>)
    8132:	f001 fe1f 	bl	9d74 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR) Serial.println("Stop Mode Acknowledge Error Reset");
    8136:	4b6d      	ldr	r3, [pc, #436]	; (82ec <L_31169_delayMicroseconds+0x138>)
    8138:	785b      	ldrb	r3, [r3, #1]
    813a:	0699      	lsls	r1, r3, #26
    813c:	f100 8158 	bmi.w	83f0 <L_31169_delayMicroseconds+0x23c>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP) Serial.println("MDM-AP Reset");
    8140:	4b6a      	ldr	r3, [pc, #424]	; (82ec <L_31169_delayMicroseconds+0x138>)
    8142:	785b      	ldrb	r3, [r3, #1]
    8144:	071a      	lsls	r2, r3, #28
    8146:	f100 814b 	bmi.w	83e0 <L_31169_delayMicroseconds+0x22c>
  if (RCM_SRS1 & RCM_SRS1_SW) Serial.println("Software Reset");  // reboot with SCB_AIRCR = 0x05FA0004
    814a:	4b68      	ldr	r3, [pc, #416]	; (82ec <L_31169_delayMicroseconds+0x138>)
    814c:	785b      	ldrb	r3, [r3, #1]
    814e:	075b      	lsls	r3, r3, #29
    8150:	f100 813e 	bmi.w	83d0 <L_31169_delayMicroseconds+0x21c>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP) Serial.println("Core Lockup Event Reset");
    8154:	4b65      	ldr	r3, [pc, #404]	; (82ec <L_31169_delayMicroseconds+0x138>)
    8156:	785b      	ldrb	r3, [r3, #1]
    8158:	079e      	lsls	r6, r3, #30
    815a:	f100 8125 	bmi.w	83a8 <L_31169_delayMicroseconds+0x1f4>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    815e:	4b63      	ldr	r3, [pc, #396]	; (82ec <L_31169_delayMicroseconds+0x138>)
    8160:	781b      	ldrb	r3, [r3, #0]
    8162:	061d      	lsls	r5, r3, #24
    8164:	f100 812c 	bmi.w	83c0 <L_31169_delayMicroseconds+0x20c>
  if (RCM_SRS0 & RCM_SRS0_PIN) Serial.println("External Pin Reset");    // Reboot with software download
    8168:	4b60      	ldr	r3, [pc, #384]	; (82ec <L_31169_delayMicroseconds+0x138>)
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	065c      	lsls	r4, r3, #25
    816e:	f100 8113 	bmi.w	8398 <L_31169_delayMicroseconds+0x1e4>
  if (RCM_SRS0 & RCM_SRS0_WDOG) Serial.println("Watchdog(COP) Reset");  // WDT timed out
    8172:	4b5e      	ldr	r3, [pc, #376]	; (82ec <L_31169_delayMicroseconds+0x138>)
    8174:	781b      	ldrb	r3, [r3, #0]
    8176:	0698      	lsls	r0, r3, #26
    8178:	f100 8106 	bmi.w	8388 <L_31169_delayMicroseconds+0x1d4>
  if (RCM_SRS0 & RCM_SRS0_LOC) Serial.println("Loss of External Clock Reset");
    817c:	4b5b      	ldr	r3, [pc, #364]	; (82ec <L_31169_delayMicroseconds+0x138>)
    817e:	781b      	ldrb	r3, [r3, #0]
    8180:	0759      	lsls	r1, r3, #29
    8182:	f100 80f9 	bmi.w	8378 <L_31169_delayMicroseconds+0x1c4>
  if (RCM_SRS0 & RCM_SRS0_LOL) Serial.println("Loss of Lock in PLL Reset");
    8186:	4b59      	ldr	r3, [pc, #356]	; (82ec <L_31169_delayMicroseconds+0x138>)
    8188:	781b      	ldrb	r3, [r3, #0]
    818a:	071a      	lsls	r2, r3, #28
    818c:	f100 80ec 	bmi.w	8368 <L_31169_delayMicroseconds+0x1b4>
  if (RCM_SRS0 & RCM_SRS0_LVD) Serial.println("Low-voltage Detect Reset");
    8190:	4b56      	ldr	r3, [pc, #344]	; (82ec <L_31169_delayMicroseconds+0x138>)
    8192:	781b      	ldrb	r3, [r3, #0]
    8194:	079b      	lsls	r3, r3, #30
    8196:	f100 80df 	bmi.w	8358 <L_31169_delayMicroseconds+0x1a4>
  Serial.println();
    819a:	4850      	ldr	r0, [pc, #320]	; (82dc <L_31169_delayMicroseconds+0x128>)
    819c:	f001 fdea 	bl	9d74 <Print::println()>
  noInterrupts();                  // don't allow interrupts while setting up WDOG
    81a0:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    81a2:	4b53      	ldr	r3, [pc, #332]	; (82f0 <L_31169_delayMicroseconds+0x13c>)
    81a4:	f24c 5120 	movw	r1, #50464	; 0xc520
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    81a8:	f64d 1228 	movw	r2, #55592	; 0xd928
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    81ac:	2420      	movs	r4, #32
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    81ae:	81d9      	strh	r1, [r3, #14]
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    81b0:	81da      	strh	r2, [r3, #14]
    81b2:	4622      	mov	r2, r4

000081b4 <L_31169_delayMicroseconds>:
    81b4:	3a01      	subs	r2, #1
    81b6:	d1fd      	bne.n	81b4 <L_31169_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    81b8:	2200      	movs	r2, #0
  WDOG_TOVALH = 0x1000;
    81ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    81be:	8099      	strh	r1, [r3, #4]
  WDOG_TOVALL = 0x0000;
    81c0:	80da      	strh	r2, [r3, #6]
  WDOG_PRESC = 0;
    81c2:	82da      	strh	r2, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE | WDOG_STCTRLH_WDOGEN | WDOG_STCTRLH_WAITEN | WDOG_STCTRLH_STOPEN | WDOG_STCTRLH_CLKSRC;
    81c4:	881a      	ldrh	r2, [r3, #0]
    81c6:	b292      	uxth	r2, r2
    81c8:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    81cc:	801a      	strh	r2, [r3, #0]
  interrupts();
    81ce:	b662      	cpsie	i
  SERIALBMS.begin(612500);  //Tesla serial bus
    81d0:	4848      	ldr	r0, [pc, #288]	; (82f4 <L_31169_delayMicroseconds+0x140>)
    81d2:	4949      	ldr	r1, [pc, #292]	; (82f8 <L_31169_delayMicroseconds+0x144>)
    81d4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 82fc <L_31169_delayMicroseconds+0x148>
    81d8:	f001 fc28 	bl	9a2c <HardwareSerial3::begin(unsigned long)>
    81dc:	4621      	mov	r1, r4
    81de:	4848      	ldr	r0, [pc, #288]	; (8300 <L_31169_delayMicroseconds+0x14c>)
    81e0:	f004 fa96 	bl	c710 <usb_serial_write>
    81e4:	483d      	ldr	r0, [pc, #244]	; (82dc <L_31169_delayMicroseconds+0x128>)
    81e6:	f001 fdc5 	bl	9d74 <Print::println()>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    81ea:	f108 34ff 	add.w	r4, r8, #4294967295
    81ee:	f108 06df 	add.w	r6, r8, #223	; 0xdf
    81f2:	f1c8 0501 	rsb	r5, r8, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    81f6:	1928      	adds	r0, r5, r4
    81f8:	f001 ffd6 	bl	a1a8 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    81fc:	f804 0f01 	strb.w	r0, [r4, #1]!
    8200:	42b4      	cmp	r4, r6
    8202:	d1f8      	bne.n	81f6 <L_31169_delayMicroseconds+0x42>
  if (settings.version != EEPROM_VERSION) {
    8204:	f898 3000 	ldrb.w	r3, [r8]
    8208:	2b13      	cmp	r3, #19
    820a:	d001      	beq.n	8210 <L_31169_delayMicroseconds+0x5c>
    loadSettings();
    820c:	f7f9 fcc4 	bl	1b98 <loadSettings()>
  Logger::setLoglevel(Logger::Off);  //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    8210:	2004      	movs	r0, #4
    8212:	f7f9 faf9 	bl	1808 <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    8216:	4b3b      	ldr	r3, [pc, #236]	; (8304 <L_31169_delayMicroseconds+0x150>)
  digitalWrite(led, HIGH);
    8218:	2101      	movs	r1, #1
    821a:	200d      	movs	r0, #13
  lastUpdate = 0;
    821c:	2400      	movs	r4, #0
    821e:	601c      	str	r4, [r3, #0]
  digitalWrite(led, HIGH);
    8220:	f002 fc04 	bl	aa2c <digitalWrite>
	bool begin(void (*funct)(), unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (F_BUS / 1000000) * microseconds - 1;
		if (cycles < 36) return false;
		return beginCycles(funct, cycles);
    8224:	4a38      	ldr	r2, [pc, #224]	; (8308 <L_31169_delayMicroseconds+0x154>)
    8226:	4939      	ldr	r1, [pc, #228]	; (830c <L_31169_delayMicroseconds+0x158>)
    8228:	4839      	ldr	r0, [pc, #228]	; (8310 <L_31169_delayMicroseconds+0x15c>)
    822a:	f001 fcb9 	bl	9ba0 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
  bms.setPstrings(settings.Pstrings);
    822e:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
    8232:	4838      	ldr	r0, [pc, #224]	; (8314 <L_31169_delayMicroseconds+0x160>)
    8234:	f7f8 ff6c 	bl	1110 <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempConv, settings.TempOff);
    8238:	f8d8 20cc 	ldr.w	r2, [r8, #204]	; 0xcc
    823c:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
    8240:	9200      	str	r2, [sp, #0]
    8242:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
    8246:	f898 1044 	ldrb.w	r1, [r8, #68]	; 0x44
    824a:	4832      	ldr	r0, [pc, #200]	; (8314 <L_31169_delayMicroseconds+0x160>)
    824c:	f7f8 ff62 	bl	1114 <BMSModuleManager::setSensors(int, float, float, int)>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    8250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8254:	f001 ffa8 	bl	a1a8 <eeprom_read_byte>
  if (settings.voltsoc == 1) {
    8258:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
  SOC = (EEPROM.read(1000));
    825c:	4a2e      	ldr	r2, [pc, #184]	; (8318 <L_31169_delayMicroseconds+0x164>)
  if (settings.voltsoc == 1) {
    825e:	2b01      	cmp	r3, #1
    8260:	4601      	mov	r1, r0
  SOC = (EEPROM.read(1000));
    8262:	6010      	str	r0, [r2, #0]
  if (settings.voltsoc == 1) {
    8264:	d003      	beq.n	826e <L_31169_delayMicroseconds+0xba>
    if (SOC > 100) {
    8266:	2864      	cmp	r0, #100	; 0x64
    8268:	bfcc      	ite	gt
    826a:	2400      	movgt	r4, #0
    826c:	2401      	movle	r4, #1
    SOCmem = 0;
    826e:	4b2b      	ldr	r3, [pc, #172]	; (831c <L_31169_delayMicroseconds+0x168>)
	size_t print(int n)				{ return print((long)n); }
    8270:	481a      	ldr	r0, [pc, #104]	; (82dc <L_31169_delayMicroseconds+0x128>)
    8272:	601c      	str	r4, [r3, #0]
    8274:	f001 fd76 	bl	9d64 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    8278:	4818      	ldr	r0, [pc, #96]	; (82dc <L_31169_delayMicroseconds+0x128>)
    827a:	f001 fd7b 	bl	9d74 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    827e:	683b      	ldr	r3, [r7, #0]
    8280:	9303      	str	r3, [sp, #12]
	return ret;
    8282:	9803      	ldr	r0, [sp, #12]
  Pretimer = millis();
    8284:	4a26      	ldr	r2, [pc, #152]	; (8320 <L_31169_delayMicroseconds+0x16c>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8286:	683b      	ldr	r3, [r7, #0]
  Pretimer1 = millis();
    8288:	4926      	ldr	r1, [pc, #152]	; (8324 <L_31169_delayMicroseconds+0x170>)
    828a:	9302      	str	r3, [sp, #8]
  bmsstatus = Boot;
    828c:	4b26      	ldr	r3, [pc, #152]	; (8328 <L_31169_delayMicroseconds+0x174>)
	return ret;
    828e:	9c02      	ldr	r4, [sp, #8]
  Pretimer = millis();
    8290:	6010      	str	r0, [r2, #0]
  bmsstatus = Boot;
    8292:	2200      	movs	r2, #0
  myRA.begin();     // explicitly start clean
    8294:	4825      	ldr	r0, [pc, #148]	; (832c <L_31169_delayMicroseconds+0x178>)
  Pretimer1 = millis();
    8296:	600c      	str	r4, [r1, #0]
  bmsstatus = Boot;
    8298:	701a      	strb	r2, [r3, #0]
  myRA.begin();     // explicitly start clean
    829a:	f001 fa61 	bl	9760 <movingAvg::begin()>
  myRASec.begin();  // explicitly start clean
    829e:	4824      	ldr	r0, [pc, #144]	; (8330 <L_31169_delayMicroseconds+0x17c>)
    82a0:	f001 fa5e 	bl	9760 <movingAvg::begin()>
  myRAMin.begin();  // explicitly start clean
    82a4:	4823      	ldr	r0, [pc, #140]	; (8334 <L_31169_delayMicroseconds+0x180>)
}
    82a6:	b005      	add	sp, #20
    82a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    82ac:	e044      	b.n	8338 <L_31169_delayMicroseconds+0x184>
    82ae:	bf00      	nop
    82b0:	1fff8768 	.word	0x1fff8768
    82b4:	1fffc1c0 	.word	0x1fffc1c0
    82b8:	1fffbed0 	.word	0x1fffbed0
    82bc:	1fffc35c 	.word	0x1fffc35c
    82c0:	0007a120 	.word	0x0007a120
    82c4:	1fff8ffc 	.word	0x1fff8ffc
    82c8:	1fffc3b4 	.word	0x1fffc3b4
    82cc:	1fffc5d0 	.word	0x1fffc5d0
    82d0:	1fffc5d4 	.word	0x1fffc5d4
    82d4:	1fffc5ac 	.word	0x1fffc5ac
    82d8:	000157ec 	.word	0x000157ec
    82dc:	1fff8824 	.word	0x1fff8824
    82e0:	000157fc 	.word	0x000157fc
    82e4:	1fff87b4 	.word	0x1fff87b4
    82e8:	00015814 	.word	0x00015814
    82ec:	4007f000 	.word	0x4007f000
    82f0:	40052000 	.word	0x40052000
    82f4:	1fff87c8 	.word	0x1fff87c8
    82f8:	00095894 	.word	0x00095894
    82fc:	1fffc0b4 	.word	0x1fffc0b4
    8300:	00015918 	.word	0x00015918
    8304:	1fffbef8 	.word	0x1fffbef8
    8308:	000752ff 	.word	0x000752ff
    830c:	00001ae5 	.word	0x00001ae5
    8310:	1fffc09c 	.word	0x1fffc09c
    8314:	1fff900c 	.word	0x1fff900c
    8318:	1fff8728 	.word	0x1fff8728
    831c:	1fff8fe4 	.word	0x1fff8fe4
    8320:	1fff8fd8 	.word	0x1fff8fd8
    8324:	1fff8fdc 	.word	0x1fff8fdc
    8328:	1fffbe2c 	.word	0x1fffbe2c
    832c:	1fffc060 	.word	0x1fffc060
    8330:	1fffc088 	.word	0x1fffc088
    8334:	1fffc074 	.word	0x1fffc074
  myRAMin.begin();  // explicitly start clean
    8338:	f001 ba12 	b.w	9760 <movingAvg::begin()>
			uint32_t elapsed = systick_millis_count - millis_begin;
    833c:	683b      	ldr	r3, [r7, #0]
			if (usb_configuration) {
    833e:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    8340:	1b5b      	subs	r3, r3, r5
			if (usb_configuration) {
    8342:	b132      	cbz	r2, 8352 <L_31169_delayMicroseconds+0x19e>
				if (elapsed > 2000) break;
    8344:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    8348:	f63f aed8 	bhi.w	80fc <setup+0x17c>
			yield();
    834c:	f004 fae6 	bl	c91c <yield>
    8350:	e6c3      	b.n	80da <setup+0x15a>
				if (elapsed > 750) break;
    8352:	4543      	cmp	r3, r8
    8354:	d9fa      	bls.n	834c <L_31169_delayMicroseconds+0x198>
    8356:	e6d1      	b.n	80fc <setup+0x17c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8358:	2118      	movs	r1, #24
    835a:	4829      	ldr	r0, [pc, #164]	; (8400 <L_31169_delayMicroseconds+0x24c>)
    835c:	f004 f9d8 	bl	c710 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    8360:	4828      	ldr	r0, [pc, #160]	; (8404 <L_31169_delayMicroseconds+0x250>)
    8362:	f001 fd07 	bl	9d74 <Print::println()>
    8366:	e718      	b.n	819a <setup+0x21a>
    8368:	2119      	movs	r1, #25
    836a:	4827      	ldr	r0, [pc, #156]	; (8408 <L_31169_delayMicroseconds+0x254>)
    836c:	f004 f9d0 	bl	c710 <usb_serial_write>
    8370:	4824      	ldr	r0, [pc, #144]	; (8404 <L_31169_delayMicroseconds+0x250>)
    8372:	f001 fcff 	bl	9d74 <Print::println()>
    8376:	e70b      	b.n	8190 <setup+0x210>
    8378:	211c      	movs	r1, #28
    837a:	4824      	ldr	r0, [pc, #144]	; (840c <L_31169_delayMicroseconds+0x258>)
    837c:	f004 f9c8 	bl	c710 <usb_serial_write>
    8380:	4820      	ldr	r0, [pc, #128]	; (8404 <L_31169_delayMicroseconds+0x250>)
    8382:	f001 fcf7 	bl	9d74 <Print::println()>
    8386:	e6fe      	b.n	8186 <setup+0x206>
    8388:	2113      	movs	r1, #19
    838a:	4821      	ldr	r0, [pc, #132]	; (8410 <L_31169_delayMicroseconds+0x25c>)
    838c:	f004 f9c0 	bl	c710 <usb_serial_write>
    8390:	481c      	ldr	r0, [pc, #112]	; (8404 <L_31169_delayMicroseconds+0x250>)
    8392:	f001 fcef 	bl	9d74 <Print::println()>
    8396:	e6f1      	b.n	817c <setup+0x1fc>
    8398:	2112      	movs	r1, #18
    839a:	481e      	ldr	r0, [pc, #120]	; (8414 <L_31169_delayMicroseconds+0x260>)
    839c:	f004 f9b8 	bl	c710 <usb_serial_write>
    83a0:	4818      	ldr	r0, [pc, #96]	; (8404 <L_31169_delayMicroseconds+0x250>)
    83a2:	f001 fce7 	bl	9d74 <Print::println()>
    83a6:	e6e4      	b.n	8172 <setup+0x1f2>
    83a8:	2117      	movs	r1, #23
    83aa:	481b      	ldr	r0, [pc, #108]	; (8418 <L_31169_delayMicroseconds+0x264>)
    83ac:	f004 f9b0 	bl	c710 <usb_serial_write>
    83b0:	4814      	ldr	r0, [pc, #80]	; (8404 <L_31169_delayMicroseconds+0x250>)
    83b2:	f001 fcdf 	bl	9d74 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    83b6:	4b19      	ldr	r3, [pc, #100]	; (841c <L_31169_delayMicroseconds+0x268>)
    83b8:	781b      	ldrb	r3, [r3, #0]
    83ba:	061d      	lsls	r5, r3, #24
    83bc:	f57f aed4 	bpl.w	8168 <setup+0x1e8>
    83c0:	210e      	movs	r1, #14
    83c2:	4817      	ldr	r0, [pc, #92]	; (8420 <L_31169_delayMicroseconds+0x26c>)
    83c4:	f004 f9a4 	bl	c710 <usb_serial_write>
    83c8:	480e      	ldr	r0, [pc, #56]	; (8404 <L_31169_delayMicroseconds+0x250>)
    83ca:	f001 fcd3 	bl	9d74 <Print::println()>
    83ce:	e6cb      	b.n	8168 <setup+0x1e8>
    83d0:	210e      	movs	r1, #14
    83d2:	4814      	ldr	r0, [pc, #80]	; (8424 <L_31169_delayMicroseconds+0x270>)
    83d4:	f004 f99c 	bl	c710 <usb_serial_write>
    83d8:	480a      	ldr	r0, [pc, #40]	; (8404 <L_31169_delayMicroseconds+0x250>)
    83da:	f001 fccb 	bl	9d74 <Print::println()>
    83de:	e6b9      	b.n	8154 <setup+0x1d4>
    83e0:	210c      	movs	r1, #12
    83e2:	4811      	ldr	r0, [pc, #68]	; (8428 <L_31169_delayMicroseconds+0x274>)
    83e4:	f004 f994 	bl	c710 <usb_serial_write>
    83e8:	4806      	ldr	r0, [pc, #24]	; (8404 <L_31169_delayMicroseconds+0x250>)
    83ea:	f001 fcc3 	bl	9d74 <Print::println()>
    83ee:	e6ac      	b.n	814a <setup+0x1ca>
    83f0:	2121      	movs	r1, #33	; 0x21
    83f2:	480e      	ldr	r0, [pc, #56]	; (842c <L_31169_delayMicroseconds+0x278>)
    83f4:	f004 f98c 	bl	c710 <usb_serial_write>
    83f8:	4802      	ldr	r0, [pc, #8]	; (8404 <L_31169_delayMicroseconds+0x250>)
    83fa:	f001 fcbb 	bl	9d74 <Print::println()>
    83fe:	e69f      	b.n	8140 <setup+0x1c0>
    8400:	000158fc 	.word	0x000158fc
    8404:	1fff8824 	.word	0x1fff8824
    8408:	000158e0 	.word	0x000158e0
    840c:	000158c0 	.word	0x000158c0
    8410:	000158ac 	.word	0x000158ac
    8414:	00015898 	.word	0x00015898
    8418:	00015870 	.word	0x00015870
    841c:	4007f000 	.word	0x4007f000
    8420:	00015888 	.word	0x00015888
    8424:	00015860 	.word	0x00015860
    8428:	00015850 	.word	0x00015850
    842c:	0001582c 	.word	0x0001582c

00008430 <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    8430:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    8432:	4d07      	ldr	r5, [pc, #28]	; (8450 <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    8434:	4c07      	ldr	r4, [pc, #28]	; (8454 <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    8436:	4908      	ldr	r1, [pc, #32]	; (8458 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    8438:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    843a:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    843c:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    843e:	6503      	str	r3, [r0, #80]	; 0x50
}
    8440:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    8442:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    8444:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    8446:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    844a:	600b      	str	r3, [r1, #0]
}
    844c:	4770      	bx	lr
    844e:	bf00      	nop
    8450:	1fffc1b8 	.word	0x1fffc1b8
    8454:	1fffc1b4 	.word	0x1fffc1b4
    8458:	1fffc1bc 	.word	0x1fffc1bc

0000845c <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    845c:	2000      	movs	r0, #0
    845e:	4770      	bx	lr

00008460 <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    8460:	4770      	bx	lr
    8462:	bf00      	nop

00008464 <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    8464:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    8466:	4b1b      	ldr	r3, [pc, #108]	; (84d4 <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    8468:	491b      	ldr	r1, [pc, #108]	; (84d8 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    846a:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    846c:	4604      	mov	r4, r0
    defaultMask.id = 0;
    846e:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    8470:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    8472:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    8476:	211d      	movs	r1, #29
    8478:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    847c:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    847e:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    8480:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    8482:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    8484:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    8486:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    848a:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    848e:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    8492:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    8496:	4629      	mov	r1, r5
    rx_buffer=0;
    8498:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    849c:	2240      	movs	r2, #64	; 0x40
    849e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    84a2:	f006 f8a3 	bl	e5ec <memset>
        listener[i] = NULL;
    84a6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    84aa:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    84ae:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    84b2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    84b6:	2298      	movs	r2, #152	; 0x98
    84b8:	4629      	mov	r1, r5
    84ba:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    84be:	f006 f895 	bl	e5ec <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    84c2:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    84c4:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    84c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    84ca:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    84ce:	4620      	mov	r0, r4
    84d0:	bd38      	pop	{r3, r4, r5, pc}
    84d2:	bf00      	nop
    84d4:	1fffc35c 	.word	0x1fffc35c
    84d8:	40024000 	.word	0x40024000

000084dc <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    84dc:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    84de:	4e2d      	ldr	r6, [pc, #180]	; (8594 <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    84e0:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    84e4:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    84e8:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    84ec:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    84f0:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    84f4:	d921      	bls.n	853a <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    84f6:	462b      	mov	r3, r5
        divisor++;
    84f8:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    84fc:	3302      	adds	r3, #2
    84fe:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    8502:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    8504:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    8508:	d80f      	bhi.n	852a <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    850a:	fbb6 f3f3 	udiv	r3, r6, r3
    850e:	1acb      	subs	r3, r1, r3
            if (error < 0)
    8510:	2b00      	cmp	r3, #0
    8512:	bfb8      	it	lt
    8514:	425b      	neglt	r3, r3
            if (error < bestError) {
    8516:	42a3      	cmp	r3, r4
    8518:	da09      	bge.n	852e <FlexCAN::setBaudRate(unsigned long)+0x52>
    851a:	461c      	mov	r4, r3
                bestDivisor = divisor;
    851c:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    851e:	2a0b      	cmp	r2, #11
    8520:	d906      	bls.n	8530 <FlexCAN::setBaudRate(unsigned long)+0x54>
    8522:	2a12      	cmp	r2, #18
    8524:	bf9c      	itt	ls
    8526:	461c      	movls	r4, r3
    8528:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    852a:	4673      	mov	r3, lr
    852c:	e7e4      	b.n	84f8 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    852e:	d0f6      	beq.n	851e <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    8530:	2a05      	cmp	r2, #5
    8532:	d8fa      	bhi.n	852a <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    8534:	1c6b      	adds	r3, r5, #1
    8536:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    853a:	f1ac 0c05 	sub.w	ip, ip, #5
    853e:	f1bc 0f14 	cmp.w	ip, #20
    8542:	d81e      	bhi.n	8582 <FlexCAN::setBaudRate(unsigned long)+0xa6>
    8544:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    8548:	dc1b      	bgt.n	8582 <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    854a:	4b13      	ldr	r3, [pc, #76]	; (8598 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    854c:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    854e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    8552:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    8556:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    855a:	7853      	ldrb	r3, [r2, #1]
    855c:	7892      	ldrb	r2, [r2, #2]
    855e:	04db      	lsls	r3, r3, #19
    8560:	0412      	lsls	r2, r2, #16
    8562:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    8566:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    856a:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    856e:	4313      	orrs	r3, r2
    8570:	430b      	orrs	r3, r1
    8572:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    8576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    857a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    857e:	6043      	str	r3, [r0, #4]
}
    8580:	bd70      	pop	{r4, r5, r6, pc}
    8582:	4806      	ldr	r0, [pc, #24]	; (859c <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    8584:	2139      	movs	r1, #57	; 0x39
    8586:	f004 f8c3 	bl	c710 <usb_serial_write>
    858a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    858e:	4804      	ldr	r0, [pc, #16]	; (85a0 <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    8590:	f001 bbf0 	b.w	9d74 <Print::println()>
    8594:	00f42400 	.word	0x00f42400
    8598:	1fff8774 	.word	0x1fff8774
    859c:	0001593c 	.word	0x0001593c
    85a0:	1fff8824 	.word	0x1fff8824

000085a4 <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    85a4:	b530      	push	{r4, r5, lr}
    85a6:	2901      	cmp	r1, #1
    85a8:	4604      	mov	r4, r0
    85aa:	bf38      	it	cc
    85ac:	2101      	movcc	r1, #1
    85ae:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    85b0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    85b4:	4608      	mov	r0, r1
    85b6:	bf28      	it	cs
    85b8:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    85ba:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    85be:	b31b      	cbz	r3, 8608 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    85c0:	f1c0 0e10 	rsb	lr, r0, #16
    85c4:	fa5f f58e 	uxtb.w	r5, lr
    85c8:	46ae      	mov	lr, r5
    85ca:	2200      	movs	r2, #0
    85cc:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    85ce:	6823      	ldr	r3, [r4, #0]
    85d0:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    85d4:	f85c 3002 	ldr.w	r3, [ip, r2]
    85d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    85dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    85e0:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    85e4:	3210      	adds	r2, #16
    85e6:	4295      	cmp	r5, r2
    85e8:	d1f1      	bne.n	85ce <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    85ea:	2510      	movs	r5, #16
    85ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    85f0:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    85f2:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    85f6:	3380      	adds	r3, #128	; 0x80
    85f8:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    85fc:	fa5f fe82 	uxtb.w	lr, r2
    8600:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    8604:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    8606:	d1f3      	bne.n	85f0 <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    8608:	bd30      	pop	{r4, r5, pc}
    860a:	bf00      	nop

0000860c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    860c:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    8610:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    8614:	b2db      	uxtb	r3, r3
    8616:	429a      	cmp	r2, r3
    8618:	d222      	bcs.n	8660 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    861a:	b510      	push	{r4, lr}
    861c:	468c      	mov	ip, r1
    861e:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    8620:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    8624:	e9d1 0100 	ldrd	r0, r1, [r1]
    8628:	3304      	adds	r3, #4
    862a:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    862e:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    8632:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    8636:	07db      	lsls	r3, r3, #31
    8638:	d513      	bpl.n	8662 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    863a:	f8dc 0000 	ldr.w	r0, [ip]
    863e:	2310      	movs	r3, #16
    8640:	3184      	adds	r1, #132	; 0x84
    8642:	fb13 1102 	smlabb	r1, r3, r2, r1
    8646:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    864a:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    864c:	f8de 1000 	ldr.w	r1, [lr]
    8650:	3180      	adds	r1, #128	; 0x80
    8652:	fb13 1302 	smlabb	r3, r3, r2, r1
    8656:	681a      	ldr	r2, [r3, #0]
    8658:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    865c:	601a      	str	r2, [r3, #0]
}
    865e:	bd10      	pop	{r4, pc}
    8660:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    8662:	f8dc 4000 	ldr.w	r4, [ip]
    8666:	4809      	ldr	r0, [pc, #36]	; (868c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    8668:	2310      	movs	r3, #16
    866a:	3184      	adds	r1, #132	; 0x84
    866c:	fb13 1102 	smlabb	r1, r3, r2, r1
    8670:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    8674:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    8676:	f8de 1000 	ldr.w	r1, [lr]
    867a:	3180      	adds	r1, #128	; 0x80
    867c:	fb13 1302 	smlabb	r3, r3, r2, r1
    8680:	681a      	ldr	r2, [r3, #0]
    8682:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    8686:	601a      	str	r2, [r3, #0]
}
    8688:	bd10      	pop	{r4, pc}
    868a:	bf00      	nop
    868c:	1ffc0000 	.word	0x1ffc0000

00008690 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>:
    8690:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    8694:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    8698:	b2db      	uxtb	r3, r3
    869a:	429a      	cmp	r2, r3
    869c:	d301      	bcc.n	86a2 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)+0x12>
    return (false);
    869e:	2000      	movs	r0, #0
}
    86a0:	4770      	bx	lr
        filter.id = MBFilters[mbox].id;
    86a2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
        filter.flags.extended = MBFilters[mbox].flags.extended;
    86a6:	790b      	ldrb	r3, [r1, #4]
        filter.id = MBFilters[mbox].id;
    86a8:	6850      	ldr	r0, [r2, #4]
    86aa:	6008      	str	r0, [r1, #0]
        filter.flags.extended = MBFilters[mbox].flags.extended;
    86ac:	f892 c008 	ldrb.w	ip, [r2, #8]
    86b0:	f36c 0300 	bfi	r3, ip, #0, #1
    86b4:	710b      	strb	r3, [r1, #4]
        filter.flags.remote = MBFilters[mbox].flags.remote;
    86b6:	7a13      	ldrb	r3, [r2, #8]
    86b8:	f891 c004 	ldrb.w	ip, [r1, #4]
    86bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
    86c0:	f363 0c41 	bfi	ip, r3, #1, #1
    86c4:	f881 c004 	strb.w	ip, [r1, #4]
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    86c8:	7a13      	ldrb	r3, [r2, #8]
    86ca:	fa5f f28c 	uxtb.w	r2, ip
    86ce:	089b      	lsrs	r3, r3, #2
    86d0:	f363 0287 	bfi	r2, r3, #2, #6
        return (true);
    86d4:	2001      	movs	r0, #1
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    86d6:	710a      	strb	r2, [r1, #4]
        return (true);
    86d8:	4770      	bx	lr
    86da:	bf00      	nop

000086dc <FlexCAN::setMask(unsigned long, unsigned char)>:
    86dc:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    86e0:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    86e4:	b2db      	uxtb	r3, r3
    86e6:	429a      	cmp	r2, r3
    86e8:	d221      	bcs.n	872e <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    86ea:	6803      	ldr	r3, [r0, #0]
{
    86ec:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    86ee:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    86f0:	01e4      	lsls	r4, r4, #7
    86f2:	d41d      	bmi.n	8730 <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    86f4:	681c      	ldr	r4, [r3, #0]
    86f6:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    86fa:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    86fc:	6804      	ldr	r4, [r0, #0]
    86fe:	6823      	ldr	r3, [r4, #0]
    8700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8704:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    8706:	6804      	ldr	r4, [r0, #0]
    8708:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    870a:	01db      	lsls	r3, r3, #7
    870c:	d5fc      	bpl.n	8708 <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    870e:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    8712:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    8716:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    8718:	6802      	ldr	r2, [r0, #0]
    871a:	6813      	ldr	r3, [r2, #0]
    871c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    8720:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    8722:	6802      	ldr	r2, [r0, #0]
    8724:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    8726:	01db      	lsls	r3, r3, #7
    8728:	d4fc      	bmi.n	8724 <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    872a:	bc10      	pop	{r4}
    872c:	4770      	bx	lr
    872e:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    8730:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    8734:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    8738:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    873a:	6019      	str	r1, [r3, #0]
}
    873c:	4770      	bx	lr
    873e:	bf00      	nop

00008740 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    8740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8744:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    8746:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    874a:	f89d 8018 	ldrb.w	r8, [sp, #24]
    874e:	4606      	mov	r6, r0
    8750:	460d      	mov	r5, r1
    8752:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    8754:	2a00      	cmp	r2, #0
    8756:	f000 808f 	beq.w	8878 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    875a:	4a63      	ldr	r2, [pc, #396]	; (88e8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    875c:	6831      	ldr	r1, [r6, #0]
    875e:	4291      	cmp	r1, r2
    8760:	d07c      	beq.n	885c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    8762:	4a62      	ldr	r2, [pc, #392]	; (88ec <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    8764:	7813      	ldrb	r3, [r2, #0]
    8766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    876a:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    876c:	6833      	ldr	r3, [r6, #0]
    876e:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    8772:	4293      	cmp	r3, r2
    8774:	d106      	bne.n	8784 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    8776:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    877a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    877c:	f043 0310 	orr.w	r3, r3, #16
    8780:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    8782:	6833      	ldr	r3, [r6, #0]
    8784:	685a      	ldr	r2, [r3, #4]
    8786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    878a:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    878c:	6832      	ldr	r2, [r6, #0]
    878e:	6813      	ldr	r3, [r2, #0]
    8790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    8794:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    8796:	6832      	ldr	r2, [r6, #0]
    8798:	6813      	ldr	r3, [r2, #0]
    879a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    879e:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    87a0:	6832      	ldr	r2, [r6, #0]
    87a2:	6813      	ldr	r3, [r2, #0]
    87a4:	02d9      	lsls	r1, r3, #11
    87a6:	d4fc      	bmi.n	87a2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    87a8:	6813      	ldr	r3, [r2, #0]
    87aa:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    87ae:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    87b0:	6833      	ldr	r3, [r6, #0]
    87b2:	681c      	ldr	r4, [r3, #0]
    87b4:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    87b8:	d1fb      	bne.n	87b2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    87ba:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    87bc:	01d2      	lsls	r2, r2, #7
    87be:	d5fc      	bpl.n	87ba <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    87c0:	681a      	ldr	r2, [r3, #0]
    87c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    87c6:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    87c8:	4629      	mov	r1, r5
    87ca:	4630      	mov	r0, r6
    87cc:	f7ff fe86 	bl	84dc <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    87d0:	6832      	ldr	r2, [r6, #0]
    87d2:	6813      	ldr	r3, [r2, #0]
    87d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    87d8:	6013      	str	r3, [r2, #0]
    87da:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    87de:	2910      	cmp	r1, #16
    87e0:	d012      	beq.n	8808 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    87e2:	2500      	movs	r5, #0
        setMask (0, c);
    87e4:	462a      	mov	r2, r5
    87e6:	4630      	mov	r0, r6
    87e8:	2100      	movs	r1, #0
    87ea:	f7ff ff77 	bl	86dc <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    87ee:	462a      	mov	r2, r5
    87f0:	4639      	mov	r1, r7
    87f2:	f7ff ff0b 	bl	860c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    87f6:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    87fa:	3401      	adds	r4, #1
    87fc:	f1c1 0310 	rsb	r3, r1, #16
    8800:	b2e5      	uxtb	r5, r4
    8802:	b2db      	uxtb	r3, r3
    8804:	429d      	cmp	r5, r3
    8806:	d3ed      	bcc.n	87e4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    8808:	6832      	ldr	r2, [r6, #0]
    880a:	6813      	ldr	r3, [r2, #0]
    880c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    8810:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    8812:	6833      	ldr	r3, [r6, #0]
    8814:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    8816:	01d0      	lsls	r0, r2, #7
    8818:	d4fc      	bmi.n	8814 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    881a:	681a      	ldr	r2, [r3, #0]
    881c:	0112      	lsls	r2, r2, #4
    881e:	d4fc      	bmi.n	881a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    8820:	4630      	mov	r0, r6
    8822:	f7ff febf 	bl	85a4 <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    8826:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    882a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    882e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    8832:	2240      	movs	r2, #64	; 0x40
    8834:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    8836:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    883a:	0953      	lsrs	r3, r2, #5
    883c:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8840:	3340      	adds	r3, #64	; 0x40
    8842:	009b      	lsls	r3, r3, #2
    8844:	2101      	movs	r1, #1
    8846:	f002 021f 	and.w	r2, r2, #31
    884a:	fa01 f202 	lsl.w	r2, r1, r2
    884e:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    8850:	6833      	ldr	r3, [r6, #0]
    8852:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8856:	6298      	str	r0, [r3, #40]	; 0x28
}
    8858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    885c:	2c01      	cmp	r4, #1
    885e:	d02b      	beq.n	88b8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    8860:	4b23      	ldr	r3, [pc, #140]	; (88f0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    8862:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    8866:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    886a:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    886c:	d02b      	beq.n	88c6 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    886e:	4b20      	ldr	r3, [pc, #128]	; (88f0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    8870:	f44f 7200 	mov.w	r2, #512	; 0x200
    8874:	635a      	str	r2, [r3, #52]	; 0x34
    8876:	e774      	b.n	8762 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    8878:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    887c:	0100      	lsls	r0, r0, #4
    887e:	f001 fea9 	bl	a5d4 <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    8882:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    8886:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    888a:	b30b      	cbz	r3, 88d0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    888c:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    8890:	2300      	movs	r3, #0
    8892:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    8896:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    889a:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    889e:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    88a2:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    88a6:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    88aa:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    88ae:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    88b2:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    88b6:	e750      	b.n	875a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    88b8:	4b0e      	ldr	r3, [pc, #56]	; (88f4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    88ba:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    88be:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    88c2:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    88c4:	d1d3      	bne.n	886e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    88c6:	4b0b      	ldr	r3, [pc, #44]	; (88f4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    88c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    88cc:	64da      	str	r2, [r3, #76]	; 0x4c
    88ce:	e748      	b.n	8762 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    88d0:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    88d4:	0100      	lsls	r0, r0, #4
    88d6:	f001 fe7d 	bl	a5d4 <operator new[](unsigned int)>
    88da:	4603      	mov	r3, r0
    88dc:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    88e0:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    88e4:	e7d2      	b.n	888c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    88e6:	bf00      	nop
    88e8:	40024000 	.word	0x40024000
    88ec:	40065000 	.word	0x40065000
    88f0:	40049000 	.word	0x40049000
    88f4:	4004a000 	.word	0x4004a000

000088f8 <FlexCAN::available()>:
{
    88f8:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    88fa:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    88fe:	0963      	lsrs	r3, r4, #5
    8900:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8904:	3340      	adds	r3, #64	; 0x40
    8906:	009b      	lsls	r3, r3, #2
    8908:	4602      	mov	r2, r0
    890a:	f004 041f 	and.w	r4, r4, #31
    890e:	6818      	ldr	r0, [r3, #0]
    8910:	2101      	movs	r1, #1
    8912:	40a1      	lsls	r1, r4
    8914:	ea10 0401 	ands.w	r4, r0, r1
    8918:	bf14      	ite	ne
    891a:	2001      	movne	r0, #1
    891c:	2000      	moveq	r0, #0
    891e:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    8922:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    8926:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    892a:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    892e:	b280      	uxth	r0, r0
    8930:	b29b      	uxth	r3, r3
    if (entries < 0) {
    8932:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    8934:	bf44      	itt	mi
    8936:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    893a:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    893c:	b164      	cbz	r4, 8958 <FlexCAN::available()+0x60>
    893e:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    8942:	0953      	lsrs	r3, r2, #5
    8944:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8948:	3340      	adds	r3, #64	; 0x40
    894a:	2101      	movs	r1, #1
    894c:	009b      	lsls	r3, r3, #2
    894e:	f002 021f 	and.w	r2, r2, #31
    8952:	fa01 f202 	lsl.w	r2, r1, r2
    8956:	601a      	str	r2, [r3, #0]
}
    8958:	bc10      	pop	{r4}
    895a:	4770      	bx	lr

0000895c <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    895c:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    8960:	b538      	push	{r3, r4, r5, lr}
    8962:	0953      	lsrs	r3, r2, #5
    8964:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8968:	3340      	adds	r3, #64	; 0x40
    896a:	009b      	lsls	r3, r3, #2
    896c:	4604      	mov	r4, r0
    896e:	2501      	movs	r5, #1
    8970:	4608      	mov	r0, r1
    8972:	f002 021f 	and.w	r2, r2, #31
    8976:	6819      	ldr	r1, [r3, #0]
    8978:	fa05 f202 	lsl.w	r2, r5, r2
    897c:	4211      	tst	r1, r2
    897e:	bf14      	ite	ne
    8980:	4629      	movne	r1, r5
    8982:	2100      	moveq	r1, #0
    8984:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    8988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    898c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8990:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8994:	b292      	uxth	r2, r2
    8996:	b29b      	uxth	r3, r3
    8998:	429a      	cmp	r2, r3
    899a:	d028      	beq.n	89ee <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    899c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    89a0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    89a4:	b29b      	uxth	r3, r3
    89a6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    89aa:	2210      	movs	r2, #16
    89ac:	f001 fcc2 	bl	a334 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    89b0:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    89b4:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    89b8:	b29b      	uxth	r3, r3
    89ba:	442b      	add	r3, r5
    89bc:	fbb3 f1f2 	udiv	r1, r3, r2
    89c0:	fb02 3311 	mls	r3, r2, r1, r3
    89c4:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    89c6:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    89ca:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    89ce:	4628      	mov	r0, r5
    89d0:	b161      	cbz	r1, 89ec <FlexCAN::read(CAN_message_t&)+0x90>
    89d2:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    89d6:	0953      	lsrs	r3, r2, #5
    89d8:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    89dc:	3340      	adds	r3, #64	; 0x40
    89de:	2101      	movs	r1, #1
    89e0:	009b      	lsls	r3, r3, #2
    89e2:	f002 021f 	and.w	r2, r2, #31
    89e6:	fa01 f202 	lsl.w	r2, r1, r2
    89ea:	601a      	str	r2, [r3, #0]
}
    89ec:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    89ee:	2000      	movs	r0, #0
    89f0:	e7ee      	b.n	89d0 <FlexCAN::read(CAN_message_t&)+0x74>
    89f2:	bf00      	nop

000089f4 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    89f4:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    89f6:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    89f8:	6804      	ldr	r4, [r0, #0]
    89fa:	f04f 0e10 	mov.w	lr, #16
    89fe:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    8a02:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    8a04:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    8a08:	d525      	bpl.n	8a56 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    8a0a:	680c      	ldr	r4, [r1, #0]
    8a0c:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    8a10:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    8a14:	6804      	ldr	r4, [r0, #0]
    8a16:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    8a1a:	688c      	ldr	r4, [r1, #8]
    8a1c:	fb1e cc02 	smlabb	ip, lr, r2, ip
    8a20:	ba24      	rev	r4, r4
    8a22:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8a26:	6804      	ldr	r4, [r0, #0]
    8a28:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    8a2c:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    8a30:	fb12 fe0e 	smulbb	lr, r2, lr
    8a34:	68ca      	ldr	r2, [r1, #12]
    8a36:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8a38:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    8a3c:	079a      	lsls	r2, r3, #30
    8a3e:	d53c      	bpl.n	8aba <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8a40:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8a42:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8a44:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8a46:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8a48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    8a4c:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8a50:	f842 300e 	str.w	r3, [r2, lr]
}
    8a54:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    8a56:	680d      	ldr	r5, [r1, #0]
    8a58:	4c1d      	ldr	r4, [pc, #116]	; (8ad0 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    8a5a:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    8a5e:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    8a62:	6804      	ldr	r4, [r0, #0]
    8a64:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    8a68:	688c      	ldr	r4, [r1, #8]
    8a6a:	fb1e cc02 	smlabb	ip, lr, r2, ip
    8a6e:	ba24      	rev	r4, r4
    8a70:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8a74:	6804      	ldr	r4, [r0, #0]
    8a76:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    8a7a:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    8a7e:	fb12 fe0e 	smulbb	lr, r2, lr
    8a82:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    8a84:	079b      	lsls	r3, r3, #30
    8a86:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8a88:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    8a8c:	d50a      	bpl.n	8aa4 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8a8e:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8a90:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8a92:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8a94:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8a96:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8a9a:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8a9e:	f842 300e 	str.w	r3, [r2, lr]
}
    8aa2:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8aa4:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8aa6:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8aa8:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8aaa:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8aac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8ab0:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    8ab4:	f842 300e 	str.w	r3, [r2, lr]
}
    8ab8:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8aba:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8abc:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8abe:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8ac0:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8ac2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8ac6:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8aca:	f842 300e 	str.w	r3, [r2, lr]
}
    8ace:	bd30      	pop	{r4, r5, pc}
    8ad0:	1ffc0000 	.word	0x1ffc0000

00008ad4 <FlexCAN::write(CAN_message_t const&)>:
{
    8ad4:	b570      	push	{r4, r5, r6, lr}
    8ad6:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    8ad8:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    8adc:	0943      	lsrs	r3, r0, #5
    8ade:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8ae2:	3340      	adds	r3, #64	; 0x40
    8ae4:	009b      	lsls	r3, r3, #2
    8ae6:	f000 001f 	and.w	r0, r0, #31
    8aea:	681d      	ldr	r5, [r3, #0]
    8aec:	2201      	movs	r2, #1
    8aee:	4082      	lsls	r2, r0
    8af0:	4215      	tst	r5, r2
    8af2:	bf14      	ite	ne
    8af4:	2501      	movne	r5, #1
    8af6:	2500      	moveq	r5, #0
    8af8:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    8afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    8b00:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    8b04:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    8b08:	b29b      	uxth	r3, r3
    8b0a:	b292      	uxth	r2, r2
    8b0c:	429a      	cmp	r2, r3
    8b0e:	d02d      	beq.n	8b6c <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    8b10:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    8b14:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    8b18:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    8b1c:	b29b      	uxth	r3, r3
    8b1e:	3301      	adds	r3, #1
    8b20:	fbb3 f6f0 	udiv	r6, r3, r0
    8b24:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    8b28:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    8b2a:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    8b2c:	4296      	cmp	r6, r2
    8b2e:	d042      	beq.n	8bb6 <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    8b30:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    8b34:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8b38:	b29b      	uxth	r3, r3
    8b3a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    8b3e:	2210      	movs	r2, #16
    8b40:	f001 fbf8 	bl	a334 <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    8b44:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    8b48:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    8b4c:	2001      	movs	r0, #1
    8b4e:	b165      	cbz	r5, 8b6a <FlexCAN::write(CAN_message_t const&)+0x96>
    8b50:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    8b54:	0953      	lsrs	r3, r2, #5
    8b56:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8b5a:	3340      	adds	r3, #64	; 0x40
    8b5c:	2101      	movs	r1, #1
    8b5e:	009b      	lsls	r3, r3, #2
    8b60:	f002 021f 	and.w	r2, r2, #31
    8b64:	fa01 f202 	lsl.w	r2, r1, r2
    8b68:	601a      	str	r2, [r3, #0]
}
    8b6a:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    8b6c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    8b70:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    8b74:	b2d2      	uxtb	r2, r2
    8b76:	2a0f      	cmp	r2, #15
    8b78:	d8ca      	bhi.n	8b10 <FlexCAN::write(CAN_message_t const&)+0x3c>
    8b7a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    8b7e:	332c      	adds	r3, #44	; 0x2c
    8b80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8b84:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    8b88:	e003      	b.n	8b92 <FlexCAN::write(CAN_message_t const&)+0xbe>
    8b8a:	4563      	cmp	r3, ip
    8b8c:	f102 0201 	add.w	r2, r2, #1
    8b90:	d0be      	beq.n	8b10 <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    8b92:	f853 0f04 	ldr.w	r0, [r3, #4]!
    8b96:	2800      	cmp	r0, #0
    8b98:	d1f7      	bne.n	8b8a <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    8b9a:	6826      	ldr	r6, [r4, #0]
    8b9c:	0110      	lsls	r0, r2, #4
    8b9e:	3680      	adds	r6, #128	; 0x80
    8ba0:	5830      	ldr	r0, [r6, r0]
    8ba2:	f3c0 6003 	ubfx	r0, r0, #24, #4
    8ba6:	2808      	cmp	r0, #8
    8ba8:	d1ef      	bne.n	8b8a <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    8baa:	4620      	mov	r0, r4
    8bac:	b2d2      	uxtb	r2, r2
    8bae:	f7ff ff21 	bl	89f4 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    8bb2:	2001      	movs	r0, #1
    8bb4:	e7cb      	b.n	8b4e <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    8bb6:	2000      	movs	r0, #0
    8bb8:	e7c9      	b.n	8b4e <FlexCAN::write(CAN_message_t const&)+0x7a>
    8bba:	bf00      	nop

00008bbc <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    8bbc:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8bbe:	6801      	ldr	r1, [r0, #0]
    8bc0:	f04f 0c10 	mov.w	ip, #16
    8bc4:	3180      	adds	r1, #128	; 0x80
    8bc6:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    8bca:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8bcc:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    8bce:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    8bd0:	f3c1 4603 	ubfx	r6, r1, #16, #4
    8bd4:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8bd6:	6804      	ldr	r4, [r0, #0]
    8bd8:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8bda:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8bde:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    8be2:	f3c1 5500 	ubfx	r5, r1, #20, #1
    8be6:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8bea:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    8bee:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8bf2:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    8bf6:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8bf8:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    8bfc:	b2d2      	uxtb	r2, r2
    8bfe:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8c00:	fabc fc8c 	clz	ip, ip
    8c04:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8c06:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8c0a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8c0e:	601c      	str	r4, [r3, #0]
    8c10:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    8c14:	bf5c      	itt	pl
    8c16:	0ca4      	lsrpl	r4, r4, #18
    8c18:	601c      	strpl	r4, [r3, #0]
    8c1a:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    8c1c:	6802      	ldr	r2, [r0, #0]
    8c1e:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    8c20:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    8c22:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    8c26:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    8c28:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    8c2c:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    8c2e:	d905      	bls.n	8c3c <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    8c30:	6802      	ldr	r2, [r0, #0]
    8c32:	328c      	adds	r2, #140	; 0x8c
    8c34:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    8c38:	ba12      	rev	r2, r2
    8c3a:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    8c3c:	f015 0108 	ands.w	r1, r5, #8
    8c40:	d108      	bne.n	8c54 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    8c42:	f106 0008 	add.w	r0, r6, #8
    8c46:	f1c6 0208 	rsb	r2, r6, #8
    8c4a:	4418      	add	r0, r3
}
    8c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    8c50:	f005 bccc 	b.w	e5ec <memset>
}
    8c54:	bd70      	pop	{r4, r5, r6, pc}
    8c56:	bf00      	nop

00008c58 <FlexCAN::message_isr()>:
{
    8c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    8c5c:	4683      	mov	fp, r0
{
    8c5e:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    8c60:	f85b 2bb4 	ldr.w	r2, [fp], #180
    8c64:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    8c68:	f8cd 900c 	str.w	r9, [sp, #12]
{
    8c6c:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    8c6e:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    8c70:	2400      	movs	r4, #0
    8c72:	e008      	b.n	8c86 <FlexCAN::message_isr()+0x2e>
        switch (code) {
    8c74:	2b02      	cmp	r3, #2
    8c76:	d04c      	beq.n	8d12 <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    8c78:	3401      	adds	r4, #1
    8c7a:	2c10      	cmp	r4, #16
    8c7c:	f10a 0a08 	add.w	sl, sl, #8
    8c80:	f10b 0b04 	add.w	fp, fp, #4
    8c84:	d040      	beq.n	8d08 <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    8c86:	fa29 f304 	lsr.w	r3, r9, r4
    8c8a:	07d9      	lsls	r1, r3, #31
    8c8c:	d5f4      	bpl.n	8c78 <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    8c8e:	0127      	lsls	r7, r4, #4
    8c90:	f102 0380 	add.w	r3, r2, #128	; 0x80
    8c94:	59db      	ldr	r3, [r3, r7]
    8c96:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    8c9a:	2b06      	cmp	r3, #6
    8c9c:	d039      	beq.n	8d12 <FlexCAN::message_isr()+0xba>
    8c9e:	2b08      	cmp	r3, #8
    8ca0:	d1e8      	bne.n	8c74 <FlexCAN::message_isr()+0x1c>
    8ca2:	f8db 6000 	ldr.w	r6, [fp]
    8ca6:	2e00      	cmp	r6, #0
    8ca8:	f000 80b9 	beq.w	8e1e <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    8cac:	8831      	ldrh	r1, [r6, #0]
    8cae:	8873      	ldrh	r3, [r6, #2]
    8cb0:	b289      	uxth	r1, r1
    8cb2:	b29b      	uxth	r3, r3
    8cb4:	4299      	cmp	r1, r3
    8cb6:	f000 80be 	beq.w	8e36 <FlexCAN::message_isr()+0x1de>
    8cba:	8831      	ldrh	r1, [r6, #0]
    8cbc:	8873      	ldrh	r3, [r6, #2]
    8cbe:	b289      	uxth	r1, r1
    8cc0:	b29b      	uxth	r3, r3
    8cc2:	4299      	cmp	r1, r3
    8cc4:	d0d8      	beq.n	8c78 <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    8cc6:	8873      	ldrh	r3, [r6, #2]
    8cc8:	68b1      	ldr	r1, [r6, #8]
    8cca:	b29b      	uxth	r3, r3
    8ccc:	2210      	movs	r2, #16
    8cce:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    8cd2:	eb0d 0002 	add.w	r0, sp, r2
    8cd6:	f001 fb2d 	bl	a334 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    8cda:	8873      	ldrh	r3, [r6, #2]
    8cdc:	88b2      	ldrh	r2, [r6, #4]
    8cde:	b29b      	uxth	r3, r3
    8ce0:	3301      	adds	r3, #1
    8ce2:	fbb3 f1f2 	udiv	r1, r3, r2
    8ce6:	fb02 3311 	mls	r3, r2, r1, r3
    8cea:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    8cec:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    8cee:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    8cf0:	a904      	add	r1, sp, #16
    8cf2:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    8cf4:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    8cf6:	f7ff fe7d 	bl	89f4 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    8cfa:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8cfc:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    8cfe:	f10a 0a08 	add.w	sl, sl, #8
    8d02:	f10b 0b04 	add.w	fp, fp, #4
    8d06:	d1be      	bne.n	8c86 <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8d08:	9b03      	ldr	r3, [sp, #12]
    8d0a:	6313      	str	r3, [r2, #48]	; 0x30
}
    8d0c:	b009      	add	sp, #36	; 0x24
    8d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    8d12:	b2e2      	uxtb	r2, r4
    8d14:	a904      	add	r1, sp, #16
    8d16:	4628      	mov	r0, r5
    8d18:	f7ff ff50 	bl	8bbc <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    8d1c:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    8d20:	b16b      	cbz	r3, 8d3e <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    8d22:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    8d26:	3301      	adds	r3, #1
    8d28:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    8d2c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8d30:	075b      	lsls	r3, r3, #29
    8d32:	d504      	bpl.n	8d3e <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    8d34:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    8d38:	3301      	adds	r3, #1
    8d3a:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    8d3e:	2301      	movs	r3, #1
    8d40:	40a3      	lsls	r3, r4
    8d42:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    8d44:	2300      	movs	r3, #0
    8d46:	f105 0680 	add.w	r6, r5, #128	; 0x80
    8d4a:	f105 0890 	add.w	r8, r5, #144	; 0x90
    8d4e:	9301      	str	r3, [sp, #4]
    8d50:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    8d54:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    8d58:	b148      	cbz	r0, 8d6e <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    8d5a:	6842      	ldr	r2, [r0, #4]
    8d5c:	9b00      	ldr	r3, [sp, #0]
    8d5e:	4013      	ands	r3, r2
    8d60:	d033      	beq.n	8dca <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    8d62:	6803      	ldr	r3, [r0, #0]
    8d64:	f8d3 b000 	ldr.w	fp, [r3]
    8d68:	4b45      	ldr	r3, [pc, #276]	; (8e80 <FlexCAN::message_isr()+0x228>)
    8d6a:	459b      	cmp	fp, r3
    8d6c:	d15a      	bne.n	8e24 <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    8d6e:	45b0      	cmp	r8, r6
    8d70:	d1f0      	bne.n	8d54 <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    8d72:	9b01      	ldr	r3, [sp, #4]
    8d74:	f8dd b008 	ldr.w	fp, [sp, #8]
    8d78:	b393      	cbz	r3, 8de0 <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    8d7a:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    8d7e:	b183      	cbz	r3, 8da2 <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    8d80:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8d84:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    8d88:	b29b      	uxth	r3, r3
    8d8a:	b292      	uxth	r2, r2
    if (entries < 0) {
    8d8c:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    8d8e:	bf44      	itt	mi
    8d90:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    8d94:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    8d96:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    8d9a:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    8d9c:	bf38      	it	cc
    8d9e:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    8da2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8da6:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    8daa:	7a1b      	ldrb	r3, [r3, #8]
    8dac:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8db0:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    8db2:	bf08      	it	eq
    8db4:	4933      	ldreq	r1, [pc, #204]	; (8e84 <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8db6:	f103 0384 	add.w	r3, r3, #132	; 0x84
    8dba:	bf14      	ite	ne
    8dbc:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    8dc0:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    8dc4:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8dc6:	682a      	ldr	r2, [r5, #0]
    8dc8:	e756      	b.n	8c78 <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    8dca:	2a00      	cmp	r2, #0
    8dcc:	dacf      	bge.n	8d6e <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    8dce:	6802      	ldr	r2, [r0, #0]
    8dd0:	f8d2 b000 	ldr.w	fp, [r2]
    8dd4:	4a2a      	ldr	r2, [pc, #168]	; (8e80 <FlexCAN::message_isr()+0x228>)
    8dd6:	4593      	cmp	fp, r2
    8dd8:	d0c9      	beq.n	8d6e <FlexCAN::message_isr()+0x116>
    8dda:	f04f 32ff 	mov.w	r2, #4294967295
    8dde:	e023      	b.n	8e28 <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    8de0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8de4:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    8de8:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    8dec:	b29b      	uxth	r3, r3
    8dee:	3301      	adds	r3, #1
    8df0:	fbb3 f0f1 	udiv	r0, r3, r1
    8df4:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    8df8:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    8dfa:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    8dfc:	4296      	cmp	r6, r2
    8dfe:	d031      	beq.n	8e64 <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    8e00:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8e04:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    8e08:	b29b      	uxth	r3, r3
    8e0a:	2210      	movs	r2, #16
    8e0c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    8e10:	eb0d 0102 	add.w	r1, sp, r2
    8e14:	f001 fa8e 	bl	a334 <memcpy>
    ring.head = nextEntry;
    8e18:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    8e1c:	e7ad      	b.n	8d7a <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    8e1e:	f105 0694 	add.w	r6, r5, #148	; 0x94
    8e22:	e743      	b.n	8cac <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    8e24:	2300      	movs	r3, #0
    8e26:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    8e28:	a904      	add	r1, sp, #16
    8e2a:	47d8      	blx	fp
    8e2c:	9b01      	ldr	r3, [sp, #4]
    8e2e:	4318      	orrs	r0, r3
    8e30:	b2c3      	uxtb	r3, r0
    8e32:	9301      	str	r3, [sp, #4]
    8e34:	e79b      	b.n	8d6e <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    8e36:	2701      	movs	r7, #1
    8e38:	40a7      	lsls	r7, r4
    8e3a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    8e3e:	f105 0680 	add.w	r6, r5, #128	; 0x80
    8e42:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    8e46:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    8e4a:	b138      	cbz	r0, 8e5c <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    8e4c:	6843      	ldr	r3, [r0, #4]
    8e4e:	421f      	tst	r7, r3
    8e50:	d004      	beq.n	8e5c <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    8e52:	6803      	ldr	r3, [r0, #0]
    8e54:	4a0c      	ldr	r2, [pc, #48]	; (8e88 <FlexCAN::message_isr()+0x230>)
    8e56:	685b      	ldr	r3, [r3, #4]
    8e58:	4293      	cmp	r3, r2
    8e5a:	d10d      	bne.n	8e78 <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    8e5c:	45b0      	cmp	r8, r6
    8e5e:	d1f2      	bne.n	8e46 <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8e60:	682a      	ldr	r2, [r5, #0]
    8e62:	e709      	b.n	8c78 <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    8e64:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    8e68:	2b00      	cmp	r3, #0
    8e6a:	d09a      	beq.n	8da2 <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    8e6c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    8e70:	3301      	adds	r3, #1
    8e72:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    8e76:	e783      	b.n	8d80 <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    8e78:	2200      	movs	r2, #0
    8e7a:	4621      	mov	r1, r4
    8e7c:	4798      	blx	r3
    8e7e:	e7ed      	b.n	8e5c <FlexCAN::message_isr()+0x204>
    8e80:	0000845d 	.word	0x0000845d
    8e84:	1ffc0000 	.word	0x1ffc0000
    8e88:	00008461 	.word	0x00008461

00008e8c <can0_message_isr>:
    Can0.message_isr ();
    8e8c:	4801      	ldr	r0, [pc, #4]	; (8e94 <can0_message_isr+0x8>)
    8e8e:	f7ff bee3 	b.w	8c58 <FlexCAN::message_isr()>
    8e92:	bf00      	nop
    8e94:	1fffc1c0 	.word	0x1fffc1c0

00008e98 <can0_bus_off_isr>:
}
    8e98:	4770      	bx	lr
    8e9a:	bf00      	nop

00008e9c <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    8e9c:	4b01      	ldr	r3, [pc, #4]	; (8ea4 <can0_error_isr+0x8>)
    8e9e:	681b      	ldr	r3, [r3, #0]
    8ea0:	6a1b      	ldr	r3, [r3, #32]
}
    8ea2:	4770      	bx	lr
    8ea4:	1fffc1c0 	.word	0x1fffc1c0

00008ea8 <can0_tx_warn_isr>:
    8ea8:	4770      	bx	lr
    8eaa:	bf00      	nop

00008eac <can0_rx_warn_isr>:
    8eac:	4770      	bx	lr
    8eae:	bf00      	nop

00008eb0 <can0_wakeup_isr>:
    8eb0:	4770      	bx	lr
    8eb2:	bf00      	nop

00008eb4 <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    8eb4:	4801      	ldr	r0, [pc, #4]	; (8ebc <_GLOBAL__sub_I_Can0+0x8>)
    8eb6:	2100      	movs	r1, #0
    8eb8:	f7ff bad4 	b.w	8464 <FlexCAN::FlexCAN(unsigned char)>
    8ebc:	1fffc1c0 	.word	0x1fffc1c0

00008ec0 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8ec0:	b530      	push	{r4, r5, lr}
    8ec2:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    8ec4:	490f      	ldr	r1, [pc, #60]	; (8f04 <ADC::ADC()+0x44>)
    8ec6:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8ec8:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    8eca:	4b0f      	ldr	r3, [pc, #60]	; (8f08 <ADC::ADC()+0x48>)
    8ecc:	4a0f      	ldr	r2, [pc, #60]	; (8f0c <ADC::ADC()+0x4c>)
    8ece:	2100      	movs	r1, #0
    8ed0:	f000 fa0a 	bl	92e8 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    8ed4:	f104 0540 	add.w	r5, r4, #64	; 0x40
    8ed8:	490d      	ldr	r1, [pc, #52]	; (8f10 <ADC::ADC()+0x50>)
    8eda:	9100      	str	r1, [sp, #0]
    8edc:	4b0d      	ldr	r3, [pc, #52]	; (8f14 <ADC::ADC()+0x54>)
    8ede:	4a0e      	ldr	r2, [pc, #56]	; (8f18 <ADC::ADC()+0x58>)
    8ee0:	2101      	movs	r1, #1
    8ee2:	4628      	mov	r0, r5
    8ee4:	f000 fa00 	bl	92e8 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    8ee8:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    8eea:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    8eec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    8ef0:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    8ef4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    8ef8:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    8efc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    8f00:	b003      	add	sp, #12
    8f02:	bd30      	pop	{r4, r5, pc}
    8f04:	4003b000 	.word	0x4003b000
    8f08:	00015978 	.word	0x00015978
    8f0c:	00015980 	.word	0x00015980
    8f10:	400bb000 	.word	0x400bb000
    8f14:	0001597c 	.word	0x0001597c
    8f18:	000159ac 	.word	0x000159ac

00008f1c <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    8f1c:	69c0      	ldr	r0, [r0, #28]
    8f1e:	4770      	bx	lr

00008f20 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    8f20:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8f24:	428b      	cmp	r3, r1
    8f26:	d00a      	beq.n	8f3e <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    8f28:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    8f2a:	2909      	cmp	r1, #9
    8f2c:	f200 8093 	bhi.w	9056 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    8f30:	e8df f001 	tbb	[pc, r1]
    8f34:	06612f2f 	.word	0x06612f2f
    8f38:	8e817106 	.word	0x8e817106
    8f3c:	5440      	.short	0x5440
    8f3e:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8f40:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f42:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8f46:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8f4a:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8f4e:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f52:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f54:	2201      	movs	r2, #1
    8f56:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f5a:	4626      	mov	r6, r4
    8f5c:	61dc      	str	r4, [r3, #28]
    8f5e:	2500      	movs	r5, #0
    8f60:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f64:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f66:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f68:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f6a:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    8f6c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    8f70:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8f72:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f74:	015b      	lsls	r3, r3, #5
    8f76:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    8f7a:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f7c:	2100      	movs	r1, #0
    8f7e:	7642      	strb	r2, [r0, #25]
    8f80:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f84:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    8f88:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8f8c:	b662      	cpsie	i
    calibrate();
}
    8f8e:	bc70      	pop	{r4, r5, r6}
    8f90:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8f92:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f94:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8f98:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8f9c:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8fa0:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fa4:	2200      	movs	r2, #0
    8fa6:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8faa:	2201      	movs	r2, #1
    8fac:	61da      	str	r2, [r3, #28]
    8fae:	4614      	mov	r4, r2
    8fb0:	4616      	mov	r6, r2
    8fb2:	e7d4      	b.n	8f5e <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8fb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fb6:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8fb8:	015a      	lsls	r2, r3, #5
    8fba:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8fbe:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fc2:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8fc6:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fca:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8fcc:	2401      	movs	r4, #1
    8fce:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fd0:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8fd2:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8fd4:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fd6:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8fd8:	615a      	str	r2, [r3, #20]
    }
    8fda:	e7c7      	b.n	8f6c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8fdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8fde:	015a      	lsls	r2, r3, #5
    8fe0:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8fe4:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8fe8:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8fec:	2401      	movs	r4, #1
    8fee:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ff0:	2400      	movs	r4, #0
    8ff2:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8ff4:	e7ea      	b.n	8fcc <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8ff6:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ff8:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8ffc:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    9000:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    9004:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9008:	2600      	movs	r6, #0
    900a:	2201      	movs	r2, #1
    900c:	f8cc 6008 	str.w	r6, [ip, #8]
    9010:	4614      	mov	r4, r2
    9012:	61de      	str	r6, [r3, #28]
    if (is_adack)
    9014:	e7a3      	b.n	8f5e <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    9016:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9018:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    901c:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    9020:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    9024:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9028:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    902a:	2401      	movs	r4, #1
    902c:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9030:	4616      	mov	r6, r2
    9032:	61da      	str	r2, [r3, #28]
    if (is_adack)
    9034:	e793      	b.n	8f5e <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    9036:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9038:	015a      	lsls	r2, r3, #5
    903a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    903e:	f502 7380 	add.w	r3, r2, #256	; 0x100
    9042:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9046:	2400      	movs	r4, #0
    9048:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    904a:	2401      	movs	r4, #1
    904c:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    904e:	e7bd      	b.n	8fcc <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    9050:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9052:	2401      	movs	r4, #1
    9054:	e7b0      	b.n	8fb8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    9056:	8ac3      	ldrh	r3, [r0, #22]
    9058:	b29b      	uxth	r3, r3
    905a:	f043 0301 	orr.w	r3, r3, #1
    905e:	82c3      	strh	r3, [r0, #22]
    9060:	e795      	b.n	8f8e <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    9062:	bf00      	nop

00009064 <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    9064:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9066:	015b      	lsls	r3, r3, #5
    9068:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    906c:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    906e:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9072:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    9076:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    9078:	b152      	cbz	r2, 9090 <ADC_Module::wait_for_cal()+0x2c>
        yield();
    907a:	f003 fc4f 	bl	c91c <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    907e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9080:	015b      	lsls	r3, r3, #5
    9082:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    9086:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    908a:	69da      	ldr	r2, [r3, #28]
    908c:	2a00      	cmp	r2, #0
    908e:	d1f4      	bne.n	907a <ADC_Module::wait_for_cal()+0x16>
    9090:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    9092:	b123      	cbz	r3, 909e <ADC_Module::wait_for_cal()+0x3a>
    9094:	8ae3      	ldrh	r3, [r4, #22]
    9096:	b29b      	uxth	r3, r3
    9098:	f043 0302 	orr.w	r3, r3, #2
    909c:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    909e:	b672      	cpsid	i
    if (calibrating)
    90a0:	7e63      	ldrb	r3, [r4, #25]
    90a2:	b303      	cbz	r3, 90e6 <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    90a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    90a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
    90a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    90aa:	440b      	add	r3, r1
    90ac:	6c11      	ldr	r1, [r2, #64]	; 0x40
    90ae:	6c50      	ldr	r0, [r2, #68]	; 0x44
    90b0:	440b      	add	r3, r1
    90b2:	6c91      	ldr	r1, [r2, #72]	; 0x48
    90b4:	4403      	add	r3, r0
    90b6:	440b      	add	r3, r1
    90b8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    90ba:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    90bc:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    90c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    90c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    90c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
    90c8:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    90ca:	440b      	add	r3, r1
    90cc:	6e11      	ldr	r1, [r2, #96]	; 0x60
    90ce:	6e50      	ldr	r0, [r2, #100]	; 0x64
    90d0:	440b      	add	r3, r1
    90d2:	6e91      	ldr	r1, [r2, #104]	; 0x68
    90d4:	4403      	add	r3, r0
    90d6:	440b      	add	r3, r1
    90d8:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    90da:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    90dc:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    90e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    90e4:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    90e6:	b662      	cpsie	i
    if (init_calib)
    90e8:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    90ea:	2200      	movs	r2, #0
    90ec:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    90ee:	b903      	cbnz	r3, 90f2 <ADC_Module::wait_for_cal()+0x8e>
}
    90f0:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    90f2:	2102      	movs	r1, #2
    90f4:	4620      	mov	r0, r4
    90f6:	f7ff ff13 	bl	8f20 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    90fa:	7e63      	ldrb	r3, [r4, #25]
    90fc:	bb03      	cbnz	r3, 9140 <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    90fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9100:	0159      	lsls	r1, r3, #5
    9102:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9106:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    9108:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    910a:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    910e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9112:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    9116:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    9118:	2102      	movs	r1, #2
    911a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    911e:	b992      	cbnz	r2, 9146 <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9120:	015b      	lsls	r3, r3, #5
    9122:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9126:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9128:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    912a:	2104      	movs	r1, #4
    912c:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9130:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    9134:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    9138:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    913c:	76a2      	strb	r2, [r4, #26]
}
    913e:	bd10      	pop	{r4, pc}
        wait_for_cal();
    9140:	f7ff ff90 	bl	9064 <ADC_Module::wait_for_cal()>
    9144:	e7db      	b.n	90fe <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    9146:	4620      	mov	r0, r4
    9148:	f7ff ff8c 	bl	9064 <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    914c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    914e:	e7e7      	b.n	9120 <ADC_Module::wait_for_cal()+0xbc>

00009150 <ADC_Module::setResolution(unsigned char)>:
{
    9150:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    9152:	7ec3      	ldrb	r3, [r0, #27]
    9154:	428b      	cmp	r3, r1
    9156:	d012      	beq.n	917e <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    9158:	7e43      	ldrb	r3, [r0, #25]
    915a:	4604      	mov	r4, r0
    915c:	460d      	mov	r5, r1
    915e:	bb0b      	cbnz	r3, 91a4 <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    9160:	2d09      	cmp	r5, #9
    9162:	d80d      	bhi.n	9180 <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    9164:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9166:	015b      	lsls	r3, r3, #5
    9168:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    916c:	2000      	movs	r0, #0
    916e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    9172:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    9174:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    9176:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    917a:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    917c:	76e2      	strb	r2, [r4, #27]
}
    917e:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    9180:	2d0b      	cmp	r5, #11
    9182:	d912      	bls.n	91aa <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    9184:	2d0d      	cmp	r5, #13
    9186:	d81e      	bhi.n	91c6 <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    9188:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    918a:	015b      	lsls	r3, r3, #5
    918c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9190:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    9192:	2001      	movs	r0, #1
    9194:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    9198:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    919c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    91a0:	220c      	movs	r2, #12
    91a2:	e7ea      	b.n	917a <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    91a4:	f7ff ff5e 	bl	9064 <ADC_Module::wait_for_cal()>
    91a8:	e7da      	b.n	9160 <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    91aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    91ac:	015b      	lsls	r3, r3, #5
    91ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    91b2:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    91b4:	2000      	movs	r0, #0
    91b6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    91ba:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    91be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    91c2:	220a      	movs	r2, #10
    91c4:	e7d9      	b.n	917a <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    91c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    91c8:	015b      	lsls	r3, r3, #5
    91ca:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    91ce:	2001      	movs	r0, #1
    91d0:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    91d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    91d8:	2210      	movs	r2, #16
    91da:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    91de:	e7cc      	b.n	917a <ADC_Module::setResolution(unsigned char)+0x2a>

000091e0 <ADC_Module::analog_init()>:
{
    91e0:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    91e2:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    91e4:	4a3d      	ldr	r2, [pc, #244]	; (92dc <ADC_Module::analog_init()+0xfc>)
    91e6:	4604      	mov	r4, r0
        if (ADC_num == 0)
    91e8:	2b00      	cmp	r3, #0
    91ea:	d16a      	bne.n	92c2 <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    91ec:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    91ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    91f2:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    91f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    91f6:	483a      	ldr	r0, [pc, #232]	; (92e0 <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    91f8:	493a      	ldr	r1, [pc, #232]	; (92e4 <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    91fa:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    91fe:	0152      	lsls	r2, r2, #5
    9200:	8465      	strh	r5, [r4, #34]	; 0x22
    9202:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    9206:	2504      	movs	r5, #4
    analog_res_bits = 0;
    9208:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    920a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    920e:	2501      	movs	r5, #1
    analog_res_bits = 0;
    9210:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    9212:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    9214:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    9218:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    921c:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    921e:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    9220:	7563      	strb	r3, [r4, #21]
    9222:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    9226:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9228:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    922c:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    922e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9232:	0152      	lsls	r2, r2, #5
    9234:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9238:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    923c:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    923e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    9240:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9242:	0152      	lsls	r2, r2, #5
    9244:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9248:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    924c:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    9250:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    9254:	b662      	cpsie	i
    setResolution(10);
    9256:	210a      	movs	r1, #10
    9258:	4620      	mov	r0, r4
    925a:	f7ff ff79 	bl	9150 <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    925e:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    9260:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    9262:	bb9b      	cbnz	r3, 92cc <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    9264:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9266:	015b      	lsls	r3, r3, #5
    9268:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    926c:	2101      	movs	r1, #1
    analog_num_average = num;
    926e:	2220      	movs	r2, #32
    9270:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    9274:	4620      	mov	r0, r4
    9276:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    927a:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    927e:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    9282:	f7ff fe4d 	bl	8f20 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    9286:	7e63      	ldrb	r3, [r4, #25]
    9288:	bb23      	cbnz	r3, 92d4 <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    928a:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    928c:	0159      	lsls	r1, r3, #5
    928e:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9292:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9294:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9296:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    929a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    929e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    92a2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    92a6:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    92a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    92aa:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    92ac:	015b      	lsls	r3, r3, #5
    92ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    92b2:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    92b6:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    92ba:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    92be:	b662      	cpsie	i
}
    92c0:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    92c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    92c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    92c8:	6313      	str	r3, [r2, #48]	; 0x30
    92ca:	e793      	b.n	91f4 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    92cc:	4620      	mov	r0, r4
    92ce:	f7ff fec9 	bl	9064 <ADC_Module::wait_for_cal()>
    92d2:	e7c7      	b.n	9264 <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    92d4:	f7ff fec6 	bl	9064 <ADC_Module::wait_for_cal()>
    92d8:	e7d7      	b.n	928a <ADC_Module::analog_init()+0xaa>
    92da:	bf00      	nop
    92dc:	40048000 	.word	0x40048000
    92e0:	40074000 	.word	0x40074000
    92e4:	42fa0000 	.word	0x42fa0000

000092e8 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    92e8:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    92ea:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    92ec:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    92ee:	4a09      	ldr	r2, [pc, #36]	; (9314 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    92f0:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    92f2:	bf0c      	ite	eq
    92f4:	2339      	moveq	r3, #57	; 0x39
    92f6:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    92f8:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    92fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    92fe:	4906      	ldr	r1, [pc, #24]	; (9318 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    9300:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    9302:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    9304:	bf18      	it	ne
    9306:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    9308:	4604      	mov	r4, r0
    930a:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    930c:	f7ff ff68 	bl	91e0 <ADC_Module::analog_init()>
}
    9310:	4620      	mov	r0, r4
    9312:	bd10      	pop	{r4, pc}
    9314:	40036038 	.word	0x40036038
    9318:	40036010 	.word	0x40036010

0000931c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    931c:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    931e:	7e43      	ldrb	r3, [r0, #25]
{
    9320:	4605      	mov	r5, r0
    9322:	460c      	mov	r4, r1
    if (calibrating)
    9324:	b9a3      	cbnz	r3, 9350 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    9326:	2c04      	cmp	r4, #4
    9328:	d80f      	bhi.n	934a <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    932a:	e8df f004 	tbb	[pc, r4]
    932e:	2d1e      	.short	0x2d1e
    9330:	033c      	.short	0x033c
    9332:	14          	.byte	0x14
    9333:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    9334:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9336:	015a      	lsls	r2, r3, #5
    9338:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    933c:	2101      	movs	r1, #1
    933e:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    9342:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    9346:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    934a:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    934e:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    9350:	f7ff fe88 	bl	9064 <ADC_Module::wait_for_cal()>
    9354:	e7e7      	b.n	9326 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    9356:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9358:	015b      	lsls	r3, r3, #5
    935a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    935e:	2200      	movs	r2, #0
    9360:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    9364:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    9368:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    936a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    936c:	015a      	lsls	r2, r3, #5
    936e:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9372:	2101      	movs	r1, #1
    9374:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9378:	2100      	movs	r1, #0
    937a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    937e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    9382:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    9386:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    9388:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    938a:	015a      	lsls	r2, r3, #5
    938c:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9390:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9392:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9394:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    9398:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    939c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    93a0:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    93a4:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    93a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    93a8:	015a      	lsls	r2, r3, #5
    93aa:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    93ae:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    93b0:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    93b2:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    93b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    93ba:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    93be:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    93c2:	bd38      	pop	{r3, r4, r5, pc}

000093c4 <ADC_Module::setAveraging(unsigned char)>:
{
    93c4:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    93c6:	7e43      	ldrb	r3, [r0, #25]
{
    93c8:	4604      	mov	r4, r0
    93ca:	460d      	mov	r5, r1
    if (calibrating)
    93cc:	bb2b      	cbnz	r3, 941a <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    93ce:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    93d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    93d2:	d918      	bls.n	9406 <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    93d4:	015b      	lsls	r3, r3, #5
    93d6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    93da:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    93de:	2101      	movs	r1, #1
        if (num <= 4)
    93e0:	2d04      	cmp	r5, #4
    93e2:	6099      	str	r1, [r3, #8]
    93e4:	d806      	bhi.n	93f4 <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    93e6:	2100      	movs	r1, #0
    93e8:	6059      	str	r1, [r3, #4]
            num = 4;
    93ea:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    93ec:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    93ee:	f884 2020 	strb.w	r2, [r4, #32]
}
    93f2:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    93f4:	2d08      	cmp	r5, #8
    93f6:	d913      	bls.n	9420 <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    93f8:	2d10      	cmp	r5, #16
    93fa:	d818      	bhi.n	942e <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    93fc:	2200      	movs	r2, #0
    93fe:	601a      	str	r2, [r3, #0]
            num = 16;
    9400:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9402:	6059      	str	r1, [r3, #4]
    }
    9404:	e7f3      	b.n	93ee <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9406:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9408:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    940a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    940e:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    9410:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    9414:	f884 2020 	strb.w	r2, [r4, #32]
}
    9418:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    941a:	f7ff fe23 	bl	9064 <ADC_Module::wait_for_cal()>
    941e:	e7d6      	b.n	93ce <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9420:	2000      	movs	r0, #0
            num = 8;
    9422:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    9424:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    9426:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    9428:	f884 2020 	strb.w	r2, [r4, #32]
}
    942c:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    942e:	6059      	str	r1, [r3, #4]
            num = 32;
    9430:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    9432:	6019      	str	r1, [r3, #0]
    }
    9434:	e7db      	b.n	93ee <ADC_Module::setAveraging(unsigned char)+0x2a>
    9436:	bf00      	nop

00009438 <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    9438:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    943a:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    943c:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    943e:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    9440:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9442:	ea4f 1242 	mov.w	r2, r2, lsl #5
    9446:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    944a:	bfb4      	ite	lt
    944c:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    944e:	2101      	movge	r1, #1
    9450:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    9454:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    9456:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9458:	014a      	lsls	r2, r1, #5
    945a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    945e:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    9462:	6992      	ldr	r2, [r2, #24]
    9464:	3a00      	subs	r2, #0
    9466:	bf18      	it	ne
    9468:	2201      	movne	r2, #1
    946a:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    946e:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    9470:	b662      	cpsie	i
}
    9472:	4770      	bx	lr

00009474 <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    9474:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    9476:	292b      	cmp	r1, #43	; 0x2b
{
    9478:	b083      	sub	sp, #12
    947a:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    947c:	d817      	bhi.n	94ae <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    947e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    9480:	5c5b      	ldrb	r3, [r3, r1]
    9482:	f003 031f 	and.w	r3, r3, #31
    9486:	2b1f      	cmp	r3, #31
    9488:	d011      	beq.n	94ae <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    948a:	7e43      	ldrb	r3, [r0, #25]
    948c:	b9bb      	cbnz	r3, 94be <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    948e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    9490:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9492:	015b      	lsls	r3, r3, #5
    9494:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    9498:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    949a:	2601      	movs	r6, #1
    949c:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    949e:	4620      	mov	r0, r4
    94a0:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    94a4:	f7ff ffc8 	bl	9438 <ADC_Module::startReadFast(unsigned char)>

    return true;
    94a8:	4630      	mov	r0, r6
}
    94aa:	b003      	add	sp, #12
    94ac:	bd50      	pop	{r4, r6, pc}
    94ae:	8ae3      	ldrh	r3, [r4, #22]
    94b0:	b29b      	uxth	r3, r3
        return false;
    94b2:	2000      	movs	r0, #0
    94b4:	f043 0304 	orr.w	r3, r3, #4
    94b8:	82e3      	strh	r3, [r4, #22]
}
    94ba:	b003      	add	sp, #12
    94bc:	bd50      	pop	{r4, r6, pc}
    94be:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    94c0:	f7ff fdd0 	bl	9064 <ADC_Module::wait_for_cal()>
    94c4:	9901      	ldr	r1, [sp, #4]
    94c6:	e7e2      	b.n	948e <ADC_Module::startContinuous(unsigned char)+0x1a>

000094c8 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    94c8:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    94cc:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    94ce:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    94d2:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    94d4:	d101      	bne.n	94da <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    94d6:	6883      	ldr	r3, [r0, #8]
    94d8:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    94da:	f000 b981 	b.w	97e0 <EventResponder::triggerEventNotImmediate()>
    94de:	bf00      	nop

000094e0 <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    94e0:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    94e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    94e4:	4a4a      	ldr	r2, [pc, #296]	; (9610 <SPIClass::dma_rxisr()+0x130>)
    94e6:	7909      	ldrb	r1, [r1, #4]
    94e8:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    94ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    94ec:	7909      	ldrb	r1, [r1, #4]
    94ee:	7711      	strb	r1, [r2, #28]
    94f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    94f2:	7909      	ldrb	r1, [r1, #4]
    94f4:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    94f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    94f8:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    94fa:	b32a      	cbz	r2, 9548 <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    94fc:	6841      	ldr	r1, [r0, #4]
    94fe:	68c9      	ldr	r1, [r1, #12]
    9500:	428a      	cmp	r2, r1
    9502:	d943      	bls.n	958c <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    9504:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    9506:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    9508:	1a52      	subs	r2, r2, r1
    950a:	6821      	ldr	r1, [r4, #0]
    950c:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    950e:	680d      	ldr	r5, [r1, #0]
    9510:	f103 0424 	add.w	r4, r3, #36	; 0x24
    9514:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9516:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    951a:	d059      	beq.n	95d0 <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    951c:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    951e:	68e5      	ldr	r5, [r4, #12]
    9520:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    9524:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    9526:	d129      	bne.n	957c <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    9528:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    952a:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    952c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    9530:	3601      	adds	r6, #1
    9532:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9534:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    9536:	4936      	ldr	r1, [pc, #216]	; (9610 <SPIClass::dma_rxisr()+0x130>)
    9538:	7900      	ldrb	r0, [r0, #4]
    953a:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    953c:	b112      	cbz	r2, 9544 <SPIClass::dma_rxisr()+0x64>
    953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9540:	791b      	ldrb	r3, [r3, #4]
    9542:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    9544:	bc70      	pop	{r4, r5, r6}
    9546:	4770      	bx	lr
    9548:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    954a:	4c32      	ldr	r4, [pc, #200]	; (9614 <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    954c:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    954e:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    9550:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    9552:	68cc      	ldr	r4, [r1, #12]
    9554:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    9558:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    955a:	6804      	ldr	r4, [r0, #0]
    955c:	492e      	ldr	r1, [pc, #184]	; (9618 <SPIClass::dma_rxisr()+0x138>)
    955e:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    9560:	f04f 0c03 	mov.w	ip, #3
    9564:	428c      	cmp	r4, r1
    9566:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    956a:	d139      	bne.n	95e0 <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    956c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    956e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    9570:	2b02      	cmp	r3, #2
		_data = data;
    9572:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9574:	d138      	bne.n	95e8 <SPIClass::dma_rxisr()+0x108>
}
    9576:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    9578:	6883      	ldr	r3, [r0, #8]
    957a:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    957c:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    957e:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9580:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    9584:	3602      	adds	r6, #2
    9586:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9588:	6365      	str	r5, [r4, #52]	; 0x34
    958a:	e7d4      	b.n	9536 <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    958c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    958e:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9590:	8bcc      	ldrh	r4, [r1, #30]
    9592:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    9594:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9598:	d431      	bmi.n	95fe <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    959a:	f3c0 000e 	ubfx	r0, r0, #0, #15
    959e:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    95a0:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    95a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    95a4:	b2a4      	uxth	r4, r4
    95a6:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    95a8:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    95aa:	8be5      	ldrh	r5, [r4, #30]
    95ac:	042d      	lsls	r5, r5, #16
    95ae:	d41e      	bmi.n	95ee <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    95b0:	f3c2 050e 	ubfx	r5, r2, #0, #15
    95b4:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    95b6:	8be5      	ldrh	r5, [r4, #30]
    95b8:	b2ad      	uxth	r5, r5
    95ba:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    95bc:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    95be:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    95c0:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    95c2:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    95c4:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    95c8:	bf18      	it	ne
    95ca:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    95cc:	42a5      	cmp	r5, r4
    95ce:	d1a5      	bne.n	951c <SPIClass::dma_rxisr()+0x3c>
    95d0:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    95d2:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    95d4:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    95d8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    95dc:	634c      	str	r4, [r1, #52]	; 0x34
    95de:	e7aa      	b.n	9536 <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    95e0:	4623      	mov	r3, r4
    95e2:	4611      	mov	r1, r2
}
    95e4:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    95e6:	4718      	bx	r3
}
    95e8:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    95ea:	f000 b8f9 	b.w	97e0 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    95ee:	8be5      	ldrh	r5, [r4, #30]
    95f0:	f3c2 0608 	ubfx	r6, r2, #0, #9
    95f4:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    95f8:	4335      	orrs	r5, r6
    95fa:	83e5      	strh	r5, [r4, #30]
    95fc:	e7db      	b.n	95b6 <SPIClass::dma_rxisr()+0xd6>
    95fe:	8bcc      	ldrh	r4, [r1, #30]
    9600:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9604:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    9608:	4320      	orrs	r0, r4
    960a:	83c8      	strh	r0, [r1, #30]
    960c:	e7c8      	b.n	95a0 <SPIClass::dma_rxisr()+0xc0>
    960e:	bf00      	nop
    9610:	40008000 	.word	0x40008000
    9614:	ff0f0000 	.word	0xff0f0000
    9618:	000094c9 	.word	0x000094c9

0000961c <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    961c:	b508      	push	{r3, lr}
    961e:	4802      	ldr	r0, [pc, #8]	; (9628 <_spi_dma_rxISR0()+0xc>)
    9620:	f7ff ff5e 	bl	94e0 <SPIClass::dma_rxisr()>
    9624:	bd08      	pop	{r3, pc}
    9626:	bf00      	nop
    9628:	1fffc364 	.word	0x1fffc364

0000962c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    962c:	4a0a      	ldr	r2, [pc, #40]	; (9658 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    962e:	490b      	ldr	r1, [pc, #44]	; (965c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    9630:	2300      	movs	r3, #0
}
    9632:	b410      	push	{r4}
    9634:	4c0a      	ldr	r4, [pc, #40]	; (9660 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    9636:	6093      	str	r3, [r2, #8]
    9638:	8493      	strh	r3, [r2, #36]	; 0x24
    963a:	6014      	str	r4, [r2, #0]
    963c:	6051      	str	r1, [r2, #4]
    963e:	bc10      	pop	{r4}
    9640:	60d3      	str	r3, [r2, #12]
    9642:	6193      	str	r3, [r2, #24]
    9644:	6293      	str	r3, [r2, #40]	; 0x28
    9646:	62d3      	str	r3, [r2, #44]	; 0x2c
    9648:	6313      	str	r3, [r2, #48]	; 0x30
    964a:	6353      	str	r3, [r2, #52]	; 0x34
    964c:	6113      	str	r3, [r2, #16]
    964e:	6153      	str	r3, [r2, #20]
    9650:	61d3      	str	r3, [r2, #28]
    9652:	6213      	str	r3, [r2, #32]
    9654:	4770      	bx	lr
    9656:	bf00      	nop
    9658:	1fffc364 	.word	0x1fffc364
    965c:	000159d8 	.word	0x000159d8
    9660:	4002c000 	.word	0x4002c000

00009664 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    9664:	b538      	push	{r3, r4, r5, lr}
    9666:	4604      	mov	r4, r0
    9668:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    966a:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    966c:	490a      	ldr	r1, [pc, #40]	; (9698 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    966e:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    9670:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    9672:	f003 ff33 	bl	d4dc <__aeabi_fmul>
    9676:	4601      	mov	r1, r0
    9678:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    967c:	f003 ffe2 	bl	d644 <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    9680:	4906      	ldr	r1, [pc, #24]	; (969c <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    9682:	f003 ff2b 	bl	d4dc <__aeabi_fmul>
  Y = initialValue;
    9686:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    9688:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    968a:	6125      	str	r5, [r4, #16]
  X = initialValue;
    968c:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    968e:	f001 fa3d 	bl	ab0c <micros>
    9692:	61e0      	str	r0, [r4, #28]
}
    9694:	4620      	mov	r0, r4
    9696:	bd38      	pop	{r3, r4, r5, pc}
    9698:	40c90fdb 	.word	0x40c90fdb
    969c:	49742400 	.word	0x49742400

000096a0 <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    96a0:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    96a2:	b510      	push	{r4, lr}
    96a4:	4604      	mov	r4, r0
  switch (FT) {
    96a6:	2b03      	cmp	r3, #3
    96a8:	d821      	bhi.n	96ee <FilterOnePole::output()+0x4e>
    96aa:	e8df f003 	tbb	[pc, r3]
    96ae:	1e19      	.short	0x1e19
    96b0:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    96b2:	68c1      	ldr	r1, [r0, #12]
    96b4:	6940      	ldr	r0, [r0, #20]
    96b6:	f003 fe07 	bl	d2c8 <__aeabi_fsub>
    96ba:	490e      	ldr	r1, [pc, #56]	; (96f4 <FilterOnePole::output()+0x54>)
    96bc:	4603      	mov	r3, r0
    96be:	6860      	ldr	r0, [r4, #4]
    96c0:	461c      	mov	r4, r3
    96c2:	f003 ffbf 	bl	d644 <__aeabi_fdiv>
    96c6:	4601      	mov	r1, r0
    96c8:	4620      	mov	r0, r4
    96ca:	f003 ffbb 	bl	d644 <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    96ce:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    96d0:	4908      	ldr	r1, [pc, #32]	; (96f4 <FilterOnePole::output()+0x54>)
    96d2:	6840      	ldr	r0, [r0, #4]
    96d4:	f003 ffb6 	bl	d644 <__aeabi_fdiv>
    96d8:	68e1      	ldr	r1, [r4, #12]
    96da:	f003 feff 	bl	d4dc <__aeabi_fmul>
}
    96de:	bd10      	pop	{r4, pc}
      return X-Y;
    96e0:	68c1      	ldr	r1, [r0, #12]
    96e2:	6940      	ldr	r0, [r0, #20]
    96e4:	f003 fdf0 	bl	d2c8 <__aeabi_fsub>
}
    96e8:	bd10      	pop	{r4, pc}
      return Y; 
    96ea:	68c0      	ldr	r0, [r0, #12]
}
    96ec:	bd10      	pop	{r4, pc}
  switch (FT) {
    96ee:	2000      	movs	r0, #0
}
    96f0:	bd10      	pop	{r4, pc}
    96f2:	bf00      	nop
    96f4:	49742400 	.word	0x49742400

000096f8 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    96f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96fa:	4604      	mov	r4, r0
    96fc:	460e      	mov	r6, r1
  long time = micros();
    96fe:	f001 fa05 	bl	ab0c <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    9702:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    9704:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    9706:	1ac0      	subs	r0, r0, r3
    9708:	f003 fe94 	bl	d434 <__aeabi_i2f>
  Ylast = Y;
    970c:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    970e:	61a0      	str	r0, [r4, #24]
    9710:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    9712:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    9714:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    9716:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    9718:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    971a:	f003 ff93 	bl	d644 <__aeabi_fdiv>
    971e:	4601      	mov	r1, r0
    9720:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    9722:	480e      	ldr	r0, [pc, #56]	; (975c <FilterOnePole::input(float)+0x64>)
    9724:	f003 ff8e 	bl	d644 <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    9728:	f003 f9d2 	bl	cad0 <expf>
    972c:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    972e:	4601      	mov	r1, r0
    9730:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    9734:	f003 fdc8 	bl	d2c8 <__aeabi_fsub>
    9738:	4631      	mov	r1, r6
    973a:	f003 fecf 	bl	d4dc <__aeabi_fmul>
    973e:	4629      	mov	r1, r5
    9740:	4606      	mov	r6, r0
    9742:	4638      	mov	r0, r7
    9744:	f003 feca 	bl	d4dc <__aeabi_fmul>
    9748:	4601      	mov	r1, r0
    974a:	4630      	mov	r0, r6
    974c:	f003 fdbe 	bl	d2cc <__addsf3>
    9750:	60e0      	str	r0, [r4, #12]
  return output();
    9752:	4620      	mov	r0, r4
}
    9754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    9758:	f7ff bfa2 	b.w	96a0 <FilterOnePole::output()>
    975c:	bf800000 	.word	0xbf800000

00009760 <movingAvg::begin()>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
    9760:	b510      	push	{r4, lr}
    9762:	4604      	mov	r4, r0
    m_readings = new int[m_interval];
    9764:	6800      	ldr	r0, [r0, #0]
    9766:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    976a:	4298      	cmp	r0, r3
    976c:	bf34      	ite	cc
    976e:	0080      	lslcc	r0, r0, #2
    9770:	f04f 30ff 	movcs.w	r0, #4294967295
    9774:	f000 ff2e 	bl	a5d4 <operator new[](unsigned int)>
    9778:	6120      	str	r0, [r4, #16]
}
    977a:	bd10      	pop	{r4, pc}

0000977c <movingAvg::reading(int)>:

// add a new reading and return the new moving average
int movingAvg::reading(int newReading)
{
    977c:	4603      	mov	r3, r0
    // add each new data point to the sum until the m_readings array is filled
    if (m_nbrReadings < m_interval) {
    977e:	6840      	ldr	r0, [r0, #4]
    9780:	681a      	ldr	r2, [r3, #0]
    9782:	4290      	cmp	r0, r2
{
    9784:	b410      	push	{r4}
    if (m_nbrReadings < m_interval) {
    9786:	da19      	bge.n	97bc <movingAvg::reading(int)+0x40>
        ++m_nbrReadings;
        m_sum += newReading;
    9788:	689a      	ldr	r2, [r3, #8]
    }
    // once the array is filled, subtract the oldest data point and add the new one
    else {
        m_sum = m_sum - m_readings[m_next] + newReading;
    978a:	68dc      	ldr	r4, [r3, #12]
        ++m_nbrReadings;
    978c:	3001      	adds	r0, #1
    978e:	6058      	str	r0, [r3, #4]
        m_sum = m_sum - m_readings[m_next] + newReading;
    9790:	6918      	ldr	r0, [r3, #16]
        m_sum += newReading;
    9792:	440a      	add	r2, r1
    9794:	609a      	str	r2, [r3, #8]
        m_sum = m_sum - m_readings[m_next] + newReading;
    9796:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    }

    m_readings[m_next] = newReading;
    979a:	6001      	str	r1, [r0, #0]
    if (++m_next >= m_interval) m_next = 0;
    979c:	68d9      	ldr	r1, [r3, #12]
    979e:	681c      	ldr	r4, [r3, #0]
    return (m_sum + m_nbrReadings / 2) / m_nbrReadings;
    97a0:	6858      	ldr	r0, [r3, #4]
    if (++m_next >= m_interval) m_next = 0;
    97a2:	3101      	adds	r1, #1
    97a4:	42a1      	cmp	r1, r4
    97a6:	bfa8      	it	ge
    97a8:	2100      	movge	r1, #0
    return (m_sum + m_nbrReadings / 2) / m_nbrReadings;
    97aa:	eb00 7cd0 	add.w	ip, r0, r0, lsr #31
    97ae:	60d9      	str	r1, [r3, #12]
    97b0:	eb02 026c 	add.w	r2, r2, ip, asr #1
}
    97b4:	bc10      	pop	{r4}
    97b6:	fb92 f0f0 	sdiv	r0, r2, r0
    97ba:	4770      	bx	lr
        m_sum = m_sum - m_readings[m_next] + newReading;
    97bc:	691a      	ldr	r2, [r3, #16]
    97be:	68dc      	ldr	r4, [r3, #12]
    97c0:	eb02 0084 	add.w	r0, r2, r4, lsl #2
    97c4:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
    97c8:	689a      	ldr	r2, [r3, #8]
    97ca:	1b12      	subs	r2, r2, r4
    97cc:	440a      	add	r2, r1
    97ce:	609a      	str	r2, [r3, #8]
    97d0:	e7e3      	b.n	979a <movingAvg::reading(int)+0x1e>
    97d2:	bf00      	nop

000097d4 <movingAvg::reset()>:
}

// start the moving average over again
void movingAvg::reset()
{
    m_nbrReadings = 0;
    97d4:	2300      	movs	r3, #0
    97d6:	6043      	str	r3, [r0, #4]
    m_sum = 0;
    97d8:	6083      	str	r3, [r0, #8]
    m_next = 0;
    97da:	60c3      	str	r3, [r0, #12]
}
    97dc:	4770      	bx	lr
    97de:	bf00      	nop

000097e0 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    97e0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    97e4:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    97e6:	7f43      	ldrb	r3, [r0, #29]
    97e8:	b95b      	cbnz	r3, 9802 <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    97ea:	7f01      	ldrb	r1, [r0, #28]
    97ec:	2901      	cmp	r1, #1
{
    97ee:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    97f0:	d00b      	beq.n	980a <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    97f2:	2903      	cmp	r1, #3
    97f4:	d013      	beq.n	981e <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    97f6:	2301      	movs	r3, #1
    97f8:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    97fa:	b902      	cbnz	r2, 97fe <EventResponder::triggerEventNotImmediate()+0x1e>
    97fc:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    97fe:	bc30      	pop	{r4, r5}
    9800:	4770      	bx	lr
    9802:	b90a      	cbnz	r2, 9808 <EventResponder::triggerEventNotImmediate()+0x28>
    9804:	b662      	cpsie	i
    9806:	4770      	bx	lr
    9808:	4770      	bx	lr
			if (firstYield == nullptr) {
    980a:	4c12      	ldr	r4, [pc, #72]	; (9854 <EventResponder::triggerEventNotImmediate()+0x74>)
    980c:	6821      	ldr	r1, [r4, #0]
    980e:	b1b1      	cbz	r1, 983e <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    9810:	4911      	ldr	r1, [pc, #68]	; (9858 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    9812:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    9814:	680b      	ldr	r3, [r1, #0]
    9816:	6183      	str	r3, [r0, #24]
				lastYield = this;
    9818:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    981a:	6158      	str	r0, [r3, #20]
				lastYield = this;
    981c:	e7eb      	b.n	97f6 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    981e:	4d0f      	ldr	r5, [pc, #60]	; (985c <EventResponder::triggerEventNotImmediate()+0x7c>)
    9820:	490f      	ldr	r1, [pc, #60]	; (9860 <EventResponder::triggerEventNotImmediate()+0x80>)
    9822:	682c      	ldr	r4, [r5, #0]
    9824:	b18c      	cbz	r4, 984a <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    9826:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9828:	680b      	ldr	r3, [r1, #0]
    982a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    982c:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    982e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9832:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    9836:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9838:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    983c:	e7db      	b.n	97f6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    983e:	4b06      	ldr	r3, [pc, #24]	; (9858 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    9840:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    9842:	6181      	str	r1, [r0, #24]
				firstYield = this;
    9844:	6020      	str	r0, [r4, #0]
				lastYield = this;
    9846:	6018      	str	r0, [r3, #0]
    9848:	e7d5      	b.n	97f6 <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    984a:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    984c:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    984e:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    9850:	e7ed      	b.n	982e <EventResponder::triggerEventNotImmediate()+0x4e>
    9852:	bf00      	nop
    9854:	1fffc39c 	.word	0x1fffc39c
    9858:	1fffc3ac 	.word	0x1fffc3ac
    985c:	1fffc3a4 	.word	0x1fffc3a4
    9860:	1fffc3a0 	.word	0x1fffc3a0

00009864 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9864:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9866:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    986a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    986c:	4c0c      	ldr	r4, [pc, #48]	; (98a0 <EventResponder::runFromInterrupt()+0x3c>)
    986e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9870:	b180      	cbz	r0, 9894 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9872:	4e0c      	ldr	r6, [pc, #48]	; (98a4 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    9874:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    9876:	6943      	ldr	r3, [r0, #20]
    9878:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    987a:	b173      	cbz	r3, 989a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    987c:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    987e:	b902      	cbnz	r2, 9882 <EventResponder::runFromInterrupt()+0x1e>
    9880:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    9882:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    9884:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    9886:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9888:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    988c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    988e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9890:	2800      	cmp	r0, #0
    9892:	d1f0      	bne.n	9876 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    9894:	b902      	cbnz	r2, 9898 <EventResponder::runFromInterrupt()+0x34>
    9896:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    9898:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    989a:	6033      	str	r3, [r6, #0]
    989c:	e7ef      	b.n	987e <EventResponder::runFromInterrupt()+0x1a>
    989e:	bf00      	nop
    98a0:	1fffc3a4 	.word	0x1fffc3a4
    98a4:	1fffc3a0 	.word	0x1fffc3a0

000098a8 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    98a8:	f7ff bfdc 	b.w	9864 <EventResponder::runFromInterrupt()>

000098ac <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    98ac:	4a02      	ldr	r2, [pc, #8]	; (98b8 <systick_isr+0xc>)
    98ae:	6813      	ldr	r3, [r2, #0]
    98b0:	3301      	adds	r3, #1
    98b2:	6013      	str	r3, [r2, #0]
}
    98b4:	4770      	bx	lr
    98b6:	bf00      	nop
    98b8:	1fffc3b4 	.word	0x1fffc3b4

000098bc <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    98bc:	084b      	lsrs	r3, r1, #1
    98be:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    98c2:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    98c6:	b510      	push	{r4, lr}
    98c8:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    98ca:	fbb3 f0f1 	udiv	r0, r3, r1
    98ce:	f001 f989 	bl	abe4 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    98d2:	4b04      	ldr	r3, [pc, #16]	; (98e4 <HardwareSerial2::begin(unsigned long)+0x28>)
    98d4:	781b      	ldrb	r3, [r3, #0]
    98d6:	b103      	cbz	r3, 98da <HardwareSerial2::begin(unsigned long)+0x1e>
}
    98d8:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    98da:	4620      	mov	r0, r4
}
    98dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    98e0:	f003 b894 	b.w	ca0c <HardwareSerial::addToSerialEventsList()>
    98e4:	1fff8821 	.word	0x1fff8821

000098e8 <HardwareSerial2::write9bit(unsigned long)>:
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    98e8:	b508      	push	{r3, lr}
    98ea:	4608      	mov	r0, r1
    98ec:	f001 fb68 	bl	afc0 <serial2_putchar>
    98f0:	2001      	movs	r0, #1
    98f2:	bd08      	pop	{r3, pc}

000098f4 <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    98f4:	b508      	push	{r3, lr}
    98f6:	4608      	mov	r0, r1
    98f8:	f001 fb62 	bl	afc0 <serial2_putchar>
    98fc:	2001      	movs	r0, #1
    98fe:	bd08      	pop	{r3, pc}

00009900 <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    9900:	b538      	push	{r3, r4, r5, lr}
    9902:	4608      	mov	r0, r1
    9904:	460d      	mov	r5, r1
    9906:	f004 ff9b 	bl	e840 <strlen>
    990a:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    990c:	4601      	mov	r1, r0
    990e:	4628      	mov	r0, r5
    9910:	f001 fbd2 	bl	b0b8 <serial2_write>
					  return len; }
    9914:	4620      	mov	r0, r4
    9916:	bd38      	pop	{r3, r4, r5, pc}

00009918 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9918:	b510      	push	{r4, lr}
    991a:	4608      	mov	r0, r1
    991c:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    991e:	4611      	mov	r1, r2
    9920:	f001 fbca 	bl	b0b8 <serial2_write>
    9924:	4620      	mov	r0, r4
    9926:	bd10      	pop	{r4, pc}

00009928 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    9928:	4608      	mov	r0, r1
    992a:	4611      	mov	r1, r2
    992c:	f001 bdf2 	b.w	b514 <serial2_add_memory_for_write>

00009930 <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    9930:	4608      	mov	r0, r1
    9932:	4611      	mov	r1, r2
    9934:	f001 bdd2 	b.w	b4dc <serial2_add_memory_for_read>

00009938 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    9938:	f001 bcea 	b.w	b310 <serial2_clear>

0000993c <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    993c:	b508      	push	{r3, lr}
    993e:	4608      	mov	r0, r1
    9940:	f001 fb1e 	bl	af80 <serial2_set_cts>
    9944:	3800      	subs	r0, #0
    9946:	bf18      	it	ne
    9948:	2001      	movne	r0, #1
    994a:	bd08      	pop	{r3, pc}

0000994c <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    994c:	b508      	push	{r3, lr}
    994e:	4608      	mov	r0, r1
    9950:	f001 faf4 	bl	af3c <serial2_set_rts>
    9954:	3800      	subs	r0, #0
    9956:	bf18      	it	ne
    9958:	2001      	movne	r0, #1
    995a:	bd08      	pop	{r3, pc}

0000995c <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    995c:	4608      	mov	r0, r1
    995e:	4611      	mov	r1, r2
    9960:	f001 ba80 	b.w	ae64 <serial2_set_tx>

00009964 <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    9964:	4608      	mov	r0, r1
    9966:	f001 babb 	b.w	aee0 <serial2_set_rx>
    996a:	bf00      	nop

0000996c <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    996c:	4608      	mov	r0, r1
    996e:	f001 ba5d 	b.w	ae2c <serial2_set_transmit_pin>
    9972:	bf00      	nop

00009974 <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    9974:	f001 b9f2 	b.w	ad5c <serial2_end>

00009978 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9978:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    997a:	084b      	lsrs	r3, r1, #1
    997c:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    9980:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    9982:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    9986:	fbb3 f0f1 	udiv	r0, r3, r1
    998a:	f001 f92b 	bl	abe4 <serial2_begin>
					  serial2_format(format); }
    998e:	4620      	mov	r0, r4
    9990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9994:	f001 b994 	b.w	acc0 <serial2_format>

00009998 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    9998:	f001 bc94 	b.w	b2c4 <serial2_peek>

0000999c <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    999c:	f001 bc4c 	b.w	b238 <serial2_getchar>

000099a0 <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    99a0:	f001 bc36 	b.w	b210 <serial2_available>

000099a4 <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    99a4:	f001 bc10 	b.w	b1c8 <serial2_flush>

000099a8 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    99a8:	f001 bc1a 	b.w	b1e0 <serial2_write_buffer_free>

000099ac <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    99ac:	6803      	ldr	r3, [r0, #0]
    99ae:	4a06      	ldr	r2, [pc, #24]	; (99c8 <HardwareSerial2::write(int)+0x1c>)
    99b0:	681b      	ldr	r3, [r3, #0]
    99b2:	4293      	cmp	r3, r2
    99b4:	d105      	bne.n	99c2 <HardwareSerial2::write(int)+0x16>
    99b6:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    99b8:	b2c8      	uxtb	r0, r1
    99ba:	f001 fb01 	bl	afc0 <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    99be:	2001      	movs	r0, #1
    99c0:	bd10      	pop	{r4, pc}
    99c2:	b2c9      	uxtb	r1, r1
    99c4:	4718      	bx	r3
    99c6:	bf00      	nop
    99c8:	000098f5 	.word	0x000098f5

000099cc <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    99cc:	6803      	ldr	r3, [r0, #0]
    99ce:	4a06      	ldr	r2, [pc, #24]	; (99e8 <HardwareSerial2::write(unsigned long)+0x1c>)
    99d0:	681b      	ldr	r3, [r3, #0]
    99d2:	4293      	cmp	r3, r2
    99d4:	d105      	bne.n	99e2 <HardwareSerial2::write(unsigned long)+0x16>
    99d6:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    99d8:	b2c8      	uxtb	r0, r1
    99da:	f001 faf1 	bl	afc0 <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    99de:	2001      	movs	r0, #1
    99e0:	bd10      	pop	{r4, pc}
    99e2:	b2c9      	uxtb	r1, r1
    99e4:	4718      	bx	r3
    99e6:	bf00      	nop
    99e8:	000098f5 	.word	0x000098f5

000099ec <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    99ec:	6803      	ldr	r3, [r0, #0]
    99ee:	4a06      	ldr	r2, [pc, #24]	; (9a08 <HardwareSerial2::write(long)+0x1c>)
    99f0:	681b      	ldr	r3, [r3, #0]
    99f2:	4293      	cmp	r3, r2
    99f4:	d105      	bne.n	9a02 <HardwareSerial2::write(long)+0x16>
    99f6:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    99f8:	b2c8      	uxtb	r0, r1
    99fa:	f001 fae1 	bl	afc0 <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    99fe:	2001      	movs	r0, #1
    9a00:	bd10      	pop	{r4, pc}
    9a02:	b2c9      	uxtb	r1, r1
    9a04:	4718      	bx	r3
    9a06:	bf00      	nop
    9a08:	000098f5 	.word	0x000098f5

00009a0c <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9a0c:	6803      	ldr	r3, [r0, #0]
    9a0e:	4a06      	ldr	r2, [pc, #24]	; (9a28 <HardwareSerial2::write(unsigned int)+0x1c>)
    9a10:	681b      	ldr	r3, [r3, #0]
    9a12:	4293      	cmp	r3, r2
    9a14:	d105      	bne.n	9a22 <HardwareSerial2::write(unsigned int)+0x16>
    9a16:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9a18:	b2c8      	uxtb	r0, r1
    9a1a:	f001 fad1 	bl	afc0 <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9a1e:	2001      	movs	r0, #1
    9a20:	bd10      	pop	{r4, pc}
    9a22:	b2c9      	uxtb	r1, r1
    9a24:	4718      	bx	r3
    9a26:	bf00      	nop
    9a28:	000098f5 	.word	0x000098f5

00009a2c <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    9a2c:	084b      	lsrs	r3, r1, #1
    9a2e:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    9a32:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    9a36:	b510      	push	{r4, lr}
    9a38:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    9a3a:	fbb3 f0f1 	udiv	r0, r3, r1
    9a3e:	f001 fdef 	bl	b620 <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    9a42:	4b04      	ldr	r3, [pc, #16]	; (9a54 <HardwareSerial3::begin(unsigned long)+0x28>)
    9a44:	781b      	ldrb	r3, [r3, #0]
    9a46:	b103      	cbz	r3, 9a4a <HardwareSerial3::begin(unsigned long)+0x1e>
}
    9a48:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    9a4a:	4620      	mov	r0, r4
}
    9a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    9a50:	f002 bfdc 	b.w	ca0c <HardwareSerial::addToSerialEventsList()>
    9a54:	1fff8822 	.word	0x1fff8822

00009a58 <HardwareSerial3::write9bit(unsigned long)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    9a58:	b508      	push	{r3, lr}
    9a5a:	4608      	mov	r0, r1
    9a5c:	f001 ff3c 	bl	b8d8 <serial3_putchar>
    9a60:	2001      	movs	r0, #1
    9a62:	bd08      	pop	{r3, pc}

00009a64 <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9a64:	b508      	push	{r3, lr}
    9a66:	4608      	mov	r0, r1
    9a68:	f001 ff36 	bl	b8d8 <serial3_putchar>
    9a6c:	2001      	movs	r0, #1
    9a6e:	bd08      	pop	{r3, pc}

00009a70 <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    9a70:	b538      	push	{r3, r4, r5, lr}
    9a72:	4608      	mov	r0, r1
    9a74:	460d      	mov	r5, r1
    9a76:	f004 fee3 	bl	e840 <strlen>
    9a7a:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    9a7c:	4601      	mov	r1, r0
    9a7e:	4628      	mov	r0, r5
    9a80:	f001 ff34 	bl	b8ec <serial3_write>
					  return len; }
    9a84:	4620      	mov	r0, r4
    9a86:	bd38      	pop	{r3, r4, r5, pc}

00009a88 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9a88:	b510      	push	{r4, lr}
    9a8a:	4608      	mov	r0, r1
    9a8c:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    9a8e:	4611      	mov	r1, r2
    9a90:	f001 ff2c 	bl	b8ec <serial3_write>
    9a94:	4620      	mov	r0, r4
    9a96:	bd10      	pop	{r4, pc}

00009a98 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    9a98:	4608      	mov	r0, r1
    9a9a:	4611      	mov	r1, r2
    9a9c:	f002 b8a0 	b.w	bbe0 <serial3_add_memory_for_write>

00009aa0 <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    9aa0:	4608      	mov	r0, r1
    9aa2:	4611      	mov	r1, r2
    9aa4:	f002 b880 	b.w	bba8 <serial3_add_memory_for_read>

00009aa8 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    9aa8:	f001 bfd8 	b.w	ba5c <serial3_clear>

00009aac <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    9aac:	b508      	push	{r3, lr}
    9aae:	4608      	mov	r0, r1
    9ab0:	f001 fef2 	bl	b898 <serial3_set_cts>
    9ab4:	3800      	subs	r0, #0
    9ab6:	bf18      	it	ne
    9ab8:	2001      	movne	r0, #1
    9aba:	bd08      	pop	{r3, pc}

00009abc <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    9abc:	b508      	push	{r3, lr}
    9abe:	4608      	mov	r0, r1
    9ac0:	f001 fec8 	bl	b854 <serial3_set_rts>
    9ac4:	3800      	subs	r0, #0
    9ac6:	bf18      	it	ne
    9ac8:	2001      	movne	r0, #1
    9aca:	bd08      	pop	{r3, pc}

00009acc <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    9acc:	4608      	mov	r0, r1
    9ace:	4611      	mov	r1, r2
    9ad0:	f001 be92 	b.w	b7f8 <serial3_set_tx>

00009ad4 <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    9ad4:	4608      	mov	r0, r1
    9ad6:	f001 bebb 	b.w	b850 <serial3_set_rx>
    9ada:	bf00      	nop

00009adc <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    9adc:	4608      	mov	r0, r1
    9ade:	f001 be6f 	b.w	b7c0 <serial3_set_transmit_pin>
    9ae2:	bf00      	nop

00009ae4 <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    9ae4:	f001 be36 	b.w	b754 <serial3_end>

00009ae8 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9ae8:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    9aea:	084b      	lsrs	r3, r1, #1
    9aec:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    9af0:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    9af2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    9af6:	fbb3 f0f1 	udiv	r0, r3, r1
    9afa:	f001 fd91 	bl	b620 <serial3_begin>
					  serial3_format(format); }
    9afe:	4620      	mov	r0, r4
    9b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b04:	f001 bdd8 	b.w	b6b8 <serial3_format>

00009b08 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    9b08:	f001 bf82 	b.w	ba10 <serial3_peek>

00009b0c <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    9b0c:	f001 bf3a 	b.w	b984 <serial3_getchar>

00009b10 <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    9b10:	f001 bf24 	b.w	b95c <serial3_available>

00009b14 <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    9b14:	f001 befe 	b.w	b914 <serial3_flush>

00009b18 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    9b18:	f001 bf08 	b.w	b92c <serial3_write_buffer_free>

00009b1c <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9b1c:	6803      	ldr	r3, [r0, #0]
    9b1e:	4a06      	ldr	r2, [pc, #24]	; (9b38 <HardwareSerial3::write(int)+0x1c>)
    9b20:	681b      	ldr	r3, [r3, #0]
    9b22:	4293      	cmp	r3, r2
    9b24:	d105      	bne.n	9b32 <HardwareSerial3::write(int)+0x16>
    9b26:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9b28:	b2c8      	uxtb	r0, r1
    9b2a:	f001 fed5 	bl	b8d8 <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9b2e:	2001      	movs	r0, #1
    9b30:	bd10      	pop	{r4, pc}
    9b32:	b2c9      	uxtb	r1, r1
    9b34:	4718      	bx	r3
    9b36:	bf00      	nop
    9b38:	00009a65 	.word	0x00009a65

00009b3c <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9b3c:	6803      	ldr	r3, [r0, #0]
    9b3e:	4a06      	ldr	r2, [pc, #24]	; (9b58 <HardwareSerial3::write(unsigned long)+0x1c>)
    9b40:	681b      	ldr	r3, [r3, #0]
    9b42:	4293      	cmp	r3, r2
    9b44:	d105      	bne.n	9b52 <HardwareSerial3::write(unsigned long)+0x16>
    9b46:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9b48:	b2c8      	uxtb	r0, r1
    9b4a:	f001 fec5 	bl	b8d8 <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9b4e:	2001      	movs	r0, #1
    9b50:	bd10      	pop	{r4, pc}
    9b52:	b2c9      	uxtb	r1, r1
    9b54:	4718      	bx	r3
    9b56:	bf00      	nop
    9b58:	00009a65 	.word	0x00009a65

00009b5c <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9b5c:	6803      	ldr	r3, [r0, #0]
    9b5e:	4a06      	ldr	r2, [pc, #24]	; (9b78 <HardwareSerial3::write(long)+0x1c>)
    9b60:	681b      	ldr	r3, [r3, #0]
    9b62:	4293      	cmp	r3, r2
    9b64:	d105      	bne.n	9b72 <HardwareSerial3::write(long)+0x16>
    9b66:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9b68:	b2c8      	uxtb	r0, r1
    9b6a:	f001 feb5 	bl	b8d8 <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9b6e:	2001      	movs	r0, #1
    9b70:	bd10      	pop	{r4, pc}
    9b72:	b2c9      	uxtb	r1, r1
    9b74:	4718      	bx	r3
    9b76:	bf00      	nop
    9b78:	00009a65 	.word	0x00009a65

00009b7c <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9b7c:	6803      	ldr	r3, [r0, #0]
    9b7e:	4a06      	ldr	r2, [pc, #24]	; (9b98 <HardwareSerial3::write(unsigned int)+0x1c>)
    9b80:	681b      	ldr	r3, [r3, #0]
    9b82:	4293      	cmp	r3, r2
    9b84:	d105      	bne.n	9b92 <HardwareSerial3::write(unsigned int)+0x16>
    9b86:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9b88:	b2c8      	uxtb	r0, r1
    9b8a:	f001 fea5 	bl	b8d8 <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9b8e:	2001      	movs	r0, #1
    9b90:	bd10      	pop	{r4, pc}
    9b92:	b2c9      	uxtb	r1, r1
    9b94:	4718      	bx	r3
    9b96:	bf00      	nop
    9b98:	00009a65 	.word	0x00009a65

00009b9c <dummy_funct()>:
}
#endif

static void dummy_funct(void)
{
}
    9b9c:	4770      	bx	lr
    9b9e:	bf00      	nop

00009ba0 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    9ba0:	6803      	ldr	r3, [r0, #0]
{
    9ba2:	b430      	push	{r4, r5}
	if (channel) {
    9ba4:	b303      	cbz	r3, 9be8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x48>
		channel->TCTRL = 0;
    9ba6:	2400      	movs	r4, #0
    9ba8:	609c      	str	r4, [r3, #8]
		channel->TFLG = 1;
    9baa:	2401      	movs	r4, #1
    9bac:	60dc      	str	r4, [r3, #12]
	channel->LDVAL = cycles;
    9bae:	601a      	str	r2, [r3, #0]
	int index = channel - KINETISK_PIT_CHANNELS;
    9bb0:	4a1a      	ldr	r2, [pc, #104]	; (9c1c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x7c>)
	funct_table[index] = funct;
    9bb2:	4c1b      	ldr	r4, [pc, #108]	; (9c20 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>)
	int index = channel - KINETISK_PIT_CHANNELS;
    9bb4:	441a      	add	r2, r3
    9bb6:	ea4f 1c22 	mov.w	ip, r2, asr #4
	funct_table[index] = funct;
    9bba:	f844 102c 	str.w	r1, [r4, ip, lsl #2]
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    9bbe:	f10c 0144 	add.w	r1, ip, #68	; 0x44
    9bc2:	114a      	asrs	r2, r1, #5
	channel->TCTRL = 3;
    9bc4:	2403      	movs	r4, #3
    9bc6:	609c      	str	r4, [r3, #8]
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    9bc8:	f102 2238 	add.w	r2, r2, #939538432	; 0x38003800
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
    9bcc:	4b15      	ldr	r3, [pc, #84]	; (9c24 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x84>)
    9bce:	7900      	ldrb	r0, [r0, #4]
    9bd0:	f80c 0003 	strb.w	r0, [ip, r3]
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    9bd4:	3240      	adds	r2, #64	; 0x40
    9bd6:	2001      	movs	r0, #1
    9bd8:	0092      	lsls	r2, r2, #2
    9bda:	f001 011f 	and.w	r1, r1, #31
    9bde:	fa00 f101 	lsl.w	r1, r0, r1
}
    9be2:	bc30      	pop	{r4, r5}
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    9be4:	6011      	str	r1, [r2, #0]
}
    9be6:	4770      	bx	lr
		SIM_SCGC6 |= SIM_SCGC6_PIT;
    9be8:	4c0f      	ldr	r4, [pc, #60]	; (9c28 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x88>)
    9bea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    9bf0:	63e3      	str	r3, [r4, #60]	; 0x3c
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
    9bf2:	bf00      	nop
		PIT_MCR = 1;
    9bf4:	4b0d      	ldr	r3, [pc, #52]	; (9c2c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x8c>)
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    9bf6:	4d0e      	ldr	r5, [pc, #56]	; (9c30 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x90>)
		PIT_MCR = 1;
    9bf8:	2401      	movs	r4, #1
    9bfa:	601c      	str	r4, [r3, #0]
		channel = KINETISK_PIT_CHANNELS;
    9bfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    9c00:	6003      	str	r3, [r0, #0]
			if (channel->TCTRL == 0) break;
    9c02:	689c      	ldr	r4, [r3, #8]
    9c04:	2c00      	cmp	r4, #0
    9c06:	d0d2      	beq.n	9bae <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xe>
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    9c08:	3310      	adds	r3, #16
    9c0a:	42ab      	cmp	r3, r5
    9c0c:	6003      	str	r3, [r0, #0]
    9c0e:	d1f8      	bne.n	9c02 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x62>
				channel = NULL;
    9c10:	2300      	movs	r3, #0
    9c12:	6003      	str	r3, [r0, #0]
}
    9c14:	bc30      	pop	{r4, r5}
				return false;
    9c16:	4618      	mov	r0, r3
}
    9c18:	4770      	bx	lr
    9c1a:	bf00      	nop
    9c1c:	bffc8f00 	.word	0xbffc8f00
    9c20:	1fff87dc 	.word	0x1fff87dc
    9c24:	e000e444 	.word	0xe000e444
    9c28:	40048000 	.word	0x40048000
    9c2c:	40037000 	.word	0x40037000
    9c30:	40037140 	.word	0x40037140

00009c34 <IntervalTimer::end()>:
void IntervalTimer::end() {
    9c34:	b4f0      	push	{r4, r5, r6, r7}
	if (channel) {
    9c36:	6804      	ldr	r4, [r0, #0]
    9c38:	b1cc      	cbz	r4, 9c6e <IntervalTimer::end()+0x3a>
		int index = channel - KINETISK_PIT_CHANNELS;
    9c3a:	490e      	ldr	r1, [pc, #56]	; (9c74 <IntervalTimer::end()+0x40>)
		funct_table[index] = dummy_funct;
    9c3c:	4e0e      	ldr	r6, [pc, #56]	; (9c78 <IntervalTimer::end()+0x44>)
    9c3e:	4f0f      	ldr	r7, [pc, #60]	; (9c7c <IntervalTimer::end()+0x48>)
		int index = channel - KINETISK_PIT_CHANNELS;
    9c40:	4421      	add	r1, r4
    9c42:	1109      	asrs	r1, r1, #4
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    9c44:	f101 0244 	add.w	r2, r1, #68	; 0x44
    9c48:	1153      	asrs	r3, r2, #5
    9c4a:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    9c4e:	3360      	adds	r3, #96	; 0x60
    9c50:	009b      	lsls	r3, r3, #2
    9c52:	2501      	movs	r5, #1
    9c54:	f002 021f 	and.w	r2, r2, #31
    9c58:	fa05 f202 	lsl.w	r2, r5, r2
		funct_table[index] = dummy_funct;
    9c5c:	f846 7021 	str.w	r7, [r6, r1, lsl #2]
		channel->TCTRL = 0;
    9c60:	2100      	movs	r1, #0
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    9c62:	601a      	str	r2, [r3, #0]
		channel->TCTRL = 0;
    9c64:	60a1      	str	r1, [r4, #8]
		channel->TFLG = 1;
    9c66:	60e5      	str	r5, [r4, #12]
		NVIC_CLEAR_PENDING(IRQ_PIT_CH0 + index);
    9c68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		channel = 0;
    9c6c:	6001      	str	r1, [r0, #0]
}
    9c6e:	bcf0      	pop	{r4, r5, r6, r7}
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop
    9c74:	bffc8f00 	.word	0xbffc8f00
    9c78:	1fff87dc 	.word	0x1fff87dc
    9c7c:	00009b9d 	.word	0x00009b9d

00009c80 <pit0_isr>:
	PIT_TFLG0 = 1;
    9c80:	4a03      	ldr	r2, [pc, #12]	; (9c90 <pit0_isr+0x10>)
	funct_table[0]();
    9c82:	4b04      	ldr	r3, [pc, #16]	; (9c94 <pit0_isr+0x14>)
	PIT_TFLG0 = 1;
    9c84:	2101      	movs	r1, #1
	funct_table[0]();
    9c86:	681b      	ldr	r3, [r3, #0]
	PIT_TFLG0 = 1;
    9c88:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	funct_table[0]();
    9c8c:	4718      	bx	r3
    9c8e:	bf00      	nop
    9c90:	40037000 	.word	0x40037000
    9c94:	1fff87dc 	.word	0x1fff87dc

00009c98 <pit1_isr>:
	PIT_TFLG1 = 1;
    9c98:	4a03      	ldr	r2, [pc, #12]	; (9ca8 <pit1_isr+0x10>)
	funct_table[1]();
    9c9a:	4b04      	ldr	r3, [pc, #16]	; (9cac <pit1_isr+0x14>)
	PIT_TFLG1 = 1;
    9c9c:	2101      	movs	r1, #1
	funct_table[1]();
    9c9e:	685b      	ldr	r3, [r3, #4]
	PIT_TFLG1 = 1;
    9ca0:	f8c2 111c 	str.w	r1, [r2, #284]	; 0x11c
	funct_table[1]();
    9ca4:	4718      	bx	r3
    9ca6:	bf00      	nop
    9ca8:	40037000 	.word	0x40037000
    9cac:	1fff87dc 	.word	0x1fff87dc

00009cb0 <pit2_isr>:
	PIT_TFLG2 = 1;
    9cb0:	4a03      	ldr	r2, [pc, #12]	; (9cc0 <pit2_isr+0x10>)
	funct_table[2]();
    9cb2:	4b04      	ldr	r3, [pc, #16]	; (9cc4 <pit2_isr+0x14>)
	PIT_TFLG2 = 1;
    9cb4:	2101      	movs	r1, #1
	funct_table[2]();
    9cb6:	689b      	ldr	r3, [r3, #8]
	PIT_TFLG2 = 1;
    9cb8:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
	funct_table[2]();
    9cbc:	4718      	bx	r3
    9cbe:	bf00      	nop
    9cc0:	40037000 	.word	0x40037000
    9cc4:	1fff87dc 	.word	0x1fff87dc

00009cc8 <pit3_isr>:
	PIT_TFLG3 = 1;
    9cc8:	4a03      	ldr	r2, [pc, #12]	; (9cd8 <pit3_isr+0x10>)
	funct_table[3]();
    9cca:	4b04      	ldr	r3, [pc, #16]	; (9cdc <pit3_isr+0x14>)
	PIT_TFLG3 = 1;
    9ccc:	2101      	movs	r1, #1
	funct_table[3]();
    9cce:	68db      	ldr	r3, [r3, #12]
	PIT_TFLG3 = 1;
    9cd0:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
	funct_table[3]();
    9cd4:	4718      	bx	r3
    9cd6:	bf00      	nop
    9cd8:	40037000 	.word	0x40037000
    9cdc:	1fff87dc 	.word	0x1fff87dc

00009ce0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9ce0:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9ce2:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9ce4:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    9ce6:	bf08      	it	eq
    9ce8:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    9cea:	b3a1      	cbz	r1, 9d56 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    9cec:	f04f 0e21 	mov.w	lr, #33	; 0x21
    9cf0:	e002      	b.n	9cf8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    9cf2:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    9cf6:	4629      	mov	r1, r5
			digit = n % base;
    9cf8:	fbb1 f5f2 	udiv	r5, r1, r2
    9cfc:	fb02 1415 	mls	r4, r2, r5, r1
    9d00:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9d04:	2c09      	cmp	r4, #9
    9d06:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    9d0a:	bf98      	it	ls
    9d0c:	fa5f fc84 	uxtbls.w	ip, r4
    9d10:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    9d14:	bf88      	it	hi
    9d16:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    9d1a:	446c      	add	r4, sp
    9d1c:	bf88      	it	hi
    9d1e:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    9d22:	4291      	cmp	r1, r2
			i--;
    9d24:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9d28:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    9d2c:	d2e1      	bcs.n	9cf2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    9d2e:	b14b      	cbz	r3, 9d44 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    9d30:	f10e 3eff 	add.w	lr, lr, #4294967295
    9d34:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    9d38:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    9d3c:	446b      	add	r3, sp
    9d3e:	222d      	movs	r2, #45	; 0x2d
    9d40:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    9d44:	6803      	ldr	r3, [r0, #0]
    9d46:	a901      	add	r1, sp, #4
    9d48:	685b      	ldr	r3, [r3, #4]
    9d4a:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    9d4e:	4471      	add	r1, lr
    9d50:	4798      	blx	r3
}
    9d52:	b00a      	add	sp, #40	; 0x28
    9d54:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    9d56:	2230      	movs	r2, #48	; 0x30
    9d58:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    9d5c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    9d60:	e7e5      	b.n	9d2e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    9d62:	bf00      	nop

00009d64 <Print::print(long)>:
	if (n < 0) {
    9d64:	2900      	cmp	r1, #0
		n = -n;
    9d66:	bfba      	itte	lt
    9d68:	4249      	neglt	r1, r1
		sign = '-';
    9d6a:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    9d6c:	2300      	movge	r3, #0
	if (base == 0) {
    9d6e:	220a      	movs	r2, #10
    9d70:	f7ff bfb6 	b.w	9ce0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009d74 <Print::println()>:
{
    9d74:	b500      	push	{lr}
	return write(buf, 2);
    9d76:	6803      	ldr	r3, [r0, #0]
{
    9d78:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    9d7a:	f640 220d 	movw	r2, #2573	; 0xa0d
    9d7e:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    9d82:	685b      	ldr	r3, [r3, #4]
    9d84:	2202      	movs	r2, #2
    9d86:	a901      	add	r1, sp, #4
    9d88:	4798      	blx	r3
}
    9d8a:	b003      	add	sp, #12
    9d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00009d90 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9d90:	4b03      	ldr	r3, [pc, #12]	; (9da0 <_write+0x10>)
    9d92:	2802      	cmp	r0, #2
    9d94:	bf88      	it	hi
    9d96:	4603      	movhi	r3, r0
    9d98:	4618      	mov	r0, r3
    9d9a:	681b      	ldr	r3, [r3, #0]
    9d9c:	685b      	ldr	r3, [r3, #4]
    9d9e:	4718      	bx	r3
    9da0:	1fff8824 	.word	0x1fff8824

00009da4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    9da4:	b932      	cbnz	r2, 9db4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    9da6:	6803      	ldr	r3, [r0, #0]
{
    9da8:	b500      	push	{lr}
		return write((uint8_t)n);
    9daa:	681b      	ldr	r3, [r3, #0]
}
    9dac:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    9db0:	b2c9      	uxtb	r1, r1
    9db2:	4718      	bx	r3
    9db4:	f7ff bf94 	b.w	9ce0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009db8 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    9db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9dbc:	4619      	mov	r1, r3
{
    9dbe:	b087      	sub	sp, #28
    9dc0:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    9dc2:	4610      	mov	r0, r2
{
    9dc4:	4614      	mov	r4, r2
    9dc6:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    9dc8:	f003 fa44 	bl	d254 <__aeabi_dcmpun>
{
    9dcc:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    9dd0:	2800      	cmp	r0, #0
    9dd2:	f040 80a9 	bne.w	9f28 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    9dd6:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    9dda:	4b5f      	ldr	r3, [pc, #380]	; (9f58 <Print::printFloat(double, unsigned char)+0x1a0>)
    9ddc:	4620      	mov	r0, r4
    9dde:	4629      	mov	r1, r5
    9de0:	f04f 32ff 	mov.w	r2, #4294967295
    9de4:	f003 fa36 	bl	d254 <__aeabi_dcmpun>
    9de8:	b948      	cbnz	r0, 9dfe <Print::printFloat(double, unsigned char)+0x46>
    9dea:	4b5b      	ldr	r3, [pc, #364]	; (9f58 <Print::printFloat(double, unsigned char)+0x1a0>)
    9dec:	4620      	mov	r0, r4
    9dee:	4629      	mov	r1, r5
    9df0:	f04f 32ff 	mov.w	r2, #4294967295
    9df4:	f003 fa10 	bl	d218 <__aeabi_dcmple>
    9df8:	2800      	cmp	r0, #0
    9dfa:	f000 808e 	beq.w	9f1a <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    9dfe:	4b57      	ldr	r3, [pc, #348]	; (9f5c <Print::printFloat(double, unsigned char)+0x1a4>)
    9e00:	4620      	mov	r0, r4
    9e02:	4651      	mov	r1, sl
    9e04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    9e08:	f003 fa1a 	bl	d240 <__aeabi_dcmpgt>
    9e0c:	2800      	cmp	r0, #0
    9e0e:	d17b      	bne.n	9f08 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    9e10:	4b53      	ldr	r3, [pc, #332]	; (9f60 <Print::printFloat(double, unsigned char)+0x1a8>)
    9e12:	4620      	mov	r0, r4
    9e14:	4651      	mov	r1, sl
    9e16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    9e1a:	f003 f9f3 	bl	d204 <__aeabi_dcmplt>
    9e1e:	2800      	cmp	r0, #0
    9e20:	d172      	bne.n	9f08 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    9e22:	4620      	mov	r0, r4
    9e24:	4651      	mov	r1, sl
    9e26:	2200      	movs	r2, #0
    9e28:	2300      	movs	r3, #0
    9e2a:	f003 f9eb 	bl	d204 <__aeabi_dcmplt>
    9e2e:	4605      	mov	r5, r0
    9e30:	2800      	cmp	r0, #0
    9e32:	d175      	bne.n	9f20 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    9e34:	2f00      	cmp	r7, #0
    9e36:	d07a      	beq.n	9f2e <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    9e38:	f20f 1914 	addw	r9, pc, #276	; 0x114
    9e3c:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    9e40:	4948      	ldr	r1, [pc, #288]	; (9f64 <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    9e42:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    9e46:	2000      	movs	r0, #0
		rounding *= 0.1;
    9e48:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    9e4a:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    9e4e:	4642      	mov	r2, r8
    9e50:	f009 ffa6 	bl	13da0 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    9e54:	fa5f f38b 	uxtb.w	r3, fp
    9e58:	42bb      	cmp	r3, r7
    9e5a:	d3f5      	bcc.n	9e48 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    9e5c:	4602      	mov	r2, r0
    9e5e:	460b      	mov	r3, r1
    9e60:	4620      	mov	r0, r4
    9e62:	4651      	mov	r1, sl
    9e64:	f002 ffb8 	bl	cdd8 <__adddf3>
    9e68:	4689      	mov	r9, r1
    9e6a:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    9e6c:	f003 fa08 	bl	d280 <__aeabi_d2uiz>
    9e70:	2f0f      	cmp	r7, #15
    9e72:	bf28      	it	cs
    9e74:	270f      	movcs	r7, #15
    9e76:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    9e78:	9701      	str	r7, [sp, #4]
    9e7a:	f003 f8e9 	bl	d050 <__aeabi_ui2d>
    9e7e:	4602      	mov	r2, r0
    9e80:	460b      	mov	r3, r1
    9e82:	4640      	mov	r0, r8
    9e84:	4649      	mov	r1, r9
    9e86:	f002 ffa5 	bl	cdd4 <__aeabi_dsub>
    9e8a:	462b      	mov	r3, r5
    9e8c:	4680      	mov	r8, r0
    9e8e:	4689      	mov	r9, r1
    9e90:	220a      	movs	r2, #10
    9e92:	4651      	mov	r1, sl
    9e94:	4630      	mov	r0, r6
    9e96:	f7ff ff23 	bl	9ce0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    9e9a:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    9e9c:	464d      	mov	r5, r9
		buf[0] = '.';
    9e9e:	f88d 3008 	strb.w	r3, [sp, #8]
    9ea2:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    9ea6:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    9ea8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9f68 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    9eac:	4644      	mov	r4, r8
	if (base == 0) {
    9eae:	4683      	mov	fp, r0
		while (digits-- > 0) {
    9eb0:	fa52 fa83 	uxtab	sl, r2, r3
    9eb4:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    9eb6:	f04f 0800 	mov.w	r8, #0
    9eba:	4642      	mov	r2, r8
    9ebc:	464b      	mov	r3, r9
    9ebe:	4620      	mov	r0, r4
    9ec0:	4629      	mov	r1, r5
    9ec2:	f009 ff6d 	bl	13da0 <__aeabi_dmul>
    9ec6:	460d      	mov	r5, r1
    9ec8:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    9eca:	f003 f9d9 	bl	d280 <__aeabi_d2uiz>
    9ece:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    9ed0:	f100 0330 	add.w	r3, r0, #48	; 0x30
    9ed4:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    9ed8:	f003 f8ca 	bl	d070 <__aeabi_i2d>
    9edc:	4602      	mov	r2, r0
    9ede:	460b      	mov	r3, r1
    9ee0:	4620      	mov	r0, r4
    9ee2:	4629      	mov	r1, r5
    9ee4:	f002 ff76 	bl	cdd4 <__aeabi_dsub>
		while (digits-- > 0) {
    9ee8:	45ba      	cmp	sl, r7
			remainder -= n; 
    9eea:	4604      	mov	r4, r0
    9eec:	460d      	mov	r5, r1
		while (digits-- > 0) {
    9eee:	d1e4      	bne.n	9eba <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    9ef0:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    9ef2:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    9ef4:	3201      	adds	r2, #1
		count += write(buf, count);
    9ef6:	685b      	ldr	r3, [r3, #4]
    9ef8:	b2d2      	uxtb	r2, r2
    9efa:	a902      	add	r1, sp, #8
    9efc:	4630      	mov	r0, r6
    9efe:	4798      	blx	r3
	}
	return count;
}
    9f00:	4658      	mov	r0, fp
    9f02:	b007      	add	sp, #28
    9f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    9f08:	6833      	ldr	r3, [r6, #0]
    9f0a:	4918      	ldr	r1, [pc, #96]	; (9f6c <Print::printFloat(double, unsigned char)+0x1b4>)
    9f0c:	685b      	ldr	r3, [r3, #4]
    9f0e:	2203      	movs	r2, #3
    9f10:	4630      	mov	r0, r6
    9f12:	b007      	add	sp, #28
    9f14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f18:	4718      	bx	r3
    9f1a:	6833      	ldr	r3, [r6, #0]
    9f1c:	4914      	ldr	r1, [pc, #80]	; (9f70 <Print::printFloat(double, unsigned char)+0x1b8>)
    9f1e:	e7f5      	b.n	9f0c <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    9f20:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    9f24:	2501      	movs	r5, #1
    9f26:	e785      	b.n	9e34 <Print::printFloat(double, unsigned char)+0x7c>
    9f28:	6833      	ldr	r3, [r6, #0]
    9f2a:	4912      	ldr	r1, [pc, #72]	; (9f74 <Print::printFloat(double, unsigned char)+0x1bc>)
    9f2c:	e7ee      	b.n	9f0c <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    9f2e:	4b0d      	ldr	r3, [pc, #52]	; (9f64 <Print::printFloat(double, unsigned char)+0x1ac>)
    9f30:	2200      	movs	r2, #0
    9f32:	4620      	mov	r0, r4
    9f34:	4651      	mov	r1, sl
    9f36:	f002 ff4f 	bl	cdd8 <__adddf3>
	unsigned long int_part = (unsigned long)number;
    9f3a:	f003 f9a1 	bl	d280 <__aeabi_d2uiz>
    9f3e:	462b      	mov	r3, r5
    9f40:	4601      	mov	r1, r0
    9f42:	220a      	movs	r2, #10
    9f44:	4630      	mov	r0, r6
}
    9f46:	b007      	add	sp, #28
    9f48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f4c:	f7ff bec8 	b.w	9ce0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    9f50:	a0000000 	.word	0xa0000000
    9f54:	3fb99999 	.word	0x3fb99999
    9f58:	7fefffff 	.word	0x7fefffff
    9f5c:	41efffff 	.word	0x41efffff
    9f60:	c1efffff 	.word	0xc1efffff
    9f64:	3fe00000 	.word	0x3fe00000
    9f68:	40240000 	.word	0x40240000
    9f6c:	00015b2c 	.word	0x00015b2c
    9f70:	00015b28 	.word	0x00015b28
    9f74:	00015b24 	.word	0x00015b24

00009f78 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    9f78:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9f7a:	4d0e      	ldr	r5, [pc, #56]	; (9fb4 <Stream::timedPeek()+0x3c>)
    9f7c:	b082      	sub	sp, #8
    9f7e:	682b      	ldr	r3, [r5, #0]
    9f80:	9300      	str	r3, [sp, #0]
	return ret;
    9f82:	9e00      	ldr	r6, [sp, #0]
    9f84:	4604      	mov	r4, r0
    9f86:	e008      	b.n	9f9a <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    9f88:	f002 fcc8 	bl	c91c <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9f8c:	682b      	ldr	r3, [r5, #0]
    9f8e:	9301      	str	r3, [sp, #4]
	return ret;
    9f90:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    9f92:	68a2      	ldr	r2, [r4, #8]
    9f94:	1b9b      	subs	r3, r3, r6
    9f96:	4293      	cmp	r3, r2
    9f98:	d207      	bcs.n	9faa <Stream::timedPeek()+0x32>
    c = peek();
    9f9a:	6823      	ldr	r3, [r4, #0]
    9f9c:	4620      	mov	r0, r4
    9f9e:	699b      	ldr	r3, [r3, #24]
    9fa0:	4798      	blx	r3
    if (c >= 0) return c;
    9fa2:	2800      	cmp	r0, #0
    9fa4:	dbf0      	blt.n	9f88 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    9fa6:	b002      	add	sp, #8
    9fa8:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    9faa:	f04f 30ff 	mov.w	r0, #4294967295
}
    9fae:	b002      	add	sp, #8
    9fb0:	bd70      	pop	{r4, r5, r6, pc}
    9fb2:	bf00      	nop
    9fb4:	1fffc3b4 	.word	0x1fffc3b4

00009fb8 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    9fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fba:	4604      	mov	r4, r0
    9fbc:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    9fbe:	e006      	b.n	9fce <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    9fc0:	2b2d      	cmp	r3, #45	; 0x2d
    9fc2:	d00f      	beq.n	9fe4 <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    9fc4:	2a09      	cmp	r2, #9
    9fc6:	d90d      	bls.n	9fe4 <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    9fc8:	6823      	ldr	r3, [r4, #0]
    9fca:	695b      	ldr	r3, [r3, #20]
    9fcc:	4798      	blx	r3
    c = timedPeek();
    9fce:	4620      	mov	r0, r4
    9fd0:	f7ff ffd2 	bl	9f78 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    9fd4:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    9fd6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    9fda:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    9fdc:	daf0      	bge.n	9fc0 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    9fde:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    9fe0:	4638      	mov	r0, r7
    9fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    9fe4:	2700      	movs	r7, #0
    9fe6:	463e      	mov	r6, r7
    9fe8:	42ab      	cmp	r3, r5
    9fea:	d00b      	beq.n	a004 <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    9fec:	2b2d      	cmp	r3, #45	; 0x2d
    9fee:	d01c      	beq.n	a02a <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    9ff0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9ff4:	2a09      	cmp	r2, #9
    9ff6:	d805      	bhi.n	a004 <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    9ff8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    9ffc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    a000:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    a004:	6823      	ldr	r3, [r4, #0]
    a006:	4620      	mov	r0, r4
    a008:	695b      	ldr	r3, [r3, #20]
    a00a:	4798      	blx	r3
    c = timedPeek();
    a00c:	4620      	mov	r0, r4
    a00e:	f7ff ffb3 	bl	9f78 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    a012:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    a016:	2a09      	cmp	r2, #9
    c = timedPeek();
    a018:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    a01a:	d9e5      	bls.n	9fe8 <Stream::parseInt(char)+0x30>
    a01c:	42a8      	cmp	r0, r5
    a01e:	d0f1      	beq.n	a004 <Stream::parseInt(char)+0x4c>
  if(isNegative)
    a020:	2e00      	cmp	r6, #0
    a022:	d0dd      	beq.n	9fe0 <Stream::parseInt(char)+0x28>
    value = -value;
    a024:	427f      	negs	r7, r7
}
    a026:	4638      	mov	r0, r7
    a028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    a02a:	2601      	movs	r6, #1
    a02c:	e7ea      	b.n	a004 <Stream::parseInt(char)+0x4c>
    a02e:	bf00      	nop

0000a030 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a030:	2101      	movs	r1, #1
    a032:	f7ff bfc1 	b.w	9fb8 <Stream::parseInt(char)>
    a036:	bf00      	nop

0000a038 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a038:	4b2a      	ldr	r3, [pc, #168]	; (a0e4 <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    a03a:	4a2b      	ldr	r2, [pc, #172]	; (a0e8 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    a03c:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a03e:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    a040:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a042:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    a044:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a046:	4829      	ldr	r0, [pc, #164]	; (a0ec <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    a048:	2b08      	cmp	r3, #8
    a04a:	d034      	beq.n	a0b6 <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a04c:	2b0a      	cmp	r3, #10
    a04e:	d020      	beq.n	a092 <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    a050:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a052:	4b27      	ldr	r3, [pc, #156]	; (a0f0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a054:	bf0c      	ite	eq
    a056:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a058:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a05a:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a05c:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a05e:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a060:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a062:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a064:	4b23      	ldr	r3, [pc, #140]	; (a0f4 <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a066:	4921      	ldr	r1, [pc, #132]	; (a0ec <analog_init+0xb4>)
	if (analog_reference_internal) {
    a068:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a06a:	4a21      	ldr	r2, [pc, #132]	; (a0f0 <analog_init+0xb8>)
	if (analog_reference_internal) {
    a06c:	b1cb      	cbz	r3, a0a2 <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a06e:	2301      	movs	r3, #1
    a070:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a072:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a074:	4b20      	ldr	r3, [pc, #128]	; (a0f8 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a076:	491d      	ldr	r1, [pc, #116]	; (a0ec <analog_init+0xb4>)
	num = analog_num_average;
    a078:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a07a:	4a1d      	ldr	r2, [pc, #116]	; (a0f0 <analog_init+0xb8>)
	if (num <= 1) {
    a07c:	2b01      	cmp	r3, #1
    a07e:	d913      	bls.n	a0a8 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    a080:	2b04      	cmp	r3, #4
    a082:	d81b      	bhi.n	a0bc <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a084:	2384      	movs	r3, #132	; 0x84
    a086:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a088:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    a08a:	4b1c      	ldr	r3, [pc, #112]	; (a0fc <analog_init+0xc4>)
    a08c:	2201      	movs	r2, #1
    a08e:	701a      	strb	r2, [r3, #0]
}
    a090:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a092:	4b17      	ldr	r3, [pc, #92]	; (a0f0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a094:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a096:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a098:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a09a:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a09c:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a09e:	60da      	str	r2, [r3, #12]
    a0a0:	e7e0      	b.n	a064 <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a0a2:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a0a4:	6213      	str	r3, [r2, #32]
    a0a6:	e7e5      	b.n	a074 <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a0a8:	2380      	movs	r3, #128	; 0x80
    a0aa:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a0ac:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a0ae:	4b13      	ldr	r3, [pc, #76]	; (a0fc <analog_init+0xc4>)
    a0b0:	2201      	movs	r2, #1
    a0b2:	701a      	strb	r2, [r3, #0]
}
    a0b4:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a0b6:	4b0e      	ldr	r3, [pc, #56]	; (a0f0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a0b8:	2101      	movs	r1, #1
    a0ba:	e7ec      	b.n	a096 <analog_init+0x5e>
	} else if (num <= 8) {
    a0bc:	2b08      	cmp	r3, #8
    a0be:	d806      	bhi.n	a0ce <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a0c0:	2385      	movs	r3, #133	; 0x85
    a0c2:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a0c4:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a0c6:	4b0d      	ldr	r3, [pc, #52]	; (a0fc <analog_init+0xc4>)
    a0c8:	2201      	movs	r2, #1
    a0ca:	701a      	strb	r2, [r3, #0]
}
    a0cc:	4770      	bx	lr
	} else if (num <= 16) {
    a0ce:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    a0d0:	bf94      	ite	ls
    a0d2:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a0d4:	2387      	movhi	r3, #135	; 0x87
    a0d6:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a0d8:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a0da:	4b08      	ldr	r3, [pc, #32]	; (a0fc <analog_init+0xc4>)
    a0dc:	2201      	movs	r2, #1
    a0de:	701a      	strb	r2, [r3, #0]
}
    a0e0:	4770      	bx	lr
    a0e2:	bf00      	nop
    a0e4:	40074000 	.word	0x40074000
    a0e8:	1fff87ec 	.word	0x1fff87ec
    a0ec:	4003b000 	.word	0x4003b000
    a0f0:	400bb000 	.word	0x400bb000
    a0f4:	1fffc3b0 	.word	0x1fffc3b0
    a0f8:	1fff87ed 	.word	0x1fff87ed
    a0fc:	1fffc3b1 	.word	0x1fffc3b1

0000a100 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    a100:	4a0b      	ldr	r2, [pc, #44]	; (a130 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    a102:	490c      	ldr	r1, [pc, #48]	; (a134 <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    a104:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    a106:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    a10a:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    a10c:	780b      	ldrb	r3, [r1, #0]
    a10e:	b14b      	cbz	r3, a124 <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    a110:	4b09      	ldr	r3, [pc, #36]	; (a138 <analogWriteDAC0+0x38>)
    a112:	2280      	movs	r2, #128	; 0x80
    a114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    a118:	4b07      	ldr	r3, [pc, #28]	; (a138 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    a11a:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    a11e:	b200      	sxth	r0, r0
    a120:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    a122:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    a124:	4b04      	ldr	r3, [pc, #16]	; (a138 <analogWriteDAC0+0x38>)
    a126:	22c0      	movs	r2, #192	; 0xc0
    a128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    a12c:	e7f4      	b.n	a118 <analogWriteDAC0+0x18>
    a12e:	bf00      	nop
    a130:	40048000 	.word	0x40048000
    a134:	1fffc3b0 	.word	0x1fffc3b0
    a138:	400cc000 	.word	0x400cc000

0000a13c <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    a13c:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    a13e:	4b17      	ldr	r3, [pc, #92]	; (a19c <eeprom_initialize+0x60>)
    a140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    a142:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    a144:	46ec      	mov	ip, sp
    a146:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    a14a:	4b15      	ldr	r3, [pc, #84]	; (a1a0 <eeprom_initialize+0x64>)
    a14c:	785a      	ldrb	r2, [r3, #1]
    a14e:	0791      	lsls	r1, r2, #30
    a150:	d517      	bpl.n	a182 <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    a152:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    a154:	4c12      	ldr	r4, [pc, #72]	; (a1a0 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    a156:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    a15a:	bf18      	it	ne
    a15c:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    a15e:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    a160:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    a162:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    a164:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    a166:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    a168:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    a16a:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    a16c:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    a16e:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    a170:	f04c 0301 	orr.w	r3, ip, #1
    a174:	4620      	mov	r0, r4
    a176:	4798      	blx	r3
		__enable_irq();
    a178:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    a17a:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    a17c:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    a180:	d109      	bne.n	a196 <eeprom_initialize+0x5a>
{
    a182:	4b08      	ldr	r3, [pc, #32]	; (a1a4 <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a184:	4906      	ldr	r1, [pc, #24]	; (a1a0 <eeprom_initialize+0x64>)
    a186:	e001      	b.n	a18c <eeprom_initialize+0x50>
		if (++count > 200000) break;
    a188:	3b01      	subs	r3, #1
    a18a:	d002      	beq.n	a192 <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a18c:	784a      	ldrb	r2, [r1, #1]
    a18e:	07d2      	lsls	r2, r2, #31
    a190:	d5fa      	bpl.n	a188 <eeprom_initialize+0x4c>
	}
}
    a192:	b004      	add	sp, #16
    a194:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    a196:	7023      	strb	r3, [r4, #0]
}
    a198:	b004      	add	sp, #16
    a19a:	bd10      	pop	{r4, pc}
    a19c:	00015b30 	.word	0x00015b30
    a1a0:	40020000 	.word	0x40020000
    a1a4:	00030d41 	.word	0x00030d41

0000a1a8 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    a1a8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    a1ac:	d211      	bcs.n	a1d2 <eeprom_read_byte+0x2a>
{
    a1ae:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a1b0:	4b09      	ldr	r3, [pc, #36]	; (a1d8 <eeprom_read_byte+0x30>)
    a1b2:	785b      	ldrb	r3, [r3, #1]
    a1b4:	07db      	lsls	r3, r3, #31
    a1b6:	4604      	mov	r4, r0
    a1b8:	d504      	bpl.n	a1c4 <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    a1ba:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    a1be:	7820      	ldrb	r0, [r4, #0]
    a1c0:	b2c0      	uxtb	r0, r0
}
    a1c2:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    a1c4:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a1c8:	f7ff ffb8 	bl	a13c <eeprom_initialize>
	return FlexRAM[offset];
    a1cc:	7820      	ldrb	r0, [r4, #0]
    a1ce:	b2c0      	uxtb	r0, r0
}
    a1d0:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    a1d2:	2000      	movs	r0, #0
}
    a1d4:	4770      	bx	lr
    a1d6:	bf00      	nop
    a1d8:	40020000 	.word	0x40020000

0000a1dc <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    a1dc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    a1e0:	d21f      	bcs.n	a222 <eeprom_write_byte+0x46>
{
    a1e2:	b538      	push	{r3, r4, r5, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a1e4:	4b0f      	ldr	r3, [pc, #60]	; (a224 <eeprom_write_byte+0x48>)
    a1e6:	785b      	ldrb	r3, [r3, #1]
    a1e8:	07da      	lsls	r2, r3, #31
    a1ea:	4604      	mov	r4, r0
    a1ec:	460d      	mov	r5, r1
    a1ee:	d510      	bpl.n	a212 <eeprom_write_byte+0x36>
	if (FlexRAM[offset] != value) {
    a1f0:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    a1f4:	7823      	ldrb	r3, [r4, #0]
    a1f6:	42ab      	cmp	r3, r5
    a1f8:	d00a      	beq.n	a210 <eeprom_write_byte+0x34>
		kinetis_hsrun_disable();
		uint8_t stat = FTFL_FSTAT & 0x70;
    a1fa:	4a0a      	ldr	r2, [pc, #40]	; (a224 <eeprom_write_byte+0x48>)
    a1fc:	7813      	ldrb	r3, [r2, #0]
		if (stat) FTFL_FSTAT = stat;
    a1fe:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    a202:	bf18      	it	ne
    a204:	7013      	strbne	r3, [r2, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a206:	4a07      	ldr	r2, [pc, #28]	; (a224 <eeprom_write_byte+0x48>)
		FlexRAM[offset] = value;
    a208:	7025      	strb	r5, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a20a:	7853      	ldrb	r3, [r2, #1]
    a20c:	07db      	lsls	r3, r3, #31
    a20e:	d5fc      	bpl.n	a20a <eeprom_write_byte+0x2e>
		flexram_wait();
		kinetis_hsrun_enable();
	}
}
    a210:	bd38      	pop	{r3, r4, r5, pc}
	if (FlexRAM[offset] != value) {
    a212:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a216:	f7ff ff91 	bl	a13c <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    a21a:	7823      	ldrb	r3, [r4, #0]
    a21c:	42ab      	cmp	r3, r5
    a21e:	d1ec      	bne.n	a1fa <eeprom_write_byte+0x1e>
    a220:	e7f6      	b.n	a210 <eeprom_write_byte+0x34>
    a222:	4770      	bx	lr
    a224:	40020000 	.word	0x40020000

0000a228 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    a228:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    a22c:	d276      	bcs.n	a31c <eeprom_write_block+0xf4>
{
    a22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a230:	4b3b      	ldr	r3, [pc, #236]	; (a320 <eeprom_write_block+0xf8>)
    a232:	785b      	ldrb	r3, [r3, #1]
    a234:	07db      	lsls	r3, r3, #31
    a236:	460e      	mov	r6, r1
    a238:	4604      	mov	r4, r0
    a23a:	4617      	mov	r7, r2
    a23c:	460d      	mov	r5, r1
    a23e:	d51f      	bpl.n	a280 <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    a240:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    a244:	4638      	mov	r0, r7
    a246:	bf28      	it	cs
    a248:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    a24c:	1833      	adds	r3, r6, r0
    a24e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    a252:	d212      	bcs.n	a27a <eeprom_write_block+0x52>
	while (len > 0) {
    a254:	b187      	cbz	r7, a278 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    a256:	4a32      	ldr	r2, [pc, #200]	; (a320 <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    a258:	f015 0303 	ands.w	r3, r5, #3
    a25c:	d026      	beq.n	a2ac <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    a25e:	2b02      	cmp	r3, #2
    a260:	d011      	beq.n	a286 <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    a262:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    a266:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    a26a:	781e      	ldrb	r6, [r3, #0]
    a26c:	428e      	cmp	r6, r1
    a26e:	d137      	bne.n	a2e0 <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    a270:	3801      	subs	r0, #1
			offset++;
    a272:	3501      	adds	r5, #1
	while (len > 0) {
    a274:	2800      	cmp	r0, #0
    a276:	d1ef      	bne.n	a258 <eeprom_write_block+0x30>
		}
	}
}
    a278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    a27a:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    a27e:	e7ea      	b.n	a256 <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    a280:	f7ff ff5c 	bl	a13c <eeprom_initialize>
    a284:	e7dc      	b.n	a240 <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    a286:	2801      	cmp	r0, #1
    a288:	d0eb      	beq.n	a262 <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    a28a:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    a28c:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    a290:	7867      	ldrb	r7, [r4, #1]
    a292:	f811 3b02 	ldrb.w	r3, [r1], #2
    a296:	8834      	ldrh	r4, [r6, #0]
    a298:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    a29c:	429c      	cmp	r4, r3
    a29e:	d129      	bne.n	a2f4 <eeprom_write_block+0xcc>
			len -= 2;
    a2a0:	3802      	subs	r0, #2
			offset += 2;
    a2a2:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    a2a4:	460c      	mov	r4, r1
	while (len > 0) {
    a2a6:	2800      	cmp	r0, #0
    a2a8:	d1d6      	bne.n	a258 <eeprom_write_block+0x30>
    a2aa:	e7e5      	b.n	a278 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    a2ac:	2803      	cmp	r0, #3
    a2ae:	d9ea      	bls.n	a286 <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    a2b0:	4621      	mov	r1, r4
    a2b2:	f894 c001 	ldrb.w	ip, [r4, #1]
    a2b6:	f811 3b04 	ldrb.w	r3, [r1], #4
    a2ba:	78a7      	ldrb	r7, [r4, #2]
    a2bc:	78e6      	ldrb	r6, [r4, #3]
    a2be:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    a2c2:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    a2c6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    a2ca:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    a2ce:	6826      	ldr	r6, [r4, #0]
    a2d0:	429e      	cmp	r6, r3
    a2d2:	d119      	bne.n	a308 <eeprom_write_block+0xe0>
			len -= 4;
    a2d4:	3804      	subs	r0, #4
			offset += 4;
    a2d6:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    a2d8:	460c      	mov	r4, r1
	while (len > 0) {
    a2da:	2800      	cmp	r0, #0
    a2dc:	d1bc      	bne.n	a258 <eeprom_write_block+0x30>
    a2de:	e7cb      	b.n	a278 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    a2e0:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    a2e2:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    a2e6:	bf18      	it	ne
    a2e8:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    a2ea:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a2ec:	7853      	ldrb	r3, [r2, #1]
    a2ee:	07db      	lsls	r3, r3, #31
    a2f0:	d5fc      	bpl.n	a2ec <eeprom_write_block+0xc4>
    a2f2:	e7bd      	b.n	a270 <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    a2f4:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    a2f6:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    a2fa:	bf18      	it	ne
    a2fc:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    a2fe:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a300:	7853      	ldrb	r3, [r2, #1]
    a302:	07dc      	lsls	r4, r3, #31
    a304:	d5fc      	bpl.n	a300 <eeprom_write_block+0xd8>
    a306:	e7cb      	b.n	a2a0 <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    a308:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    a30a:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    a30e:	bf18      	it	ne
    a310:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    a312:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    a314:	7853      	ldrb	r3, [r2, #1]
    a316:	07de      	lsls	r6, r3, #31
    a318:	d5fc      	bpl.n	a314 <eeprom_write_block+0xec>
    a31a:	e7db      	b.n	a2d4 <eeprom_write_block+0xac>
    a31c:	4770      	bx	lr
    a31e:	bf00      	nop
    a320:	40020000 	.word	0x40020000

0000a324 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a324:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a326:	f7fd fe2b 	bl	7f80 <setup>
	while (1) {
		loop();
    a32a:	f7fc ff33 	bl	7194 <loop>
		yield();
    a32e:	f002 faf5 	bl	c91c <yield>
	while (1) {
    a332:	e7fa      	b.n	a32a <main+0x6>

0000a334 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    a334:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    a336:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a33a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a33e:	d16f      	bne.n	a420 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a340:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a342:	d341      	bcc.n	a3c8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a344:	f851 3b04 	ldr.w	r3, [r1], #4
    a348:	f840 3b04 	str.w	r3, [r0], #4
    a34c:	f851 3b04 	ldr.w	r3, [r1], #4
    a350:	f840 3b04 	str.w	r3, [r0], #4
    a354:	f851 3b04 	ldr.w	r3, [r1], #4
    a358:	f840 3b04 	str.w	r3, [r0], #4
    a35c:	f851 3b04 	ldr.w	r3, [r1], #4
    a360:	f840 3b04 	str.w	r3, [r0], #4
    a364:	f851 3b04 	ldr.w	r3, [r1], #4
    a368:	f840 3b04 	str.w	r3, [r0], #4
    a36c:	f851 3b04 	ldr.w	r3, [r1], #4
    a370:	f840 3b04 	str.w	r3, [r0], #4
    a374:	f851 3b04 	ldr.w	r3, [r1], #4
    a378:	f840 3b04 	str.w	r3, [r0], #4
    a37c:	f851 3b04 	ldr.w	r3, [r1], #4
    a380:	f840 3b04 	str.w	r3, [r0], #4
    a384:	f851 3b04 	ldr.w	r3, [r1], #4
    a388:	f840 3b04 	str.w	r3, [r0], #4
    a38c:	f851 3b04 	ldr.w	r3, [r1], #4
    a390:	f840 3b04 	str.w	r3, [r0], #4
    a394:	f851 3b04 	ldr.w	r3, [r1], #4
    a398:	f840 3b04 	str.w	r3, [r0], #4
    a39c:	f851 3b04 	ldr.w	r3, [r1], #4
    a3a0:	f840 3b04 	str.w	r3, [r0], #4
    a3a4:	f851 3b04 	ldr.w	r3, [r1], #4
    a3a8:	f840 3b04 	str.w	r3, [r0], #4
    a3ac:	f851 3b04 	ldr.w	r3, [r1], #4
    a3b0:	f840 3b04 	str.w	r3, [r0], #4
    a3b4:	f851 3b04 	ldr.w	r3, [r1], #4
    a3b8:	f840 3b04 	str.w	r3, [r0], #4
    a3bc:	f851 3b04 	ldr.w	r3, [r1], #4
    a3c0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a3c4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a3c6:	d2bd      	bcs.n	a344 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a3c8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a3ca:	d311      	bcc.n	a3f0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a3cc:	f851 3b04 	ldr.w	r3, [r1], #4
    a3d0:	f840 3b04 	str.w	r3, [r0], #4
    a3d4:	f851 3b04 	ldr.w	r3, [r1], #4
    a3d8:	f840 3b04 	str.w	r3, [r0], #4
    a3dc:	f851 3b04 	ldr.w	r3, [r1], #4
    a3e0:	f840 3b04 	str.w	r3, [r0], #4
    a3e4:	f851 3b04 	ldr.w	r3, [r1], #4
    a3e8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a3ec:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    a3ee:	d2ed      	bcs.n	a3cc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a3f0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    a3f2:	d305      	bcc.n	a400 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a3f4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a3f8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    a3fc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a3fe:	d2f9      	bcs.n	a3f4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a400:	3204      	adds	r2, #4
	beq	.Ldone
    a402:	d00a      	beq.n	a41a <memcpy+0xe6>

	lsls	r2, r2, #31
    a404:	07d2      	lsls	r2, r2, #31
	itt ne
    a406:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a408:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a40c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a410:	d303      	bcc.n	a41a <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    a412:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a414:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a416:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a418:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    a41a:	bc01      	pop	{r0}
#endif
	bx	lr
    a41c:	4770      	bx	lr
    a41e:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    a420:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    a422:	d34a      	bcc.n	a4ba <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a424:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a428:	d011      	beq.n	a44e <memcpy+0x11a>

	rsb	r3, #4
    a42a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    a42e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    a430:	07db      	lsls	r3, r3, #31
	itt ne
    a432:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a434:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a438:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a43c:	d307      	bcc.n	a44e <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    a43e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a442:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    a446:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a44a:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    a44e:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    a452:	f43f af75 	beq.w	a340 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    a456:	b430      	push	{r4, r5}
	subs	r2, #4
    a458:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    a45a:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    a45c:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    a460:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    a464:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    a466:	d019      	beq.n	a49c <memcpy+0x168>
	cmp	r3, #3
    a468:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    a46a:	d00b      	beq.n	a484 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    a46c:	0a24      	lsrs	r4, r4, #8
    a46e:	f851 3b04 	ldr.w	r3, [r1], #4
    a472:	061d      	lsls	r5, r3, #24
    a474:	ea44 0405 	orr.w	r4, r4, r5
    a478:	f840 4b04 	str.w	r4, [r0], #4
    a47c:	461c      	mov	r4, r3
    a47e:	3a04      	subs	r2, #4
    a480:	d2f4      	bcs.n	a46c <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    a482:	e016      	b.n	a4b2 <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    a484:	0e24      	lsrs	r4, r4, #24
    a486:	f851 3b04 	ldr.w	r3, [r1], #4
    a48a:	021d      	lsls	r5, r3, #8
    a48c:	ea44 0405 	orr.w	r4, r4, r5
    a490:	f840 4b04 	str.w	r4, [r0], #4
    a494:	461c      	mov	r4, r3
    a496:	3a04      	subs	r2, #4
    a498:	d2f4      	bcs.n	a484 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    a49a:	e00a      	b.n	a4b2 <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    a49c:	0c24      	lsrs	r4, r4, #16
    a49e:	f851 3b04 	ldr.w	r3, [r1], #4
    a4a2:	041d      	lsls	r5, r3, #16
    a4a4:	ea44 0405 	orr.w	r4, r4, r5
    a4a8:	f840 4b04 	str.w	r4, [r0], #4
    a4ac:	461c      	mov	r4, r3
    a4ae:	3a04      	subs	r2, #4
    a4b0:	d2f4      	bcs.n	a49c <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    a4b2:	3204      	adds	r2, #4
	subs	r1, ip
    a4b4:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    a4b8:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a4ba:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    a4bc:	d3a0      	bcc.n	a400 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a4be:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    a4c0:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a4c4:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a4c8:	d2f9      	bcs.n	a4be <memcpy+0x18a>

	ldrb	r3, [r1]
    a4ca:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a4cc:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a4ce:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a4d0:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a4d2:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a4d4:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    a4d6:	bc01      	pop	{r0}
#endif
	bx	lr
    a4d8:	4770      	bx	lr
    a4da:	bf00      	nop

0000a4dc <fault_isr>:
{
    a4dc:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    a4de:	4c0f      	ldr	r4, [pc, #60]	; (a51c <fault_isr+0x40>)
    a4e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a4e2:	0358      	lsls	r0, r3, #13
    a4e4:	d40d      	bmi.n	a502 <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    a4e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a4e8:	0559      	lsls	r1, r3, #21
    a4ea:	d40f      	bmi.n	a50c <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    a4ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a4ee:	051a      	lsls	r2, r3, #20
    a4f0:	d411      	bmi.n	a516 <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    a4f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a4f4:	04db      	lsls	r3, r3, #19
    a4f6:	d5f3      	bpl.n	a4e0 <fault_isr+0x4>
    a4f8:	f001 fac2 	bl	ba80 <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    a4fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a4fe:	0358      	lsls	r0, r3, #13
    a500:	d5f1      	bpl.n	a4e6 <fault_isr+0xa>
    a502:	f001 fc3d 	bl	bd80 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    a506:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a508:	0559      	lsls	r1, r3, #21
    a50a:	d5ef      	bpl.n	a4ec <fault_isr+0x10>
    a50c:	f000 f808 	bl	a520 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    a510:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a512:	051a      	lsls	r2, r3, #20
    a514:	d5ed      	bpl.n	a4f2 <fault_isr+0x16>
    a516:	f000 ff1f 	bl	b358 <uart1_status_isr>
    a51a:	e7ea      	b.n	a4f2 <fault_isr+0x16>
    a51c:	40048000 	.word	0x40048000

0000a520 <unused_isr>:
{
    a520:	b508      	push	{r3, lr}
	fault_isr();
    a522:	f7ff ffdb 	bl	a4dc <fault_isr>
    a526:	bf00      	nop

0000a528 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    a528:	4b01      	ldr	r3, [pc, #4]	; (a530 <startup_early_hook+0x8>)
    a52a:	2210      	movs	r2, #16
    a52c:	801a      	strh	r2, [r3, #0]
}
    a52e:	4770      	bx	lr
    a530:	40052000 	.word	0x40052000

0000a534 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    a534:	4770      	bx	lr
    a536:	bf00      	nop

0000a538 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    a538:	4a09      	ldr	r2, [pc, #36]	; (a560 <_sbrk+0x28>)
{
    a53a:	b508      	push	{r3, lr}
    a53c:	4603      	mov	r3, r0
	prev = __brkval;
    a53e:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    a540:	b133      	cbz	r3, a550 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    a542:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    a544:	4403      	add	r3, r0
    a546:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    a54a:	428b      	cmp	r3, r1
    a54c:	d201      	bcs.n	a552 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    a54e:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    a550:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    a552:	f004 f93b 	bl	e7cc <__errno>
    a556:	230c      	movs	r3, #12
    a558:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    a55a:	f04f 30ff 	mov.w	r0, #4294967295
}
    a55e:	bd08      	pop	{r3, pc}
    a560:	1fff87f0 	.word	0x1fff87f0

0000a564 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    a564:	2000      	movs	r0, #0
    a566:	4770      	bx	lr

0000a568 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    a568:	f04f 30ff 	mov.w	r0, #4294967295
    a56c:	4770      	bx	lr
    a56e:	bf00      	nop

0000a570 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    a570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a574:	604b      	str	r3, [r1, #4]
	return 0;
}
    a576:	2000      	movs	r0, #0
    a578:	4770      	bx	lr
    a57a:	bf00      	nop

0000a57c <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    a57c:	2001      	movs	r0, #1
    a57e:	4770      	bx	lr

0000a580 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    a580:	f04f 30ff 	mov.w	r0, #4294967295
    a584:	4770      	bx	lr
    a586:	bf00      	nop

0000a588 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    a588:	e7fe      	b.n	a588 <abort>
    a58a:	Address 0x0000a58a is out of bounds.


0000a58c <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    a58c:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    a590:	b9cb      	cbnz	r3, a5c6 <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a592:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    a596:	b9a0      	cbnz	r0, a5c2 <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a598:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    a59c:	b943      	cbnz	r3, a5b0 <nvic_execution_priority+0x24>
	uint32_t priority=256;
    a59e:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    a5a2:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    a5a6:	b15b      	cbz	r3, a5c0 <nvic_execution_priority+0x34>
    a5a8:	4298      	cmp	r0, r3
    a5aa:	bf28      	it	cs
    a5ac:	4618      	movcs	r0, r3
	return priority;
    a5ae:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    a5b0:	2b0f      	cmp	r3, #15
    a5b2:	d9f6      	bls.n	a5a2 <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    a5b4:	4a05      	ldr	r2, [pc, #20]	; (a5cc <nvic_execution_priority+0x40>)
    a5b6:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    a5b8:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    a5bc:	2b00      	cmp	r3, #0
    a5be:	d1f3      	bne.n	a5a8 <nvic_execution_priority+0x1c>
}
    a5c0:	4770      	bx	lr
	if (primask) return 0;
    a5c2:	4618      	mov	r0, r3
}
    a5c4:	4770      	bx	lr
	if (faultmask) return -1;
    a5c6:	f04f 30ff 	mov.w	r0, #4294967295
    a5ca:	4770      	bx	lr
    a5cc:	e000e3f0 	.word	0xe000e3f0

0000a5d0 <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    a5d0:	f003 b990 	b.w	d8f4 <malloc>

0000a5d4 <operator new[](unsigned int)>:
    a5d4:	f003 b98e 	b.w	d8f4 <malloc>

0000a5d8 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    a5d8:	f101 3cff 	add.w	ip, r1, #4294967295
{
    a5dc:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    a5de:	4665      	mov	r5, ip
	int i=0, j;
    a5e0:	2400      	movs	r4, #0
    a5e2:	e001      	b.n	a5e8 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    a5e4:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    a5e6:	3401      	adds	r4, #1
		digit = val % radix;
    a5e8:	fbb0 fef2 	udiv	lr, r0, r2
    a5ec:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a5f0:	2b09      	cmp	r3, #9
    a5f2:	f103 0630 	add.w	r6, r3, #48	; 0x30
    a5f6:	bf8a      	itet	hi
    a5f8:	3337      	addhi	r3, #55	; 0x37
    a5fa:	b2f3      	uxtbls	r3, r6
    a5fc:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    a5fe:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a600:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    a604:	d2ee      	bcs.n	a5e4 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    a606:	1c63      	adds	r3, r4, #1
    a608:	2200      	movs	r2, #0
    a60a:	54ca      	strb	r2, [r1, r3]
    a60c:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    a60e:	b17c      	cbz	r4, a630 <ultoa+0x58>
		t = buf[j];
    a610:	4662      	mov	r2, ip
    a612:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    a616:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    a61a:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    a61e:	eba1 030c 	sub.w	r3, r1, ip
    a622:	3202      	adds	r2, #2
    a624:	3b01      	subs	r3, #1
    a626:	1a52      	subs	r2, r2, r1
    a628:	4423      	add	r3, r4
    a62a:	429a      	cmp	r2, r3
		buf[i] = t;
    a62c:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    a62e:	dbef      	blt.n	a610 <ultoa+0x38>
	}
	return buf;
}
    a630:	4608      	mov	r0, r1
    a632:	bd70      	pop	{r4, r5, r6, pc}

0000a634 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    a634:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    a636:	4b0f      	ldr	r3, [pc, #60]	; (a674 <digitalWrite.part.0+0x40>)
    a638:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a63c:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    a640:	b12c      	cbz	r4, a64e <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    a642:	2301      	movs	r3, #1
		if (val) {
    a644:	b191      	cbz	r1, a66c <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    a646:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    a64a:	bc10      	pop	{r4}
    a64c:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    a64e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    a652:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a654:	681a      	ldr	r2, [r3, #0]
		if (val) {
    a656:	b921      	cbnz	r1, a662 <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    a658:	f022 0202 	bic.w	r2, r2, #2
}
    a65c:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    a65e:	601a      	str	r2, [r3, #0]
}
    a660:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a662:	f042 0203 	orr.w	r2, r2, #3
}
    a666:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a668:	601a      	str	r2, [r3, #0]
}
    a66a:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    a66c:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    a670:	bc10      	pop	{r4}
    a672:	4770      	bx	lr
    a674:	00015b40 	.word	0x00015b40

0000a678 <rtc_set>:
	RTC_SR = 0;
    a678:	4b03      	ldr	r3, [pc, #12]	; (a688 <rtc_set+0x10>)
    a67a:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    a67c:	2110      	movs	r1, #16
	RTC_SR = 0;
    a67e:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    a680:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    a682:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    a684:	6159      	str	r1, [r3, #20]
}
    a686:	4770      	bx	lr
    a688:	4003d000 	.word	0x4003d000

0000a68c <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    a68c:	4770      	bx	lr
    a68e:	bf00      	nop

0000a690 <_init_Teensyduino_internal_>:
{
    a690:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a692:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    a696:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a69a:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a69e:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a6a2:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    a6a6:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    a6aa:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    a6ae:	4a1d      	ldr	r2, [pc, #116]	; (a724 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    a6b0:	481d      	ldr	r0, [pc, #116]	; (a728 <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    a6b2:	491e      	ldr	r1, [pc, #120]	; (a72c <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    a6b4:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    a6b8:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a6bc:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    a6be:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    a6c0:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a6c4:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    a6c6:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    a6ca:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    a6ce:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    a6d0:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    a6d2:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a6d4:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    a6d6:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    a6d8:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    a6da:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    a6dc:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    a6de:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    a6e0:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    a6e2:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a6e4:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    a6e6:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    a6e8:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    a6ea:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    a6ec:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a6ee:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    a6f0:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    a6f2:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    a6f4:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    a6f6:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a6f8:	600d      	str	r5, [r1, #0]
	analog_init();
    a6fa:	f7ff fc9d 	bl	a038 <analog_init>
	startup_middle_hook();
    a6fe:	f7ff ffc5 	bl	a68c <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    a702:	4c0b      	ldr	r4, [pc, #44]	; (a730 <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a704:	6823      	ldr	r3, [r4, #0]
    a706:	9300      	str	r3, [sp, #0]
	return ret;
    a708:	9b00      	ldr	r3, [sp, #0]
    a70a:	2b13      	cmp	r3, #19
    a70c:	d9fa      	bls.n	a704 <_init_Teensyduino_internal_+0x74>
	usb_init();
    a70e:	f001 fef1 	bl	c4f4 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a712:	6823      	ldr	r3, [r4, #0]
    a714:	9301      	str	r3, [sp, #4]
	return ret;
    a716:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    a718:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a71c:	d3f9      	bcc.n	a712 <_init_Teensyduino_internal_+0x82>
}
    a71e:	b003      	add	sp, #12
    a720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a722:	bf00      	nop
    a724:	40038000 	.word	0x40038000
    a728:	40039000 	.word	0x40039000
    a72c:	400b8000 	.word	0x400b8000
    a730:	1fffc3b4 	.word	0x1fffc3b4

0000a734 <analogWrite>:
	if (pin == A14) {
    a734:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    a736:	4b7f      	ldr	r3, [pc, #508]	; (a934 <analogWrite+0x200>)
	if (pin == A14) {
    a738:	d036      	beq.n	a7a8 <analogWrite+0x74>
	if (val <= 0) {
    a73a:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    a73c:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    a73e:	dd3f      	ble.n	a7c0 <analogWrite+0x8c>
	max = 1 << analog_write_res;
    a740:	2201      	movs	r2, #1
    a742:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    a746:	4561      	cmp	r1, ip
{
    a748:	b510      	push	{r4, lr}
	} else if (val >= max) {
    a74a:	d254      	bcs.n	a7f6 <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a74c:	1ec2      	subs	r2, r0, #3
    a74e:	2a01      	cmp	r2, #1
    a750:	d970      	bls.n	a834 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    a752:	2820      	cmp	r0, #32
    a754:	d067      	beq.n	a826 <analogWrite+0xf2>
    a756:	2819      	cmp	r0, #25
    a758:	d065      	beq.n	a826 <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    a75a:	4a77      	ldr	r2, [pc, #476]	; (a938 <analogWrite+0x204>)
    a75c:	6892      	ldr	r2, [r2, #8]
    a75e:	fb02 1201 	mla	r2, r2, r1, r1
    a762:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    a766:	1f42      	subs	r2, r0, #5
    a768:	2a1b      	cmp	r2, #27
    a76a:	d87d      	bhi.n	a868 <analogWrite+0x134>
    a76c:	e8df f012 	tbh	[pc, r2, lsl #1]
    a770:	00bf00c6 	.word	0x00bf00c6
    a774:	007c007c 	.word	0x007c007c
    a778:	00b100b8 	.word	0x00b100b8
    a77c:	007c007c 	.word	0x007c007c
    a780:	007c007c 	.word	0x007c007c
    a784:	007c007c 	.word	0x007c007c
    a788:	007c007c 	.word	0x007c007c
    a78c:	00aa007c 	.word	0x00aa007c
    a790:	009c00a3 	.word	0x009c00a3
    a794:	007c0095 	.word	0x007c0095
    a798:	007c00cd 	.word	0x007c00cd
    a79c:	007c007c 	.word	0x007c007c
    a7a0:	007c007c 	.word	0x007c007c
    a7a4:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    a7a8:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    a7aa:	280b      	cmp	r0, #11
			val <<= 12 - res;
    a7ac:	bf95      	itete	ls
    a7ae:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    a7b2:	380c      	subhi	r0, #12
			val <<= 12 - res;
    a7b4:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    a7b8:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    a7bc:	f7ff bca0 	b.w	a100 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    a7c0:	2821      	cmp	r0, #33	; 0x21
    a7c2:	d817      	bhi.n	a7f4 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    a7c4:	4b5d      	ldr	r3, [pc, #372]	; (a93c <analogWrite+0x208>)
    a7c6:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a7ca:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    a7ce:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    a7d2:	2900      	cmp	r1, #0
    a7d4:	d03c      	beq.n	a850 <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    a7d6:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    a7d8:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    a7da:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    a7de:	2001      	movs	r0, #1
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a7e0:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    a7e4:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a7e8:	6019      	str	r1, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    a7ea:	681a      	ldr	r2, [r3, #0]
    a7ec:	f022 0220 	bic.w	r2, r2, #32
    a7f0:	601a      	str	r2, [r3, #0]
    a7f2:	4770      	bx	lr
    a7f4:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    a7f6:	2821      	cmp	r0, #33	; 0x21
    a7f8:	d814      	bhi.n	a824 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    a7fa:	4b50      	ldr	r3, [pc, #320]	; (a93c <analogWrite+0x208>)
    a7fc:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    a800:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    a804:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    a808:	b344      	cbz	r4, a85c <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    a80a:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    a80c:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a810:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a814:	2001      	movs	r0, #1
    a816:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a81a:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a81c:	681a      	ldr	r2, [r3, #0]
    a81e:	f022 0220 	bic.w	r2, r2, #32
    a822:	601a      	str	r2, [r3, #0]
}
    a824:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    a826:	4a46      	ldr	r2, [pc, #280]	; (a940 <analogWrite+0x20c>)
    a828:	6892      	ldr	r2, [r2, #8]
    a82a:	fb02 1201 	mla	r2, r2, r1, r1
    a82e:	fa22 f303 	lsr.w	r3, r2, r3
    a832:	e798      	b.n	a766 <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    a834:	4c43      	ldr	r4, [pc, #268]	; (a944 <analogWrite+0x210>)
    a836:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    a838:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    a83a:	fb02 1201 	mla	r2, r2, r1, r1
    a83e:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    a842:	d170      	bne.n	a926 <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a844:	4b40      	ldr	r3, [pc, #256]	; (a948 <analogWrite+0x214>)
		FTM1_C1V = cval;
    a846:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a848:	f44f 7151 	mov.w	r1, #836	; 0x344
    a84c:	6359      	str	r1, [r3, #52]	; 0x34
}
    a84e:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    a850:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    a852:	6819      	ldr	r1, [r3, #0]
    a854:	f021 0102 	bic.w	r1, r1, #2
    a858:	6019      	str	r1, [r3, #0]
    a85a:	e7c0      	b.n	a7de <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    a85c:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a85e:	681a      	ldr	r2, [r3, #0]
    a860:	f042 0203 	orr.w	r2, r2, #3
    a864:	601a      	str	r2, [r3, #0]
    a866:	e7d3      	b.n	a810 <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    a868:	2821      	cmp	r0, #33	; 0x21
    a86a:	d8db      	bhi.n	a824 <analogWrite+0xf0>
    a86c:	297f      	cmp	r1, #127	; 0x7f
    a86e:	bfd4      	ite	le
    a870:	2100      	movle	r1, #0
    a872:	2101      	movgt	r1, #1
    a874:	f7ff fede 	bl	a634 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    a878:	4b30      	ldr	r3, [pc, #192]	; (a93c <analogWrite+0x208>)
    a87a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    a87e:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    a882:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    a884:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a886:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a88a:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a88e:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a890:	681a      	ldr	r2, [r3, #0]
    a892:	f022 0220 	bic.w	r2, r2, #32
    a896:	601a      	str	r2, [r3, #0]
}
    a898:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    a89a:	4827      	ldr	r0, [pc, #156]	; (a938 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a89c:	4a2b      	ldr	r2, [pc, #172]	; (a94c <analogWrite+0x218>)
		FTM0_C1V = cval;
    a89e:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8a0:	f240 4144 	movw	r1, #1092	; 0x444
    a8a4:	6091      	str	r1, [r2, #8]
}
    a8a6:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    a8a8:	4823      	ldr	r0, [pc, #140]	; (a938 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8aa:	4a28      	ldr	r2, [pc, #160]	; (a94c <analogWrite+0x218>)
		FTM0_C0V = cval;
    a8ac:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8ae:	f240 4144 	movw	r1, #1092	; 0x444
    a8b2:	6051      	str	r1, [r2, #4]
}
    a8b4:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    a8b6:	4820      	ldr	r0, [pc, #128]	; (a938 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8b8:	4a25      	ldr	r2, [pc, #148]	; (a950 <analogWrite+0x21c>)
		FTM0_C6V = cval;
    a8ba:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8bc:	f240 4144 	movw	r1, #1092	; 0x444
    a8c0:	6191      	str	r1, [r2, #24]
}
    a8c2:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    a8c4:	481c      	ldr	r0, [pc, #112]	; (a938 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8c6:	4a22      	ldr	r2, [pc, #136]	; (a950 <analogWrite+0x21c>)
		FTM0_C5V = cval;
    a8c8:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8ca:	f240 4144 	movw	r1, #1092	; 0x444
    a8ce:	6151      	str	r1, [r2, #20]
}
    a8d0:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    a8d2:	4819      	ldr	r0, [pc, #100]	; (a938 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8d4:	4a1d      	ldr	r2, [pc, #116]	; (a94c <analogWrite+0x218>)
		FTM0_C3V = cval;
    a8d6:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8d8:	f240 4144 	movw	r1, #1092	; 0x444
    a8dc:	6111      	str	r1, [r2, #16]
}
    a8de:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    a8e0:	4815      	ldr	r0, [pc, #84]	; (a938 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8e2:	4a1a      	ldr	r2, [pc, #104]	; (a94c <analogWrite+0x218>)
		FTM0_C2V = cval;
    a8e4:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8e6:	f240 4144 	movw	r1, #1092	; 0x444
    a8ea:	60d1      	str	r1, [r2, #12]
}
    a8ec:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    a8ee:	4812      	ldr	r0, [pc, #72]	; (a938 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8f0:	4a17      	ldr	r2, [pc, #92]	; (a950 <analogWrite+0x21c>)
		FTM0_C4V = cval;
    a8f2:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8f4:	f240 4144 	movw	r1, #1092	; 0x444
    a8f8:	6111      	str	r1, [r2, #16]
}
    a8fa:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    a8fc:	480e      	ldr	r0, [pc, #56]	; (a938 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a8fe:	4a14      	ldr	r2, [pc, #80]	; (a950 <analogWrite+0x21c>)
		FTM0_C7V = cval;
    a900:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a902:	f240 4144 	movw	r1, #1092	; 0x444
    a906:	61d1      	str	r1, [r2, #28]
}
    a908:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    a90a:	480d      	ldr	r0, [pc, #52]	; (a940 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a90c:	4a11      	ldr	r2, [pc, #68]	; (a954 <analogWrite+0x220>)
		FTM2_C1V = cval;
    a90e:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a910:	f44f 7151 	mov.w	r1, #836	; 0x344
    a914:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    a916:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    a918:	4809      	ldr	r0, [pc, #36]	; (a940 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a91a:	4a0e      	ldr	r2, [pc, #56]	; (a954 <analogWrite+0x220>)
		FTM2_C0V = cval;
    a91c:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a91e:	f44f 7151 	mov.w	r1, #836	; 0x344
    a922:	6491      	str	r1, [r2, #72]	; 0x48
}
    a924:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a926:	4b08      	ldr	r3, [pc, #32]	; (a948 <analogWrite+0x214>)
		FTM1_C0V = cval;
    a928:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a92a:	f44f 7151 	mov.w	r1, #836	; 0x344
    a92e:	6319      	str	r1, [r3, #48]	; 0x30
}
    a930:	bd10      	pop	{r4, pc}
    a932:	bf00      	nop
    a934:	1fff87f4 	.word	0x1fff87f4
    a938:	40038000 	.word	0x40038000
    a93c:	00015b40 	.word	0x00015b40
    a940:	400b8000 	.word	0x400b8000
    a944:	40039000 	.word	0x40039000
    a948:	40049000 	.word	0x40049000
    a94c:	4004b000 	.word	0x4004b000
    a950:	4004c000 	.word	0x4004c000
    a954:	4004a000 	.word	0x4004a000

0000a958 <analogWriteFrequency>:
{
    a958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a95c:	460e      	mov	r6, r1
    a95e:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    a960:	492c      	ldr	r1, [pc, #176]	; (aa14 <analogWriteFrequency+0xbc>)
    a962:	4630      	mov	r0, r6
    a964:	f002 ff58 	bl	d818 <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    a968:	4b2b      	ldr	r3, [pc, #172]	; (aa18 <analogWriteFrequency+0xc0>)
    a96a:	2800      	cmp	r0, #0
    a96c:	f647 2712 	movw	r7, #31250	; 0x7a12
    a970:	bf12      	itee	ne
    a972:	f04f 0a02 	movne.w	sl, #2
    a976:	f04f 0a01 	moveq.w	sl, #1
    a97a:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    a97c:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    a97e:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    a982:	fa27 f004 	lsr.w	r0, r7, r4
    a986:	f002 fd51 	bl	d42c <__aeabi_ui2f>
    a98a:	4649      	mov	r1, r9
    a98c:	4605      	mov	r5, r0
    a98e:	f002 fda5 	bl	d4dc <__aeabi_fmul>
    a992:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    a994:	4630      	mov	r0, r6
    a996:	f002 ff53 	bl	d840 <__aeabi_fcmpge>
    a99a:	b930      	cbnz	r0, a9aa <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    a99c:	3401      	adds	r4, #1
    a99e:	2c07      	cmp	r4, #7
    a9a0:	d1ef      	bne.n	a982 <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    a9a2:	09f8      	lsrs	r0, r7, #7
    a9a4:	f002 fd42 	bl	d42c <__aeabi_ui2f>
    a9a8:	4605      	mov	r5, r0
    a9aa:	4631      	mov	r1, r6
    a9ac:	4628      	mov	r0, r5
    a9ae:	f002 fe49 	bl	d644 <__aeabi_fdiv>
    a9b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    a9b6:	f002 fc87 	bl	d2c8 <__aeabi_fsub>
    a9ba:	f002 ff7b 	bl	d8b4 <__aeabi_f2uiz>
    a9be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a9c2:	4298      	cmp	r0, r3
    a9c4:	bf28      	it	cs
    a9c6:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a9c8:	f1a8 0303 	sub.w	r3, r8, #3
    a9cc:	2b01      	cmp	r3, #1
    a9ce:	d911      	bls.n	a9f4 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    a9d0:	f1a8 0805 	sub.w	r8, r8, #5
    a9d4:	fa5f f888 	uxtb.w	r8, r8
    a9d8:	f1b8 0f1b 	cmp.w	r8, #27
    a9dc:	d808      	bhi.n	a9f0 <analogWriteFrequency+0x98>
    a9de:	4a0f      	ldr	r2, [pc, #60]	; (aa1c <analogWriteFrequency+0xc4>)
    a9e0:	2301      	movs	r3, #1
    a9e2:	fa03 f308 	lsl.w	r3, r3, r8
    a9e6:	401a      	ands	r2, r3
    a9e8:	d110      	bne.n	aa0c <analogWriteFrequency+0xb4>
    a9ea:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    a9ee:	d10b      	bne.n	aa08 <analogWriteFrequency+0xb0>
}
    a9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    a9f4:	4b0a      	ldr	r3, [pc, #40]	; (aa20 <analogWriteFrequency+0xc8>)
    a9f6:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a9f8:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    a9fc:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    a9fe:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    aa00:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    aa02:	601c      	str	r4, [r3, #0]
}
    aa04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    aa08:	4b06      	ldr	r3, [pc, #24]	; (aa24 <analogWriteFrequency+0xcc>)
    aa0a:	e7f5      	b.n	a9f8 <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    aa0c:	4b06      	ldr	r3, [pc, #24]	; (aa28 <analogWriteFrequency+0xd0>)
    aa0e:	2200      	movs	r2, #0
    aa10:	e7f2      	b.n	a9f8 <analogWriteFrequency+0xa0>
    aa12:	bf00      	nop
    aa14:	40b71b00 	.word	0x40b71b00
    aa18:	02dc6c00 	.word	0x02dc6c00
    aa1c:	00078033 	.word	0x00078033
    aa20:	40039000 	.word	0x40039000
    aa24:	400b8000 	.word	0x400b8000
    aa28:	40038000 	.word	0x40038000

0000aa2c <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    aa2c:	2821      	cmp	r0, #33	; 0x21
    aa2e:	d816      	bhi.n	aa5e <digitalWrite+0x32>
{
    aa30:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    aa32:	4b10      	ldr	r3, [pc, #64]	; (aa74 <digitalWrite+0x48>)
    aa34:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    aa38:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    aa3c:	b12c      	cbz	r4, aa4a <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    aa3e:	2301      	movs	r3, #1
		if (val) {
    aa40:	b971      	cbnz	r1, aa60 <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    aa42:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    aa46:	bc10      	pop	{r4}
    aa48:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    aa4a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    aa4e:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    aa50:	681a      	ldr	r2, [r3, #0]
		if (val) {
    aa52:	b149      	cbz	r1, aa68 <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    aa54:	f042 0203 	orr.w	r2, r2, #3
}
    aa58:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    aa5a:	601a      	str	r2, [r3, #0]
}
    aa5c:	4770      	bx	lr
    aa5e:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    aa60:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    aa64:	bc10      	pop	{r4}
    aa66:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    aa68:	f022 0202 	bic.w	r2, r2, #2
}
    aa6c:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    aa6e:	601a      	str	r2, [r3, #0]
}
    aa70:	4770      	bx	lr
    aa72:	bf00      	nop
    aa74:	00015b40 	.word	0x00015b40

0000aa78 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    aa78:	2821      	cmp	r0, #33	; 0x21
    aa7a:	d806      	bhi.n	aa8a <digitalRead+0x12>
	return *portInputRegister(pin);
    aa7c:	4b04      	ldr	r3, [pc, #16]	; (aa90 <digitalRead+0x18>)
    aa7e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    aa82:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    aa86:	b2c0      	uxtb	r0, r0
    aa88:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    aa8a:	2000      	movs	r0, #0
}
    aa8c:	4770      	bx	lr
    aa8e:	bf00      	nop
    aa90:	00015b40 	.word	0x00015b40

0000aa94 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    aa94:	2821      	cmp	r0, #33	; 0x21
    aa96:	d820      	bhi.n	aada <pinMode+0x46>
	config = portConfigRegister(pin);
    aa98:	4a1b      	ldr	r2, [pc, #108]	; (ab08 <pinMode+0x74>)
    aa9a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    aa9e:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    aaa0:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    aaa2:	d00f      	beq.n	aac4 <pinMode+0x30>
    aaa4:	2904      	cmp	r1, #4
    aaa6:	d01d      	beq.n	aae4 <pinMode+0x50>
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    aaa8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    aaac:	2200      	movs	r2, #0
    aaae:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    aab2:	b199      	cbz	r1, aadc <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    aab4:	2902      	cmp	r1, #2
    aab6:	d022      	beq.n	aafe <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    aab8:	2903      	cmp	r1, #3
    aaba:	d10d      	bne.n	aad8 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    aabc:	f44f 7281 	mov.w	r2, #258	; 0x102
    aac0:	601a      	str	r2, [r3, #0]
    aac2:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    aac4:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    aac8:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    aacc:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    aad0:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    aad2:	681a      	ldr	r2, [r3, #0]
    aad4:	f022 0220 	bic.w	r2, r2, #32
    aad8:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    aada:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    aadc:	f44f 7280 	mov.w	r2, #256	; 0x100
    aae0:	601a      	str	r2, [r3, #0]
    aae2:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    aae4:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    aae8:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    aaec:	2001      	movs	r0, #1
    aaee:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    aaf2:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    aaf4:	681a      	ldr	r2, [r3, #0]
    aaf6:	f042 0220 	orr.w	r2, r2, #32
    aafa:	601a      	str	r2, [r3, #0]
    aafc:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    aafe:	f240 1203 	movw	r2, #259	; 0x103
    ab02:	601a      	str	r2, [r3, #0]
    ab04:	4770      	bx	lr
    ab06:	bf00      	nop
    ab08:	00015b40 	.word	0x00015b40

0000ab0c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ab0c:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    ab0e:	490d      	ldr	r1, [pc, #52]	; (ab44 <micros+0x38>)
	current = SYST_CVR;
    ab10:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ab14:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    ab16:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ab18:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    ab1c:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ab1e:	0152      	lsls	r2, r2, #5
    ab20:	d502      	bpl.n	ab28 <micros+0x1c>
    ab22:	2b32      	cmp	r3, #50	; 0x32
    ab24:	bf88      	it	hi
    ab26:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ab28:	4a07      	ldr	r2, [pc, #28]	; (ab48 <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    ab2a:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    ab2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    ab32:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    ab34:	fba2 2303 	umull	r2, r3, r2, r3
    ab38:	fb01 f000 	mul.w	r0, r1, r0
}
    ab3c:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    ab40:	4770      	bx	lr
    ab42:	bf00      	nop
    ab44:	1fffc3b4 	.word	0x1fffc3b4
    ab48:	aaaaaaab 	.word	0xaaaaaaab

0000ab4c <delay>:

void delay(uint32_t ms)
{
    ab4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ab50:	4604      	mov	r4, r0
	__disable_irq();
    ab52:	b672      	cpsid	i
	count = systick_millis_count;
    ab54:	4f20      	ldr	r7, [pc, #128]	; (abd8 <delay+0x8c>)
	current = SYST_CVR;
    ab56:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ab5a:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    ab5c:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ab5e:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    ab62:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ab64:	0152      	lsls	r2, r2, #5
    ab66:	d502      	bpl.n	ab6e <delay+0x22>
    ab68:	2b32      	cmp	r3, #50	; 0x32
    ab6a:	bf88      	it	hi
    ab6c:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    ab6e:	b90c      	cbnz	r4, ab74 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    ab70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    ab74:	f8df 9064 	ldr.w	r9, [pc, #100]	; abdc <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    ab78:	f8df 8064 	ldr.w	r8, [pc, #100]	; abe0 <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    ab7c:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    ab80:	fba8 2303 	umull	r2, r3, r8, r3
    ab84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ab88:	fb02 f505 	mul.w	r5, r2, r5
    ab8c:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    ab90:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    ab94:	b672      	cpsid	i
	current = SYST_CVR;
    ab96:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    ab98:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ab9a:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    ab9e:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    aba0:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    aba4:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    aba8:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    abac:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    abb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    abb4:	d002      	beq.n	abbc <delay+0x70>
    abb6:	2932      	cmp	r1, #50	; 0x32
    abb8:	bf88      	it	hi
    abba:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    abbc:	fb00 3302 	mla	r3, r0, r2, r3
    abc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    abc4:	d304      	bcc.n	abd0 <delay+0x84>
				if (ms == 0) return;
    abc6:	3c01      	subs	r4, #1
    abc8:	d0d2      	beq.n	ab70 <delay+0x24>
				start += 1000;
    abca:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    abce:	e7e1      	b.n	ab94 <delay+0x48>
			yield();
    abd0:	f001 fea4 	bl	c91c <yield>
			while ((micros() - start) >= 1000) {
    abd4:	e7de      	b.n	ab94 <delay+0x48>
    abd6:	bf00      	nop
    abd8:	1fffc3b4 	.word	0x1fffc3b4
    abdc:	000176ff 	.word	0x000176ff
    abe0:	aaaaaaab 	.word	0xaaaaaaab

0000abe4 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    abe4:	4a2a      	ldr	r2, [pc, #168]	; (ac90 <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    abe6:	492b      	ldr	r1, [pc, #172]	; (ac94 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    abe8:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    abea:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    abec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    abf0:	4d29      	ldr	r5, [pc, #164]	; (ac98 <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    abf2:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    abf4:	4e29      	ldr	r6, [pc, #164]	; (ac9c <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    abf6:	4c2a      	ldr	r4, [pc, #168]	; (aca0 <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    abf8:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    abfa:	2300      	movs	r3, #0
    abfc:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    abfe:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    ac00:	4928      	ldr	r1, [pc, #160]	; (aca4 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    ac02:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    ac04:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    ac06:	4928      	ldr	r1, [pc, #160]	; (aca8 <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    ac08:	2a09      	cmp	r2, #9
	transmitting = 0;
    ac0a:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    ac0c:	d033      	beq.n	ac76 <serial2_begin+0x92>
    ac0e:	2a1a      	cmp	r2, #26
    ac10:	d103      	bne.n	ac1a <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    ac12:	4b26      	ldr	r3, [pc, #152]	; (acac <serial2_begin+0xc8>)
    ac14:	f240 3213 	movw	r2, #787	; 0x313
    ac18:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    ac1a:	4b25      	ldr	r3, [pc, #148]	; (acb0 <serial2_begin+0xcc>)
    ac1c:	781b      	ldrb	r3, [r3, #0]
    ac1e:	2b0a      	cmp	r3, #10
    ac20:	d031      	beq.n	ac86 <serial2_begin+0xa2>
    ac22:	2b1f      	cmp	r3, #31
    ac24:	d103      	bne.n	ac2e <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    ac26:	4b21      	ldr	r3, [pc, #132]	; (acac <serial2_begin+0xc8>)
    ac28:	f44f 7251 	mov.w	r2, #836	; 0x344
    ac2c:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    ac2e:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    ac30:	4b20      	ldr	r3, [pc, #128]	; (acb4 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    ac32:	4c21      	ldr	r4, [pc, #132]	; (acb8 <serial2_begin+0xd4>)
    ac34:	bf38      	it	cc
    ac36:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    ac38:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    ac3c:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    ac40:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    ac44:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    ac48:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    ac4c:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    ac4e:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    ac50:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    ac52:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    ac54:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    ac56:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    ac58:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    ac5a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    ac5e:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    ac60:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    ac62:	203c      	movs	r0, #60	; 0x3c
    ac64:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    ac66:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    ac6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    ac6e:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    ac70:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    ac74:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    ac76:	4b11      	ldr	r3, [pc, #68]	; (acbc <serial2_begin+0xd8>)
    ac78:	f240 3213 	movw	r2, #787	; 0x313
    ac7c:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    ac7e:	4b0c      	ldr	r3, [pc, #48]	; (acb0 <serial2_begin+0xcc>)
    ac80:	781b      	ldrb	r3, [r3, #0]
    ac82:	2b0a      	cmp	r3, #10
    ac84:	d1cd      	bne.n	ac22 <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    ac86:	4b0d      	ldr	r3, [pc, #52]	; (acbc <serial2_begin+0xd8>)
    ac88:	f44f 7251 	mov.w	r2, #836	; 0x344
    ac8c:	611a      	str	r2, [r3, #16]
    ac8e:	e7ce      	b.n	ac2e <serial2_begin+0x4a>
    ac90:	40048000 	.word	0x40048000
    ac94:	1fffc404 	.word	0x1fffc404
    ac98:	1fffc3fc 	.word	0x1fffc3fc
    ac9c:	1fff8804 	.word	0x1fff8804
    aca0:	1fffc438 	.word	0x1fffc438
    aca4:	1fffc440 	.word	0x1fffc440
    aca8:	1fffc40c 	.word	0x1fffc40c
    acac:	4004d000 	.word	0x4004d000
    acb0:	1fff880c 	.word	0x1fff880c
    acb4:	4006b000 	.word	0x4006b000
    acb8:	e000e400 	.word	0xe000e400
    acbc:	4004b000 	.word	0x4004b000

0000acc0 <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    acc0:	4b21      	ldr	r3, [pc, #132]	; (ad48 <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    acc2:	4921      	ldr	r1, [pc, #132]	; (ad48 <serial2_format+0x88>)
	c = UART1_C1;
    acc4:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    acc6:	f000 0203 	and.w	r2, r0, #3
    acca:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    acce:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    acd0:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    acd2:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    acd6:	bf48      	it	mi
    acd8:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    acdc:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    acde:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ace0:	d103      	bne.n	acea <serial2_format+0x2a>
    ace2:	798b      	ldrb	r3, [r1, #6]
    ace4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ace8:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    acea:	4b17      	ldr	r3, [pc, #92]	; (ad48 <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    acec:	4a16      	ldr	r2, [pc, #88]	; (ad48 <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    acee:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    acf0:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    acf2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    acf6:	bf48      	it	mi
    acf8:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    acfc:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    acfe:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    ad00:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    ad02:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    ad06:	4a10      	ldr	r2, [pc, #64]	; (ad48 <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    ad08:	bf48      	it	mi
    ad0a:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    ad0e:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    ad12:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    ad14:	d010      	beq.n	ad38 <serial2_format+0x78>
		c = UART1_C1;
    ad16:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ad18:	490c      	ldr	r1, [pc, #48]	; (ad4c <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    ad1a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    ad1e:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ad20:	7809      	ldrb	r1, [r1, #0]
    ad22:	4b0b      	ldr	r3, [pc, #44]	; (ad50 <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    ad24:	4a0b      	ldr	r2, [pc, #44]	; (ad54 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ad26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    ad2a:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ad2e:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    ad30:	4909      	ldr	r1, [pc, #36]	; (ad58 <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    ad32:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    ad34:	6011      	str	r1, [r2, #0]
    ad36:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    ad38:	4b06      	ldr	r3, [pc, #24]	; (ad54 <serial2_format+0x94>)
    ad3a:	4a07      	ldr	r2, [pc, #28]	; (ad58 <serial2_format+0x98>)
    ad3c:	6819      	ldr	r1, [r3, #0]
    ad3e:	4291      	cmp	r1, r2
    ad40:	bf08      	it	eq
    ad42:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    ad44:	4770      	bx	lr
    ad46:	bf00      	nop
    ad48:	4006b000 	.word	0x4006b000
    ad4c:	1fff880c 	.word	0x1fff880c
    ad50:	00015b40 	.word	0x00015b40
    ad54:	1fffc408 	.word	0x1fffc408
    ad58:	42d600d4 	.word	0x42d600d4

0000ad5c <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    ad5c:	4b29      	ldr	r3, [pc, #164]	; (ae04 <serial2_end+0xa8>)
    ad5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ad60:	051b      	lsls	r3, r3, #20
    ad62:	d54d      	bpl.n	ae00 <serial2_end+0xa4>
{
    ad64:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    ad66:	4c28      	ldr	r4, [pc, #160]	; (ae08 <serial2_end+0xac>)
    ad68:	7823      	ldrb	r3, [r4, #0]
    ad6a:	b123      	cbz	r3, ad76 <serial2_end+0x1a>
    ad6c:	f001 fdd6 	bl	c91c <yield>
    ad70:	7823      	ldrb	r3, [r4, #0]
    ad72:	2b00      	cmp	r3, #0
    ad74:	d1fa      	bne.n	ad6c <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    ad76:	4a25      	ldr	r2, [pc, #148]	; (ae0c <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    ad78:	4b25      	ldr	r3, [pc, #148]	; (ae10 <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    ad7a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ad7e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    ad82:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    ad84:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    ad88:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    ad8a:	781b      	ldrb	r3, [r3, #0]
    ad8c:	2b09      	cmp	r3, #9
    ad8e:	d02c      	beq.n	adea <serial2_end+0x8e>
    ad90:	2b1a      	cmp	r3, #26
    ad92:	d01b      	beq.n	adcc <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    ad94:	4b1f      	ldr	r3, [pc, #124]	; (ae14 <serial2_end+0xb8>)
    ad96:	781b      	ldrb	r3, [r3, #0]
    ad98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ad9c:	2b0a      	cmp	r3, #10
    ad9e:	d01f      	beq.n	ade0 <serial2_end+0x84>
    ada0:	2b1f      	cmp	r3, #31
    ada2:	d00e      	beq.n	adc2 <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    ada4:	4b1c      	ldr	r3, [pc, #112]	; (ae18 <serial2_end+0xbc>)
	UART1_S1;
    ada6:	4a19      	ldr	r2, [pc, #100]	; (ae0c <serial2_end+0xb0>)
	rx_buffer_head = 0;
    ada8:	4c1c      	ldr	r4, [pc, #112]	; (ae1c <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    adaa:	481d      	ldr	r0, [pc, #116]	; (ae20 <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    adac:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    adae:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    adb2:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    adb4:	2300      	movs	r3, #0
    adb6:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    adb8:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    adba:	b109      	cbz	r1, adc0 <serial2_end+0x64>
    adbc:	2301      	movs	r3, #1
    adbe:	700b      	strb	r3, [r1, #0]
}
    adc0:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    adc2:	4b18      	ldr	r3, [pc, #96]	; (ae24 <serial2_end+0xc8>)
    adc4:	f240 1203 	movw	r2, #259	; 0x103
    adc8:	601a      	str	r2, [r3, #0]
    adca:	e7eb      	b.n	ada4 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    adcc:	4b15      	ldr	r3, [pc, #84]	; (ae24 <serial2_end+0xc8>)
    adce:	f240 1203 	movw	r2, #259	; 0x103
    add2:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    add4:	4b0f      	ldr	r3, [pc, #60]	; (ae14 <serial2_end+0xb8>)
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    addc:	2b0a      	cmp	r3, #10
    adde:	d1df      	bne.n	ada0 <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    ade0:	4b11      	ldr	r3, [pc, #68]	; (ae28 <serial2_end+0xcc>)
    ade2:	f240 1203 	movw	r2, #259	; 0x103
    ade6:	611a      	str	r2, [r3, #16]
    ade8:	e7dc      	b.n	ada4 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    adea:	4b0f      	ldr	r3, [pc, #60]	; (ae28 <serial2_end+0xcc>)
    adec:	f240 1203 	movw	r2, #259	; 0x103
    adf0:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    adf2:	4b08      	ldr	r3, [pc, #32]	; (ae14 <serial2_end+0xb8>)
    adf4:	781b      	ldrb	r3, [r3, #0]
    adf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    adfa:	2b0a      	cmp	r3, #10
    adfc:	d1d0      	bne.n	ada0 <serial2_end+0x44>
    adfe:	e7ef      	b.n	ade0 <serial2_end+0x84>
    ae00:	4770      	bx	lr
    ae02:	bf00      	nop
    ae04:	40048000 	.word	0x40048000
    ae08:	1fffc40c 	.word	0x1fffc40c
    ae0c:	4006b000 	.word	0x4006b000
    ae10:	1fff8804 	.word	0x1fff8804
    ae14:	1fff880c 	.word	0x1fff880c
    ae18:	1fffc3b8 	.word	0x1fffc3b8
    ae1c:	1fffc3fc 	.word	0x1fffc3fc
    ae20:	1fffc404 	.word	0x1fffc404
    ae24:	4004d000 	.word	0x4004d000
    ae28:	4004b000 	.word	0x4004b000

0000ae2c <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    ae2c:	4a0a      	ldr	r2, [pc, #40]	; (ae58 <serial2_set_transmit_pin+0x2c>)
{
    ae2e:	b538      	push	{r3, r4, r5, lr}
    ae30:	4605      	mov	r5, r0
	while (transmitting) ;
    ae32:	7813      	ldrb	r3, [r2, #0]
    ae34:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d1fa      	bne.n	ae32 <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    ae3c:	2101      	movs	r1, #1
    ae3e:	4628      	mov	r0, r5
    ae40:	f7ff fe28 	bl	aa94 <pinMode>
	digitalWrite(pin, LOW);
    ae44:	4621      	mov	r1, r4
    ae46:	4628      	mov	r0, r5
    ae48:	f7ff fdf0 	bl	aa2c <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    ae4c:	4a03      	ldr	r2, [pc, #12]	; (ae5c <serial2_set_transmit_pin+0x30>)
    ae4e:	4b04      	ldr	r3, [pc, #16]	; (ae60 <serial2_set_transmit_pin+0x34>)
    ae50:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    ae54:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    ae56:	bd38      	pop	{r3, r4, r5, pc}
    ae58:	1fffc40c 	.word	0x1fffc40c
    ae5c:	00015b40 	.word	0x00015b40
    ae60:	1fffc408 	.word	0x1fffc408

0000ae64 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    ae64:	b109      	cbz	r1, ae6a <serial2_set_tx+0x6>
    ae66:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    ae6a:	4a19      	ldr	r2, [pc, #100]	; (aed0 <serial2_set_tx+0x6c>)
    ae6c:	7813      	ldrb	r3, [r2, #0]
    ae6e:	4283      	cmp	r3, r0
    ae70:	d017      	beq.n	aea2 <serial2_set_tx+0x3e>
{
    ae72:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    ae74:	4c17      	ldr	r4, [pc, #92]	; (aed4 <serial2_set_tx+0x70>)
    ae76:	6b64      	ldr	r4, [r4, #52]	; 0x34
    ae78:	0524      	lsls	r4, r4, #20
    ae7a:	d50f      	bpl.n	ae9c <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    ae7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ae80:	2b0a      	cmp	r3, #10
    ae82:	d021      	beq.n	aec8 <serial2_set_tx+0x64>
    ae84:	2b1f      	cmp	r3, #31
    ae86:	d014      	beq.n	aeb2 <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    ae88:	2900      	cmp	r1, #0
    ae8a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    ae8e:	bf14      	ite	ne
    ae90:	2160      	movne	r1, #96	; 0x60
    ae92:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    ae94:	2b0a      	cmp	r3, #10
    ae96:	d010      	beq.n	aeba <serial2_set_tx+0x56>
    ae98:	2b1f      	cmp	r3, #31
    ae9a:	d003      	beq.n	aea4 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    ae9c:	7010      	strb	r0, [r2, #0]
	#endif
}
    ae9e:	bc10      	pop	{r4}
    aea0:	4770      	bx	lr
    aea2:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    aea4:	4b0c      	ldr	r3, [pc, #48]	; (aed8 <serial2_set_tx+0x74>)
    aea6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    aeaa:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    aeac:	7010      	strb	r0, [r2, #0]
}
    aeae:	bc10      	pop	{r4}
    aeb0:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    aeb2:	4b09      	ldr	r3, [pc, #36]	; (aed8 <serial2_set_tx+0x74>)
    aeb4:	2400      	movs	r4, #0
    aeb6:	601c      	str	r4, [r3, #0]
    aeb8:	e7e6      	b.n	ae88 <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    aeba:	4b08      	ldr	r3, [pc, #32]	; (aedc <serial2_set_tx+0x78>)
    aebc:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    aec0:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    aec2:	7010      	strb	r0, [r2, #0]
}
    aec4:	bc10      	pop	{r4}
    aec6:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    aec8:	4b04      	ldr	r3, [pc, #16]	; (aedc <serial2_set_tx+0x78>)
    aeca:	2400      	movs	r4, #0
    aecc:	611c      	str	r4, [r3, #16]
    aece:	e7db      	b.n	ae88 <serial2_set_tx+0x24>
    aed0:	1fff880c 	.word	0x1fff880c
    aed4:	40048000 	.word	0x40048000
    aed8:	4004d000 	.word	0x4004d000
    aedc:	4004b000 	.word	0x4004b000

0000aee0 <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    aee0:	4b12      	ldr	r3, [pc, #72]	; (af2c <serial2_set_rx+0x4c>)
    aee2:	781a      	ldrb	r2, [r3, #0]
    aee4:	4282      	cmp	r2, r0
    aee6:	d00c      	beq.n	af02 <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    aee8:	4911      	ldr	r1, [pc, #68]	; (af30 <serial2_set_rx+0x50>)
    aeea:	6b49      	ldr	r1, [r1, #52]	; 0x34
    aeec:	0509      	lsls	r1, r1, #20
    aeee:	d507      	bpl.n	af00 <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    aef0:	2a09      	cmp	r2, #9
    aef2:	d016      	beq.n	af22 <serial2_set_rx+0x42>
    aef4:	2a1a      	cmp	r2, #26
    aef6:	d00a      	beq.n	af0e <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    aef8:	2809      	cmp	r0, #9
    aefa:	d00d      	beq.n	af18 <serial2_set_rx+0x38>
    aefc:	281a      	cmp	r0, #26
    aefe:	d001      	beq.n	af04 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    af00:	7018      	strb	r0, [r3, #0]
	#endif
}
    af02:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    af04:	4a0b      	ldr	r2, [pc, #44]	; (af34 <serial2_set_rx+0x54>)
    af06:	f240 3113 	movw	r1, #787	; 0x313
    af0a:	6051      	str	r1, [r2, #4]
    af0c:	e7f8      	b.n	af00 <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    af0e:	4a09      	ldr	r2, [pc, #36]	; (af34 <serial2_set_rx+0x54>)
    af10:	2100      	movs	r1, #0
		switch (pin) {
    af12:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    af14:	6051      	str	r1, [r2, #4]
		switch (pin) {
    af16:	d1f1      	bne.n	aefc <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    af18:	4a07      	ldr	r2, [pc, #28]	; (af38 <serial2_set_rx+0x58>)
    af1a:	f240 3113 	movw	r1, #787	; 0x313
    af1e:	60d1      	str	r1, [r2, #12]
    af20:	e7ee      	b.n	af00 <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    af22:	4a05      	ldr	r2, [pc, #20]	; (af38 <serial2_set_rx+0x58>)
    af24:	2100      	movs	r1, #0
    af26:	60d1      	str	r1, [r2, #12]
    af28:	e7e6      	b.n	aef8 <serial2_set_rx+0x18>
    af2a:	bf00      	nop
    af2c:	1fff8804 	.word	0x1fff8804
    af30:	40048000 	.word	0x40048000
    af34:	4004d000 	.word	0x4004d000
    af38:	4004b000 	.word	0x4004b000

0000af3c <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    af3c:	4b0d      	ldr	r3, [pc, #52]	; (af74 <serial2_set_rts+0x38>)
    af3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    af40:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    af44:	d013      	beq.n	af6e <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    af46:	2821      	cmp	r0, #33	; 0x21
    af48:	d903      	bls.n	af52 <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    af4a:	4b0b      	ldr	r3, [pc, #44]	; (af78 <serial2_set_rts+0x3c>)
    af4c:	2000      	movs	r0, #0
    af4e:	6018      	str	r0, [r3, #0]
		return 0;
    af50:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    af52:	4b0a      	ldr	r3, [pc, #40]	; (af7c <serial2_set_rts+0x40>)
{
    af54:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    af56:	4c08      	ldr	r4, [pc, #32]	; (af78 <serial2_set_rts+0x3c>)
    af58:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    af5c:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    af5e:	2101      	movs	r1, #1
    af60:	f7ff fd98 	bl	aa94 <pinMode>
		rts_assert();
    af64:	6823      	ldr	r3, [r4, #0]
    af66:	2200      	movs	r2, #0
    af68:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    af6a:	2001      	movs	r0, #1
}
    af6c:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    af6e:	4618      	mov	r0, r3
}
    af70:	4770      	bx	lr
    af72:	bf00      	nop
    af74:	40048000 	.word	0x40048000
    af78:	1fffc3b8 	.word	0x1fffc3b8
    af7c:	00015b40 	.word	0x00015b40

0000af80 <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    af80:	4b0c      	ldr	r3, [pc, #48]	; (afb4 <serial2_set_cts+0x34>)
    af82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    af84:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    af88:	d012      	beq.n	afb0 <serial2_set_cts+0x30>
	if (pin == 23) {
    af8a:	2817      	cmp	r0, #23
    af8c:	d109      	bne.n	afa2 <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    af8e:	4b0a      	ldr	r3, [pc, #40]	; (afb8 <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    af90:	4a0a      	ldr	r2, [pc, #40]	; (afbc <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    af92:	f240 3102 	movw	r1, #770	; 0x302
    af96:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    af98:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    af9a:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    af9c:	4303      	orrs	r3, r0
    af9e:	7353      	strb	r3, [r2, #13]
	return 1;
    afa0:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    afa2:	4a06      	ldr	r2, [pc, #24]	; (afbc <serial2_set_cts+0x3c>)
    afa4:	7b53      	ldrb	r3, [r2, #13]
    afa6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    afaa:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    afac:	7353      	strb	r3, [r2, #13]
		return 0;
    afae:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    afb0:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    afb2:	4770      	bx	lr
    afb4:	40048000 	.word	0x40048000
    afb8:	4004b000 	.word	0x4004b000
    afbc:	4006b000 	.word	0x4006b000

0000afc0 <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    afc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    afc4:	4b33      	ldr	r3, [pc, #204]	; (b094 <serial2_putchar+0xd4>)
    afc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    afc8:	051a      	lsls	r2, r3, #20
    afca:	d53a      	bpl.n	b042 <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    afcc:	4b32      	ldr	r3, [pc, #200]	; (b098 <serial2_putchar+0xd8>)
    afce:	681b      	ldr	r3, [r3, #0]
    afd0:	4606      	mov	r6, r0
    afd2:	b10b      	cbz	r3, afd8 <serial2_putchar+0x18>
    afd4:	2201      	movs	r2, #1
    afd6:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    afd8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b09c <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    afdc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b0a0 <serial2_putchar+0xe0>
	head = tx_buffer_head;
    afe0:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    afe4:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    afe8:	4d2e      	ldr	r5, [pc, #184]	; (b0a4 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    afea:	3401      	adds	r4, #1
    afec:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    afee:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    aff0:	d929      	bls.n	b046 <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    aff2:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    aff4:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    aff8:	d114      	bne.n	b024 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    affa:	4f2b      	ldr	r7, [pc, #172]	; (b0a8 <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    affc:	f8df b0ac 	ldr.w	fp, [pc, #172]	; b0ac <serial2_putchar+0xec>
    b000:	e005      	b.n	b00e <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    b002:	793b      	ldrb	r3, [r7, #4]
    b004:	061b      	lsls	r3, r3, #24
    b006:	d423      	bmi.n	b050 <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    b008:	782b      	ldrb	r3, [r5, #0]
    b00a:	42a3      	cmp	r3, r4
    b00c:	d10a      	bne.n	b024 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    b00e:	f7ff fabd 	bl	a58c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    b012:	2840      	cmp	r0, #64	; 0x40
    b014:	ddf5      	ble.n	b002 <serial2_putchar+0x42>
		} else if (priority >= 256) {
    b016:	28ff      	cmp	r0, #255	; 0xff
    b018:	ddf6      	ble.n	b008 <serial2_putchar+0x48>
			yield(); // wait
    b01a:	f001 fc7f 	bl	c91c <yield>
	while (tx_buffer_tail == head) {
    b01e:	782b      	ldrb	r3, [r5, #0]
    b020:	42a3      	cmp	r3, r4
    b022:	d0f4      	beq.n	b00e <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    b024:	2c27      	cmp	r4, #39	; 0x27
    b026:	d929      	bls.n	b07c <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    b028:	4b21      	ldr	r3, [pc, #132]	; (b0b0 <serial2_putchar+0xf0>)
    b02a:	3c28      	subs	r4, #40	; 0x28
    b02c:	681b      	ldr	r3, [r3, #0]
    b02e:	b2f6      	uxtb	r6, r6
    b030:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    b032:	4a20      	ldr	r2, [pc, #128]	; (b0b4 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    b034:	4b1c      	ldr	r3, [pc, #112]	; (b0a8 <serial2_putchar+0xe8>)
	transmitting = 1;
    b036:	2101      	movs	r1, #1
    b038:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    b03a:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    b03c:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    b040:	70da      	strb	r2, [r3, #3]
}
    b042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    b046:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    b04a:	b9a3      	cbnz	r3, b076 <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    b04c:	4654      	mov	r4, sl
    b04e:	e7d4      	b.n	affa <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    b050:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b052:	f8d8 1000 	ldr.w	r1, [r8]
    b056:	1c5a      	adds	r2, r3, #1
    b058:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    b05a:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b05c:	d908      	bls.n	b070 <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    b05e:	2a27      	cmp	r2, #39	; 0x27
    b060:	d810      	bhi.n	b084 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    b062:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    b064:	f81b 3002 	ldrb.w	r3, [fp, r2]
    b068:	b2db      	uxtb	r3, r3
				UART1_D = n;
    b06a:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    b06c:	7029      	strb	r1, [r5, #0]
    b06e:	e7cb      	b.n	b008 <serial2_putchar+0x48>
    b070:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b072:	460a      	mov	r2, r1
    b074:	e7f6      	b.n	b064 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    b076:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    b07a:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    b07c:	4b0b      	ldr	r3, [pc, #44]	; (b0ac <serial2_putchar+0xec>)
    b07e:	b2f6      	uxtb	r6, r6
    b080:	551e      	strb	r6, [r3, r4]
    b082:	e7d6      	b.n	b032 <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    b084:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    b086:	4a0a      	ldr	r2, [pc, #40]	; (b0b0 <serial2_putchar+0xf0>)
    b088:	3b27      	subs	r3, #39	; 0x27
    b08a:	6812      	ldr	r2, [r2, #0]
    b08c:	5cd3      	ldrb	r3, [r2, r3]
    b08e:	b2db      	uxtb	r3, r3
    b090:	e7eb      	b.n	b06a <serial2_putchar+0xaa>
    b092:	bf00      	nop
    b094:	40048000 	.word	0x40048000
    b098:	1fffc408 	.word	0x1fffc408
    b09c:	1fffc438 	.word	0x1fffc438
    b0a0:	1fff8808 	.word	0x1fff8808
    b0a4:	1fffc440 	.word	0x1fffc440
    b0a8:	4006b000 	.word	0x4006b000
    b0ac:	1fffc410 	.word	0x1fffc410
    b0b0:	1fffc43c 	.word	0x1fffc43c
    b0b4:	1fffc40c 	.word	0x1fffc40c

0000b0b8 <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    b0b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    b0bc:	4b39      	ldr	r3, [pc, #228]	; (b1a4 <serial2_write+0xec>)
    b0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b0c0:	051a      	lsls	r2, r3, #20
    b0c2:	d53c      	bpl.n	b13e <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    b0c4:	4b38      	ldr	r3, [pc, #224]	; (b1a8 <serial2_write+0xf0>)
    b0c6:	681b      	ldr	r3, [r3, #0]
    b0c8:	b10b      	cbz	r3, b0ce <serial2_write+0x16>
    b0ca:	2201      	movs	r2, #1
    b0cc:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    b0ce:	1847      	adds	r7, r0, r1
	while (p < end) {
    b0d0:	42b8      	cmp	r0, r7
    b0d2:	d231      	bcs.n	b138 <serial2_write+0x80>
    b0d4:	4e35      	ldr	r6, [pc, #212]	; (b1ac <serial2_write+0xf4>)
    b0d6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b1b0 <serial2_write+0xf8>
    b0da:	4c36      	ldr	r4, [pc, #216]	; (b1b4 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    b0dc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; b1b8 <serial2_write+0x100>
    b0e0:	f100 0a01 	add.w	sl, r0, #1
    b0e4:	e013      	b.n	b10e <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    b0e6:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    b0ea:	b353      	cbz	r3, b142 <serial2_write+0x8a>
    b0ec:	f04f 0b00 	mov.w	fp, #0
    b0f0:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    b0f2:	4a32      	ldr	r2, [pc, #200]	; (b1bc <serial2_write+0x104>)
    b0f4:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b0f8:	5553      	strb	r3, [r2, r5]
    b0fa:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    b0fc:	4930      	ldr	r1, [pc, #192]	; (b1c0 <serial2_write+0x108>)
    b0fe:	2301      	movs	r3, #1
	while (p < end) {
    b100:	42ba      	cmp	r2, r7
		transmitting = 1;
    b102:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    b104:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    b108:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    b10c:	d214      	bcs.n	b138 <serial2_write+0x80>
		head = tx_buffer_head;
    b10e:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    b110:	f8d8 3000 	ldr.w	r3, [r8]
    b114:	3501      	adds	r5, #1
    b116:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    b118:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    b11a:	d9e4      	bls.n	b0e6 <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    b11c:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    b11e:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    b122:	d00f      	beq.n	b144 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    b124:	2d27      	cmp	r5, #39	; 0x27
    b126:	d9e4      	bls.n	b0f2 <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    b128:	4b26      	ldr	r3, [pc, #152]	; (b1c4 <serial2_write+0x10c>)
    b12a:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    b12e:	681b      	ldr	r3, [r3, #0]
    b130:	3d28      	subs	r5, #40	; 0x28
    b132:	555a      	strb	r2, [r3, r5]
    b134:	4652      	mov	r2, sl
    b136:	e7e1      	b.n	b0fc <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    b138:	4b1f      	ldr	r3, [pc, #124]	; (b1b8 <serial2_write+0x100>)
    b13a:	22bc      	movs	r2, #188	; 0xbc
    b13c:	70da      	strb	r2, [r3, #3]
}
    b13e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    b142:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    b144:	f06f 0343 	mvn.w	r3, #67	; 0x43
    b148:	f889 3003 	strb.w	r3, [r9, #3]
    b14c:	e006      	b.n	b15c <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    b14e:	f899 3004 	ldrb.w	r3, [r9, #4]
    b152:	061b      	lsls	r3, r3, #24
    b154:	d40b      	bmi.n	b16e <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    b156:	7823      	ldrb	r3, [r4, #0]
    b158:	42ab      	cmp	r3, r5
    b15a:	d1e3      	bne.n	b124 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    b15c:	f7ff fa16 	bl	a58c <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    b160:	2840      	cmp	r0, #64	; 0x40
    b162:	ddf4      	ble.n	b14e <serial2_write+0x96>
				} else if (priority >= 256) {
    b164:	28ff      	cmp	r0, #255	; 0xff
    b166:	ddf6      	ble.n	b156 <serial2_write+0x9e>
					yield();
    b168:	f001 fbd8 	bl	c91c <yield>
    b16c:	e7f3      	b.n	b156 <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    b16e:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    b170:	f8d8 1000 	ldr.w	r1, [r8]
    b174:	1c5a      	adds	r2, r3, #1
    b176:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    b178:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    b17a:	d903      	bls.n	b184 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    b17c:	2a27      	cmp	r2, #39	; 0x27
    b17e:	d80a      	bhi.n	b196 <serial2_write+0xde>
						tx_buffer_tail = tail;
    b180:	b2d1      	uxtb	r1, r2
    b182:	e001      	b.n	b188 <serial2_write+0xd0>
    b184:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    b186:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    b188:	4b0c      	ldr	r3, [pc, #48]	; (b1bc <serial2_write+0x104>)
    b18a:	5c9b      	ldrb	r3, [r3, r2]
    b18c:	b2db      	uxtb	r3, r3
						UART1_D = n;
    b18e:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    b192:	7021      	strb	r1, [r4, #0]
    b194:	e7df      	b.n	b156 <serial2_write+0x9e>
    b196:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    b198:	4a0a      	ldr	r2, [pc, #40]	; (b1c4 <serial2_write+0x10c>)
    b19a:	3b27      	subs	r3, #39	; 0x27
    b19c:	6812      	ldr	r2, [r2, #0]
    b19e:	5cd3      	ldrb	r3, [r2, r3]
    b1a0:	b2db      	uxtb	r3, r3
    b1a2:	e7f4      	b.n	b18e <serial2_write+0xd6>
    b1a4:	40048000 	.word	0x40048000
    b1a8:	1fffc408 	.word	0x1fffc408
    b1ac:	1fffc438 	.word	0x1fffc438
    b1b0:	1fff8808 	.word	0x1fff8808
    b1b4:	1fffc440 	.word	0x1fffc440
    b1b8:	4006b000 	.word	0x4006b000
    b1bc:	1fffc410 	.word	0x1fffc410
    b1c0:	1fffc40c 	.word	0x1fffc40c
    b1c4:	1fffc43c 	.word	0x1fffc43c

0000b1c8 <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    b1c8:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    b1ca:	4c04      	ldr	r4, [pc, #16]	; (b1dc <serial2_flush+0x14>)
    b1cc:	7823      	ldrb	r3, [r4, #0]
    b1ce:	b123      	cbz	r3, b1da <serial2_flush+0x12>
    b1d0:	f001 fba4 	bl	c91c <yield>
    b1d4:	7823      	ldrb	r3, [r4, #0]
    b1d6:	2b00      	cmp	r3, #0
    b1d8:	d1fa      	bne.n	b1d0 <serial2_flush+0x8>
}
    b1da:	bd10      	pop	{r4, pc}
    b1dc:	1fffc40c 	.word	0x1fffc40c

0000b1e0 <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    b1e0:	4a08      	ldr	r2, [pc, #32]	; (b204 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    b1e2:	4b09      	ldr	r3, [pc, #36]	; (b208 <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    b1e4:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    b1e6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b1e8:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    b1ea:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    b1ec:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b1ee:	d202      	bcs.n	b1f6 <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    b1f0:	3b01      	subs	r3, #1
    b1f2:	1a18      	subs	r0, r3, r0
}
    b1f4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b1f6:	4a05      	ldr	r2, [pc, #20]	; (b20c <serial2_write_buffer_free+0x2c>)
    b1f8:	6812      	ldr	r2, [r2, #0]
    b1fa:	3a01      	subs	r2, #1
    b1fc:	4413      	add	r3, r2
    b1fe:	1a18      	subs	r0, r3, r0
    b200:	4770      	bx	lr
    b202:	bf00      	nop
    b204:	1fffc438 	.word	0x1fffc438
    b208:	1fffc440 	.word	0x1fffc440
    b20c:	1fff8808 	.word	0x1fff8808

0000b210 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b210:	4a06      	ldr	r2, [pc, #24]	; (b22c <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    b212:	4b07      	ldr	r3, [pc, #28]	; (b230 <serial2_available+0x20>)
	head = rx_buffer_head;
    b214:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b216:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    b218:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    b21a:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    b21c:	bf3c      	itt	cc
    b21e:	4a05      	ldrcc	r2, [pc, #20]	; (b234 <serial2_available+0x24>)
    b220:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    b222:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    b224:	bf38      	it	cc
    b226:	189b      	addcc	r3, r3, r2
    b228:	1a18      	subs	r0, r3, r0
}
    b22a:	4770      	bx	lr
    b22c:	1fffc3fc 	.word	0x1fffc3fc
    b230:	1fffc404 	.word	0x1fffc404
    b234:	1fff8800 	.word	0x1fff8800

0000b238 <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    b238:	4b1b      	ldr	r3, [pc, #108]	; (b2a8 <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    b23a:	491c      	ldr	r1, [pc, #112]	; (b2ac <serial2_getchar+0x74>)
	head = rx_buffer_head;
    b23c:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    b23e:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    b240:	429a      	cmp	r2, r3
    b242:	d02e      	beq.n	b2a2 <serial2_getchar+0x6a>
{
    b244:	b510      	push	{r4, lr}
    b246:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b24a:	4a19      	ldr	r2, [pc, #100]	; (b2b0 <serial2_getchar+0x78>)
    b24c:	b2d8      	uxtb	r0, r3
    b24e:	6812      	ldr	r2, [r2, #0]
    b250:	1c43      	adds	r3, r0, #1
    b252:	429a      	cmp	r2, r3
    b254:	d919      	bls.n	b28a <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    b256:	2b3f      	cmp	r3, #63	; 0x3f
    b258:	d81b      	bhi.n	b292 <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    b25a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    b25e:	4815      	ldr	r0, [pc, #84]	; (b2b4 <serial2_getchar+0x7c>)
    b260:	5cc0      	ldrb	r0, [r0, r3]
    b262:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    b264:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    b268:	4913      	ldr	r1, [pc, #76]	; (b2b8 <serial2_getchar+0x80>)
    b26a:	6809      	ldr	r1, [r1, #0]
    b26c:	b161      	cbz	r1, b288 <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    b26e:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    b270:	bf3c      	itt	cc
    b272:	4472      	addcc	r2, lr
    b274:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b276:	4a11      	ldr	r2, [pc, #68]	; (b2bc <serial2_getchar+0x84>)
    b278:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    b27a:	bf28      	it	cs
    b27c:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b280:	429a      	cmp	r2, r3
    b282:	d301      	bcc.n	b288 <serial2_getchar+0x50>
    b284:	2300      	movs	r3, #0
    b286:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    b288:	bd10      	pop	{r4, pc}
    b28a:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b28e:	4663      	mov	r3, ip
    b290:	e7e5      	b.n	b25e <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    b292:	4c0b      	ldr	r4, [pc, #44]	; (b2c0 <serial2_getchar+0x88>)
    b294:	383f      	subs	r0, #63	; 0x3f
    b296:	6824      	ldr	r4, [r4, #0]
    b298:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    b29a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    b29e:	b2c0      	uxtb	r0, r0
    b2a0:	e7e0      	b.n	b264 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    b2a2:	f04f 30ff 	mov.w	r0, #4294967295
}
    b2a6:	4770      	bx	lr
    b2a8:	1fffc3fc 	.word	0x1fffc3fc
    b2ac:	1fffc404 	.word	0x1fffc404
    b2b0:	1fff8800 	.word	0x1fff8800
    b2b4:	1fffc3bc 	.word	0x1fffc3bc
    b2b8:	1fffc3b8 	.word	0x1fffc3b8
    b2bc:	1fff87fc 	.word	0x1fff87fc
    b2c0:	1fffc400 	.word	0x1fffc400

0000b2c4 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b2c4:	4a0d      	ldr	r2, [pc, #52]	; (b2fc <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    b2c6:	4b0e      	ldr	r3, [pc, #56]	; (b300 <serial2_peek+0x3c>)
	head = rx_buffer_head;
    b2c8:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b2ca:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    b2cc:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    b2ce:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    b2d0:	d011      	beq.n	b2f6 <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b2d2:	490c      	ldr	r1, [pc, #48]	; (b304 <serial2_peek+0x40>)
    b2d4:	6809      	ldr	r1, [r1, #0]
    b2d6:	1c53      	adds	r3, r2, #1
    b2d8:	4299      	cmp	r1, r3
    b2da:	d907      	bls.n	b2ec <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    b2dc:	2b3f      	cmp	r3, #63	; 0x3f
    b2de:	d906      	bls.n	b2ee <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    b2e0:	4b09      	ldr	r3, [pc, #36]	; (b308 <serial2_peek+0x44>)
    b2e2:	3a3f      	subs	r2, #63	; 0x3f
    b2e4:	681b      	ldr	r3, [r3, #0]
    b2e6:	5c98      	ldrb	r0, [r3, r2]
    b2e8:	b2c0      	uxtb	r0, r0
    b2ea:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b2ec:	2300      	movs	r3, #0
		return rx_buffer[tail];
    b2ee:	4a07      	ldr	r2, [pc, #28]	; (b30c <serial2_peek+0x48>)
    b2f0:	5cd0      	ldrb	r0, [r2, r3]
    b2f2:	b2c0      	uxtb	r0, r0
    b2f4:	4770      	bx	lr
	if (head == tail) return -1;
    b2f6:	f04f 30ff 	mov.w	r0, #4294967295
}
    b2fa:	4770      	bx	lr
    b2fc:	1fffc3fc 	.word	0x1fffc3fc
    b300:	1fffc404 	.word	0x1fffc404
    b304:	1fff8800 	.word	0x1fff8800
    b308:	1fffc400 	.word	0x1fffc400
    b30c:	1fffc3bc 	.word	0x1fffc3bc

0000b310 <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    b310:	4b0c      	ldr	r3, [pc, #48]	; (b344 <serial2_clear+0x34>)
    b312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b314:	051b      	lsls	r3, r3, #20
    b316:	d514      	bpl.n	b342 <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    b318:	4b0b      	ldr	r3, [pc, #44]	; (b348 <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    b31a:	480c      	ldr	r0, [pc, #48]	; (b34c <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    b31c:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    b31e:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    b320:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    b324:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    b326:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    b328:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    b32a:	4909      	ldr	r1, [pc, #36]	; (b350 <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    b32c:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    b330:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    b332:	4a08      	ldr	r2, [pc, #32]	; (b354 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    b334:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    b336:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    b338:	b2db      	uxtb	r3, r3
    b33a:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    b33c:	b10a      	cbz	r2, b342 <serial2_clear+0x32>
    b33e:	2300      	movs	r3, #0
    b340:	7013      	strb	r3, [r2, #0]
}
    b342:	4770      	bx	lr
    b344:	40048000 	.word	0x40048000
    b348:	4006b000 	.word	0x4006b000
    b34c:	1fffc404 	.word	0x1fffc404
    b350:	1fffc3fc 	.word	0x1fffc3fc
    b354:	1fffc3b8 	.word	0x1fffc3b8

0000b358 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    b358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    b35c:	4c50      	ldr	r4, [pc, #320]	; (b4a0 <uart1_status_isr+0x148>)
    b35e:	7923      	ldrb	r3, [r4, #4]
    b360:	f013 0f30 	tst.w	r3, #48	; 0x30
    b364:	d047      	beq.n	b3f6 <uart1_status_isr+0x9e>
		__disable_irq();
    b366:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    b368:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    b36a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    b36e:	2b00      	cmp	r3, #0
    b370:	d058      	beq.n	b424 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    b372:	b662      	cpsie	i
			head = rx_buffer_head;
    b374:	f8df 812c 	ldr.w	r8, [pc, #300]	; b4a4 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    b378:	484b      	ldr	r0, [pc, #300]	; (b4a8 <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    b37a:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    b37e:	4a4b      	ldr	r2, [pc, #300]	; (b4ac <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    b380:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    b382:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    b384:	4f4a      	ldr	r7, [pc, #296]	; (b4b0 <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    b386:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    b38a:	4b4a      	ldr	r3, [pc, #296]	; (b4b4 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    b38c:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    b38e:	f8d3 e000 	ldr.w	lr, [r3]
    b392:	e008      	b.n	b3a6 <uart1_status_isr+0x4e>
				if (newhead != tail) {
    b394:	b11d      	cbz	r5, b39e <uart1_status_isr+0x46>
    b396:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    b39a:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    b39e:	1e4a      	subs	r2, r1, #1
    b3a0:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    b3a4:	d012      	beq.n	b3cc <uart1_status_isr+0x74>
					n = UART1_D;
    b3a6:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    b3a8:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    b3ac:	4296      	cmp	r6, r2
					n = UART1_D;
    b3ae:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    b3b0:	d9f0      	bls.n	b394 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    b3b2:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    b3b4:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    b3b8:	d0f1      	beq.n	b39e <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    b3ba:	2a3f      	cmp	r2, #63	; 0x3f
    b3bc:	d96d      	bls.n	b49a <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    b3be:	4694      	mov	ip, r2
			} while (--avail > 0);
    b3c0:	1e4a      	subs	r2, r1, #1
    b3c2:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    b3c6:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    b3ca:	d1ec      	bne.n	b3a6 <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    b3cc:	fa5f f38c 	uxtb.w	r3, ip
    b3d0:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    b3d4:	4b38      	ldr	r3, [pc, #224]	; (b4b8 <uart1_status_isr+0x160>)
    b3d6:	6819      	ldr	r1, [r3, #0]
    b3d8:	b169      	cbz	r1, b3f6 <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    b3da:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    b3dc:	bf3c      	itt	cc
    b3de:	1b72      	subcc	r2, r6, r5
    b3e0:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    b3e4:	4a35      	ldr	r2, [pc, #212]	; (b4bc <uart1_status_isr+0x164>)
    b3e6:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    b3e8:	bf28      	it	cs
    b3ea:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    b3ee:	429a      	cmp	r2, r3
    b3f0:	bf9c      	itt	ls
    b3f2:	2301      	movls	r3, #1
    b3f4:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    b3f6:	482a      	ldr	r0, [pc, #168]	; (b4a0 <uart1_status_isr+0x148>)
    b3f8:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    b3fa:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    b3fc:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    b3fe:	d416      	bmi.n	b42e <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    b400:	066a      	lsls	r2, r5, #25
    b402:	d50d      	bpl.n	b420 <uart1_status_isr+0xc8>
    b404:	4b26      	ldr	r3, [pc, #152]	; (b4a0 <uart1_status_isr+0x148>)
    b406:	791b      	ldrb	r3, [r3, #4]
    b408:	065b      	lsls	r3, r3, #25
    b40a:	d509      	bpl.n	b420 <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    b40c:	4b2c      	ldr	r3, [pc, #176]	; (b4c0 <uart1_status_isr+0x168>)
		transmitting = 0;
    b40e:	492d      	ldr	r1, [pc, #180]	; (b4c4 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    b410:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    b412:	2200      	movs	r2, #0
    b414:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    b416:	b103      	cbz	r3, b41a <uart1_status_isr+0xc2>
    b418:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    b41a:	4b21      	ldr	r3, [pc, #132]	; (b4a0 <uart1_status_isr+0x148>)
    b41c:	223c      	movs	r2, #60	; 0x3c
    b41e:	70da      	strb	r2, [r3, #3]
	}
}
    b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    b424:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    b426:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    b428:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    b42a:	b662      	cpsie	i
    b42c:	e7e3      	b.n	b3f6 <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    b42e:	7903      	ldrb	r3, [r0, #4]
    b430:	061c      	lsls	r4, r3, #24
    b432:	d5e5      	bpl.n	b400 <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    b434:	4b24      	ldr	r3, [pc, #144]	; (b4c8 <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b436:	4a25      	ldr	r2, [pc, #148]	; (b4cc <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    b438:	f8df e094 	ldr.w	lr, [pc, #148]	; b4d0 <uart1_status_isr+0x178>
		head = tx_buffer_head;
    b43c:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b43e:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    b440:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    b444:	4a23      	ldr	r2, [pc, #140]	; (b4d4 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    b446:	4f24      	ldr	r7, [pc, #144]	; (b4d8 <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    b448:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    b44c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    b44e:	b2db      	uxtb	r3, r3
    b450:	e007      	b.n	b462 <uart1_status_isr+0x10a>
			avail = UART1_S1;
    b452:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b454:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    b456:	5cfa      	ldrb	r2, [r7, r3]
    b458:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    b45a:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    b45c:	7d02      	ldrb	r2, [r0, #20]
    b45e:	2a07      	cmp	r2, #7
    b460:	d811      	bhi.n	b486 <uart1_status_isr+0x12e>
			if (tail == head) break;
    b462:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b464:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    b468:	d00e      	beq.n	b488 <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b46a:	428e      	cmp	r6, r1
    b46c:	d9f1      	bls.n	b452 <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    b46e:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    b470:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    b472:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    b476:	d801      	bhi.n	b47c <uart1_status_isr+0x124>
    b478:	460b      	mov	r3, r1
    b47a:	e7ec      	b.n	b456 <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    b47c:	f81c 2003 	ldrb.w	r2, [ip, r3]
    b480:	460b      	mov	r3, r1
    b482:	b2d2      	uxtb	r2, r2
    b484:	e7e9      	b.n	b45a <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    b486:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    b488:	4b05      	ldr	r3, [pc, #20]	; (b4a0 <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    b48a:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    b48e:	791a      	ldrb	r2, [r3, #4]
    b490:	0611      	lsls	r1, r2, #24
    b492:	bf44      	itt	mi
    b494:	227c      	movmi	r2, #124	; 0x7c
    b496:	70da      	strbmi	r2, [r3, #3]
    b498:	e7b2      	b.n	b400 <uart1_status_isr+0xa8>
    b49a:	4694      	mov	ip, r2
    b49c:	e77d      	b.n	b39a <uart1_status_isr+0x42>
    b49e:	bf00      	nop
    b4a0:	4006b000 	.word	0x4006b000
    b4a4:	1fffc3fc 	.word	0x1fffc3fc
    b4a8:	1fffc404 	.word	0x1fffc404
    b4ac:	1fff8800 	.word	0x1fff8800
    b4b0:	1fffc3bc 	.word	0x1fffc3bc
    b4b4:	1fffc400 	.word	0x1fffc400
    b4b8:	1fffc3b8 	.word	0x1fffc3b8
    b4bc:	1fff87f8 	.word	0x1fff87f8
    b4c0:	1fffc408 	.word	0x1fffc408
    b4c4:	1fffc40c 	.word	0x1fffc40c
    b4c8:	1fffc438 	.word	0x1fffc438
    b4cc:	1fff8808 	.word	0x1fff8808
    b4d0:	1fffc440 	.word	0x1fffc440
    b4d4:	1fffc43c 	.word	0x1fffc43c
    b4d8:	1fffc410 	.word	0x1fffc410

0000b4dc <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b4dc:	4b09      	ldr	r3, [pc, #36]	; (b504 <serial2_add_memory_for_read+0x28>)
{
    b4de:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b4e0:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b4e2:	b160      	cbz	r0, b4fe <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    b4e4:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    b4e8:	4b07      	ldr	r3, [pc, #28]	; (b508 <serial2_add_memory_for_read+0x2c>)
    b4ea:	4808      	ldr	r0, [pc, #32]	; (b50c <serial2_add_memory_for_read+0x30>)
    b4ec:	f101 021a 	add.w	r2, r1, #26
    b4f0:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b4f2:	4b07      	ldr	r3, [pc, #28]	; (b510 <serial2_add_memory_for_read+0x34>)
    b4f4:	6004      	str	r4, [r0, #0]
    b4f6:	3128      	adds	r1, #40	; 0x28
}
    b4f8:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b4fa:	6019      	str	r1, [r3, #0]
}
    b4fc:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    b4fe:	2440      	movs	r4, #64	; 0x40
    b500:	e7f2      	b.n	b4e8 <serial2_add_memory_for_read+0xc>
    b502:	bf00      	nop
    b504:	1fffc400 	.word	0x1fffc400
    b508:	1fff87fc 	.word	0x1fff87fc
    b50c:	1fff8800 	.word	0x1fff8800
    b510:	1fff87f8 	.word	0x1fff87f8

0000b514 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    b514:	4b05      	ldr	r3, [pc, #20]	; (b52c <serial2_add_memory_for_write+0x18>)
    b516:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b518:	b118      	cbz	r0, b522 <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    b51a:	4b05      	ldr	r3, [pc, #20]	; (b530 <serial2_add_memory_for_write+0x1c>)
    b51c:	3128      	adds	r1, #40	; 0x28
    b51e:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    b520:	4770      	bx	lr
    b522:	4b03      	ldr	r3, [pc, #12]	; (b530 <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    b524:	2128      	movs	r1, #40	; 0x28
    b526:	6019      	str	r1, [r3, #0]
}
    b528:	4770      	bx	lr
    b52a:	bf00      	nop
    b52c:	1fffc43c 	.word	0x1fffc43c
    b530:	1fff8808 	.word	0x1fff8808

0000b534 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    b534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    b538:	4b31      	ldr	r3, [pc, #196]	; (b600 <serial3_putchar.part.0+0xcc>)
    b53a:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    b53c:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    b53e:	b10b      	cbz	r3, b544 <serial3_putchar.part.0+0x10>
    b540:	2201      	movs	r2, #1
    b542:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    b544:	f8df 90bc 	ldr.w	r9, [pc, #188]	; b604 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    b548:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b608 <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    b54c:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    b550:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    b554:	4d2d      	ldr	r5, [pc, #180]	; (b60c <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    b556:	3401      	adds	r4, #1
    b558:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    b55a:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    b55c:	d32a      	bcc.n	b5b4 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    b55e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    b562:	2b00      	cmp	r3, #0
    b564:	d13e      	bne.n	b5e4 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    b566:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    b568:	4e29      	ldr	r6, [pc, #164]	; (b610 <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    b56a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; b614 <serial3_putchar.part.0+0xe0>
    b56e:	e005      	b.n	b57c <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    b570:	7933      	ldrb	r3, [r6, #4]
    b572:	061b      	lsls	r3, r3, #24
    b574:	d423      	bmi.n	b5be <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    b576:	782b      	ldrb	r3, [r5, #0]
    b578:	42a3      	cmp	r3, r4
    b57a:	d10a      	bne.n	b592 <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    b57c:	f7ff f806 	bl	a58c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    b580:	2840      	cmp	r0, #64	; 0x40
    b582:	ddf5      	ble.n	b570 <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    b584:	28ff      	cmp	r0, #255	; 0xff
    b586:	ddf6      	ble.n	b576 <serial3_putchar.part.0+0x42>
			yield(); // wait
    b588:	f001 f9c8 	bl	c91c <yield>
	while (tx_buffer_tail == head) {
    b58c:	782b      	ldrb	r3, [r5, #0]
    b58e:	42a3      	cmp	r3, r4
    b590:	d0f4      	beq.n	b57c <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    b592:	2c27      	cmp	r4, #39	; 0x27
    b594:	d929      	bls.n	b5ea <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    b596:	4b20      	ldr	r3, [pc, #128]	; (b618 <serial3_putchar.part.0+0xe4>)
    b598:	3c28      	subs	r4, #40	; 0x28
    b59a:	681b      	ldr	r3, [r3, #0]
    b59c:	b2ff      	uxtb	r7, r7
    b59e:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    b5a0:	4a1e      	ldr	r2, [pc, #120]	; (b61c <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    b5a2:	4b1b      	ldr	r3, [pc, #108]	; (b610 <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    b5a4:	2101      	movs	r1, #1
    b5a6:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    b5a8:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    b5aa:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    b5ae:	70da      	strb	r2, [r3, #3]
}
    b5b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    b5b4:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    b5b6:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    b5ba:	d0d5      	beq.n	b568 <serial3_putchar.part.0+0x34>
    b5bc:	e7e9      	b.n	b592 <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    b5be:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b5c0:	f8d8 1000 	ldr.w	r1, [r8]
    b5c4:	1c5a      	adds	r2, r3, #1
    b5c6:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    b5c8:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b5ca:	d203      	bcs.n	b5d4 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    b5cc:	2a27      	cmp	r2, #39	; 0x27
    b5ce:	d810      	bhi.n	b5f2 <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    b5d0:	b2d1      	uxtb	r1, r2
    b5d2:	e001      	b.n	b5d8 <serial3_putchar.part.0+0xa4>
    b5d4:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b5d6:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    b5d8:	f81b 3002 	ldrb.w	r3, [fp, r2]
    b5dc:	b2db      	uxtb	r3, r3
				UART2_D = n;
    b5de:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    b5e0:	7029      	strb	r1, [r5, #0]
    b5e2:	e7c8      	b.n	b576 <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    b5e4:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    b5e8:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    b5ea:	4b0a      	ldr	r3, [pc, #40]	; (b614 <serial3_putchar.part.0+0xe0>)
    b5ec:	b2ff      	uxtb	r7, r7
    b5ee:	551f      	strb	r7, [r3, r4]
    b5f0:	e7d6      	b.n	b5a0 <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    b5f2:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b5f4:	4a08      	ldr	r2, [pc, #32]	; (b618 <serial3_putchar.part.0+0xe4>)
    b5f6:	3b27      	subs	r3, #39	; 0x27
    b5f8:	6812      	ldr	r2, [r2, #0]
    b5fa:	5cd3      	ldrb	r3, [r2, r3]
    b5fc:	b2db      	uxtb	r3, r3
    b5fe:	e7ee      	b.n	b5de <serial3_putchar.part.0+0xaa>
    b600:	1fffc494 	.word	0x1fffc494
    b604:	1fffc4c4 	.word	0x1fffc4c4
    b608:	1fff881c 	.word	0x1fff881c
    b60c:	1fffc4cc 	.word	0x1fffc4cc
    b610:	4006c000 	.word	0x4006c000
    b614:	1fffc49c 	.word	0x1fffc49c
    b618:	1fffc4c8 	.word	0x1fffc4c8
    b61c:	1fffc498 	.word	0x1fffc498

0000b620 <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b620:	4a1d      	ldr	r2, [pc, #116]	; (b698 <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    b622:	491e      	ldr	r1, [pc, #120]	; (b69c <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b624:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    b626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b62a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    b62e:	4d1c      	ldr	r5, [pc, #112]	; (b6a0 <serial3_begin+0x80>)
	rx_buffer_head = 0;
    b630:	f8df 8070 	ldr.w	r8, [pc, #112]	; b6a4 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    b634:	f8df 9070 	ldr.w	r9, [pc, #112]	; b6a8 <serial3_begin+0x88>
	tx_buffer_head = 0;
    b638:	4f1c      	ldr	r7, [pc, #112]	; (b6ac <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    b63a:	4e1d      	ldr	r6, [pc, #116]	; (b6b0 <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b63c:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    b63e:	2300      	movs	r3, #0
    b640:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    b644:	2820      	cmp	r0, #32
    b646:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    b64a:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    b64c:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    b64e:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    b650:	f240 3513 	movw	r5, #787	; 0x313
    b654:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    b656:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    b65a:	bf38      	it	cc
    b65c:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    b65e:	f44f 7551 	mov.w	r5, #836	; 0x344
    b662:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    b664:	f3c0 3144 	ubfx	r1, r0, #13, #5
    b668:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    b66a:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b66e:	4c11      	ldr	r4, [pc, #68]	; (b6b4 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    b670:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    b674:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    b678:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    b67a:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b67c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    b680:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    b682:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    b684:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b686:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b68c:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b690:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    b694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b698:	40048000 	.word	0x40048000
    b69c:	4004c000 	.word	0x4004c000
    b6a0:	1fffc498 	.word	0x1fffc498
    b6a4:	1fffc488 	.word	0x1fffc488
    b6a8:	1fffc490 	.word	0x1fffc490
    b6ac:	1fffc4c4 	.word	0x1fffc4c4
    b6b0:	1fffc4cc 	.word	0x1fffc4cc
    b6b4:	e000e400 	.word	0xe000e400

0000b6b8 <serial3_format>:
	c = UART2_C1;
    b6b8:	4b21      	ldr	r3, [pc, #132]	; (b740 <serial3_format+0x88>)
	UART2_C1 = c;
    b6ba:	4921      	ldr	r1, [pc, #132]	; (b740 <serial3_format+0x88>)
	c = UART2_C1;
    b6bc:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    b6be:	f000 0203 	and.w	r2, r0, #3
    b6c2:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    b6c6:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b6c8:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b6ca:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b6ce:	bf48      	it	mi
    b6d0:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b6d4:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    b6d6:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b6d8:	d103      	bne.n	b6e2 <serial3_format+0x2a>
    b6da:	798b      	ldrb	r3, [r1, #6]
    b6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b6e0:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    b6e2:	4b17      	ldr	r3, [pc, #92]	; (b740 <serial3_format+0x88>)
	UART2_S2 = c;
    b6e4:	4a16      	ldr	r2, [pc, #88]	; (b740 <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    b6e6:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    b6e8:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    b6ea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    b6ee:	bf48      	it	mi
    b6f0:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    b6f4:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    b6f6:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    b6f8:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    b6fa:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    b6fe:	4a10      	ldr	r2, [pc, #64]	; (b740 <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    b700:	bf48      	it	mi
    b702:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b706:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    b70a:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b70c:	d010      	beq.n	b730 <serial3_format+0x78>
		c = UART2_C1;
    b70e:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b710:	490c      	ldr	r1, [pc, #48]	; (b744 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    b712:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    b716:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b718:	7809      	ldrb	r1, [r1, #0]
    b71a:	4b0b      	ldr	r3, [pc, #44]	; (b748 <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b71c:	4a0b      	ldr	r2, [pc, #44]	; (b74c <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b71e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b722:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b726:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b728:	4909      	ldr	r1, [pc, #36]	; (b750 <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b72a:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b72c:	6011      	str	r1, [r2, #0]
    b72e:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    b730:	4b06      	ldr	r3, [pc, #24]	; (b74c <serial3_format+0x94>)
    b732:	4a07      	ldr	r2, [pc, #28]	; (b750 <serial3_format+0x98>)
    b734:	6819      	ldr	r1, [r3, #0]
    b736:	4291      	cmp	r1, r2
    b738:	bf08      	it	eq
    b73a:	6018      	streq	r0, [r3, #0]
}
    b73c:	4770      	bx	lr
    b73e:	bf00      	nop
    b740:	4006c000 	.word	0x4006c000
    b744:	1fff8820 	.word	0x1fff8820
    b748:	00015b40 	.word	0x00015b40
    b74c:	1fffc494 	.word	0x1fffc494
    b750:	42d800d4 	.word	0x42d800d4

0000b754 <serial3_end>:
{
    b754:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b756:	4b13      	ldr	r3, [pc, #76]	; (b7a4 <serial3_end+0x50>)
    b758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b75a:	04db      	lsls	r3, r3, #19
    b75c:	d520      	bpl.n	b7a0 <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    b75e:	4c12      	ldr	r4, [pc, #72]	; (b7a8 <serial3_end+0x54>)
    b760:	7823      	ldrb	r3, [r4, #0]
    b762:	b123      	cbz	r3, b76e <serial3_end+0x1a>
    b764:	f001 f8da 	bl	c91c <yield>
    b768:	7823      	ldrb	r3, [r4, #0]
    b76a:	2b00      	cmp	r3, #0
    b76c:	d1fa      	bne.n	b764 <serial3_end+0x10>
	UART2_C2 = 0;
    b76e:	4a0f      	ldr	r2, [pc, #60]	; (b7ac <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b770:	490f      	ldr	r1, [pc, #60]	; (b7b0 <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    b772:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    b776:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b778:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    b77c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    b780:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    b784:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b786:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b788:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    b78a:	490a      	ldr	r1, [pc, #40]	; (b7b4 <serial3_end+0x60>)
	rx_buffer_head = 0;
    b78c:	4c0a      	ldr	r4, [pc, #40]	; (b7b8 <serial3_end+0x64>)
	rx_buffer_tail = 0;
    b78e:	480b      	ldr	r0, [pc, #44]	; (b7bc <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    b790:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    b792:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    b794:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    b796:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    b798:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    b79a:	b109      	cbz	r1, b7a0 <serial3_end+0x4c>
    b79c:	2301      	movs	r3, #1
    b79e:	700b      	strb	r3, [r1, #0]
}
    b7a0:	bd38      	pop	{r3, r4, r5, pc}
    b7a2:	bf00      	nop
    b7a4:	40048000 	.word	0x40048000
    b7a8:	1fffc498 	.word	0x1fffc498
    b7ac:	4006c000 	.word	0x4006c000
    b7b0:	4004c000 	.word	0x4004c000
    b7b4:	1fffc444 	.word	0x1fffc444
    b7b8:	1fffc488 	.word	0x1fffc488
    b7bc:	1fffc490 	.word	0x1fffc490

0000b7c0 <serial3_set_transmit_pin>:
	while (transmitting) ;
    b7c0:	4a0a      	ldr	r2, [pc, #40]	; (b7ec <serial3_set_transmit_pin+0x2c>)
{
    b7c2:	b538      	push	{r3, r4, r5, lr}
    b7c4:	4605      	mov	r5, r0
	while (transmitting) ;
    b7c6:	7813      	ldrb	r3, [r2, #0]
    b7c8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    b7cc:	2b00      	cmp	r3, #0
    b7ce:	d1fa      	bne.n	b7c6 <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    b7d0:	2101      	movs	r1, #1
    b7d2:	4628      	mov	r0, r5
    b7d4:	f7ff f95e 	bl	aa94 <pinMode>
	digitalWrite(pin, LOW);
    b7d8:	4621      	mov	r1, r4
    b7da:	4628      	mov	r0, r5
    b7dc:	f7ff f926 	bl	aa2c <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    b7e0:	4a03      	ldr	r2, [pc, #12]	; (b7f0 <serial3_set_transmit_pin+0x30>)
    b7e2:	4b04      	ldr	r3, [pc, #16]	; (b7f4 <serial3_set_transmit_pin+0x34>)
    b7e4:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    b7e8:	601a      	str	r2, [r3, #0]
}
    b7ea:	bd38      	pop	{r3, r4, r5, pc}
    b7ec:	1fffc498 	.word	0x1fffc498
    b7f0:	00015b40 	.word	0x00015b40
    b7f4:	1fffc494 	.word	0x1fffc494

0000b7f8 <serial3_set_tx>:
	if (opendrain) pin |= 128;
    b7f8:	b109      	cbz	r1, b7fe <serial3_set_tx+0x6>
    b7fa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    b7fe:	4a11      	ldr	r2, [pc, #68]	; (b844 <serial3_set_tx+0x4c>)
    b800:	7813      	ldrb	r3, [r2, #0]
    b802:	4283      	cmp	r3, r0
    b804:	d016      	beq.n	b834 <serial3_set_tx+0x3c>
{
    b806:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    b808:	4c0f      	ldr	r4, [pc, #60]	; (b848 <serial3_set_tx+0x50>)
    b80a:	6b64      	ldr	r4, [r4, #52]	; 0x34
    b80c:	04e4      	lsls	r4, r4, #19
    b80e:	d50e      	bpl.n	b82e <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    b810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b814:	2b08      	cmp	r3, #8
    b816:	d102      	bne.n	b81e <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    b818:	4b0c      	ldr	r3, [pc, #48]	; (b84c <serial3_set_tx+0x54>)
    b81a:	2400      	movs	r4, #0
    b81c:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b81e:	2900      	cmp	r1, #0
		switch (pin & 127) {
    b820:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b824:	bf14      	ite	ne
    b826:	2160      	movne	r1, #96	; 0x60
    b828:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    b82a:	2b08      	cmp	r3, #8
    b82c:	d003      	beq.n	b836 <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    b82e:	7010      	strb	r0, [r2, #0]
}
    b830:	bc10      	pop	{r4}
    b832:	4770      	bx	lr
    b834:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    b836:	4b05      	ldr	r3, [pc, #20]	; (b84c <serial3_set_tx+0x54>)
    b838:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    b83c:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    b83e:	7010      	strb	r0, [r2, #0]
}
    b840:	bc10      	pop	{r4}
    b842:	4770      	bx	lr
    b844:	1fff8820 	.word	0x1fff8820
    b848:	40048000 	.word	0x40048000
    b84c:	4004c000 	.word	0x4004c000

0000b850 <serial3_set_rx>:
}
    b850:	4770      	bx	lr
    b852:	bf00      	nop

0000b854 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b854:	4b0d      	ldr	r3, [pc, #52]	; (b88c <serial3_set_rts+0x38>)
    b856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b858:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b85c:	d013      	beq.n	b886 <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    b85e:	2821      	cmp	r0, #33	; 0x21
    b860:	d903      	bls.n	b86a <serial3_set_rts+0x16>
		rts_pin = NULL;
    b862:	4b0b      	ldr	r3, [pc, #44]	; (b890 <serial3_set_rts+0x3c>)
    b864:	2000      	movs	r0, #0
    b866:	6018      	str	r0, [r3, #0]
		return 0;
    b868:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    b86a:	4b0a      	ldr	r3, [pc, #40]	; (b894 <serial3_set_rts+0x40>)
{
    b86c:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    b86e:	4c08      	ldr	r4, [pc, #32]	; (b890 <serial3_set_rts+0x3c>)
    b870:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    b874:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    b876:	2101      	movs	r1, #1
    b878:	f7ff f90c 	bl	aa94 <pinMode>
		rts_assert();
    b87c:	6823      	ldr	r3, [r4, #0]
    b87e:	2200      	movs	r2, #0
    b880:	701a      	strb	r2, [r3, #0]
	return 1;
    b882:	2001      	movs	r0, #1
}
    b884:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b886:	4618      	mov	r0, r3
}
    b888:	4770      	bx	lr
    b88a:	bf00      	nop
    b88c:	40048000 	.word	0x40048000
    b890:	1fffc444 	.word	0x1fffc444
    b894:	00015b40 	.word	0x00015b40

0000b898 <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b898:	4b0c      	ldr	r3, [pc, #48]	; (b8cc <serial3_set_cts+0x34>)
    b89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b89c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b8a0:	d012      	beq.n	b8c8 <serial3_set_cts+0x30>
	if (pin == 14) {
    b8a2:	280e      	cmp	r0, #14
    b8a4:	d109      	bne.n	b8ba <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b8a6:	4b0a      	ldr	r3, [pc, #40]	; (b8d0 <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b8a8:	4a0a      	ldr	r2, [pc, #40]	; (b8d4 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b8aa:	f240 3102 	movw	r1, #770	; 0x302
    b8ae:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b8b0:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    b8b2:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b8b4:	4303      	orrs	r3, r0
    b8b6:	7353      	strb	r3, [r2, #13]
	return 1;
    b8b8:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b8ba:	4a06      	ldr	r2, [pc, #24]	; (b8d4 <serial3_set_cts+0x3c>)
    b8bc:	7b53      	ldrb	r3, [r2, #13]
    b8be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    b8c2:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b8c4:	7353      	strb	r3, [r2, #13]
		return 0;
    b8c6:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b8c8:	4618      	mov	r0, r3
}
    b8ca:	4770      	bx	lr
    b8cc:	40048000 	.word	0x40048000
    b8d0:	4004c000 	.word	0x4004c000
    b8d4:	4006c000 	.word	0x4006c000

0000b8d8 <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b8d8:	4b03      	ldr	r3, [pc, #12]	; (b8e8 <serial3_putchar+0x10>)
    b8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b8dc:	04db      	lsls	r3, r3, #19
    b8de:	d501      	bpl.n	b8e4 <serial3_putchar+0xc>
    b8e0:	f7ff be28 	b.w	b534 <serial3_putchar.part.0>
}
    b8e4:	4770      	bx	lr
    b8e6:	bf00      	nop
    b8e8:	40048000 	.word	0x40048000

0000b8ec <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    b8ec:	b179      	cbz	r1, b90e <serial3_write+0x22>
{
    b8ee:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b8f0:	4e07      	ldr	r6, [pc, #28]	; (b910 <serial3_write+0x24>)
    b8f2:	4604      	mov	r4, r0
    b8f4:	1845      	adds	r5, r0, r1
    b8f6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    b8f8:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    b8fa:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b8fe:	d503      	bpl.n	b908 <serial3_write+0x1c>
    b900:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    b904:	f7ff fe16 	bl	b534 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    b908:	42ac      	cmp	r4, r5
    b90a:	d1f4      	bne.n	b8f6 <serial3_write+0xa>
}
    b90c:	bd70      	pop	{r4, r5, r6, pc}
    b90e:	4770      	bx	lr
    b910:	40048000 	.word	0x40048000

0000b914 <serial3_flush>:

void serial3_flush(void)
{
    b914:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    b916:	4c04      	ldr	r4, [pc, #16]	; (b928 <serial3_flush+0x14>)
    b918:	7823      	ldrb	r3, [r4, #0]
    b91a:	b123      	cbz	r3, b926 <serial3_flush+0x12>
    b91c:	f000 fffe 	bl	c91c <yield>
    b920:	7823      	ldrb	r3, [r4, #0]
    b922:	2b00      	cmp	r3, #0
    b924:	d1fa      	bne.n	b91c <serial3_flush+0x8>
}
    b926:	bd10      	pop	{r4, pc}
    b928:	1fffc498 	.word	0x1fffc498

0000b92c <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    b92c:	4a08      	ldr	r2, [pc, #32]	; (b950 <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    b92e:	4b09      	ldr	r3, [pc, #36]	; (b954 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    b930:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    b932:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b934:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    b936:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    b938:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b93a:	d202      	bcs.n	b942 <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    b93c:	3b01      	subs	r3, #1
    b93e:	1a18      	subs	r0, r3, r0
}
    b940:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b942:	4a05      	ldr	r2, [pc, #20]	; (b958 <serial3_write_buffer_free+0x2c>)
    b944:	6812      	ldr	r2, [r2, #0]
    b946:	3a01      	subs	r2, #1
    b948:	4413      	add	r3, r2
    b94a:	1a18      	subs	r0, r3, r0
    b94c:	4770      	bx	lr
    b94e:	bf00      	nop
    b950:	1fffc4c4 	.word	0x1fffc4c4
    b954:	1fffc4cc 	.word	0x1fffc4cc
    b958:	1fff881c 	.word	0x1fff881c

0000b95c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b95c:	4a06      	ldr	r2, [pc, #24]	; (b978 <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    b95e:	4b07      	ldr	r3, [pc, #28]	; (b97c <serial3_available+0x20>)
	head = rx_buffer_head;
    b960:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b962:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    b964:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    b966:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    b968:	bf3c      	itt	cc
    b96a:	4a05      	ldrcc	r2, [pc, #20]	; (b980 <serial3_available+0x24>)
    b96c:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    b96e:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    b970:	bf38      	it	cc
    b972:	189b      	addcc	r3, r3, r2
    b974:	1a18      	subs	r0, r3, r0
}
    b976:	4770      	bx	lr
    b978:	1fffc488 	.word	0x1fffc488
    b97c:	1fffc490 	.word	0x1fffc490
    b980:	1fff8818 	.word	0x1fff8818

0000b984 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    b984:	4b1b      	ldr	r3, [pc, #108]	; (b9f4 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    b986:	491c      	ldr	r1, [pc, #112]	; (b9f8 <serial3_getchar+0x74>)
	head = rx_buffer_head;
    b988:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    b98a:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    b98c:	429a      	cmp	r2, r3
    b98e:	d02e      	beq.n	b9ee <serial3_getchar+0x6a>
{
    b990:	b510      	push	{r4, lr}
    b992:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b996:	4a19      	ldr	r2, [pc, #100]	; (b9fc <serial3_getchar+0x78>)
    b998:	b2d8      	uxtb	r0, r3
    b99a:	6812      	ldr	r2, [r2, #0]
    b99c:	1c43      	adds	r3, r0, #1
    b99e:	429a      	cmp	r2, r3
    b9a0:	d919      	bls.n	b9d6 <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b9a2:	2b3f      	cmp	r3, #63	; 0x3f
    b9a4:	d81b      	bhi.n	b9de <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    b9a6:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    b9aa:	4815      	ldr	r0, [pc, #84]	; (ba00 <serial3_getchar+0x7c>)
    b9ac:	5cc0      	ldrb	r0, [r0, r3]
    b9ae:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    b9b0:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    b9b4:	4913      	ldr	r1, [pc, #76]	; (ba04 <serial3_getchar+0x80>)
    b9b6:	6809      	ldr	r1, [r1, #0]
    b9b8:	b161      	cbz	r1, b9d4 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    b9ba:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    b9bc:	bf3c      	itt	cc
    b9be:	4472      	addcc	r2, lr
    b9c0:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b9c2:	4a11      	ldr	r2, [pc, #68]	; (ba08 <serial3_getchar+0x84>)
    b9c4:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    b9c6:	bf28      	it	cs
    b9c8:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b9cc:	429a      	cmp	r2, r3
    b9ce:	d301      	bcc.n	b9d4 <serial3_getchar+0x50>
    b9d0:	2300      	movs	r3, #0
    b9d2:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    b9d4:	bd10      	pop	{r4, pc}
    b9d6:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b9da:	4663      	mov	r3, ip
    b9dc:	e7e5      	b.n	b9aa <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b9de:	4c0b      	ldr	r4, [pc, #44]	; (ba0c <serial3_getchar+0x88>)
    b9e0:	383f      	subs	r0, #63	; 0x3f
    b9e2:	6824      	ldr	r4, [r4, #0]
    b9e4:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    b9e6:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b9ea:	b2c0      	uxtb	r0, r0
    b9ec:	e7e0      	b.n	b9b0 <serial3_getchar+0x2c>
	if (head == tail) return -1;
    b9ee:	f04f 30ff 	mov.w	r0, #4294967295
}
    b9f2:	4770      	bx	lr
    b9f4:	1fffc488 	.word	0x1fffc488
    b9f8:	1fffc490 	.word	0x1fffc490
    b9fc:	1fff8818 	.word	0x1fff8818
    ba00:	1fffc448 	.word	0x1fffc448
    ba04:	1fffc444 	.word	0x1fffc444
    ba08:	1fff8814 	.word	0x1fff8814
    ba0c:	1fffc48c 	.word	0x1fffc48c

0000ba10 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ba10:	4a0d      	ldr	r2, [pc, #52]	; (ba48 <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    ba12:	4b0e      	ldr	r3, [pc, #56]	; (ba4c <serial3_peek+0x3c>)
	head = rx_buffer_head;
    ba14:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    ba16:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    ba18:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    ba1a:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    ba1c:	d011      	beq.n	ba42 <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ba1e:	490c      	ldr	r1, [pc, #48]	; (ba50 <serial3_peek+0x40>)
    ba20:	6809      	ldr	r1, [r1, #0]
    ba22:	1c53      	adds	r3, r2, #1
    ba24:	4299      	cmp	r1, r3
    ba26:	d907      	bls.n	ba38 <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    ba28:	2b3f      	cmp	r3, #63	; 0x3f
    ba2a:	d906      	bls.n	ba3a <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    ba2c:	4b09      	ldr	r3, [pc, #36]	; (ba54 <serial3_peek+0x44>)
    ba2e:	3a3f      	subs	r2, #63	; 0x3f
    ba30:	681b      	ldr	r3, [r3, #0]
    ba32:	5c98      	ldrb	r0, [r3, r2]
    ba34:	b2c0      	uxtb	r0, r0
    ba36:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ba38:	2300      	movs	r3, #0
		return rx_buffer[tail];
    ba3a:	4a07      	ldr	r2, [pc, #28]	; (ba58 <serial3_peek+0x48>)
    ba3c:	5cd0      	ldrb	r0, [r2, r3]
    ba3e:	b2c0      	uxtb	r0, r0
    ba40:	4770      	bx	lr
	if (head == tail) return -1;
    ba42:	f04f 30ff 	mov.w	r0, #4294967295
}
    ba46:	4770      	bx	lr
    ba48:	1fffc488 	.word	0x1fffc488
    ba4c:	1fffc490 	.word	0x1fffc490
    ba50:	1fff8818 	.word	0x1fff8818
    ba54:	1fffc48c 	.word	0x1fffc48c
    ba58:	1fffc448 	.word	0x1fffc448

0000ba5c <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    ba5c:	4b05      	ldr	r3, [pc, #20]	; (ba74 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    ba5e:	4a06      	ldr	r2, [pc, #24]	; (ba78 <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    ba60:	781b      	ldrb	r3, [r3, #0]
    ba62:	4906      	ldr	r1, [pc, #24]	; (ba7c <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    ba64:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    ba66:	b2db      	uxtb	r3, r3
    ba68:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    ba6a:	b10a      	cbz	r2, ba70 <serial3_clear+0x14>
    ba6c:	2300      	movs	r3, #0
    ba6e:	7013      	strb	r3, [r2, #0]
}
    ba70:	4770      	bx	lr
    ba72:	bf00      	nop
    ba74:	1fffc490 	.word	0x1fffc490
    ba78:	1fffc444 	.word	0x1fffc444
    ba7c:	1fffc488 	.word	0x1fffc488

0000ba80 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    ba80:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    ba82:	4b3a      	ldr	r3, [pc, #232]	; (bb6c <uart2_status_isr+0xec>)
    ba84:	791a      	ldrb	r2, [r3, #4]
    ba86:	0695      	lsls	r5, r2, #26
    ba88:	d524      	bpl.n	bad4 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    ba8a:	4d39      	ldr	r5, [pc, #228]	; (bb70 <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    ba8c:	4939      	ldr	r1, [pc, #228]	; (bb74 <uart2_status_isr+0xf4>)
			n = UART2_D;
    ba8e:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    ba90:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    ba92:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    ba94:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    ba96:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    ba98:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    ba9a:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    ba9c:	d831      	bhi.n	bb02 <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    ba9e:	4b36      	ldr	r3, [pc, #216]	; (bb78 <uart2_status_isr+0xf8>)
    baa0:	781a      	ldrb	r2, [r3, #0]
    baa2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    baa6:	b122      	cbz	r2, bab2 <uart2_status_isr+0x32>
    baa8:	2200      	movs	r2, #0
    baaa:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    baac:	4933      	ldr	r1, [pc, #204]	; (bb7c <uart2_status_isr+0xfc>)
    baae:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    bab0:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    bab2:	4933      	ldr	r1, [pc, #204]	; (bb80 <uart2_status_isr+0x100>)
    bab4:	6809      	ldr	r1, [r1, #0]
    bab6:	b169      	cbz	r1, bad4 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    bab8:	4a32      	ldr	r2, [pc, #200]	; (bb84 <uart2_status_isr+0x104>)
    baba:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    babc:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    babe:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    bac0:	bf8a      	itet	hi
    bac2:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    bac4:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    bac6:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    bac8:	4a2f      	ldr	r2, [pc, #188]	; (bb88 <uart2_status_isr+0x108>)
    baca:	6812      	ldr	r2, [r2, #0]
    bacc:	429a      	cmp	r2, r3
    bace:	bf9c      	itt	ls
    bad0:	2301      	movls	r3, #1
    bad2:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    bad4:	4a25      	ldr	r2, [pc, #148]	; (bb6c <uart2_status_isr+0xec>)
    bad6:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    bad8:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    bada:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    badc:	d41e      	bmi.n	bb1c <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    bade:	064a      	lsls	r2, r1, #25
    bae0:	d50d      	bpl.n	bafe <uart2_status_isr+0x7e>
    bae2:	4b22      	ldr	r3, [pc, #136]	; (bb6c <uart2_status_isr+0xec>)
    bae4:	791b      	ldrb	r3, [r3, #4]
    bae6:	065b      	lsls	r3, r3, #25
    bae8:	d509      	bpl.n	bafe <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    baea:	4b28      	ldr	r3, [pc, #160]	; (bb8c <uart2_status_isr+0x10c>)
		transmitting = 0;
    baec:	4928      	ldr	r1, [pc, #160]	; (bb90 <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    baee:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    baf0:	2200      	movs	r2, #0
    baf2:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    baf4:	b103      	cbz	r3, baf8 <uart2_status_isr+0x78>
    baf6:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    baf8:	4b1c      	ldr	r3, [pc, #112]	; (bb6c <uart2_status_isr+0xec>)
    bafa:	222c      	movs	r2, #44	; 0x2c
    bafc:	70da      	strb	r2, [r3, #3]
	}
}
    bafe:	bc30      	pop	{r4, r5}
    bb00:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    bb02:	491d      	ldr	r1, [pc, #116]	; (bb78 <uart2_status_isr+0xf8>)
    bb04:	7809      	ldrb	r1, [r1, #0]
    bb06:	4299      	cmp	r1, r3
    bb08:	d0d3      	beq.n	bab2 <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    bb0a:	2b3f      	cmp	r3, #63	; 0x3f
    bb0c:	d92c      	bls.n	bb68 <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    bb0e:	4921      	ldr	r1, [pc, #132]	; (bb94 <uart2_status_isr+0x114>)
    bb10:	3a3f      	subs	r2, #63	; 0x3f
    bb12:	6809      	ldr	r1, [r1, #0]
    bb14:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    bb16:	b2da      	uxtb	r2, r3
    bb18:	702a      	strb	r2, [r5, #0]
    bb1a:	e7ca      	b.n	bab2 <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    bb1c:	7913      	ldrb	r3, [r2, #4]
    bb1e:	0618      	lsls	r0, r3, #24
    bb20:	d5dd      	bpl.n	bade <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    bb22:	4b1d      	ldr	r3, [pc, #116]	; (bb98 <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    bb24:	4817      	ldr	r0, [pc, #92]	; (bb84 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    bb26:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    bb28:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    bb2a:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    bb2c:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    bb2e:	d008      	beq.n	bb42 <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bb30:	4a1a      	ldr	r2, [pc, #104]	; (bb9c <uart2_status_isr+0x11c>)
    bb32:	6812      	ldr	r2, [r2, #0]
    bb34:	1c63      	adds	r3, r4, #1
    bb36:	429a      	cmp	r2, r3
    bb38:	d906      	bls.n	bb48 <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    bb3a:	2b27      	cmp	r3, #39	; 0x27
    bb3c:	d80d      	bhi.n	bb5a <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    bb3e:	b2da      	uxtb	r2, r3
    bb40:	e004      	b.n	bb4c <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    bb42:	236c      	movs	r3, #108	; 0x6c
    bb44:	70d3      	strb	r3, [r2, #3]
    bb46:	e7ca      	b.n	bade <uart2_status_isr+0x5e>
    bb48:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bb4a:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    bb4c:	4c14      	ldr	r4, [pc, #80]	; (bba0 <uart2_status_isr+0x120>)
    bb4e:	5ce3      	ldrb	r3, [r4, r3]
    bb50:	b2db      	uxtb	r3, r3
			UART2_D = n;
    bb52:	4c06      	ldr	r4, [pc, #24]	; (bb6c <uart2_status_isr+0xec>)
    bb54:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    bb56:	7002      	strb	r2, [r0, #0]
    bb58:	e7c1      	b.n	bade <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    bb5a:	4a12      	ldr	r2, [pc, #72]	; (bba4 <uart2_status_isr+0x124>)
    bb5c:	3c27      	subs	r4, #39	; 0x27
    bb5e:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    bb60:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    bb62:	5d2b      	ldrb	r3, [r5, r4]
    bb64:	b2db      	uxtb	r3, r3
    bb66:	e7f4      	b.n	bb52 <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    bb68:	b2da      	uxtb	r2, r3
    bb6a:	e79f      	b.n	baac <uart2_status_isr+0x2c>
    bb6c:	4006c000 	.word	0x4006c000
    bb70:	1fffc488 	.word	0x1fffc488
    bb74:	1fff8818 	.word	0x1fff8818
    bb78:	1fffc490 	.word	0x1fffc490
    bb7c:	1fffc448 	.word	0x1fffc448
    bb80:	1fffc444 	.word	0x1fffc444
    bb84:	1fffc4cc 	.word	0x1fffc4cc
    bb88:	1fff8810 	.word	0x1fff8810
    bb8c:	1fffc494 	.word	0x1fffc494
    bb90:	1fffc498 	.word	0x1fffc498
    bb94:	1fffc48c 	.word	0x1fffc48c
    bb98:	1fffc4c4 	.word	0x1fffc4c4
    bb9c:	1fff881c 	.word	0x1fff881c
    bba0:	1fffc49c 	.word	0x1fffc49c
    bba4:	1fffc4c8 	.word	0x1fffc4c8

0000bba8 <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    bba8:	4b09      	ldr	r3, [pc, #36]	; (bbd0 <serial3_add_memory_for_read+0x28>)
{
    bbaa:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    bbac:	6018      	str	r0, [r3, #0]
	if (buffer) {
    bbae:	b160      	cbz	r0, bbca <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    bbb0:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    bbb4:	4b07      	ldr	r3, [pc, #28]	; (bbd4 <serial3_add_memory_for_read+0x2c>)
    bbb6:	4808      	ldr	r0, [pc, #32]	; (bbd8 <serial3_add_memory_for_read+0x30>)
    bbb8:	f101 021a 	add.w	r2, r1, #26
    bbbc:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    bbbe:	4b07      	ldr	r3, [pc, #28]	; (bbdc <serial3_add_memory_for_read+0x34>)
    bbc0:	6004      	str	r4, [r0, #0]
    bbc2:	3128      	adds	r1, #40	; 0x28
}
    bbc4:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    bbc6:	6019      	str	r1, [r3, #0]
}
    bbc8:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    bbca:	2440      	movs	r4, #64	; 0x40
    bbcc:	e7f2      	b.n	bbb4 <serial3_add_memory_for_read+0xc>
    bbce:	bf00      	nop
    bbd0:	1fffc48c 	.word	0x1fffc48c
    bbd4:	1fff8814 	.word	0x1fff8814
    bbd8:	1fff8818 	.word	0x1fff8818
    bbdc:	1fff8810 	.word	0x1fff8810

0000bbe0 <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    bbe0:	4b05      	ldr	r3, [pc, #20]	; (bbf8 <serial3_add_memory_for_write+0x18>)
    bbe2:	6018      	str	r0, [r3, #0]
	if (buffer) {
    bbe4:	b118      	cbz	r0, bbee <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    bbe6:	4b05      	ldr	r3, [pc, #20]	; (bbfc <serial3_add_memory_for_write+0x1c>)
    bbe8:	3128      	adds	r1, #40	; 0x28
    bbea:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    bbec:	4770      	bx	lr
    bbee:	4b03      	ldr	r3, [pc, #12]	; (bbfc <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    bbf0:	2128      	movs	r1, #40	; 0x28
    bbf2:	6019      	str	r1, [r3, #0]
}
    bbf4:	4770      	bx	lr
    bbf6:	bf00      	nop
    bbf8:	1fffc4c8 	.word	0x1fffc4c8
    bbfc:	1fff881c 	.word	0x1fff881c

0000bc00 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    bc00:	4770      	bx	lr
    bc02:	bf00      	nop

0000bc04 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    bc04:	4770      	bx	lr
    bc06:	bf00      	nop

0000bc08 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    bc08:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    bc0a:	2b03      	cmp	r3, #3
    bc0c:	d817      	bhi.n	bc3e <usb_rx+0x36>
	__disable_irq();
    bc0e:	b672      	cpsid	i
	ret = rx_first[endpoint];
    bc10:	490c      	ldr	r1, [pc, #48]	; (bc44 <usb_rx+0x3c>)
    bc12:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    bc16:	b180      	cbz	r0, bc3a <usb_rx+0x32>
{
    bc18:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    bc1a:	4c0b      	ldr	r4, [pc, #44]	; (bc48 <usb_rx+0x40>)
    bc1c:	f8b0 c000 	ldrh.w	ip, [r0]
    bc20:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    bc24:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    bc28:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bc2c:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    bc30:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    bc34:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    bc36:	bc10      	pop	{r4}
    bc38:	4770      	bx	lr
	__enable_irq();
    bc3a:	b662      	cpsie	i
}
    bc3c:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    bc3e:	2000      	movs	r0, #0
    bc40:	4770      	bx	lr
    bc42:	bf00      	nop
    bc44:	1fffc560 	.word	0x1fffc560
    bc48:	1fffc5b0 	.word	0x1fffc5b0

0000bc4c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    bc4c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    bc4e:	2803      	cmp	r0, #3
    bc50:	d80b      	bhi.n	bc6a <usb_tx_packet_count+0x1e>
	__disable_irq();
    bc52:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    bc54:	4b07      	ldr	r3, [pc, #28]	; (bc74 <usb_tx_packet_count+0x28>)
    bc56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    bc5a:	b143      	cbz	r3, bc6e <usb_tx_packet_count+0x22>
	uint32_t count=0;
    bc5c:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    bc5e:	685b      	ldr	r3, [r3, #4]
    bc60:	3001      	adds	r0, #1
    bc62:	2b00      	cmp	r3, #0
    bc64:	d1fb      	bne.n	bc5e <usb_tx_packet_count+0x12>
	__enable_irq();
    bc66:	b662      	cpsie	i
	return count;
    bc68:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    bc6a:	2000      	movs	r0, #0
}
    bc6c:	4770      	bx	lr
	uint32_t count=0;
    bc6e:	4618      	mov	r0, r3
    bc70:	e7f9      	b.n	bc66 <usb_tx_packet_count+0x1a>
    bc72:	bf00      	nop
    bc74:	1fffc588 	.word	0x1fffc588

0000bc78 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    bc78:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    bc7a:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    bc7c:	4a19      	ldr	r2, [pc, #100]	; (bce4 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    bc7e:	4c1a      	ldr	r4, [pc, #104]	; (bce8 <usb_rx_memory+0x70>)
	__disable_irq();
    bc80:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    bc82:	f812 1b01 	ldrb.w	r1, [r2], #1
    bc86:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    bc88:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    bc8c:	d505      	bpl.n	bc9a <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    bc8e:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    bc92:	b161      	cbz	r1, bcae <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    bc94:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    bc98:	b1b9      	cbz	r1, bcca <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    bc9a:	3304      	adds	r3, #4
    bc9c:	2b14      	cmp	r3, #20
    bc9e:	d1f0      	bne.n	bc82 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    bca0:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    bca2:	4b12      	ldr	r3, [pc, #72]	; (bcec <usb_rx_memory+0x74>)
    bca4:	2200      	movs	r2, #0
    bca6:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    bca8:	bc10      	pop	{r4}
	usb_free(packet);
    bcaa:	f000 bc9b 	b.w	c5e4 <usb_free>
				usb_rx_memory_needed--;
    bcae:	490f      	ldr	r1, [pc, #60]	; (bcec <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    bcb0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    bcb4:	3008      	adds	r0, #8
    bcb6:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    bcb8:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bcba:	480d      	ldr	r0, [pc, #52]	; (bcf0 <usb_rx_memory+0x78>)
    bcbc:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    bcc0:	3a01      	subs	r2, #1
    bcc2:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    bcc4:	b662      	cpsie	i
}
    bcc6:	bc10      	pop	{r4}
    bcc8:	4770      	bx	lr
				usb_rx_memory_needed--;
    bcca:	4a08      	ldr	r2, [pc, #32]	; (bcec <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bccc:	4909      	ldr	r1, [pc, #36]	; (bcf4 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    bcce:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    bcd2:	3008      	adds	r0, #8
    bcd4:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    bcd6:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bcd8:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    bcdc:	3b01      	subs	r3, #1
    bcde:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    bce0:	b662      	cpsie	i
				return;
    bce2:	e7f0      	b.n	bcc6 <usb_rx_memory+0x4e>
    bce4:	00015ccc 	.word	0x00015ccc
    bce8:	1fff8000 	.word	0x1fff8000
    bcec:	1fffc5b8 	.word	0x1fffc5b8
    bcf0:	00400088 	.word	0x00400088
    bcf4:	004000c8 	.word	0x004000c8

0000bcf8 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    bcf8:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    bcfa:	2a03      	cmp	r2, #3
    bcfc:	d80e      	bhi.n	bd1c <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    bcfe:	4b1c      	ldr	r3, [pc, #112]	; (bd70 <usb_tx+0x78>)
    bd00:	0140      	lsls	r0, r0, #5
    bd02:	f040 0010 	orr.w	r0, r0, #16
{
    bd06:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    bd08:	4403      	add	r3, r0
	__disable_irq();
    bd0a:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    bd0c:	4c19      	ldr	r4, [pc, #100]	; (bd74 <usb_tx+0x7c>)
    bd0e:	5ca0      	ldrb	r0, [r4, r2]
    bd10:	2803      	cmp	r0, #3
    bd12:	d81c      	bhi.n	bd4e <usb_tx+0x56>
    bd14:	e8df f000 	tbb	[pc, r0]
    bd18:	18031513 	.word	0x18031513
    bd1c:	4770      	bx	lr
    bd1e:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    bd20:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bd22:	f013 0f08 	tst.w	r3, #8
    bd26:	8808      	ldrh	r0, [r1, #0]
    bd28:	bf14      	ite	ne
    bd2a:	22c8      	movne	r2, #200	; 0xc8
    bd2c:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    bd2e:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bd30:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    bd34:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bd36:	601a      	str	r2, [r3, #0]
	__enable_irq();
    bd38:	b662      	cpsie	i
}
    bd3a:	bc10      	pop	{r4}
    bd3c:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    bd3e:	2003      	movs	r0, #3
    bd40:	e7ee      	b.n	bd20 <usb_tx+0x28>
		b++;
    bd42:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    bd44:	2002      	movs	r0, #2
		break;
    bd46:	e7eb      	b.n	bd20 <usb_tx+0x28>
		b++;
    bd48:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    bd4a:	2004      	movs	r0, #4
		break;
    bd4c:	e7e8      	b.n	bd20 <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    bd4e:	4b0a      	ldr	r3, [pc, #40]	; (bd78 <usb_tx+0x80>)
    bd50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    bd54:	b138      	cbz	r0, bd66 <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    bd56:	4b09      	ldr	r3, [pc, #36]	; (bd7c <usb_tx+0x84>)
    bd58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    bd5c:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    bd5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    bd62:	b662      	cpsie	i
		return;
    bd64:	e7e9      	b.n	bd3a <usb_tx+0x42>
			tx_first[endpoint] = packet;
    bd66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    bd6a:	4b04      	ldr	r3, [pc, #16]	; (bd7c <usb_tx+0x84>)
    bd6c:	e7f7      	b.n	bd5e <usb_tx+0x66>
    bd6e:	bf00      	nop
    bd70:	1fff8000 	.word	0x1fff8000
    bd74:	1fffc5a8 	.word	0x1fffc5a8
    bd78:	1fffc588 	.word	0x1fffc588
    bd7c:	1fffc598 	.word	0x1fffc598

0000bd80 <usb_isr>:
}



void usb_isr(void)
{
    bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    bd84:	f8df a2cc 	ldr.w	sl, [pc, #716]	; c054 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bd88:	f8df b2cc 	ldr.w	fp, [pc, #716]	; c058 <usb_isr+0x2d8>
{
    bd8c:	b085      	sub	sp, #20
    bd8e:	e03d      	b.n	be0c <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    bd90:	4db2      	ldr	r5, [pc, #712]	; (c05c <usb_isr+0x2dc>)
    bd92:	089e      	lsrs	r6, r3, #2
    bd94:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    bd98:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    bd9a:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    bd9c:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    bda0:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    bda2:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    bda6:	f040 80b8 	bne.w	bf1a <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    bdaa:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    bdae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    bdb2:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    bdb4:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    bdb8:	f000 80a7 	beq.w	bf0a <usb_isr+0x18a>
					packet->index = 0;
    bdbc:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    bdc0:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    bdc4:	4ba6      	ldr	r3, [pc, #664]	; (c060 <usb_isr+0x2e0>)
    bdc6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    bdca:	2a00      	cmp	r2, #0
    bdcc:	f000 8201 	beq.w	c1d2 <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    bdd0:	4ba4      	ldr	r3, [pc, #656]	; (c064 <usb_isr+0x2e4>)
    bdd2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    bdd6:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    bdd8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    bddc:	4ba2      	ldr	r3, [pc, #648]	; (c068 <usb_isr+0x2e8>)
    bdde:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    bde2:	4494      	add	ip, r2
    bde4:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    bde8:	f000 fbdc 	bl	c5a4 <usb_malloc>
					if (packet) {
    bdec:	2800      	cmp	r0, #0
    bdee:	f000 81e9 	beq.w	c1c4 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    bdf2:	f017 0f08 	tst.w	r7, #8
    bdf6:	4b9d      	ldr	r3, [pc, #628]	; (c06c <usb_isr+0x2ec>)
						b->addr = packet->buf;
    bdf8:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    bdfc:	bf18      	it	ne
    bdfe:	465b      	movne	r3, fp
						b->addr = packet->buf;
    be00:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    be02:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    be06:	2308      	movs	r3, #8
    be08:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    be0c:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    be10:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    be12:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    be14:	d51b      	bpl.n	be4e <usb_isr+0xce>
		if (usb_configuration) {
    be16:	4b96      	ldr	r3, [pc, #600]	; (c070 <usb_isr+0x2f0>)
    be18:	781b      	ldrb	r3, [r3, #0]
    be1a:	b1ab      	cbz	r3, be48 <usb_isr+0xc8>
			t = usb_reboot_timer;
    be1c:	4995      	ldr	r1, [pc, #596]	; (c074 <usb_isr+0x2f4>)
    be1e:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    be20:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    be24:	b12a      	cbz	r2, be32 <usb_isr+0xb2>
				usb_reboot_timer = --t;
    be26:	3b01      	subs	r3, #1
    be28:	b2db      	uxtb	r3, r3
    be2a:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    be2c:	2b00      	cmp	r3, #0
    be2e:	f000 8346 	beq.w	c4be <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    be32:	4991      	ldr	r1, [pc, #580]	; (c078 <usb_isr+0x2f8>)
    be34:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    be36:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    be3a:	b12a      	cbz	r2, be48 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    be3c:	3b01      	subs	r3, #1
    be3e:	b2db      	uxtb	r3, r3
    be40:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    be42:	2b00      	cmp	r3, #0
    be44:	f000 81eb 	beq.w	c21e <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    be48:	2304      	movs	r3, #4
    be4a:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    be4e:	f014 0208 	ands.w	r2, r4, #8
    be52:	f000 81cc 	beq.w	c1ee <usb_isr+0x46e>
		stat = USB0_STAT;
    be56:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    be5a:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    be5c:	0912      	lsrs	r2, r2, #4
    be5e:	d197      	bne.n	bd90 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    be60:	f8df 91f8 	ldr.w	r9, [pc, #504]	; c05c <usb_isr+0x2dc>
    be64:	089b      	lsrs	r3, r3, #2
    be66:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    be6a:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    be6e:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    be70:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    be74:	2809      	cmp	r0, #9
    be76:	d07c      	beq.n	bf72 <usb_isr+0x1f2>
    be78:	d80f      	bhi.n	be9a <usb_isr+0x11a>
    be7a:	3801      	subs	r0, #1
    be7c:	2801      	cmp	r0, #1
    be7e:	d808      	bhi.n	be92 <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    be80:	4a7e      	ldr	r2, [pc, #504]	; (c07c <usb_isr+0x2fc>)
    be82:	8815      	ldrh	r5, [r2, #0]
    be84:	f242 0021 	movw	r0, #8225	; 0x2021
    be88:	4285      	cmp	r5, r0
    be8a:	f000 81fb 	beq.w	c284 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    be8e:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    be92:	2301      	movs	r3, #1
    be94:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    be98:	e7b5      	b.n	be06 <usb_isr+0x86>
	switch (pid) {
    be9a:	280d      	cmp	r0, #13
    be9c:	d1f9      	bne.n	be92 <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    be9e:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    bea2:	4d77      	ldr	r5, [pc, #476]	; (c080 <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    bea4:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    bea8:	4e74      	ldr	r6, [pc, #464]	; (c07c <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    beaa:	4c76      	ldr	r4, [pc, #472]	; (c084 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    beac:	f8c9 2010 	str.w	r2, [r9, #16]
    beb0:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    beb2:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    beb6:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    beba:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    bebc:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    bebe:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    bec2:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    bec6:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    bec8:	f200 80ff 	bhi.w	c0ca <usb_isr+0x34a>
    becc:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    bed0:	f080 82cb 	bcs.w	c46a <usb_isr+0x6ea>
    bed4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    bed8:	f000 8226 	beq.w	c328 <usb_isr+0x5a8>
    bedc:	f240 80de 	bls.w	c09c <usb_isr+0x31c>
    bee0:	f240 3202 	movw	r2, #770	; 0x302
    bee4:	4293      	cmp	r3, r2
    bee6:	d17b      	bne.n	bfe0 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    bee8:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    beec:	2f04      	cmp	r7, #4
    beee:	f200 8108 	bhi.w	c102 <usb_isr+0x382>
    bef2:	0c02      	lsrs	r2, r0, #16
    bef4:	f040 8105 	bne.w	c102 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    bef8:	4963      	ldr	r1, [pc, #396]	; (c088 <usb_isr+0x308>)
    befa:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    befe:	f043 0302 	orr.w	r3, r3, #2
    bf02:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    bf06:	4613      	mov	r3, r2
		break;
    bf08:	e070      	b.n	bfec <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bf0a:	f017 0f08 	tst.w	r7, #8
    bf0e:	4b57      	ldr	r3, [pc, #348]	; (c06c <usb_isr+0x2ec>)
    bf10:	bf18      	it	ne
    bf12:	465b      	movne	r3, fp
    bf14:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    bf18:	e775      	b.n	be06 <usb_isr+0x86>
				usb_free(packet);
    bf1a:	f000 fb63 	bl	c5e4 <usb_free>
				packet = tx_first[endpoint];
    bf1e:	495b      	ldr	r1, [pc, #364]	; (c08c <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    bf20:	4a5b      	ldr	r2, [pc, #364]	; (c090 <usb_isr+0x310>)
				packet = tx_first[endpoint];
    bf22:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    bf26:	2b00      	cmp	r3, #0
    bf28:	f000 8157 	beq.w	c1da <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    bf2c:	6858      	ldr	r0, [r3, #4]
    bf2e:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    bf32:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    bf34:	f103 0008 	add.w	r0, r3, #8
    bf38:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    bf3a:	2903      	cmp	r1, #3
    bf3c:	d805      	bhi.n	bf4a <usb_isr+0x1ca>
    bf3e:	e8df f001 	tbb	[pc, r1]
    bf42:	0f12      	.short	0x0f12
    bf44:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    bf46:	2104      	movs	r1, #4
    bf48:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    bf4a:	881a      	ldrh	r2, [r3, #0]
    bf4c:	f017 0f08 	tst.w	r7, #8
    bf50:	bf14      	ite	ne
    bf52:	23c8      	movne	r3, #200	; 0xc8
    bf54:	2388      	moveq	r3, #136	; 0x88
    bf56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    bf5a:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    bf5e:	e752      	b.n	be06 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    bf60:	2102      	movs	r1, #2
    bf62:	5511      	strb	r1, [r2, r4]
						break;
    bf64:	e7f1      	b.n	bf4a <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    bf66:	2103      	movs	r1, #3
    bf68:	5511      	strb	r1, [r2, r4]
						break;
    bf6a:	e7ee      	b.n	bf4a <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    bf6c:	2105      	movs	r1, #5
    bf6e:	5511      	strb	r1, [r2, r4]
						break;
    bf70:	e7eb      	b.n	bf4a <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    bf72:	4d43      	ldr	r5, [pc, #268]	; (c080 <usb_isr+0x300>)
    bf74:	682a      	ldr	r2, [r5, #0]
		if (data) {
    bf76:	b33a      	cbz	r2, bfc8 <usb_isr+0x248>
			size = ep0_tx_len;
    bf78:	4946      	ldr	r1, [pc, #280]	; (c094 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf7a:	4c42      	ldr	r4, [pc, #264]	; (c084 <usb_isr+0x304>)
			size = ep0_tx_len;
    bf7c:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf7e:	4846      	ldr	r0, [pc, #280]	; (c098 <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf80:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf84:	7806      	ldrb	r6, [r0, #0]
    bf86:	2f40      	cmp	r7, #64	; 0x40
    bf88:	463b      	mov	r3, r7
    bf8a:	bf28      	it	cs
    bf8c:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf8e:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    bf92:	f08e 0e01 	eor.w	lr, lr, #1
    bf96:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf9a:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    bf9e:	f086 0601 	eor.w	r6, r6, #1
    bfa2:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bfa4:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    bfa8:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bfaa:	bf14      	ite	ne
    bfac:	20c8      	movne	r0, #200	; 0xc8
    bfae:	2088      	moveq	r0, #136	; 0x88
    bfb0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    bfb4:	441a      	add	r2, r3
			ep0_tx_len -= size;
    bfb6:	1afb      	subs	r3, r7, r3
    bfb8:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bfba:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    bfbe:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	f000 8136 	beq.w	c232 <usb_isr+0x4b2>
    bfc6:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    bfc8:	4b2c      	ldr	r3, [pc, #176]	; (c07c <usb_isr+0x2fc>)
    bfca:	881a      	ldrh	r2, [r3, #0]
    bfcc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    bfd0:	f47f af5f 	bne.w	be92 <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    bfd4:	789a      	ldrb	r2, [r3, #2]
    bfd6:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    bfda:	2200      	movs	r2, #0
    bfdc:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    bfde:	e758      	b.n	be92 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    bfe0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    bfe4:	f040 808d 	bne.w	c102 <usb_isr+0x382>
	uint32_t datalen = 0;
    bfe8:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    bfea:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    bfec:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bff0:	4829      	ldr	r0, [pc, #164]	; (c098 <usb_isr+0x318>)
    bff2:	4594      	cmp	ip, r2
    bff4:	bf28      	it	cs
    bff6:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    bff8:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bffa:	7802      	ldrb	r2, [r0, #0]
    bffc:	2f40      	cmp	r7, #64	; 0x40
    bffe:	bf28      	it	cs
    c000:	2740      	movcs	r7, #64	; 0x40
    c002:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c006:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c008:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c00c:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c010:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c014:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    c018:	2600      	movs	r6, #0
	data += size;
    c01a:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    c01c:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    c01e:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    c022:	f082 0601 	eor.w	r6, r2, #1
    c026:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    c028:	f040 8111 	bne.w	c24e <usb_isr+0x4ce>
    c02c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    c030:	f04f 0501 	mov.w	r5, #1
    c034:	d909      	bls.n	c04a <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c036:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    c03a:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c03c:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    c040:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c042:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c044:	2388      	movs	r3, #136	; 0x88
    c046:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c04a:	2301      	movs	r3, #1
    c04c:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    c050:	e71f      	b.n	be92 <usb_isr+0x112>
    c052:	bf00      	nop
    c054:	40072000 	.word	0x40072000
    c058:	004000c8 	.word	0x004000c8
    c05c:	1fff8000 	.word	0x1fff8000
    c060:	1fffc560 	.word	0x1fffc560
    c064:	1fffc570 	.word	0x1fffc570
    c068:	1fffc5b0 	.word	0x1fffc5b0
    c06c:	00400088 	.word	0x00400088
    c070:	1fffc5ac 	.word	0x1fffc5ac
    c074:	1fffc5ad 	.word	0x1fffc5ad
    c078:	1fffc5d8 	.word	0x1fffc5d8
    c07c:	1fffc580 	.word	0x1fffc580
    c080:	1fffc554 	.word	0x1fffc554
    c084:	1fffc551 	.word	0x1fffc551
    c088:	400720c0 	.word	0x400720c0
    c08c:	1fffc588 	.word	0x1fffc588
    c090:	1fffc5a8 	.word	0x1fffc5a8
    c094:	1fffc552 	.word	0x1fffc552
    c098:	1fffc550 	.word	0x1fffc550
	switch (setup.wRequestAndType) {
    c09c:	2b80      	cmp	r3, #128	; 0x80
    c09e:	f000 818b 	beq.w	c3b8 <usb_isr+0x638>
    c0a2:	2b82      	cmp	r3, #130	; 0x82
    c0a4:	d12d      	bne.n	c102 <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    c0a6:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    c0aa:	2f04      	cmp	r7, #4
    c0ac:	d829      	bhi.n	c102 <usb_isr+0x382>
		reply_buffer[0] = 0;
    c0ae:	4aa7      	ldr	r2, [pc, #668]	; (c34c <usb_isr+0x5cc>)
    c0b0:	2300      	movs	r3, #0
    c0b2:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    c0b4:	4ba6      	ldr	r3, [pc, #664]	; (c350 <usb_isr+0x5d0>)
    c0b6:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    c0ba:	079f      	lsls	r7, r3, #30
    c0bc:	f140 81fc 	bpl.w	c4b8 <usb_isr+0x738>
    c0c0:	2301      	movs	r3, #1
    c0c2:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    c0c4:	4ba1      	ldr	r3, [pc, #644]	; (c34c <usb_isr+0x5cc>)
		datalen = 2;
    c0c6:	2202      	movs	r2, #2
    c0c8:	e790      	b.n	bfec <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    c0ca:	f242 0c21 	movw	ip, #8225	; 0x2021
    c0ce:	4563      	cmp	r3, ip
    c0d0:	d0bb      	beq.n	c04a <usb_isr+0x2ca>
    c0d2:	d91d      	bls.n	c110 <usb_isr+0x390>
    c0d4:	f242 2221 	movw	r2, #8737	; 0x2221
    c0d8:	4293      	cmp	r3, r2
    c0da:	d10d      	bne.n	c0f8 <usb_isr+0x378>
		switch (setup.wIndex) {
    c0dc:	b2bf      	uxth	r7, r7
    c0de:	2f00      	cmp	r7, #0
    c0e0:	d182      	bne.n	bfe8 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c0e2:	4b9c      	ldr	r3, [pc, #624]	; (c354 <usb_isr+0x5d4>)
    c0e4:	681a      	ldr	r2, [r3, #0]
    c0e6:	4b9c      	ldr	r3, [pc, #624]	; (c358 <usb_isr+0x5d8>)
    c0e8:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    c0ea:	4b9c      	ldr	r3, [pc, #624]	; (c35c <usb_isr+0x5dc>)
    c0ec:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    c0f0:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    c0f2:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    c0f4:	4613      	mov	r3, r2
			break;
    c0f6:	e779      	b.n	bfec <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    c0f8:	f242 3221 	movw	r2, #8993	; 0x2321
    c0fc:	4293      	cmp	r3, r2
    c0fe:	f43f af73 	beq.w	bfe8 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c102:	230f      	movs	r3, #15
    c104:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c108:	2301      	movs	r3, #1
    c10a:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    c10e:	e6c0      	b.n	be92 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    c110:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    c114:	f000 814a 	beq.w	c3ac <usb_isr+0x62c>
    c118:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    c11c:	d1f1      	bne.n	c102 <usb_isr+0x382>
		usb_configuration = setup.wValue;
    c11e:	4b90      	ldr	r3, [pc, #576]	; (c360 <usb_isr+0x5e0>)
    c120:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    c124:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    c126:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    c128:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    c12c:	061a      	lsls	r2, r3, #24
    c12e:	d406      	bmi.n	c13e <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    c130:	3501      	adds	r5, #1
    c132:	2d14      	cmp	r5, #20
    c134:	d00c      	beq.n	c150 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    c136:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    c13a:	061a      	lsls	r2, r3, #24
    c13c:	d5f8      	bpl.n	c130 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    c13e:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    c142:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    c144:	6858      	ldr	r0, [r3, #4]
    c146:	3808      	subs	r0, #8
    c148:	f000 fa4c 	bl	c5e4 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    c14c:	2d14      	cmp	r5, #20
    c14e:	d1f2      	bne.n	c136 <usb_isr+0x3b6>
    c150:	4a84      	ldr	r2, [pc, #528]	; (c364 <usb_isr+0x5e4>)
    c152:	4b85      	ldr	r3, [pc, #532]	; (c368 <usb_isr+0x5e8>)
    c154:	9202      	str	r2, [sp, #8]
    c156:	4a85      	ldr	r2, [pc, #532]	; (c36c <usb_isr+0x5ec>)
    c158:	9201      	str	r2, [sp, #4]
    c15a:	4e85      	ldr	r6, [pc, #532]	; (c370 <usb_isr+0x5f0>)
    c15c:	4a85      	ldr	r2, [pc, #532]	; (c374 <usb_isr+0x5f4>)
    c15e:	f8df 8218 	ldr.w	r8, [pc, #536]	; c378 <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c162:	9403      	str	r4, [sp, #12]
    c164:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    c166:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c168:	461c      	mov	r4, r3
			p = rx_first[i];
    c16a:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    c16e:	b12f      	cbz	r7, c17c <usb_isr+0x3fc>
				n = p->next;
    c170:	4638      	mov	r0, r7
    c172:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    c174:	f000 fa36 	bl	c5e4 <usb_free>
			while (p) {
    c178:	2f00      	cmp	r7, #0
    c17a:	d1f9      	bne.n	c170 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    c17c:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    c17e:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    c182:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    c186:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    c18a:	9300      	str	r3, [sp, #0]
			while (p) {
    c18c:	b12f      	cbz	r7, c19a <usb_isr+0x41a>
				n = p->next;
    c18e:	4638      	mov	r0, r7
    c190:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    c192:	f000 fa27 	bl	c5e4 <usb_free>
			while (p) {
    c196:	2f00      	cmp	r7, #0
    c198:	d1f9      	bne.n	c18e <usb_isr+0x40e>
			tx_last[i] = NULL;
    c19a:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    c19c:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    c1a0:	f843 5b04 	str.w	r5, [r3], #4
    c1a4:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    c1a6:	9b01      	ldr	r3, [sp, #4]
    c1a8:	f823 5b02 	strh.w	r5, [r3], #2
    c1ac:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    c1ae:	7823      	ldrb	r3, [r4, #0]
    c1b0:	3b02      	subs	r3, #2
    c1b2:	2b03      	cmp	r3, #3
    c1b4:	f200 8109 	bhi.w	c3ca <usb_isr+0x64a>
    c1b8:	e8df f013 	tbh	[pc, r3, lsl #1]
    c1bc:	0104013f 	.word	0x0104013f
    c1c0:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    c1c4:	4a6d      	ldr	r2, [pc, #436]	; (c37c <usb_isr+0x5fc>)
						b->desc = 0;
    c1c6:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    c1ca:	7813      	ldrb	r3, [r2, #0]
    c1cc:	3301      	adds	r3, #1
    c1ce:	7013      	strb	r3, [r2, #0]
    c1d0:	e619      	b.n	be06 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    c1d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    c1d6:	4b67      	ldr	r3, [pc, #412]	; (c374 <usb_isr+0x5f4>)
    c1d8:	e5fe      	b.n	bdd8 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    c1da:	5d11      	ldrb	r1, [r2, r4]
    c1dc:	2902      	cmp	r1, #2
    c1de:	d026      	beq.n	c22e <usb_isr+0x4ae>
    c1e0:	f67f ae11 	bls.w	be06 <usb_isr+0x86>
    c1e4:	2903      	cmp	r1, #3
    c1e6:	d11d      	bne.n	c224 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c1e8:	2301      	movs	r3, #1
    c1ea:	5513      	strb	r3, [r2, r4]
						break;
    c1ec:	e60b      	b.n	be06 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    c1ee:	07e0      	lsls	r0, r4, #31
    c1f0:	d46e      	bmi.n	c2d0 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    c1f2:	0621      	lsls	r1, r4, #24
    c1f4:	d421      	bmi.n	c23a <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    c1f6:	07a2      	lsls	r2, r4, #30
    c1f8:	d508      	bpl.n	c20c <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    c1fa:	4b61      	ldr	r3, [pc, #388]	; (c380 <usb_isr+0x600>)
    c1fc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    c200:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    c202:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    c204:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    c208:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    c20c:	06e3      	lsls	r3, r4, #27
    c20e:	d503      	bpl.n	c218 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    c210:	4b5b      	ldr	r3, [pc, #364]	; (c380 <usb_isr+0x600>)
    c212:	2210      	movs	r2, #16
    c214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    c218:	b005      	add	sp, #20
    c21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    c21e:	f000 fb59 	bl	c8d4 <usb_serial_flush_callback>
    c222:	e611      	b.n	be48 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    c224:	f017 0f08 	tst.w	r7, #8
    c228:	bf14      	ite	ne
    c22a:	2303      	movne	r3, #3
    c22c:	2302      	moveq	r3, #2
    c22e:	5513      	strb	r3, [r2, r4]
						break;
    c230:	e5e9      	b.n	be06 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    c232:	2f3f      	cmp	r7, #63	; 0x3f
    c234:	bf98      	it	ls
    c236:	2200      	movls	r2, #0
    c238:	e6c5      	b.n	bfc6 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c23a:	4b51      	ldr	r3, [pc, #324]	; (c380 <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    c23c:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c23e:	210d      	movs	r1, #13
    c240:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    c244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    c248:	07a2      	lsls	r2, r4, #30
    c24a:	d5df      	bpl.n	c20c <usb_isr+0x48c>
    c24c:	e7d5      	b.n	c1fa <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c24e:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    c252:	7002      	strb	r2, [r0, #0]
    c254:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c256:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    c25a:	463a      	mov	r2, r7
    c25c:	bf28      	it	cs
    c25e:	2240      	movcs	r2, #64	; 0x40
    c260:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c262:	0410      	lsls	r0, r2, #16
	data += size;
    c264:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c266:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    c26a:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    c26c:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c26e:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    c272:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    c274:	d055      	beq.n	c322 <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    c276:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    c278:	4b42      	ldr	r3, [pc, #264]	; (c384 <usb_isr+0x604>)
    c27a:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c27c:	2301      	movs	r3, #1
    c27e:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    c282:	e606      	b.n	be92 <usb_isr+0x112>
			switch (setup.wIndex) {
    c284:	8892      	ldrh	r2, [r2, #4]
    c286:	b95a      	cbnz	r2, c2a0 <usb_isr+0x520>
    c288:	4a3f      	ldr	r2, [pc, #252]	; (c388 <usb_isr+0x608>)
    c28a:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    c28c:	f814 1b01 	ldrb.w	r1, [r4], #1
    c290:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    c294:	42ac      	cmp	r4, r5
    c296:	d1f9      	bne.n	c28c <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    c298:	4a3c      	ldr	r2, [pc, #240]	; (c38c <usb_isr+0x60c>)
    c29a:	6812      	ldr	r2, [r2, #0]
    c29c:	2a86      	cmp	r2, #134	; 0x86
    c29e:	d03c      	beq.n	c31a <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c2a0:	4c3b      	ldr	r4, [pc, #236]	; (c390 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c2a2:	483c      	ldr	r0, [pc, #240]	; (c394 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c2a4:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c2a6:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c2a8:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    c2aa:	f085 0501 	eor.w	r5, r5, #1
    c2ae:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c2b0:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    c2b4:	f082 0201 	eor.w	r2, r2, #1
    c2b8:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c2ba:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    c2be:	f04f 0000 	mov.w	r0, #0
    c2c2:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c2c4:	bf14      	ite	ne
    c2c6:	22c8      	movne	r2, #200	; 0xc8
    c2c8:	2288      	moveq	r2, #136	; 0x88
    c2ca:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    c2ce:	e5de      	b.n	be8e <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    c2d0:	4b2b      	ldr	r3, [pc, #172]	; (c380 <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    c2d2:	4830      	ldr	r0, [pc, #192]	; (c394 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    c2d4:	4930      	ldr	r1, [pc, #192]	; (c398 <usb_isr+0x618>)
    c2d6:	4c31      	ldr	r4, [pc, #196]	; (c39c <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    c2d8:	2502      	movs	r5, #2
    c2da:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    c2de:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    c2e0:	482f      	ldr	r0, [pc, #188]	; (c3a0 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    c2e2:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    c2e4:	4d2f      	ldr	r5, [pc, #188]	; (c3a4 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    c2e6:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    c2e8:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c2ea:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    c2ec:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    c2ee:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    c2f0:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    c2f2:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c2f4:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    c2f8:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    c2fa:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    c2fc:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    c300:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    c304:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    c308:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    c30c:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    c310:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    c314:	b005      	add	sp, #20
    c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    c31a:	4a23      	ldr	r2, [pc, #140]	; (c3a8 <usb_isr+0x628>)
    c31c:	200f      	movs	r0, #15
    c31e:	7010      	strb	r0, [r2, #0]
    c320:	e7be      	b.n	c2a0 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    c322:	2f3f      	cmp	r7, #63	; 0x3f
    c324:	d8a7      	bhi.n	c276 <usb_isr+0x4f6>
    c326:	e690      	b.n	c04a <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    c328:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    c32c:	2f04      	cmp	r7, #4
    c32e:	f63f aee8 	bhi.w	c102 <usb_isr+0x382>
    c332:	0c00      	lsrs	r0, r0, #16
    c334:	f47f aee5 	bne.w	c102 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    c338:	4a05      	ldr	r2, [pc, #20]	; (c350 <usb_isr+0x5d0>)
    c33a:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    c33e:	f023 0302 	bic.w	r3, r3, #2
    c342:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    c346:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    c348:	4613      	mov	r3, r2
		break;
    c34a:	e64f      	b.n	bfec <usb_isr+0x26c>
    c34c:	1fffc558 	.word	0x1fffc558
    c350:	400720c0 	.word	0x400720c0
    c354:	1fffc3b4 	.word	0x1fffc3b4
    c358:	1fffc5d4 	.word	0x1fffc5d4
    c35c:	1fffc5d0 	.word	0x1fffc5d0
    c360:	1fffc5ac 	.word	0x1fffc5ac
    c364:	1fffc598 	.word	0x1fffc598
    c368:	1fffc5a8 	.word	0x1fffc5a8
    c36c:	1fffc5b0 	.word	0x1fffc5b0
    c370:	1fffc560 	.word	0x1fffc560
    c374:	1fffc570 	.word	0x1fffc570
    c378:	1fffc588 	.word	0x1fffc588
    c37c:	1fffc5b8 	.word	0x1fffc5b8
    c380:	40072000 	.word	0x40072000
    c384:	1fffc552 	.word	0x1fffc552
    c388:	1fffc5c7 	.word	0x1fffc5c7
    c38c:	1fffc5c8 	.word	0x1fffc5c8
    c390:	1fffc551 	.word	0x1fffc551
    c394:	1fffc550 	.word	0x1fffc550
    c398:	1fff8000 	.word	0x1fff8000
    c39c:	00400088 	.word	0x00400088
    c3a0:	1fffc4d0 	.word	0x1fffc4d0
    c3a4:	1fffc510 	.word	0x1fffc510
    c3a8:	1fffc5ad 	.word	0x1fffc5ad
		reply_buffer[0] = usb_configuration;
    c3ac:	4b48      	ldr	r3, [pc, #288]	; (c4d0 <usb_isr+0x750>)
    c3ae:	4949      	ldr	r1, [pc, #292]	; (c4d4 <usb_isr+0x754>)
    c3b0:	781b      	ldrb	r3, [r3, #0]
    c3b2:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    c3b4:	460b      	mov	r3, r1
		break;
    c3b6:	e619      	b.n	bfec <usb_isr+0x26c>
		reply_buffer[0] = 0;
    c3b8:	4a46      	ldr	r2, [pc, #280]	; (c4d4 <usb_isr+0x754>)
    c3ba:	2300      	movs	r3, #0
    c3bc:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    c3be:	4b45      	ldr	r3, [pc, #276]	; (c4d4 <usb_isr+0x754>)
		datalen = 2;
    c3c0:	2202      	movs	r2, #2
		break;
    c3c2:	e613      	b.n	bfec <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c3c4:	f04f 0301 	mov.w	r3, #1
    c3c8:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    c3ca:	4b43      	ldr	r3, [pc, #268]	; (c4d8 <usb_isr+0x758>)
    c3cc:	42b3      	cmp	r3, r6
    c3ce:	f104 0401 	add.w	r4, r4, #1
    c3d2:	f47f aeca 	bne.w	c16a <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    c3d6:	4e41      	ldr	r6, [pc, #260]	; (c4dc <usb_isr+0x75c>)
    c3d8:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    c3da:	f8df 8104 	ldr.w	r8, [pc, #260]	; c4e0 <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c3de:	4f41      	ldr	r7, [pc, #260]	; (c4e4 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    c3e0:	2300      	movs	r3, #0
    c3e2:	7033      	strb	r3, [r6, #0]
    c3e4:	2504      	movs	r5, #4
			epconf = *cfg++;
    c3e6:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    c3ea:	4a3f      	ldr	r2, [pc, #252]	; (c4e8 <usb_isr+0x768>)
    c3ec:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    c3ee:	071b      	lsls	r3, r3, #28
    c3f0:	d425      	bmi.n	c43e <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    c3f2:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    c3f6:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    c3fa:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    c3fc:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    c3fe:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    c400:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    c404:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    c408:	d1ed      	bne.n	c3e6 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c40a:	4f38      	ldr	r7, [pc, #224]	; (c4ec <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c40c:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c40e:	783a      	ldrb	r2, [r7, #0]
    c410:	f042 0002 	orr.w	r0, r2, #2
    c414:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    c418:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c41c:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c420:	2d00      	cmp	r5, #0
    c422:	d14d      	bne.n	c4c0 <usb_isr+0x740>
    c424:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    c426:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    c42a:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    c42c:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c42e:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c432:	2301      	movs	r3, #1
    c434:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    c438:	e52b      	b.n	be92 <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    c43a:	7025      	strb	r5, [r4, #0]
				break;
    c43c:	e7c5      	b.n	c3ca <usb_isr+0x64a>
				p = usb_malloc();
    c43e:	f000 f8b1 	bl	c5a4 <usb_malloc>
				if (p) {
    c442:	2800      	cmp	r0, #0
    c444:	d032      	beq.n	c4ac <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    c446:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    c44a:	3008      	adds	r0, #8
    c44c:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c44e:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    c452:	f000 f8a7 	bl	c5a4 <usb_malloc>
				if (p) {
    c456:	b308      	cbz	r0, c49c <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    c458:	f045 0301 	orr.w	r3, r5, #1
    c45c:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    c460:	3008      	adds	r0, #8
    c462:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c464:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    c468:	e7c3      	b.n	c3f2 <usb_isr+0x672>
			if (list->addr == NULL) break;
    c46a:	4a21      	ldr	r2, [pc, #132]	; (c4f0 <usb_isr+0x770>)
    c46c:	6853      	ldr	r3, [r2, #4]
    c46e:	2b00      	cmp	r3, #0
    c470:	f43f ae47 	beq.w	c102 <usb_isr+0x382>
    c474:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c476:	b2bf      	uxth	r7, r7
    c478:	e004      	b.n	c484 <usb_isr+0x704>
			if (list->addr == NULL) break;
    c47a:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    c47c:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    c47e:	2b00      	cmp	r3, #0
    c480:	f43f ae3f 	beq.w	c102 <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c484:	8811      	ldrh	r1, [r2, #0]
    c486:	4281      	cmp	r1, r0
    c488:	d1f7      	bne.n	c47a <usb_isr+0x6fa>
    c48a:	8851      	ldrh	r1, [r2, #2]
    c48c:	42b9      	cmp	r1, r7
    c48e:	d1f4      	bne.n	c47a <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    c490:	0a00      	lsrs	r0, r0, #8
    c492:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    c494:	bf0c      	ite	eq
    c496:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    c498:	8912      	ldrhne	r2, [r2, #8]
    c49a:	e5a7      	b.n	bfec <usb_isr+0x26c>
					usb_rx_memory_needed++;
    c49c:	7833      	ldrb	r3, [r6, #0]
    c49e:	3301      	adds	r3, #1
    c4a0:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    c4a2:	f045 0301 	orr.w	r3, r5, #1
    c4a6:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    c4aa:	e7a2      	b.n	c3f2 <usb_isr+0x672>
					usb_rx_memory_needed++;
    c4ac:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    c4ae:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    c4b2:	3301      	adds	r3, #1
    c4b4:	7033      	strb	r3, [r6, #0]
    c4b6:	e7cc      	b.n	c452 <usb_isr+0x6d2>
		data = reply_buffer;
    c4b8:	4b06      	ldr	r3, [pc, #24]	; (c4d4 <usb_isr+0x754>)
		datalen = 2;
    c4ba:	2202      	movs	r2, #2
    c4bc:	e596      	b.n	bfec <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    c4be:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    c4c0:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c4c2:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    c4c4:	f082 0601 	eor.w	r6, r2, #1
    c4c8:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c4ca:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    c4ce:	e5bc      	b.n	c04a <usb_isr+0x2ca>
    c4d0:	1fffc5ac 	.word	0x1fffc5ac
    c4d4:	1fffc558 	.word	0x1fffc558
    c4d8:	1fffc570 	.word	0x1fffc570
    c4dc:	1fffc5b8 	.word	0x1fffc5b8
    c4e0:	00015ccc 	.word	0x00015ccc
    c4e4:	00400088 	.word	0x00400088
    c4e8:	400720c0 	.word	0x400720c0
    c4ec:	1fffc550 	.word	0x1fffc550
    c4f0:	00015c78 	.word	0x00015c78

0000c4f4 <usb_init>:



void usb_init(void)
{
    c4f4:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    c4f6:	f000 fab3 	bl	ca60 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    c4fa:	2300      	movs	r3, #0
    c4fc:	4a1a      	ldr	r2, [pc, #104]	; (c568 <usb_init+0x74>)
		table[i].desc = 0;
    c4fe:	4619      	mov	r1, r3
    c500:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    c504:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    c508:	3301      	adds	r3, #1
    c50a:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    c50c:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    c50e:	d1f7      	bne.n	c500 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c510:	4c16      	ldr	r4, [pc, #88]	; (c56c <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c512:	4b17      	ldr	r3, [pc, #92]	; (c570 <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c514:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c516:	4d17      	ldr	r5, [pc, #92]	; (c574 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c518:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    c51c:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c51e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    c522:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    c526:	4c14      	ldr	r4, [pc, #80]	; (c578 <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    c528:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    c52a:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c52e:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c532:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c534:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c538:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c53c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    c540:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    c544:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    c548:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    c54a:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    c54e:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    c550:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c554:	2370      	movs	r3, #112	; 0x70
    c556:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c55a:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c55e:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c560:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c564:	7223      	strb	r3, [r4, #8]
}
    c566:	bd70      	pop	{r4, r5, r6, pc}
    c568:	1fff8000 	.word	0x1fff8000
    c56c:	40048000 	.word	0x40048000
    c570:	40072000 	.word	0x40072000
    c574:	e000e400 	.word	0xe000e400
    c578:	40072100 	.word	0x40072100

0000c57c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c57c:	f000 b8ac 	b.w	c6d8 <usb_serial_flush_input>

0000c580 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c580:	f000 b87c 	b.w	c67c <usb_serial_peekchar>

0000c584 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c584:	f000 b856 	b.w	c634 <usb_serial_getchar>

0000c588 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c588:	f000 b890 	b.w	c6ac <usb_serial_available>

0000c58c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c58c:	f000 b976 	b.w	c87c <usb_serial_flush_output>

0000c590 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c590:	f000 b950 	b.w	c834 <usb_serial_write_buffer_free>

0000c594 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c594:	4608      	mov	r0, r1
    c596:	4611      	mov	r1, r2
    c598:	f000 b8ba 	b.w	c710 <usb_serial_write>

0000c59c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c59c:	4608      	mov	r0, r1
    c59e:	f000 b93b 	b.w	c818 <usb_serial_putchar>
    c5a2:	bf00      	nop

0000c5a4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    c5a4:	b672      	cpsid	i
	avail = usb_buffer_available;
    c5a6:	490d      	ldr	r1, [pc, #52]	; (c5dc <usb_malloc+0x38>)
    c5a8:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    c5aa:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    c5ae:	280b      	cmp	r0, #11
    c5b0:	dc10      	bgt.n	c5d4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    c5b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c5b6:	40c2      	lsrs	r2, r0
    c5b8:	ea23 0302 	bic.w	r3, r3, r2
    c5bc:	600b      	str	r3, [r1, #0]
	__enable_irq();
    c5be:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    c5c0:	4a07      	ldr	r2, [pc, #28]	; (c5e0 <usb_malloc+0x3c>)
    c5c2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    c5c6:	00c1      	lsls	r1, r0, #3
    c5c8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    c5cc:	2300      	movs	r3, #0
    c5ce:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    c5d0:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    c5d2:	4770      	bx	lr
		__enable_irq();
    c5d4:	b662      	cpsie	i
		return NULL;
    c5d6:	2000      	movs	r0, #0
    c5d8:	4770      	bx	lr
    c5da:	bf00      	nop
    c5dc:	1fff8834 	.word	0x1fff8834
    c5e0:	1fff83bc 	.word	0x1fff83bc

0000c5e4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c5e4:	4b0e      	ldr	r3, [pc, #56]	; (c620 <usb_free+0x3c>)
    c5e6:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    c5e8:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    c5ec:	d210      	bcs.n	c610 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    c5ee:	4a0d      	ldr	r2, [pc, #52]	; (c624 <usb_free+0x40>)
    c5f0:	7812      	ldrb	r2, [r2, #0]
    c5f2:	b972      	cbnz	r2, c612 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    c5f4:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c5f6:	4a0c      	ldr	r2, [pc, #48]	; (c628 <usb_free+0x44>)
	usb_buffer_available |= mask;
    c5f8:	490c      	ldr	r1, [pc, #48]	; (c62c <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c5fa:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    c5fe:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    c600:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c604:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    c606:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    c60a:	4303      	orrs	r3, r0
    c60c:	600b      	str	r3, [r1, #0]
	__enable_irq();
    c60e:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    c610:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    c612:	4a07      	ldr	r2, [pc, #28]	; (c630 <usb_free+0x4c>)
    c614:	7812      	ldrb	r2, [r2, #0]
    c616:	2a00      	cmp	r2, #0
    c618:	d0ec      	beq.n	c5f4 <usb_free+0x10>
		usb_rx_memory(p);
    c61a:	f7ff bb2d 	b.w	bc78 <usb_rx_memory>
    c61e:	bf00      	nop
    c620:	1fff83bc 	.word	0x1fff83bc
    c624:	1fffc5b8 	.word	0x1fffc5b8
    c628:	38e38e39 	.word	0x38e38e39
    c62c:	1fff8834 	.word	0x1fff8834
    c630:	1fffc5ac 	.word	0x1fffc5ac

0000c634 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    c634:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    c636:	4c0f      	ldr	r4, [pc, #60]	; (c674 <usb_serial_getchar+0x40>)
    c638:	6820      	ldr	r0, [r4, #0]
    c63a:	b178      	cbz	r0, c65c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    c63c:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    c63e:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    c640:	18c1      	adds	r1, r0, r3
    c642:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    c644:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    c646:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    c648:	d902      	bls.n	c650 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    c64a:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    c64c:	4628      	mov	r0, r5
    c64e:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    c650:	f7ff ffc8 	bl	c5e4 <usb_free>
		rx_packet = NULL;
    c654:	2300      	movs	r3, #0
    c656:	6023      	str	r3, [r4, #0]
}
    c658:	4628      	mov	r0, r5
    c65a:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    c65c:	4b06      	ldr	r3, [pc, #24]	; (c678 <usb_serial_getchar+0x44>)
    c65e:	781b      	ldrb	r3, [r3, #0]
    c660:	b12b      	cbz	r3, c66e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c662:	2003      	movs	r0, #3
    c664:	f7ff fad0 	bl	bc08 <usb_rx>
    c668:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c66a:	2800      	cmp	r0, #0
    c66c:	d1e6      	bne.n	c63c <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    c66e:	f04f 35ff 	mov.w	r5, #4294967295
    c672:	e7eb      	b.n	c64c <usb_serial_getchar+0x18>
    c674:	1fffc5bc 	.word	0x1fffc5bc
    c678:	1fffc5ac 	.word	0x1fffc5ac

0000c67c <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    c67c:	b510      	push	{r4, lr}
	if (!rx_packet) {
    c67e:	4c09      	ldr	r4, [pc, #36]	; (c6a4 <usb_serial_peekchar+0x28>)
    c680:	6820      	ldr	r0, [r4, #0]
    c682:	b118      	cbz	r0, c68c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    c684:	8843      	ldrh	r3, [r0, #2]
    c686:	4418      	add	r0, r3
    c688:	7a00      	ldrb	r0, [r0, #8]
}
    c68a:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    c68c:	4b06      	ldr	r3, [pc, #24]	; (c6a8 <usb_serial_peekchar+0x2c>)
    c68e:	781b      	ldrb	r3, [r3, #0]
    c690:	b12b      	cbz	r3, c69e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c692:	2003      	movs	r0, #3
    c694:	f7ff fab8 	bl	bc08 <usb_rx>
    c698:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c69a:	2800      	cmp	r0, #0
    c69c:	d1f2      	bne.n	c684 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    c69e:	f04f 30ff 	mov.w	r0, #4294967295
}
    c6a2:	bd10      	pop	{r4, pc}
    c6a4:	1fffc5bc 	.word	0x1fffc5bc
    c6a8:	1fffc5ac 	.word	0x1fffc5ac

0000c6ac <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c6ac:	4b08      	ldr	r3, [pc, #32]	; (c6d0 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    c6ae:	4a09      	ldr	r2, [pc, #36]	; (c6d4 <usb_serial_available+0x28>)
    c6b0:	681b      	ldr	r3, [r3, #0]
{
    c6b2:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    c6b4:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c6b6:	b11b      	cbz	r3, c6c0 <usb_serial_available+0x14>
    c6b8:	881a      	ldrh	r2, [r3, #0]
    c6ba:	885b      	ldrh	r3, [r3, #2]
    c6bc:	1ad3      	subs	r3, r2, r3
    c6be:	441c      	add	r4, r3
	if (count == 0) yield();
    c6c0:	b10c      	cbz	r4, c6c6 <usb_serial_available+0x1a>
	return count;
}
    c6c2:	4620      	mov	r0, r4
    c6c4:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    c6c6:	f000 f929 	bl	c91c <yield>
}
    c6ca:	4620      	mov	r0, r4
    c6cc:	bd10      	pop	{r4, pc}
    c6ce:	bf00      	nop
    c6d0:	1fffc5bc 	.word	0x1fffc5bc
    c6d4:	1fffc5b0 	.word	0x1fffc5b0

0000c6d8 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    c6d8:	4b0b      	ldr	r3, [pc, #44]	; (c708 <usb_serial_flush_input+0x30>)
    c6da:	781b      	ldrb	r3, [r3, #0]
    c6dc:	b19b      	cbz	r3, c706 <usb_serial_flush_input+0x2e>
{
    c6de:	b510      	push	{r4, lr}
	if (rx_packet) {
    c6e0:	4c0a      	ldr	r4, [pc, #40]	; (c70c <usb_serial_flush_input+0x34>)
    c6e2:	6820      	ldr	r0, [r4, #0]
    c6e4:	b148      	cbz	r0, c6fa <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    c6e6:	f7ff ff7d 	bl	c5e4 <usb_free>
		rx_packet = NULL;
    c6ea:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c6ec:	2003      	movs	r0, #3
		rx_packet = NULL;
    c6ee:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    c6f0:	f7ff fa8a 	bl	bc08 <usb_rx>
		if (!rx) break;
    c6f4:	b130      	cbz	r0, c704 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    c6f6:	f7ff ff75 	bl	c5e4 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    c6fa:	2003      	movs	r0, #3
    c6fc:	f7ff fa84 	bl	bc08 <usb_rx>
		if (!rx) break;
    c700:	2800      	cmp	r0, #0
    c702:	d1f8      	bne.n	c6f6 <usb_serial_flush_input+0x1e>
	}
}
    c704:	bd10      	pop	{r4, pc}
    c706:	4770      	bx	lr
    c708:	1fffc5ac 	.word	0x1fffc5ac
    c70c:	1fffc5bc 	.word	0x1fffc5bc

0000c710 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c714:	f8df 90ec 	ldr.w	r9, [pc, #236]	; c804 <usb_serial_write+0xf4>
{
    c718:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    c71a:	2201      	movs	r2, #1
    c71c:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    c720:	9101      	str	r1, [sp, #4]
    c722:	b379      	cbz	r1, c784 <usb_serial_write+0x74>
    c724:	4f38      	ldr	r7, [pc, #224]	; (c808 <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c726:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c80c <usb_serial_write+0xfc>
	while (size > 0) {
    c72a:	9d01      	ldr	r5, [sp, #4]
    c72c:	4e38      	ldr	r6, [pc, #224]	; (c810 <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c72e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c814 <usb_serial_write+0x104>
    c732:	4683      	mov	fp, r0
		if (!tx_packet) {
    c734:	6839      	ldr	r1, [r7, #0]
    c736:	b3a1      	cbz	r1, c7a2 <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    c738:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    c73c:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    c740:	45ac      	cmp	ip, r5
    c742:	bf28      	it	cs
    c744:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    c746:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    c74a:	2200      	movs	r2, #0
		tx_packet->index += len;
    c74c:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    c74e:	7032      	strb	r2, [r6, #0]
		size -= len;
    c750:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    c754:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    c756:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    c75a:	f1bc 0f00 	cmp.w	ip, #0
    c75e:	d00a      	beq.n	c776 <usb_serial_write+0x66>
    c760:	f10e 3eff 	add.w	lr, lr, #4294967295
    c764:	4472      	add	r2, lr
    c766:	44dc      	add	ip, fp
    c768:	f81b 4b01 	ldrb.w	r4, [fp], #1
    c76c:	f802 4f01 	strb.w	r4, [r2, #1]!
    c770:	45dc      	cmp	ip, fp
    c772:	d1f9      	bne.n	c768 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    c774:	884c      	ldrh	r4, [r1, #2]
    c776:	2c3f      	cmp	r4, #63	; 0x3f
    c778:	d80b      	bhi.n	c792 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c77a:	2205      	movs	r2, #5
    c77c:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    c780:	2d00      	cmp	r5, #0
    c782:	d1d7      	bne.n	c734 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    c784:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    c786:	2300      	movs	r3, #0
    c788:	f889 3000 	strb.w	r3, [r9]
}
    c78c:	b003      	add	sp, #12
    c78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    c792:	2240      	movs	r2, #64	; 0x40
    c794:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c796:	2004      	movs	r0, #4
    c798:	f7ff faae 	bl	bcf8 <usb_tx>
			tx_packet = NULL;
    c79c:	2200      	movs	r2, #0
    c79e:	603a      	str	r2, [r7, #0]
    c7a0:	e7eb      	b.n	c77a <usb_serial_write+0x6a>
				if (!usb_configuration) {
    c7a2:	f898 2000 	ldrb.w	r2, [r8]
    c7a6:	b32a      	cbz	r2, c7f4 <usb_serial_write+0xe4>
    c7a8:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    c7ac:	e008      	b.n	c7c0 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c7ae:	3c01      	subs	r4, #1
    c7b0:	d019      	beq.n	c7e6 <usb_serial_write+0xd6>
    c7b2:	7832      	ldrb	r2, [r6, #0]
    c7b4:	b9ba      	cbnz	r2, c7e6 <usb_serial_write+0xd6>
				yield();
    c7b6:	f000 f8b1 	bl	c91c <yield>
				if (!usb_configuration) {
    c7ba:	f898 2000 	ldrb.w	r2, [r8]
    c7be:	b1ca      	cbz	r2, c7f4 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    c7c0:	2004      	movs	r0, #4
    c7c2:	f7ff fa43 	bl	bc4c <usb_tx_packet_count>
    c7c6:	2807      	cmp	r0, #7
    c7c8:	d8f1      	bhi.n	c7ae <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    c7ca:	f04f 0301 	mov.w	r3, #1
    c7ce:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    c7d2:	f7ff fee7 	bl	c5a4 <usb_malloc>
    c7d6:	4601      	mov	r1, r0
    c7d8:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    c7da:	2800      	cmp	r0, #0
    c7dc:	d1ac      	bne.n	c738 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c7de:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    c7e0:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c7e4:	d1e5      	bne.n	c7b2 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    c7e6:	2301      	movs	r3, #1
					return -1;
    c7e8:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    c7ec:	7033      	strb	r3, [r6, #0]
}
    c7ee:	b003      	add	sp, #12
    c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    c7f4:	2300      	movs	r3, #0
					return -1;
    c7f6:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    c7fa:	f889 3000 	strb.w	r3, [r9]
}
    c7fe:	b003      	add	sp, #12
    c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c804:	1fffc5c1 	.word	0x1fffc5c1
    c808:	1fffc5c4 	.word	0x1fffc5c4
    c80c:	1fffc5ac 	.word	0x1fffc5ac
    c810:	1fffc5c0 	.word	0x1fffc5c0
    c814:	1fffc5d8 	.word	0x1fffc5d8

0000c818 <usb_serial_putchar>:
{
    c818:	b500      	push	{lr}
    c81a:	b083      	sub	sp, #12
    c81c:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    c81e:	2101      	movs	r1, #1
    c820:	f10d 0007 	add.w	r0, sp, #7
{
    c824:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    c828:	f7ff ff72 	bl	c710 <usb_serial_write>
}
    c82c:	b003      	add	sp, #12
    c82e:	f85d fb04 	ldr.w	pc, [sp], #4
    c832:	bf00      	nop

0000c834 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    c834:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    c836:	4d0e      	ldr	r5, [pc, #56]	; (c870 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    c838:	4c0e      	ldr	r4, [pc, #56]	; (c874 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    c83a:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    c83c:	2301      	movs	r3, #1
    c83e:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    c840:	b128      	cbz	r0, c84e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    c842:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    c844:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    c846:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    c84a:	7023      	strb	r3, [r4, #0]
	return len;
}
    c84c:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    c84e:	4b0a      	ldr	r3, [pc, #40]	; (c878 <usb_serial_write_buffer_free+0x44>)
    c850:	781b      	ldrb	r3, [r3, #0]
    c852:	b913      	cbnz	r3, c85a <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    c854:	2000      	movs	r0, #0
    c856:	7020      	strb	r0, [r4, #0]
}
    c858:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c85a:	2004      	movs	r0, #4
    c85c:	f7ff f9f6 	bl	bc4c <usb_tx_packet_count>
		if (!usb_configuration ||
    c860:	2807      	cmp	r0, #7
    c862:	d8f7      	bhi.n	c854 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    c864:	f7ff fe9e 	bl	c5a4 <usb_malloc>
    c868:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c86a:	2800      	cmp	r0, #0
    c86c:	d1e9      	bne.n	c842 <usb_serial_write_buffer_free+0xe>
    c86e:	e7f1      	b.n	c854 <usb_serial_write_buffer_free+0x20>
    c870:	1fffc5c4 	.word	0x1fffc5c4
    c874:	1fffc5c1 	.word	0x1fffc5c1
    c878:	1fffc5ac 	.word	0x1fffc5ac

0000c87c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c87e:	4b11      	ldr	r3, [pc, #68]	; (c8c4 <usb_serial_flush_output+0x48>)
    c880:	781b      	ldrb	r3, [r3, #0]
    c882:	b18b      	cbz	r3, c8a8 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    c884:	4e10      	ldr	r6, [pc, #64]	; (c8c8 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    c886:	4d11      	ldr	r5, [pc, #68]	; (c8cc <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    c888:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    c88a:	2701      	movs	r7, #1
    c88c:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    c88e:	b164      	cbz	r4, c8aa <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    c890:	4b0f      	ldr	r3, [pc, #60]	; (c8d0 <usb_serial_flush_output+0x54>)
    c892:	2700      	movs	r7, #0
    c894:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    c896:	8863      	ldrh	r3, [r4, #2]
    c898:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c89a:	4621      	mov	r1, r4
    c89c:	2004      	movs	r0, #4
    c89e:	f7ff fa2b 	bl	bcf8 <usb_tx>
		tx_packet = NULL;
    c8a2:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    c8a4:	2300      	movs	r3, #0
    c8a6:	702b      	strb	r3, [r5, #0]
}
    c8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    c8aa:	f7ff fe7b 	bl	c5a4 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    c8ae:	4b08      	ldr	r3, [pc, #32]	; (c8d0 <usb_serial_flush_output+0x54>)
		if (tx) {
    c8b0:	4601      	mov	r1, r0
    c8b2:	b120      	cbz	r0, c8be <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    c8b4:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    c8b6:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    c8b8:	f7ff fa1e 	bl	bcf8 <usb_tx>
    c8bc:	e7f2      	b.n	c8a4 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    c8be:	701f      	strb	r7, [r3, #0]
    c8c0:	e7f0      	b.n	c8a4 <usb_serial_flush_output+0x28>
    c8c2:	bf00      	nop
    c8c4:	1fffc5ac 	.word	0x1fffc5ac
    c8c8:	1fffc5c4 	.word	0x1fffc5c4
    c8cc:	1fffc5c1 	.word	0x1fffc5c1
    c8d0:	1fffc5d8 	.word	0x1fffc5d8

0000c8d4 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    c8d4:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    c8d6:	4b0e      	ldr	r3, [pc, #56]	; (c910 <usb_serial_flush_callback+0x3c>)
    c8d8:	781b      	ldrb	r3, [r3, #0]
    c8da:	b953      	cbnz	r3, c8f2 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    c8dc:	4c0d      	ldr	r4, [pc, #52]	; (c914 <usb_serial_flush_callback+0x40>)
    c8de:	6821      	ldr	r1, [r4, #0]
    c8e0:	b141      	cbz	r1, c8f4 <usb_serial_flush_callback+0x20>
    c8e2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    c8e6:	884b      	ldrh	r3, [r1, #2]
    c8e8:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c8ea:	2004      	movs	r0, #4
    c8ec:	f7ff fa04 	bl	bcf8 <usb_tx>
		tx_packet = NULL;
    c8f0:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    c8f2:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    c8f4:	f7ff fe56 	bl	c5a4 <usb_malloc>
		if (tx) {
    c8f8:	4601      	mov	r1, r0
    c8fa:	b120      	cbz	r0, c906 <usb_serial_flush_callback+0x32>
}
    c8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    c900:	2004      	movs	r0, #4
    c902:	f7ff b9f9 	b.w	bcf8 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    c906:	4b04      	ldr	r3, [pc, #16]	; (c918 <usb_serial_flush_callback+0x44>)
    c908:	2201      	movs	r2, #1
    c90a:	701a      	strb	r2, [r3, #0]
}
    c90c:	bd38      	pop	{r3, r4, r5, pc}
    c90e:	bf00      	nop
    c910:	1fffc5c1 	.word	0x1fffc5c1
    c914:	1fffc5c4 	.word	0x1fffc5c4
    c918:	1fffc5d8 	.word	0x1fffc5d8

0000c91c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c920:	4e32      	ldr	r6, [pc, #200]	; (c9ec <yield+0xd0>)
    c922:	7833      	ldrb	r3, [r6, #0]
    c924:	b163      	cbz	r3, c940 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c926:	4f32      	ldr	r7, [pc, #200]	; (c9f0 <yield+0xd4>)
    c928:	783a      	ldrb	r2, [r7, #0]
    c92a:	b94a      	cbnz	r2, c940 <yield+0x24>
	running = 1;
    c92c:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c92e:	07d9      	lsls	r1, r3, #31
	running = 1;
    c930:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c932:	d443      	bmi.n	c9bc <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c934:	079a      	lsls	r2, r3, #30
    c936:	d426      	bmi.n	c986 <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    c938:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c93a:	075b      	lsls	r3, r3, #29
	running = 0;
    c93c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c93e:	d401      	bmi.n	c944 <yield+0x28>
	
};
    c940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    c944:	4b2b      	ldr	r3, [pc, #172]	; (c9f4 <yield+0xd8>)
    c946:	681a      	ldr	r2, [r3, #0]
    c948:	2a00      	cmp	r2, #0
    c94a:	d0f9      	beq.n	c940 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c94c:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    c950:	2a00      	cmp	r2, #0
    c952:	d1f5      	bne.n	c940 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c954:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    c958:	b672      	cpsid	i
		EventResponder *first = firstYield;
    c95a:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c95c:	2800      	cmp	r0, #0
    c95e:	d03a      	beq.n	c9d6 <yield+0xba>
		if (runningFromYield) {
    c960:	4c25      	ldr	r4, [pc, #148]	; (c9f8 <yield+0xdc>)
    c962:	7821      	ldrb	r1, [r4, #0]
    c964:	2900      	cmp	r1, #0
    c966:	d136      	bne.n	c9d6 <yield+0xba>
		firstYield = first->_next;
    c968:	6942      	ldr	r2, [r0, #20]
    c96a:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    c96c:	2301      	movs	r3, #1
    c96e:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    c970:	2a00      	cmp	r2, #0
    c972:	d037      	beq.n	c9e4 <yield+0xc8>
			firstYield->_prev = nullptr;
    c974:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    c976:	b905      	cbnz	r5, c97a <yield+0x5e>
    c978:	b662      	cpsie	i
		first->_triggered = false;
    c97a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    c97c:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    c97e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c980:	4798      	blx	r3
		runningFromYield = false;
    c982:	7025      	strb	r5, [r4, #0]
    c984:	e7dc      	b.n	c940 <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c986:	f8df 8074 	ldr.w	r8, [pc, #116]	; c9fc <yield+0xe0>
    c98a:	f898 2000 	ldrb.w	r2, [r8]
    c98e:	2a00      	cmp	r2, #0
    c990:	d0d2      	beq.n	c938 <yield+0x1c>
    c992:	2500      	movs	r5, #0
    c994:	f8df 9068 	ldr.w	r9, [pc, #104]	; ca00 <yield+0xe4>
    c998:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c99a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    c99e:	6823      	ldr	r3, [r4, #0]
    c9a0:	4620      	mov	r0, r4
    c9a2:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c9a4:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    c9a6:	4798      	blx	r3
    c9a8:	b108      	cbz	r0, c9ae <yield+0x92>
    c9aa:	6923      	ldr	r3, [r4, #16]
    c9ac:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c9ae:	f898 2000 	ldrb.w	r2, [r8]
    c9b2:	b2eb      	uxtb	r3, r5
    c9b4:	429a      	cmp	r2, r3
    c9b6:	d8f0      	bhi.n	c99a <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c9b8:	7833      	ldrb	r3, [r6, #0]
    c9ba:	e7bd      	b.n	c938 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    c9bc:	f7ff fe76 	bl	c6ac <usb_serial_available>
		if (Serial.available()) serialEvent();
    c9c0:	b968      	cbnz	r0, c9de <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c9c2:	4b10      	ldr	r3, [pc, #64]	; (ca04 <yield+0xe8>)
    c9c4:	781b      	ldrb	r3, [r3, #0]
    c9c6:	b90b      	cbnz	r3, c9cc <yield+0xb0>
    c9c8:	7833      	ldrb	r3, [r6, #0]
    c9ca:	e7b3      	b.n	c934 <yield+0x18>
    c9cc:	7833      	ldrb	r3, [r6, #0]
    c9ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    c9d2:	7033      	strb	r3, [r6, #0]
    c9d4:	e7ae      	b.n	c934 <yield+0x18>
		if (doit) __enable_irq();
    c9d6:	2d00      	cmp	r5, #0
    c9d8:	d1b2      	bne.n	c940 <yield+0x24>
    c9da:	b662      	cpsie	i
    c9dc:	e7b0      	b.n	c940 <yield+0x24>
		if (Serial.available()) serialEvent();
    c9de:	f000 f83d 	bl	ca5c <serialEvent()>
    c9e2:	e7ee      	b.n	c9c2 <yield+0xa6>
			lastYield = nullptr;
    c9e4:	4b08      	ldr	r3, [pc, #32]	; (ca08 <yield+0xec>)
    c9e6:	601a      	str	r2, [r3, #0]
    c9e8:	e7c5      	b.n	c976 <yield+0x5a>
    c9ea:	bf00      	nop
    c9ec:	1fff8838 	.word	0x1fff8838
    c9f0:	1fffc5d9 	.word	0x1fffc5d9
    c9f4:	1fffc39c 	.word	0x1fffc39c
    c9f8:	1fffc3a8 	.word	0x1fffc3a8
    c9fc:	1fffc5e8 	.word	0x1fffc5e8
    ca00:	1fffc5dc 	.word	0x1fffc5dc
    ca04:	00015a50 	.word	0x00015a50
    ca08:	1fffc3ac 	.word	0x1fffc3ac

0000ca0c <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    ca0c:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ca0e:	4e10      	ldr	r6, [pc, #64]	; (ca50 <HardwareSerial::addToSerialEventsList()+0x44>)
    ca10:	4d10      	ldr	r5, [pc, #64]	; (ca54 <HardwareSerial::addToSerialEventsList()+0x48>)
    ca12:	7834      	ldrb	r4, [r6, #0]
    ca14:	b1d4      	cbz	r4, ca4c <HardwareSerial::addToSerialEventsList()+0x40>
    ca16:	1e62      	subs	r2, r4, #1
    ca18:	b2d2      	uxtb	r2, r2
    ca1a:	1d29      	adds	r1, r5, #4
    ca1c:	462b      	mov	r3, r5
    ca1e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    ca22:	e001      	b.n	ca28 <HardwareSerial::addToSerialEventsList()+0x1c>
    ca24:	428b      	cmp	r3, r1
    ca26:	d005      	beq.n	ca34 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    ca28:	f853 2b04 	ldr.w	r2, [r3], #4
    ca2c:	4282      	cmp	r2, r0
    ca2e:	d1f9      	bne.n	ca24 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    ca30:	bc70      	pop	{r4, r5, r6}
    ca32:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    ca34:	1c63      	adds	r3, r4, #1
    ca36:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    ca38:	4a07      	ldr	r2, [pc, #28]	; (ca58 <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    ca3a:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    ca3c:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    ca3e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    ca42:	f043 0302 	orr.w	r3, r3, #2
    ca46:	7013      	strb	r3, [r2, #0]
}
    ca48:	bc70      	pop	{r4, r5, r6}
    ca4a:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ca4c:	2301      	movs	r3, #1
    ca4e:	e7f3      	b.n	ca38 <HardwareSerial::addToSerialEventsList()+0x2c>
    ca50:	1fffc5e8 	.word	0x1fffc5e8
    ca54:	1fffc5dc 	.word	0x1fffc5dc
    ca58:	1fff8838 	.word	0x1fff8838

0000ca5c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    ca5c:	4770      	bx	lr
    ca5e:	bf00      	nop

0000ca60 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ca60:	b510      	push	{r4, lr}
    ca62:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    ca64:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ca66:	4a17      	ldr	r2, [pc, #92]	; (cac4 <usb_init_serialnumber+0x64>)
    ca68:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    ca6a:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    ca6c:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ca6e:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ca70:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    ca72:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    ca74:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ca76:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ca78:	7813      	ldrb	r3, [r2, #0]
    ca7a:	061b      	lsls	r3, r3, #24
    ca7c:	d5fc      	bpl.n	ca78 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    ca7e:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    ca80:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ca82:	4b11      	ldr	r3, [pc, #68]	; (cac8 <usb_init_serialnumber+0x68>)
    ca84:	4c11      	ldr	r4, [pc, #68]	; (cacc <usb_init_serialnumber+0x6c>)
    ca86:	4298      	cmp	r0, r3
    ca88:	bf38      	it	cc
    ca8a:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    ca8e:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    ca90:	bf38      	it	cc
    ca92:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    ca94:	220a      	movs	r2, #10
    ca96:	f7fd fd9f 	bl	a5d8 <ultoa>
	for (i=0; i<10; i++) {
    ca9a:	a901      	add	r1, sp, #4
    ca9c:	4620      	mov	r0, r4
    ca9e:	2300      	movs	r3, #0
		char c = buf[i];
    caa0:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    caa4:	3301      	adds	r3, #1
		if (!c) break;
    caa6:	b13a      	cbz	r2, cab8 <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    caa8:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    caaa:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    caae:	d1f7      	bne.n	caa0 <usb_init_serialnumber+0x40>
    cab0:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    cab2:	7023      	strb	r3, [r4, #0]
}
    cab4:	b004      	add	sp, #16
    cab6:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    cab8:	005b      	lsls	r3, r3, #1
    caba:	b2db      	uxtb	r3, r3
    cabc:	7023      	strb	r3, [r4, #0]
}
    cabe:	b004      	add	sp, #16
    cac0:	bd10      	pop	{r4, pc}
    cac2:	bf00      	nop
    cac4:	40020000 	.word	0x40020000
    cac8:	00989680 	.word	0x00989680
    cacc:	1fff88c8 	.word	0x1fff88c8

0000cad0 <expf>:
    cad0:	b538      	push	{r3, r4, r5, lr}
    cad2:	4604      	mov	r4, r0
    cad4:	f000 f82c 	bl	cb30 <__ieee754_expf>
    cad8:	4605      	mov	r5, r0
    cada:	4620      	mov	r0, r4
    cadc:	f000 f820 	bl	cb20 <finitef>
    cae0:	b148      	cbz	r0, caf6 <expf+0x26>
    cae2:	490d      	ldr	r1, [pc, #52]	; (cb18 <expf+0x48>)
    cae4:	4620      	mov	r0, r4
    cae6:	f000 feb5 	bl	d854 <__aeabi_fcmpgt>
    caea:	b930      	cbnz	r0, cafa <expf+0x2a>
    caec:	490b      	ldr	r1, [pc, #44]	; (cb1c <expf+0x4c>)
    caee:	4620      	mov	r0, r4
    caf0:	f000 fe92 	bl	d818 <__aeabi_fcmplt>
    caf4:	b948      	cbnz	r0, cb0a <expf+0x3a>
    caf6:	4628      	mov	r0, r5
    caf8:	bd38      	pop	{r3, r4, r5, pc}
    cafa:	f001 fe67 	bl	e7cc <__errno>
    cafe:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    cb02:	2322      	movs	r3, #34	; 0x22
    cb04:	6003      	str	r3, [r0, #0]
    cb06:	4628      	mov	r0, r5
    cb08:	bd38      	pop	{r3, r4, r5, pc}
    cb0a:	f001 fe5f 	bl	e7cc <__errno>
    cb0e:	2322      	movs	r3, #34	; 0x22
    cb10:	2500      	movs	r5, #0
    cb12:	6003      	str	r3, [r0, #0]
    cb14:	e7ef      	b.n	caf6 <expf+0x26>
    cb16:	bf00      	nop
    cb18:	42b17217 	.word	0x42b17217
    cb1c:	c2cff1b5 	.word	0xc2cff1b5

0000cb20 <finitef>:
    cb20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    cb24:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    cb28:	bfac      	ite	ge
    cb2a:	2000      	movge	r0, #0
    cb2c:	2001      	movlt	r0, #1
    cb2e:	4770      	bx	lr

0000cb30 <__ieee754_expf>:
    cb30:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    cb34:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb3c:	4604      	mov	r4, r0
    cb3e:	d86c      	bhi.n	cc1a <__ieee754_expf+0xea>
    cb40:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    cb44:	f000 80c6 	beq.w	ccd4 <__ieee754_expf+0x1a4>
    cb48:	497a      	ldr	r1, [pc, #488]	; (cd34 <__ieee754_expf+0x204>)
    cb4a:	4288      	cmp	r0, r1
    cb4c:	f300 80b4 	bgt.w	ccb8 <__ieee754_expf+0x188>
    cb50:	2800      	cmp	r0, #0
    cb52:	f2c0 80b6 	blt.w	ccc2 <__ieee754_expf+0x192>
    cb56:	4b78      	ldr	r3, [pc, #480]	; (cd38 <__ieee754_expf+0x208>)
    cb58:	429a      	cmp	r2, r3
    cb5a:	d963      	bls.n	cc24 <__ieee754_expf+0xf4>
    cb5c:	4b77      	ldr	r3, [pc, #476]	; (cd3c <__ieee754_expf+0x20c>)
    cb5e:	429a      	cmp	r2, r3
    cb60:	f200 80c5 	bhi.w	ccee <__ieee754_expf+0x1be>
    cb64:	4b76      	ldr	r3, [pc, #472]	; (cd40 <__ieee754_expf+0x210>)
    cb66:	4620      	mov	r0, r4
    cb68:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    cb6c:	f000 fbac 	bl	d2c8 <__aeabi_fsub>
    cb70:	4b74      	ldr	r3, [pc, #464]	; (cd44 <__ieee754_expf+0x214>)
    cb72:	f1c5 0601 	rsb	r6, r5, #1
    cb76:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    cb7a:	4680      	mov	r8, r0
    cb7c:	1b76      	subs	r6, r6, r5
    cb7e:	4649      	mov	r1, r9
    cb80:	4640      	mov	r0, r8
    cb82:	f000 fba1 	bl	d2c8 <__aeabi_fsub>
    cb86:	4601      	mov	r1, r0
    cb88:	4605      	mov	r5, r0
    cb8a:	f000 fca7 	bl	d4dc <__aeabi_fmul>
    cb8e:	496e      	ldr	r1, [pc, #440]	; (cd48 <__ieee754_expf+0x218>)
    cb90:	4604      	mov	r4, r0
    cb92:	f000 fca3 	bl	d4dc <__aeabi_fmul>
    cb96:	496d      	ldr	r1, [pc, #436]	; (cd4c <__ieee754_expf+0x21c>)
    cb98:	f000 fb96 	bl	d2c8 <__aeabi_fsub>
    cb9c:	4621      	mov	r1, r4
    cb9e:	f000 fc9d 	bl	d4dc <__aeabi_fmul>
    cba2:	496b      	ldr	r1, [pc, #428]	; (cd50 <__ieee754_expf+0x220>)
    cba4:	f000 fb92 	bl	d2cc <__addsf3>
    cba8:	4621      	mov	r1, r4
    cbaa:	f000 fc97 	bl	d4dc <__aeabi_fmul>
    cbae:	4969      	ldr	r1, [pc, #420]	; (cd54 <__ieee754_expf+0x224>)
    cbb0:	f000 fb8a 	bl	d2c8 <__aeabi_fsub>
    cbb4:	4621      	mov	r1, r4
    cbb6:	f000 fc91 	bl	d4dc <__aeabi_fmul>
    cbba:	4967      	ldr	r1, [pc, #412]	; (cd58 <__ieee754_expf+0x228>)
    cbbc:	f000 fb86 	bl	d2cc <__addsf3>
    cbc0:	4621      	mov	r1, r4
    cbc2:	f000 fc8b 	bl	d4dc <__aeabi_fmul>
    cbc6:	4601      	mov	r1, r0
    cbc8:	4628      	mov	r0, r5
    cbca:	f000 fb7d 	bl	d2c8 <__aeabi_fsub>
    cbce:	462c      	mov	r4, r5
    cbd0:	4607      	mov	r7, r0
    cbd2:	4682      	mov	sl, r0
    cbd4:	2e00      	cmp	r6, #0
    cbd6:	d057      	beq.n	cc88 <__ieee754_expf+0x158>
    cbd8:	4639      	mov	r1, r7
    cbda:	4628      	mov	r0, r5
    cbdc:	f000 fc7e 	bl	d4dc <__aeabi_fmul>
    cbe0:	4639      	mov	r1, r7
    cbe2:	4604      	mov	r4, r0
    cbe4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cbe8:	f000 fb6e 	bl	d2c8 <__aeabi_fsub>
    cbec:	4601      	mov	r1, r0
    cbee:	4620      	mov	r0, r4
    cbf0:	f000 fd28 	bl	d644 <__aeabi_fdiv>
    cbf4:	4601      	mov	r1, r0
    cbf6:	4648      	mov	r0, r9
    cbf8:	f000 fb66 	bl	d2c8 <__aeabi_fsub>
    cbfc:	4641      	mov	r1, r8
    cbfe:	f000 fb63 	bl	d2c8 <__aeabi_fsub>
    cc02:	4601      	mov	r1, r0
    cc04:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    cc08:	f000 fb5e 	bl	d2c8 <__aeabi_fsub>
    cc0c:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    cc10:	db64      	blt.n	ccdc <__ieee754_expf+0x1ac>
    cc12:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    cc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc1a:	4601      	mov	r1, r0
    cc1c:	f000 fb56 	bl	d2cc <__addsf3>
    cc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc24:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    cc28:	d209      	bcs.n	cc3e <__ieee754_expf+0x10e>
    cc2a:	494c      	ldr	r1, [pc, #304]	; (cd5c <__ieee754_expf+0x22c>)
    cc2c:	4620      	mov	r0, r4
    cc2e:	f000 fb4d 	bl	d2cc <__addsf3>
    cc32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    cc36:	f000 fe0d 	bl	d854 <__aeabi_fcmpgt>
    cc3a:	2800      	cmp	r0, #0
    cc3c:	d174      	bne.n	cd28 <__ieee754_expf+0x1f8>
    cc3e:	4621      	mov	r1, r4
    cc40:	4620      	mov	r0, r4
    cc42:	f000 fc4b 	bl	d4dc <__aeabi_fmul>
    cc46:	4940      	ldr	r1, [pc, #256]	; (cd48 <__ieee754_expf+0x218>)
    cc48:	4605      	mov	r5, r0
    cc4a:	f000 fc47 	bl	d4dc <__aeabi_fmul>
    cc4e:	493f      	ldr	r1, [pc, #252]	; (cd4c <__ieee754_expf+0x21c>)
    cc50:	f000 fb3a 	bl	d2c8 <__aeabi_fsub>
    cc54:	4629      	mov	r1, r5
    cc56:	f000 fc41 	bl	d4dc <__aeabi_fmul>
    cc5a:	493d      	ldr	r1, [pc, #244]	; (cd50 <__ieee754_expf+0x220>)
    cc5c:	f000 fb36 	bl	d2cc <__addsf3>
    cc60:	4629      	mov	r1, r5
    cc62:	f000 fc3b 	bl	d4dc <__aeabi_fmul>
    cc66:	493b      	ldr	r1, [pc, #236]	; (cd54 <__ieee754_expf+0x224>)
    cc68:	f000 fb2e 	bl	d2c8 <__aeabi_fsub>
    cc6c:	4629      	mov	r1, r5
    cc6e:	f000 fc35 	bl	d4dc <__aeabi_fmul>
    cc72:	4939      	ldr	r1, [pc, #228]	; (cd58 <__ieee754_expf+0x228>)
    cc74:	f000 fb2a 	bl	d2cc <__addsf3>
    cc78:	4629      	mov	r1, r5
    cc7a:	f000 fc2f 	bl	d4dc <__aeabi_fmul>
    cc7e:	4601      	mov	r1, r0
    cc80:	4620      	mov	r0, r4
    cc82:	f000 fb21 	bl	d2c8 <__aeabi_fsub>
    cc86:	4682      	mov	sl, r0
    cc88:	4651      	mov	r1, sl
    cc8a:	4620      	mov	r0, r4
    cc8c:	f000 fc26 	bl	d4dc <__aeabi_fmul>
    cc90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cc94:	4605      	mov	r5, r0
    cc96:	4650      	mov	r0, sl
    cc98:	f000 fb16 	bl	d2c8 <__aeabi_fsub>
    cc9c:	4601      	mov	r1, r0
    cc9e:	4628      	mov	r0, r5
    cca0:	f000 fcd0 	bl	d644 <__aeabi_fdiv>
    cca4:	4621      	mov	r1, r4
    cca6:	f000 fb0f 	bl	d2c8 <__aeabi_fsub>
    ccaa:	4601      	mov	r1, r0
    ccac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    ccb0:	f000 fb0a 	bl	d2c8 <__aeabi_fsub>
    ccb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ccb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccbc:	2000      	movs	r0, #0
    ccbe:	f000 b87b 	b.w	cdb8 <__math_oflowf>
    ccc2:	4b27      	ldr	r3, [pc, #156]	; (cd60 <__ieee754_expf+0x230>)
    ccc4:	429a      	cmp	r2, r3
    ccc6:	f67f af46 	bls.w	cb56 <__ieee754_expf+0x26>
    ccca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccce:	2000      	movs	r0, #0
    ccd0:	f000 b86e 	b.w	cdb0 <__math_uflowf>
    ccd4:	2d00      	cmp	r5, #0
    ccd6:	d0a3      	beq.n	cc20 <__ieee754_expf+0xf0>
    ccd8:	2000      	movs	r0, #0
    ccda:	e7a1      	b.n	cc20 <__ieee754_expf+0xf0>
    ccdc:	3664      	adds	r6, #100	; 0x64
    ccde:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    cce2:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    cce6:	f000 fbf9 	bl	d4dc <__aeabi_fmul>
    ccea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ccee:	491d      	ldr	r1, [pc, #116]	; (cd64 <__ieee754_expf+0x234>)
    ccf0:	4620      	mov	r0, r4
    ccf2:	f000 fbf3 	bl	d4dc <__aeabi_fmul>
    ccf6:	4b1c      	ldr	r3, [pc, #112]	; (cd68 <__ieee754_expf+0x238>)
    ccf8:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    ccfc:	f000 fae6 	bl	d2cc <__addsf3>
    cd00:	f000 fdb2 	bl	d868 <__aeabi_f2iz>
    cd04:	4606      	mov	r6, r0
    cd06:	f000 fb95 	bl	d434 <__aeabi_i2f>
    cd0a:	4918      	ldr	r1, [pc, #96]	; (cd6c <__ieee754_expf+0x23c>)
    cd0c:	4605      	mov	r5, r0
    cd0e:	f000 fbe5 	bl	d4dc <__aeabi_fmul>
    cd12:	4601      	mov	r1, r0
    cd14:	4620      	mov	r0, r4
    cd16:	f000 fad7 	bl	d2c8 <__aeabi_fsub>
    cd1a:	4915      	ldr	r1, [pc, #84]	; (cd70 <__ieee754_expf+0x240>)
    cd1c:	4680      	mov	r8, r0
    cd1e:	4628      	mov	r0, r5
    cd20:	f000 fbdc 	bl	d4dc <__aeabi_fmul>
    cd24:	4681      	mov	r9, r0
    cd26:	e72a      	b.n	cb7e <__ieee754_expf+0x4e>
    cd28:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    cd2c:	4620      	mov	r0, r4
    cd2e:	f000 facd 	bl	d2cc <__addsf3>
    cd32:	e775      	b.n	cc20 <__ieee754_expf+0xf0>
    cd34:	42b17217 	.word	0x42b17217
    cd38:	3eb17218 	.word	0x3eb17218
    cd3c:	3f851591 	.word	0x3f851591
    cd40:	00015cd8 	.word	0x00015cd8
    cd44:	00015ce0 	.word	0x00015ce0
    cd48:	3331bb4c 	.word	0x3331bb4c
    cd4c:	35ddea0e 	.word	0x35ddea0e
    cd50:	388ab355 	.word	0x388ab355
    cd54:	3b360b61 	.word	0x3b360b61
    cd58:	3e2aaaab 	.word	0x3e2aaaab
    cd5c:	7149f2ca 	.word	0x7149f2ca
    cd60:	42cff1b5 	.word	0x42cff1b5
    cd64:	3fb8aa3b 	.word	0x3fb8aa3b
    cd68:	00015cd0 	.word	0x00015cd0
    cd6c:	3f317180 	.word	0x3f317180
    cd70:	3717f7d1 	.word	0x3717f7d1

0000cd74 <with_errnof>:
    cd74:	b538      	push	{r3, r4, r5, lr}
    cd76:	4605      	mov	r5, r0
    cd78:	460c      	mov	r4, r1
    cd7a:	f001 fd27 	bl	e7cc <__errno>
    cd7e:	4603      	mov	r3, r0
    cd80:	4628      	mov	r0, r5
    cd82:	601c      	str	r4, [r3, #0]
    cd84:	bd38      	pop	{r3, r4, r5, pc}
    cd86:	bf00      	nop

0000cd88 <xflowf>:
    cd88:	b508      	push	{r3, lr}
    cd8a:	b140      	cbz	r0, cd9e <xflowf+0x16>
    cd8c:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    cd90:	f000 fba4 	bl	d4dc <__aeabi_fmul>
    cd94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cd98:	2122      	movs	r1, #34	; 0x22
    cd9a:	f7ff bfeb 	b.w	cd74 <with_errnof>
    cd9e:	4608      	mov	r0, r1
    cda0:	f000 fb9c 	bl	d4dc <__aeabi_fmul>
    cda4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cda8:	2122      	movs	r1, #34	; 0x22
    cdaa:	f7ff bfe3 	b.w	cd74 <with_errnof>
    cdae:	bf00      	nop

0000cdb0 <__math_uflowf>:
    cdb0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    cdb4:	f7ff bfe8 	b.w	cd88 <xflowf>

0000cdb8 <__math_oflowf>:
    cdb8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    cdbc:	f7ff bfe4 	b.w	cd88 <xflowf>

0000cdc0 <__aeabi_atexit>:
    cdc0:	4603      	mov	r3, r0
    cdc2:	4608      	mov	r0, r1
    cdc4:	4619      	mov	r1, r3
    cdc6:	f001 ba45 	b.w	e254 <__cxa_atexit>
    cdca:	bf00      	nop

0000cdcc <__aeabi_drsub>:
    cdcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    cdd0:	e002      	b.n	cdd8 <__adddf3>
    cdd2:	bf00      	nop

0000cdd4 <__aeabi_dsub>:
    cdd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000cdd8 <__adddf3>:
    cdd8:	b530      	push	{r4, r5, lr}
    cdda:	ea4f 0441 	mov.w	r4, r1, lsl #1
    cdde:	ea4f 0543 	mov.w	r5, r3, lsl #1
    cde2:	ea94 0f05 	teq	r4, r5
    cde6:	bf08      	it	eq
    cde8:	ea90 0f02 	teqeq	r0, r2
    cdec:	bf1f      	itttt	ne
    cdee:	ea54 0c00 	orrsne.w	ip, r4, r0
    cdf2:	ea55 0c02 	orrsne.w	ip, r5, r2
    cdf6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    cdfa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cdfe:	f000 80e2 	beq.w	cfc6 <__adddf3+0x1ee>
    ce02:	ea4f 5454 	mov.w	r4, r4, lsr #21
    ce06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    ce0a:	bfb8      	it	lt
    ce0c:	426d      	neglt	r5, r5
    ce0e:	dd0c      	ble.n	ce2a <__adddf3+0x52>
    ce10:	442c      	add	r4, r5
    ce12:	ea80 0202 	eor.w	r2, r0, r2
    ce16:	ea81 0303 	eor.w	r3, r1, r3
    ce1a:	ea82 0000 	eor.w	r0, r2, r0
    ce1e:	ea83 0101 	eor.w	r1, r3, r1
    ce22:	ea80 0202 	eor.w	r2, r0, r2
    ce26:	ea81 0303 	eor.w	r3, r1, r3
    ce2a:	2d36      	cmp	r5, #54	; 0x36
    ce2c:	bf88      	it	hi
    ce2e:	bd30      	pophi	{r4, r5, pc}
    ce30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ce34:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ce38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    ce3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    ce40:	d002      	beq.n	ce48 <__adddf3+0x70>
    ce42:	4240      	negs	r0, r0
    ce44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ce48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    ce4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ce50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    ce54:	d002      	beq.n	ce5c <__adddf3+0x84>
    ce56:	4252      	negs	r2, r2
    ce58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ce5c:	ea94 0f05 	teq	r4, r5
    ce60:	f000 80a7 	beq.w	cfb2 <__adddf3+0x1da>
    ce64:	f1a4 0401 	sub.w	r4, r4, #1
    ce68:	f1d5 0e20 	rsbs	lr, r5, #32
    ce6c:	db0d      	blt.n	ce8a <__adddf3+0xb2>
    ce6e:	fa02 fc0e 	lsl.w	ip, r2, lr
    ce72:	fa22 f205 	lsr.w	r2, r2, r5
    ce76:	1880      	adds	r0, r0, r2
    ce78:	f141 0100 	adc.w	r1, r1, #0
    ce7c:	fa03 f20e 	lsl.w	r2, r3, lr
    ce80:	1880      	adds	r0, r0, r2
    ce82:	fa43 f305 	asr.w	r3, r3, r5
    ce86:	4159      	adcs	r1, r3
    ce88:	e00e      	b.n	cea8 <__adddf3+0xd0>
    ce8a:	f1a5 0520 	sub.w	r5, r5, #32
    ce8e:	f10e 0e20 	add.w	lr, lr, #32
    ce92:	2a01      	cmp	r2, #1
    ce94:	fa03 fc0e 	lsl.w	ip, r3, lr
    ce98:	bf28      	it	cs
    ce9a:	f04c 0c02 	orrcs.w	ip, ip, #2
    ce9e:	fa43 f305 	asr.w	r3, r3, r5
    cea2:	18c0      	adds	r0, r0, r3
    cea4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    cea8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ceac:	d507      	bpl.n	cebe <__adddf3+0xe6>
    ceae:	f04f 0e00 	mov.w	lr, #0
    ceb2:	f1dc 0c00 	rsbs	ip, ip, #0
    ceb6:	eb7e 0000 	sbcs.w	r0, lr, r0
    ceba:	eb6e 0101 	sbc.w	r1, lr, r1
    cebe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    cec2:	d31b      	bcc.n	cefc <__adddf3+0x124>
    cec4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    cec8:	d30c      	bcc.n	cee4 <__adddf3+0x10c>
    ceca:	0849      	lsrs	r1, r1, #1
    cecc:	ea5f 0030 	movs.w	r0, r0, rrx
    ced0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ced4:	f104 0401 	add.w	r4, r4, #1
    ced8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    cedc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    cee0:	f080 809a 	bcs.w	d018 <__adddf3+0x240>
    cee4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    cee8:	bf08      	it	eq
    ceea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ceee:	f150 0000 	adcs.w	r0, r0, #0
    cef2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cef6:	ea41 0105 	orr.w	r1, r1, r5
    cefa:	bd30      	pop	{r4, r5, pc}
    cefc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    cf00:	4140      	adcs	r0, r0
    cf02:	eb41 0101 	adc.w	r1, r1, r1
    cf06:	3c01      	subs	r4, #1
    cf08:	bf28      	it	cs
    cf0a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    cf0e:	d2e9      	bcs.n	cee4 <__adddf3+0x10c>
    cf10:	f091 0f00 	teq	r1, #0
    cf14:	bf04      	itt	eq
    cf16:	4601      	moveq	r1, r0
    cf18:	2000      	moveq	r0, #0
    cf1a:	fab1 f381 	clz	r3, r1
    cf1e:	bf08      	it	eq
    cf20:	3320      	addeq	r3, #32
    cf22:	f1a3 030b 	sub.w	r3, r3, #11
    cf26:	f1b3 0220 	subs.w	r2, r3, #32
    cf2a:	da0c      	bge.n	cf46 <__adddf3+0x16e>
    cf2c:	320c      	adds	r2, #12
    cf2e:	dd08      	ble.n	cf42 <__adddf3+0x16a>
    cf30:	f102 0c14 	add.w	ip, r2, #20
    cf34:	f1c2 020c 	rsb	r2, r2, #12
    cf38:	fa01 f00c 	lsl.w	r0, r1, ip
    cf3c:	fa21 f102 	lsr.w	r1, r1, r2
    cf40:	e00c      	b.n	cf5c <__adddf3+0x184>
    cf42:	f102 0214 	add.w	r2, r2, #20
    cf46:	bfd8      	it	le
    cf48:	f1c2 0c20 	rsble	ip, r2, #32
    cf4c:	fa01 f102 	lsl.w	r1, r1, r2
    cf50:	fa20 fc0c 	lsr.w	ip, r0, ip
    cf54:	bfdc      	itt	le
    cf56:	ea41 010c 	orrle.w	r1, r1, ip
    cf5a:	4090      	lslle	r0, r2
    cf5c:	1ae4      	subs	r4, r4, r3
    cf5e:	bfa2      	ittt	ge
    cf60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    cf64:	4329      	orrge	r1, r5
    cf66:	bd30      	popge	{r4, r5, pc}
    cf68:	ea6f 0404 	mvn.w	r4, r4
    cf6c:	3c1f      	subs	r4, #31
    cf6e:	da1c      	bge.n	cfaa <__adddf3+0x1d2>
    cf70:	340c      	adds	r4, #12
    cf72:	dc0e      	bgt.n	cf92 <__adddf3+0x1ba>
    cf74:	f104 0414 	add.w	r4, r4, #20
    cf78:	f1c4 0220 	rsb	r2, r4, #32
    cf7c:	fa20 f004 	lsr.w	r0, r0, r4
    cf80:	fa01 f302 	lsl.w	r3, r1, r2
    cf84:	ea40 0003 	orr.w	r0, r0, r3
    cf88:	fa21 f304 	lsr.w	r3, r1, r4
    cf8c:	ea45 0103 	orr.w	r1, r5, r3
    cf90:	bd30      	pop	{r4, r5, pc}
    cf92:	f1c4 040c 	rsb	r4, r4, #12
    cf96:	f1c4 0220 	rsb	r2, r4, #32
    cf9a:	fa20 f002 	lsr.w	r0, r0, r2
    cf9e:	fa01 f304 	lsl.w	r3, r1, r4
    cfa2:	ea40 0003 	orr.w	r0, r0, r3
    cfa6:	4629      	mov	r1, r5
    cfa8:	bd30      	pop	{r4, r5, pc}
    cfaa:	fa21 f004 	lsr.w	r0, r1, r4
    cfae:	4629      	mov	r1, r5
    cfb0:	bd30      	pop	{r4, r5, pc}
    cfb2:	f094 0f00 	teq	r4, #0
    cfb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    cfba:	bf06      	itte	eq
    cfbc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    cfc0:	3401      	addeq	r4, #1
    cfc2:	3d01      	subne	r5, #1
    cfc4:	e74e      	b.n	ce64 <__adddf3+0x8c>
    cfc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cfca:	bf18      	it	ne
    cfcc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cfd0:	d029      	beq.n	d026 <__adddf3+0x24e>
    cfd2:	ea94 0f05 	teq	r4, r5
    cfd6:	bf08      	it	eq
    cfd8:	ea90 0f02 	teqeq	r0, r2
    cfdc:	d005      	beq.n	cfea <__adddf3+0x212>
    cfde:	ea54 0c00 	orrs.w	ip, r4, r0
    cfe2:	bf04      	itt	eq
    cfe4:	4619      	moveq	r1, r3
    cfe6:	4610      	moveq	r0, r2
    cfe8:	bd30      	pop	{r4, r5, pc}
    cfea:	ea91 0f03 	teq	r1, r3
    cfee:	bf1e      	ittt	ne
    cff0:	2100      	movne	r1, #0
    cff2:	2000      	movne	r0, #0
    cff4:	bd30      	popne	{r4, r5, pc}
    cff6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    cffa:	d105      	bne.n	d008 <__adddf3+0x230>
    cffc:	0040      	lsls	r0, r0, #1
    cffe:	4149      	adcs	r1, r1
    d000:	bf28      	it	cs
    d002:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    d006:	bd30      	pop	{r4, r5, pc}
    d008:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    d00c:	bf3c      	itt	cc
    d00e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    d012:	bd30      	popcc	{r4, r5, pc}
    d014:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d018:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    d01c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d020:	f04f 0000 	mov.w	r0, #0
    d024:	bd30      	pop	{r4, r5, pc}
    d026:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    d02a:	bf1a      	itte	ne
    d02c:	4619      	movne	r1, r3
    d02e:	4610      	movne	r0, r2
    d030:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    d034:	bf1c      	itt	ne
    d036:	460b      	movne	r3, r1
    d038:	4602      	movne	r2, r0
    d03a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d03e:	bf06      	itte	eq
    d040:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    d044:	ea91 0f03 	teqeq	r1, r3
    d048:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    d04c:	bd30      	pop	{r4, r5, pc}
    d04e:	bf00      	nop

0000d050 <__aeabi_ui2d>:
    d050:	f090 0f00 	teq	r0, #0
    d054:	bf04      	itt	eq
    d056:	2100      	moveq	r1, #0
    d058:	4770      	bxeq	lr
    d05a:	b530      	push	{r4, r5, lr}
    d05c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d060:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d064:	f04f 0500 	mov.w	r5, #0
    d068:	f04f 0100 	mov.w	r1, #0
    d06c:	e750      	b.n	cf10 <__adddf3+0x138>
    d06e:	bf00      	nop

0000d070 <__aeabi_i2d>:
    d070:	f090 0f00 	teq	r0, #0
    d074:	bf04      	itt	eq
    d076:	2100      	moveq	r1, #0
    d078:	4770      	bxeq	lr
    d07a:	b530      	push	{r4, r5, lr}
    d07c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d080:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d084:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    d088:	bf48      	it	mi
    d08a:	4240      	negmi	r0, r0
    d08c:	f04f 0100 	mov.w	r1, #0
    d090:	e73e      	b.n	cf10 <__adddf3+0x138>
    d092:	bf00      	nop

0000d094 <__aeabi_f2d>:
    d094:	0042      	lsls	r2, r0, #1
    d096:	ea4f 01e2 	mov.w	r1, r2, asr #3
    d09a:	ea4f 0131 	mov.w	r1, r1, rrx
    d09e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    d0a2:	bf1f      	itttt	ne
    d0a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    d0a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d0ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    d0b0:	4770      	bxne	lr
    d0b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    d0b6:	bf08      	it	eq
    d0b8:	4770      	bxeq	lr
    d0ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    d0be:	bf04      	itt	eq
    d0c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    d0c4:	4770      	bxeq	lr
    d0c6:	b530      	push	{r4, r5, lr}
    d0c8:	f44f 7460 	mov.w	r4, #896	; 0x380
    d0cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d0d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d0d4:	e71c      	b.n	cf10 <__adddf3+0x138>
    d0d6:	bf00      	nop

0000d0d8 <__aeabi_ul2d>:
    d0d8:	ea50 0201 	orrs.w	r2, r0, r1
    d0dc:	bf08      	it	eq
    d0de:	4770      	bxeq	lr
    d0e0:	b530      	push	{r4, r5, lr}
    d0e2:	f04f 0500 	mov.w	r5, #0
    d0e6:	e00a      	b.n	d0fe <__aeabi_l2d+0x16>

0000d0e8 <__aeabi_l2d>:
    d0e8:	ea50 0201 	orrs.w	r2, r0, r1
    d0ec:	bf08      	it	eq
    d0ee:	4770      	bxeq	lr
    d0f0:	b530      	push	{r4, r5, lr}
    d0f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    d0f6:	d502      	bpl.n	d0fe <__aeabi_l2d+0x16>
    d0f8:	4240      	negs	r0, r0
    d0fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d0fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d102:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d106:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    d10a:	f43f aed8 	beq.w	cebe <__adddf3+0xe6>
    d10e:	f04f 0203 	mov.w	r2, #3
    d112:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d116:	bf18      	it	ne
    d118:	3203      	addne	r2, #3
    d11a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d11e:	bf18      	it	ne
    d120:	3203      	addne	r2, #3
    d122:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    d126:	f1c2 0320 	rsb	r3, r2, #32
    d12a:	fa00 fc03 	lsl.w	ip, r0, r3
    d12e:	fa20 f002 	lsr.w	r0, r0, r2
    d132:	fa01 fe03 	lsl.w	lr, r1, r3
    d136:	ea40 000e 	orr.w	r0, r0, lr
    d13a:	fa21 f102 	lsr.w	r1, r1, r2
    d13e:	4414      	add	r4, r2
    d140:	e6bd      	b.n	cebe <__adddf3+0xe6>
    d142:	bf00      	nop

0000d144 <__gedf2>:
    d144:	f04f 3cff 	mov.w	ip, #4294967295
    d148:	e006      	b.n	d158 <__cmpdf2+0x4>
    d14a:	bf00      	nop

0000d14c <__ledf2>:
    d14c:	f04f 0c01 	mov.w	ip, #1
    d150:	e002      	b.n	d158 <__cmpdf2+0x4>
    d152:	bf00      	nop

0000d154 <__cmpdf2>:
    d154:	f04f 0c01 	mov.w	ip, #1
    d158:	f84d cd04 	str.w	ip, [sp, #-4]!
    d15c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d160:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d168:	bf18      	it	ne
    d16a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    d16e:	d01b      	beq.n	d1a8 <__cmpdf2+0x54>
    d170:	b001      	add	sp, #4
    d172:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    d176:	bf0c      	ite	eq
    d178:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    d17c:	ea91 0f03 	teqne	r1, r3
    d180:	bf02      	ittt	eq
    d182:	ea90 0f02 	teqeq	r0, r2
    d186:	2000      	moveq	r0, #0
    d188:	4770      	bxeq	lr
    d18a:	f110 0f00 	cmn.w	r0, #0
    d18e:	ea91 0f03 	teq	r1, r3
    d192:	bf58      	it	pl
    d194:	4299      	cmppl	r1, r3
    d196:	bf08      	it	eq
    d198:	4290      	cmpeq	r0, r2
    d19a:	bf2c      	ite	cs
    d19c:	17d8      	asrcs	r0, r3, #31
    d19e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    d1a2:	f040 0001 	orr.w	r0, r0, #1
    d1a6:	4770      	bx	lr
    d1a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d1ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d1b0:	d102      	bne.n	d1b8 <__cmpdf2+0x64>
    d1b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d1b6:	d107      	bne.n	d1c8 <__cmpdf2+0x74>
    d1b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d1bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d1c0:	d1d6      	bne.n	d170 <__cmpdf2+0x1c>
    d1c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d1c6:	d0d3      	beq.n	d170 <__cmpdf2+0x1c>
    d1c8:	f85d 0b04 	ldr.w	r0, [sp], #4
    d1cc:	4770      	bx	lr
    d1ce:	bf00      	nop

0000d1d0 <__aeabi_cdrcmple>:
    d1d0:	4684      	mov	ip, r0
    d1d2:	4610      	mov	r0, r2
    d1d4:	4662      	mov	r2, ip
    d1d6:	468c      	mov	ip, r1
    d1d8:	4619      	mov	r1, r3
    d1da:	4663      	mov	r3, ip
    d1dc:	e000      	b.n	d1e0 <__aeabi_cdcmpeq>
    d1de:	bf00      	nop

0000d1e0 <__aeabi_cdcmpeq>:
    d1e0:	b501      	push	{r0, lr}
    d1e2:	f7ff ffb7 	bl	d154 <__cmpdf2>
    d1e6:	2800      	cmp	r0, #0
    d1e8:	bf48      	it	mi
    d1ea:	f110 0f00 	cmnmi.w	r0, #0
    d1ee:	bd01      	pop	{r0, pc}

0000d1f0 <__aeabi_dcmpeq>:
    d1f0:	f84d ed08 	str.w	lr, [sp, #-8]!
    d1f4:	f7ff fff4 	bl	d1e0 <__aeabi_cdcmpeq>
    d1f8:	bf0c      	ite	eq
    d1fa:	2001      	moveq	r0, #1
    d1fc:	2000      	movne	r0, #0
    d1fe:	f85d fb08 	ldr.w	pc, [sp], #8
    d202:	bf00      	nop

0000d204 <__aeabi_dcmplt>:
    d204:	f84d ed08 	str.w	lr, [sp, #-8]!
    d208:	f7ff ffea 	bl	d1e0 <__aeabi_cdcmpeq>
    d20c:	bf34      	ite	cc
    d20e:	2001      	movcc	r0, #1
    d210:	2000      	movcs	r0, #0
    d212:	f85d fb08 	ldr.w	pc, [sp], #8
    d216:	bf00      	nop

0000d218 <__aeabi_dcmple>:
    d218:	f84d ed08 	str.w	lr, [sp, #-8]!
    d21c:	f7ff ffe0 	bl	d1e0 <__aeabi_cdcmpeq>
    d220:	bf94      	ite	ls
    d222:	2001      	movls	r0, #1
    d224:	2000      	movhi	r0, #0
    d226:	f85d fb08 	ldr.w	pc, [sp], #8
    d22a:	bf00      	nop

0000d22c <__aeabi_dcmpge>:
    d22c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d230:	f7ff ffce 	bl	d1d0 <__aeabi_cdrcmple>
    d234:	bf94      	ite	ls
    d236:	2001      	movls	r0, #1
    d238:	2000      	movhi	r0, #0
    d23a:	f85d fb08 	ldr.w	pc, [sp], #8
    d23e:	bf00      	nop

0000d240 <__aeabi_dcmpgt>:
    d240:	f84d ed08 	str.w	lr, [sp, #-8]!
    d244:	f7ff ffc4 	bl	d1d0 <__aeabi_cdrcmple>
    d248:	bf34      	ite	cc
    d24a:	2001      	movcc	r0, #1
    d24c:	2000      	movcs	r0, #0
    d24e:	f85d fb08 	ldr.w	pc, [sp], #8
    d252:	bf00      	nop

0000d254 <__aeabi_dcmpun>:
    d254:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d258:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d25c:	d102      	bne.n	d264 <__aeabi_dcmpun+0x10>
    d25e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d262:	d10a      	bne.n	d27a <__aeabi_dcmpun+0x26>
    d264:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d268:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d26c:	d102      	bne.n	d274 <__aeabi_dcmpun+0x20>
    d26e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d272:	d102      	bne.n	d27a <__aeabi_dcmpun+0x26>
    d274:	f04f 0000 	mov.w	r0, #0
    d278:	4770      	bx	lr
    d27a:	f04f 0001 	mov.w	r0, #1
    d27e:	4770      	bx	lr

0000d280 <__aeabi_d2uiz>:
    d280:	004a      	lsls	r2, r1, #1
    d282:	d211      	bcs.n	d2a8 <__aeabi_d2uiz+0x28>
    d284:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d288:	d211      	bcs.n	d2ae <__aeabi_d2uiz+0x2e>
    d28a:	d50d      	bpl.n	d2a8 <__aeabi_d2uiz+0x28>
    d28c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d290:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d294:	d40e      	bmi.n	d2b4 <__aeabi_d2uiz+0x34>
    d296:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d29a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d29e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d2a2:	fa23 f002 	lsr.w	r0, r3, r2
    d2a6:	4770      	bx	lr
    d2a8:	f04f 0000 	mov.w	r0, #0
    d2ac:	4770      	bx	lr
    d2ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d2b2:	d102      	bne.n	d2ba <__aeabi_d2uiz+0x3a>
    d2b4:	f04f 30ff 	mov.w	r0, #4294967295
    d2b8:	4770      	bx	lr
    d2ba:	f04f 0000 	mov.w	r0, #0
    d2be:	4770      	bx	lr

0000d2c0 <__aeabi_frsub>:
    d2c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    d2c4:	e002      	b.n	d2cc <__addsf3>
    d2c6:	bf00      	nop

0000d2c8 <__aeabi_fsub>:
    d2c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000d2cc <__addsf3>:
    d2cc:	0042      	lsls	r2, r0, #1
    d2ce:	bf1f      	itttt	ne
    d2d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    d2d4:	ea92 0f03 	teqne	r2, r3
    d2d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    d2dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d2e0:	d06a      	beq.n	d3b8 <__addsf3+0xec>
    d2e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    d2e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    d2ea:	bfc1      	itttt	gt
    d2ec:	18d2      	addgt	r2, r2, r3
    d2ee:	4041      	eorgt	r1, r0
    d2f0:	4048      	eorgt	r0, r1
    d2f2:	4041      	eorgt	r1, r0
    d2f4:	bfb8      	it	lt
    d2f6:	425b      	neglt	r3, r3
    d2f8:	2b19      	cmp	r3, #25
    d2fa:	bf88      	it	hi
    d2fc:	4770      	bxhi	lr
    d2fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d302:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d30a:	bf18      	it	ne
    d30c:	4240      	negne	r0, r0
    d30e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d312:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    d316:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    d31a:	bf18      	it	ne
    d31c:	4249      	negne	r1, r1
    d31e:	ea92 0f03 	teq	r2, r3
    d322:	d03f      	beq.n	d3a4 <__addsf3+0xd8>
    d324:	f1a2 0201 	sub.w	r2, r2, #1
    d328:	fa41 fc03 	asr.w	ip, r1, r3
    d32c:	eb10 000c 	adds.w	r0, r0, ip
    d330:	f1c3 0320 	rsb	r3, r3, #32
    d334:	fa01 f103 	lsl.w	r1, r1, r3
    d338:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    d33c:	d502      	bpl.n	d344 <__addsf3+0x78>
    d33e:	4249      	negs	r1, r1
    d340:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    d344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d348:	d313      	bcc.n	d372 <__addsf3+0xa6>
    d34a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    d34e:	d306      	bcc.n	d35e <__addsf3+0x92>
    d350:	0840      	lsrs	r0, r0, #1
    d352:	ea4f 0131 	mov.w	r1, r1, rrx
    d356:	f102 0201 	add.w	r2, r2, #1
    d35a:	2afe      	cmp	r2, #254	; 0xfe
    d35c:	d251      	bcs.n	d402 <__addsf3+0x136>
    d35e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    d362:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d366:	bf08      	it	eq
    d368:	f020 0001 	biceq.w	r0, r0, #1
    d36c:	ea40 0003 	orr.w	r0, r0, r3
    d370:	4770      	bx	lr
    d372:	0049      	lsls	r1, r1, #1
    d374:	eb40 0000 	adc.w	r0, r0, r0
    d378:	3a01      	subs	r2, #1
    d37a:	bf28      	it	cs
    d37c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    d380:	d2ed      	bcs.n	d35e <__addsf3+0x92>
    d382:	fab0 fc80 	clz	ip, r0
    d386:	f1ac 0c08 	sub.w	ip, ip, #8
    d38a:	ebb2 020c 	subs.w	r2, r2, ip
    d38e:	fa00 f00c 	lsl.w	r0, r0, ip
    d392:	bfaa      	itet	ge
    d394:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    d398:	4252      	neglt	r2, r2
    d39a:	4318      	orrge	r0, r3
    d39c:	bfbc      	itt	lt
    d39e:	40d0      	lsrlt	r0, r2
    d3a0:	4318      	orrlt	r0, r3
    d3a2:	4770      	bx	lr
    d3a4:	f092 0f00 	teq	r2, #0
    d3a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    d3ac:	bf06      	itte	eq
    d3ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    d3b2:	3201      	addeq	r2, #1
    d3b4:	3b01      	subne	r3, #1
    d3b6:	e7b5      	b.n	d324 <__addsf3+0x58>
    d3b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    d3bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d3c0:	bf18      	it	ne
    d3c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d3c6:	d021      	beq.n	d40c <__addsf3+0x140>
    d3c8:	ea92 0f03 	teq	r2, r3
    d3cc:	d004      	beq.n	d3d8 <__addsf3+0x10c>
    d3ce:	f092 0f00 	teq	r2, #0
    d3d2:	bf08      	it	eq
    d3d4:	4608      	moveq	r0, r1
    d3d6:	4770      	bx	lr
    d3d8:	ea90 0f01 	teq	r0, r1
    d3dc:	bf1c      	itt	ne
    d3de:	2000      	movne	r0, #0
    d3e0:	4770      	bxne	lr
    d3e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    d3e6:	d104      	bne.n	d3f2 <__addsf3+0x126>
    d3e8:	0040      	lsls	r0, r0, #1
    d3ea:	bf28      	it	cs
    d3ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    d3f0:	4770      	bx	lr
    d3f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    d3f6:	bf3c      	itt	cc
    d3f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    d3fc:	4770      	bxcc	lr
    d3fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    d402:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    d406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d40a:	4770      	bx	lr
    d40c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    d410:	bf16      	itet	ne
    d412:	4608      	movne	r0, r1
    d414:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    d418:	4601      	movne	r1, r0
    d41a:	0242      	lsls	r2, r0, #9
    d41c:	bf06      	itte	eq
    d41e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    d422:	ea90 0f01 	teqeq	r0, r1
    d426:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    d42a:	4770      	bx	lr

0000d42c <__aeabi_ui2f>:
    d42c:	f04f 0300 	mov.w	r3, #0
    d430:	e004      	b.n	d43c <__aeabi_i2f+0x8>
    d432:	bf00      	nop

0000d434 <__aeabi_i2f>:
    d434:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    d438:	bf48      	it	mi
    d43a:	4240      	negmi	r0, r0
    d43c:	ea5f 0c00 	movs.w	ip, r0
    d440:	bf08      	it	eq
    d442:	4770      	bxeq	lr
    d444:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    d448:	4601      	mov	r1, r0
    d44a:	f04f 0000 	mov.w	r0, #0
    d44e:	e01c      	b.n	d48a <__aeabi_l2f+0x2a>

0000d450 <__aeabi_ul2f>:
    d450:	ea50 0201 	orrs.w	r2, r0, r1
    d454:	bf08      	it	eq
    d456:	4770      	bxeq	lr
    d458:	f04f 0300 	mov.w	r3, #0
    d45c:	e00a      	b.n	d474 <__aeabi_l2f+0x14>
    d45e:	bf00      	nop

0000d460 <__aeabi_l2f>:
    d460:	ea50 0201 	orrs.w	r2, r0, r1
    d464:	bf08      	it	eq
    d466:	4770      	bxeq	lr
    d468:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    d46c:	d502      	bpl.n	d474 <__aeabi_l2f+0x14>
    d46e:	4240      	negs	r0, r0
    d470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d474:	ea5f 0c01 	movs.w	ip, r1
    d478:	bf02      	ittt	eq
    d47a:	4684      	moveq	ip, r0
    d47c:	4601      	moveq	r1, r0
    d47e:	2000      	moveq	r0, #0
    d480:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    d484:	bf08      	it	eq
    d486:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    d48a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    d48e:	fabc f28c 	clz	r2, ip
    d492:	3a08      	subs	r2, #8
    d494:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    d498:	db10      	blt.n	d4bc <__aeabi_l2f+0x5c>
    d49a:	fa01 fc02 	lsl.w	ip, r1, r2
    d49e:	4463      	add	r3, ip
    d4a0:	fa00 fc02 	lsl.w	ip, r0, r2
    d4a4:	f1c2 0220 	rsb	r2, r2, #32
    d4a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    d4ac:	fa20 f202 	lsr.w	r2, r0, r2
    d4b0:	eb43 0002 	adc.w	r0, r3, r2
    d4b4:	bf08      	it	eq
    d4b6:	f020 0001 	biceq.w	r0, r0, #1
    d4ba:	4770      	bx	lr
    d4bc:	f102 0220 	add.w	r2, r2, #32
    d4c0:	fa01 fc02 	lsl.w	ip, r1, r2
    d4c4:	f1c2 0220 	rsb	r2, r2, #32
    d4c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    d4cc:	fa21 f202 	lsr.w	r2, r1, r2
    d4d0:	eb43 0002 	adc.w	r0, r3, r2
    d4d4:	bf08      	it	eq
    d4d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    d4da:	4770      	bx	lr

0000d4dc <__aeabi_fmul>:
    d4dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d4e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    d4e4:	bf1e      	ittt	ne
    d4e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    d4ea:	ea92 0f0c 	teqne	r2, ip
    d4ee:	ea93 0f0c 	teqne	r3, ip
    d4f2:	d06f      	beq.n	d5d4 <__aeabi_fmul+0xf8>
    d4f4:	441a      	add	r2, r3
    d4f6:	ea80 0c01 	eor.w	ip, r0, r1
    d4fa:	0240      	lsls	r0, r0, #9
    d4fc:	bf18      	it	ne
    d4fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    d502:	d01e      	beq.n	d542 <__aeabi_fmul+0x66>
    d504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    d508:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    d50c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    d510:	fba0 3101 	umull	r3, r1, r0, r1
    d514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    d518:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    d51c:	bf3e      	ittt	cc
    d51e:	0049      	lslcc	r1, r1, #1
    d520:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    d524:	005b      	lslcc	r3, r3, #1
    d526:	ea40 0001 	orr.w	r0, r0, r1
    d52a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    d52e:	2afd      	cmp	r2, #253	; 0xfd
    d530:	d81d      	bhi.n	d56e <__aeabi_fmul+0x92>
    d532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    d536:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d53a:	bf08      	it	eq
    d53c:	f020 0001 	biceq.w	r0, r0, #1
    d540:	4770      	bx	lr
    d542:	f090 0f00 	teq	r0, #0
    d546:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    d54a:	bf08      	it	eq
    d54c:	0249      	lsleq	r1, r1, #9
    d54e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    d552:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    d556:	3a7f      	subs	r2, #127	; 0x7f
    d558:	bfc2      	ittt	gt
    d55a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    d55e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    d562:	4770      	bxgt	lr
    d564:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d568:	f04f 0300 	mov.w	r3, #0
    d56c:	3a01      	subs	r2, #1
    d56e:	dc5d      	bgt.n	d62c <__aeabi_fmul+0x150>
    d570:	f112 0f19 	cmn.w	r2, #25
    d574:	bfdc      	itt	le
    d576:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    d57a:	4770      	bxle	lr
    d57c:	f1c2 0200 	rsb	r2, r2, #0
    d580:	0041      	lsls	r1, r0, #1
    d582:	fa21 f102 	lsr.w	r1, r1, r2
    d586:	f1c2 0220 	rsb	r2, r2, #32
    d58a:	fa00 fc02 	lsl.w	ip, r0, r2
    d58e:	ea5f 0031 	movs.w	r0, r1, rrx
    d592:	f140 0000 	adc.w	r0, r0, #0
    d596:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    d59a:	bf08      	it	eq
    d59c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    d5a0:	4770      	bx	lr
    d5a2:	f092 0f00 	teq	r2, #0
    d5a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d5aa:	bf02      	ittt	eq
    d5ac:	0040      	lsleq	r0, r0, #1
    d5ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d5b2:	3a01      	subeq	r2, #1
    d5b4:	d0f9      	beq.n	d5aa <__aeabi_fmul+0xce>
    d5b6:	ea40 000c 	orr.w	r0, r0, ip
    d5ba:	f093 0f00 	teq	r3, #0
    d5be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d5c2:	bf02      	ittt	eq
    d5c4:	0049      	lsleq	r1, r1, #1
    d5c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d5ca:	3b01      	subeq	r3, #1
    d5cc:	d0f9      	beq.n	d5c2 <__aeabi_fmul+0xe6>
    d5ce:	ea41 010c 	orr.w	r1, r1, ip
    d5d2:	e78f      	b.n	d4f4 <__aeabi_fmul+0x18>
    d5d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d5d8:	ea92 0f0c 	teq	r2, ip
    d5dc:	bf18      	it	ne
    d5de:	ea93 0f0c 	teqne	r3, ip
    d5e2:	d00a      	beq.n	d5fa <__aeabi_fmul+0x11e>
    d5e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d5e8:	bf18      	it	ne
    d5ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d5ee:	d1d8      	bne.n	d5a2 <__aeabi_fmul+0xc6>
    d5f0:	ea80 0001 	eor.w	r0, r0, r1
    d5f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    d5f8:	4770      	bx	lr
    d5fa:	f090 0f00 	teq	r0, #0
    d5fe:	bf17      	itett	ne
    d600:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    d604:	4608      	moveq	r0, r1
    d606:	f091 0f00 	teqne	r1, #0
    d60a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    d60e:	d014      	beq.n	d63a <__aeabi_fmul+0x15e>
    d610:	ea92 0f0c 	teq	r2, ip
    d614:	d101      	bne.n	d61a <__aeabi_fmul+0x13e>
    d616:	0242      	lsls	r2, r0, #9
    d618:	d10f      	bne.n	d63a <__aeabi_fmul+0x15e>
    d61a:	ea93 0f0c 	teq	r3, ip
    d61e:	d103      	bne.n	d628 <__aeabi_fmul+0x14c>
    d620:	024b      	lsls	r3, r1, #9
    d622:	bf18      	it	ne
    d624:	4608      	movne	r0, r1
    d626:	d108      	bne.n	d63a <__aeabi_fmul+0x15e>
    d628:	ea80 0001 	eor.w	r0, r0, r1
    d62c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    d630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d638:	4770      	bx	lr
    d63a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d63e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    d642:	4770      	bx	lr

0000d644 <__aeabi_fdiv>:
    d644:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d648:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    d64c:	bf1e      	ittt	ne
    d64e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    d652:	ea92 0f0c 	teqne	r2, ip
    d656:	ea93 0f0c 	teqne	r3, ip
    d65a:	d069      	beq.n	d730 <__aeabi_fdiv+0xec>
    d65c:	eba2 0203 	sub.w	r2, r2, r3
    d660:	ea80 0c01 	eor.w	ip, r0, r1
    d664:	0249      	lsls	r1, r1, #9
    d666:	ea4f 2040 	mov.w	r0, r0, lsl #9
    d66a:	d037      	beq.n	d6dc <__aeabi_fdiv+0x98>
    d66c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d670:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    d674:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    d678:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    d67c:	428b      	cmp	r3, r1
    d67e:	bf38      	it	cc
    d680:	005b      	lslcc	r3, r3, #1
    d682:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    d686:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    d68a:	428b      	cmp	r3, r1
    d68c:	bf24      	itt	cs
    d68e:	1a5b      	subcs	r3, r3, r1
    d690:	ea40 000c 	orrcs.w	r0, r0, ip
    d694:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    d698:	bf24      	itt	cs
    d69a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    d69e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d6a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    d6a6:	bf24      	itt	cs
    d6a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    d6ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d6b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    d6b4:	bf24      	itt	cs
    d6b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    d6ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d6be:	011b      	lsls	r3, r3, #4
    d6c0:	bf18      	it	ne
    d6c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    d6c6:	d1e0      	bne.n	d68a <__aeabi_fdiv+0x46>
    d6c8:	2afd      	cmp	r2, #253	; 0xfd
    d6ca:	f63f af50 	bhi.w	d56e <__aeabi_fmul+0x92>
    d6ce:	428b      	cmp	r3, r1
    d6d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d6d4:	bf08      	it	eq
    d6d6:	f020 0001 	biceq.w	r0, r0, #1
    d6da:	4770      	bx	lr
    d6dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    d6e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    d6e4:	327f      	adds	r2, #127	; 0x7f
    d6e6:	bfc2      	ittt	gt
    d6e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    d6ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    d6f0:	4770      	bxgt	lr
    d6f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d6f6:	f04f 0300 	mov.w	r3, #0
    d6fa:	3a01      	subs	r2, #1
    d6fc:	e737      	b.n	d56e <__aeabi_fmul+0x92>
    d6fe:	f092 0f00 	teq	r2, #0
    d702:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d706:	bf02      	ittt	eq
    d708:	0040      	lsleq	r0, r0, #1
    d70a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d70e:	3a01      	subeq	r2, #1
    d710:	d0f9      	beq.n	d706 <__aeabi_fdiv+0xc2>
    d712:	ea40 000c 	orr.w	r0, r0, ip
    d716:	f093 0f00 	teq	r3, #0
    d71a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d71e:	bf02      	ittt	eq
    d720:	0049      	lsleq	r1, r1, #1
    d722:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d726:	3b01      	subeq	r3, #1
    d728:	d0f9      	beq.n	d71e <__aeabi_fdiv+0xda>
    d72a:	ea41 010c 	orr.w	r1, r1, ip
    d72e:	e795      	b.n	d65c <__aeabi_fdiv+0x18>
    d730:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d734:	ea92 0f0c 	teq	r2, ip
    d738:	d108      	bne.n	d74c <__aeabi_fdiv+0x108>
    d73a:	0242      	lsls	r2, r0, #9
    d73c:	f47f af7d 	bne.w	d63a <__aeabi_fmul+0x15e>
    d740:	ea93 0f0c 	teq	r3, ip
    d744:	f47f af70 	bne.w	d628 <__aeabi_fmul+0x14c>
    d748:	4608      	mov	r0, r1
    d74a:	e776      	b.n	d63a <__aeabi_fmul+0x15e>
    d74c:	ea93 0f0c 	teq	r3, ip
    d750:	d104      	bne.n	d75c <__aeabi_fdiv+0x118>
    d752:	024b      	lsls	r3, r1, #9
    d754:	f43f af4c 	beq.w	d5f0 <__aeabi_fmul+0x114>
    d758:	4608      	mov	r0, r1
    d75a:	e76e      	b.n	d63a <__aeabi_fmul+0x15e>
    d75c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d760:	bf18      	it	ne
    d762:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d766:	d1ca      	bne.n	d6fe <__aeabi_fdiv+0xba>
    d768:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    d76c:	f47f af5c 	bne.w	d628 <__aeabi_fmul+0x14c>
    d770:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    d774:	f47f af3c 	bne.w	d5f0 <__aeabi_fmul+0x114>
    d778:	e75f      	b.n	d63a <__aeabi_fmul+0x15e>
    d77a:	bf00      	nop

0000d77c <__gesf2>:
    d77c:	f04f 3cff 	mov.w	ip, #4294967295
    d780:	e006      	b.n	d790 <__cmpsf2+0x4>
    d782:	bf00      	nop

0000d784 <__lesf2>:
    d784:	f04f 0c01 	mov.w	ip, #1
    d788:	e002      	b.n	d790 <__cmpsf2+0x4>
    d78a:	bf00      	nop

0000d78c <__cmpsf2>:
    d78c:	f04f 0c01 	mov.w	ip, #1
    d790:	f84d cd04 	str.w	ip, [sp, #-4]!
    d794:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d798:	ea4f 0341 	mov.w	r3, r1, lsl #1
    d79c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d7a0:	bf18      	it	ne
    d7a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d7a6:	d011      	beq.n	d7cc <__cmpsf2+0x40>
    d7a8:	b001      	add	sp, #4
    d7aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    d7ae:	bf18      	it	ne
    d7b0:	ea90 0f01 	teqne	r0, r1
    d7b4:	bf58      	it	pl
    d7b6:	ebb2 0003 	subspl.w	r0, r2, r3
    d7ba:	bf88      	it	hi
    d7bc:	17c8      	asrhi	r0, r1, #31
    d7be:	bf38      	it	cc
    d7c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    d7c4:	bf18      	it	ne
    d7c6:	f040 0001 	orrne.w	r0, r0, #1
    d7ca:	4770      	bx	lr
    d7cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d7d0:	d102      	bne.n	d7d8 <__cmpsf2+0x4c>
    d7d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    d7d6:	d105      	bne.n	d7e4 <__cmpsf2+0x58>
    d7d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    d7dc:	d1e4      	bne.n	d7a8 <__cmpsf2+0x1c>
    d7de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    d7e2:	d0e1      	beq.n	d7a8 <__cmpsf2+0x1c>
    d7e4:	f85d 0b04 	ldr.w	r0, [sp], #4
    d7e8:	4770      	bx	lr
    d7ea:	bf00      	nop

0000d7ec <__aeabi_cfrcmple>:
    d7ec:	4684      	mov	ip, r0
    d7ee:	4608      	mov	r0, r1
    d7f0:	4661      	mov	r1, ip
    d7f2:	e7ff      	b.n	d7f4 <__aeabi_cfcmpeq>

0000d7f4 <__aeabi_cfcmpeq>:
    d7f4:	b50f      	push	{r0, r1, r2, r3, lr}
    d7f6:	f7ff ffc9 	bl	d78c <__cmpsf2>
    d7fa:	2800      	cmp	r0, #0
    d7fc:	bf48      	it	mi
    d7fe:	f110 0f00 	cmnmi.w	r0, #0
    d802:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000d804 <__aeabi_fcmpeq>:
    d804:	f84d ed08 	str.w	lr, [sp, #-8]!
    d808:	f7ff fff4 	bl	d7f4 <__aeabi_cfcmpeq>
    d80c:	bf0c      	ite	eq
    d80e:	2001      	moveq	r0, #1
    d810:	2000      	movne	r0, #0
    d812:	f85d fb08 	ldr.w	pc, [sp], #8
    d816:	bf00      	nop

0000d818 <__aeabi_fcmplt>:
    d818:	f84d ed08 	str.w	lr, [sp, #-8]!
    d81c:	f7ff ffea 	bl	d7f4 <__aeabi_cfcmpeq>
    d820:	bf34      	ite	cc
    d822:	2001      	movcc	r0, #1
    d824:	2000      	movcs	r0, #0
    d826:	f85d fb08 	ldr.w	pc, [sp], #8
    d82a:	bf00      	nop

0000d82c <__aeabi_fcmple>:
    d82c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d830:	f7ff ffe0 	bl	d7f4 <__aeabi_cfcmpeq>
    d834:	bf94      	ite	ls
    d836:	2001      	movls	r0, #1
    d838:	2000      	movhi	r0, #0
    d83a:	f85d fb08 	ldr.w	pc, [sp], #8
    d83e:	bf00      	nop

0000d840 <__aeabi_fcmpge>:
    d840:	f84d ed08 	str.w	lr, [sp, #-8]!
    d844:	f7ff ffd2 	bl	d7ec <__aeabi_cfrcmple>
    d848:	bf94      	ite	ls
    d84a:	2001      	movls	r0, #1
    d84c:	2000      	movhi	r0, #0
    d84e:	f85d fb08 	ldr.w	pc, [sp], #8
    d852:	bf00      	nop

0000d854 <__aeabi_fcmpgt>:
    d854:	f84d ed08 	str.w	lr, [sp, #-8]!
    d858:	f7ff ffc8 	bl	d7ec <__aeabi_cfrcmple>
    d85c:	bf34      	ite	cc
    d85e:	2001      	movcc	r0, #1
    d860:	2000      	movcs	r0, #0
    d862:	f85d fb08 	ldr.w	pc, [sp], #8
    d866:	bf00      	nop

0000d868 <__aeabi_f2iz>:
    d868:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d86c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d870:	d30f      	bcc.n	d892 <__aeabi_f2iz+0x2a>
    d872:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d876:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d87a:	d90d      	bls.n	d898 <__aeabi_f2iz+0x30>
    d87c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d884:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d888:	fa23 f002 	lsr.w	r0, r3, r2
    d88c:	bf18      	it	ne
    d88e:	4240      	negne	r0, r0
    d890:	4770      	bx	lr
    d892:	f04f 0000 	mov.w	r0, #0
    d896:	4770      	bx	lr
    d898:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d89c:	d101      	bne.n	d8a2 <__aeabi_f2iz+0x3a>
    d89e:	0242      	lsls	r2, r0, #9
    d8a0:	d105      	bne.n	d8ae <__aeabi_f2iz+0x46>
    d8a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    d8a6:	bf08      	it	eq
    d8a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d8ac:	4770      	bx	lr
    d8ae:	f04f 0000 	mov.w	r0, #0
    d8b2:	4770      	bx	lr

0000d8b4 <__aeabi_f2uiz>:
    d8b4:	0042      	lsls	r2, r0, #1
    d8b6:	d20e      	bcs.n	d8d6 <__aeabi_f2uiz+0x22>
    d8b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d8bc:	d30b      	bcc.n	d8d6 <__aeabi_f2uiz+0x22>
    d8be:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d8c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d8c6:	d409      	bmi.n	d8dc <__aeabi_f2uiz+0x28>
    d8c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d8cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d8d0:	fa23 f002 	lsr.w	r0, r3, r2
    d8d4:	4770      	bx	lr
    d8d6:	f04f 0000 	mov.w	r0, #0
    d8da:	4770      	bx	lr
    d8dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d8e0:	d101      	bne.n	d8e6 <__aeabi_f2uiz+0x32>
    d8e2:	0242      	lsls	r2, r0, #9
    d8e4:	d102      	bne.n	d8ec <__aeabi_f2uiz+0x38>
    d8e6:	f04f 30ff 	mov.w	r0, #4294967295
    d8ea:	4770      	bx	lr
    d8ec:	f04f 0000 	mov.w	r0, #0
    d8f0:	4770      	bx	lr
    d8f2:	bf00      	nop

0000d8f4 <malloc>:
    d8f4:	4b02      	ldr	r3, [pc, #8]	; (d900 <malloc+0xc>)
    d8f6:	4601      	mov	r1, r0
    d8f8:	6818      	ldr	r0, [r3, #0]
    d8fa:	f000 b803 	b.w	d904 <_malloc_r>
    d8fe:	bf00      	nop
    d900:	1fff8f88 	.word	0x1fff8f88

0000d904 <_malloc_r>:
    d904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d908:	f101 060b 	add.w	r6, r1, #11
    d90c:	2e16      	cmp	r6, #22
    d90e:	b083      	sub	sp, #12
    d910:	4604      	mov	r4, r0
    d912:	d824      	bhi.n	d95e <_malloc_r+0x5a>
    d914:	2910      	cmp	r1, #16
    d916:	f200 80ba 	bhi.w	da8e <_malloc_r+0x18a>
    d91a:	f000 faa3 	bl	de64 <__malloc_lock>
    d91e:	2610      	movs	r6, #16
    d920:	2218      	movs	r2, #24
    d922:	2002      	movs	r0, #2
    d924:	4fb5      	ldr	r7, [pc, #724]	; (dbfc <_malloc_r+0x2f8>)
    d926:	443a      	add	r2, r7
    d928:	f1a2 0108 	sub.w	r1, r2, #8
    d92c:	6853      	ldr	r3, [r2, #4]
    d92e:	428b      	cmp	r3, r1
    d930:	f000 80ba 	beq.w	daa8 <_malloc_r+0x1a4>
    d934:	685a      	ldr	r2, [r3, #4]
    d936:	68d9      	ldr	r1, [r3, #12]
    d938:	f022 0203 	bic.w	r2, r2, #3
    d93c:	441a      	add	r2, r3
    d93e:	689d      	ldr	r5, [r3, #8]
    d940:	60e9      	str	r1, [r5, #12]
    d942:	608d      	str	r5, [r1, #8]
    d944:	6851      	ldr	r1, [r2, #4]
    d946:	f041 0101 	orr.w	r1, r1, #1
    d94a:	4620      	mov	r0, r4
    d94c:	6051      	str	r1, [r2, #4]
    d94e:	f103 0508 	add.w	r5, r3, #8
    d952:	f000 fa8d 	bl	de70 <__malloc_unlock>
    d956:	4628      	mov	r0, r5
    d958:	b003      	add	sp, #12
    d95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d95e:	f036 0607 	bics.w	r6, r6, #7
    d962:	f100 8094 	bmi.w	da8e <_malloc_r+0x18a>
    d966:	42b1      	cmp	r1, r6
    d968:	f200 8091 	bhi.w	da8e <_malloc_r+0x18a>
    d96c:	f000 fa7a 	bl	de64 <__malloc_lock>
    d970:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    d974:	f0c0 819a 	bcc.w	dcac <_malloc_r+0x3a8>
    d978:	0a73      	lsrs	r3, r6, #9
    d97a:	f000 808f 	beq.w	da9c <_malloc_r+0x198>
    d97e:	2b04      	cmp	r3, #4
    d980:	f200 816f 	bhi.w	dc62 <_malloc_r+0x35e>
    d984:	09b3      	lsrs	r3, r6, #6
    d986:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d98a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    d98e:	00c3      	lsls	r3, r0, #3
    d990:	4f9a      	ldr	r7, [pc, #616]	; (dbfc <_malloc_r+0x2f8>)
    d992:	443b      	add	r3, r7
    d994:	f1a3 0508 	sub.w	r5, r3, #8
    d998:	685b      	ldr	r3, [r3, #4]
    d99a:	429d      	cmp	r5, r3
    d99c:	d106      	bne.n	d9ac <_malloc_r+0xa8>
    d99e:	e00c      	b.n	d9ba <_malloc_r+0xb6>
    d9a0:	2900      	cmp	r1, #0
    d9a2:	f280 8127 	bge.w	dbf4 <_malloc_r+0x2f0>
    d9a6:	68db      	ldr	r3, [r3, #12]
    d9a8:	429d      	cmp	r5, r3
    d9aa:	d006      	beq.n	d9ba <_malloc_r+0xb6>
    d9ac:	685a      	ldr	r2, [r3, #4]
    d9ae:	f022 0203 	bic.w	r2, r2, #3
    d9b2:	1b91      	subs	r1, r2, r6
    d9b4:	290f      	cmp	r1, #15
    d9b6:	ddf3      	ble.n	d9a0 <_malloc_r+0x9c>
    d9b8:	4660      	mov	r0, ip
    d9ba:	693d      	ldr	r5, [r7, #16]
    d9bc:	f8df c240 	ldr.w	ip, [pc, #576]	; dc00 <_malloc_r+0x2fc>
    d9c0:	4565      	cmp	r5, ip
    d9c2:	d07c      	beq.n	dabe <_malloc_r+0x1ba>
    d9c4:	686a      	ldr	r2, [r5, #4]
    d9c6:	f022 0203 	bic.w	r2, r2, #3
    d9ca:	1b93      	subs	r3, r2, r6
    d9cc:	2b0f      	cmp	r3, #15
    d9ce:	f300 817b 	bgt.w	dcc8 <_malloc_r+0x3c4>
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    d9d8:	f280 816c 	bge.w	dcb4 <_malloc_r+0x3b0>
    d9dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    d9e0:	f080 811a 	bcs.w	dc18 <_malloc_r+0x314>
    d9e4:	08d3      	lsrs	r3, r2, #3
    d9e6:	6879      	ldr	r1, [r7, #4]
    d9e8:	3301      	adds	r3, #1
    d9ea:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    d9ee:	2201      	movs	r2, #1
    d9f0:	fa02 f20e 	lsl.w	r2, r2, lr
    d9f4:	430a      	orrs	r2, r1
    d9f6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    d9fa:	f8c5 e008 	str.w	lr, [r5, #8]
    d9fe:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    da02:	3908      	subs	r1, #8
    da04:	60e9      	str	r1, [r5, #12]
    da06:	607a      	str	r2, [r7, #4]
    da08:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    da0c:	f8ce 500c 	str.w	r5, [lr, #12]
    da10:	1083      	asrs	r3, r0, #2
    da12:	2101      	movs	r1, #1
    da14:	4099      	lsls	r1, r3
    da16:	4291      	cmp	r1, r2
    da18:	d857      	bhi.n	daca <_malloc_r+0x1c6>
    da1a:	4211      	tst	r1, r2
    da1c:	d106      	bne.n	da2c <_malloc_r+0x128>
    da1e:	f020 0003 	bic.w	r0, r0, #3
    da22:	0049      	lsls	r1, r1, #1
    da24:	4211      	tst	r1, r2
    da26:	f100 0004 	add.w	r0, r0, #4
    da2a:	d0fa      	beq.n	da22 <_malloc_r+0x11e>
    da2c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    da30:	464d      	mov	r5, r9
    da32:	4686      	mov	lr, r0
    da34:	f8d5 800c 	ldr.w	r8, [r5, #12]
    da38:	4545      	cmp	r5, r8
    da3a:	d108      	bne.n	da4e <_malloc_r+0x14a>
    da3c:	e11d      	b.n	dc7a <_malloc_r+0x376>
    da3e:	2b00      	cmp	r3, #0
    da40:	f280 8124 	bge.w	dc8c <_malloc_r+0x388>
    da44:	f8d8 800c 	ldr.w	r8, [r8, #12]
    da48:	4545      	cmp	r5, r8
    da4a:	f000 8116 	beq.w	dc7a <_malloc_r+0x376>
    da4e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    da52:	f022 0203 	bic.w	r2, r2, #3
    da56:	1b93      	subs	r3, r2, r6
    da58:	2b0f      	cmp	r3, #15
    da5a:	ddf0      	ble.n	da3e <_malloc_r+0x13a>
    da5c:	4620      	mov	r0, r4
    da5e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    da62:	eb08 0106 	add.w	r1, r8, r6
    da66:	f046 0601 	orr.w	r6, r6, #1
    da6a:	f8c8 6004 	str.w	r6, [r8, #4]
    da6e:	60ec      	str	r4, [r5, #12]
    da70:	60a5      	str	r5, [r4, #8]
    da72:	f043 0401 	orr.w	r4, r3, #1
    da76:	e9c7 1104 	strd	r1, r1, [r7, #16]
    da7a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    da7e:	604c      	str	r4, [r1, #4]
    da80:	f848 3002 	str.w	r3, [r8, r2]
    da84:	f000 f9f4 	bl	de70 <__malloc_unlock>
    da88:	f108 0508 	add.w	r5, r8, #8
    da8c:	e002      	b.n	da94 <_malloc_r+0x190>
    da8e:	230c      	movs	r3, #12
    da90:	6023      	str	r3, [r4, #0]
    da92:	2500      	movs	r5, #0
    da94:	4628      	mov	r0, r5
    da96:	b003      	add	sp, #12
    da98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da9c:	f44f 7300 	mov.w	r3, #512	; 0x200
    daa0:	2040      	movs	r0, #64	; 0x40
    daa2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    daa6:	e773      	b.n	d990 <_malloc_r+0x8c>
    daa8:	68d3      	ldr	r3, [r2, #12]
    daaa:	429a      	cmp	r2, r3
    daac:	bf08      	it	eq
    daae:	3002      	addeq	r0, #2
    dab0:	f47f af40 	bne.w	d934 <_malloc_r+0x30>
    dab4:	693d      	ldr	r5, [r7, #16]
    dab6:	f8df c148 	ldr.w	ip, [pc, #328]	; dc00 <_malloc_r+0x2fc>
    daba:	4565      	cmp	r5, ip
    dabc:	d182      	bne.n	d9c4 <_malloc_r+0xc0>
    dabe:	687a      	ldr	r2, [r7, #4]
    dac0:	1083      	asrs	r3, r0, #2
    dac2:	2101      	movs	r1, #1
    dac4:	4099      	lsls	r1, r3
    dac6:	4291      	cmp	r1, r2
    dac8:	d9a7      	bls.n	da1a <_malloc_r+0x116>
    daca:	68bd      	ldr	r5, [r7, #8]
    dacc:	686b      	ldr	r3, [r5, #4]
    dace:	f023 0903 	bic.w	r9, r3, #3
    dad2:	454e      	cmp	r6, r9
    dad4:	d803      	bhi.n	dade <_malloc_r+0x1da>
    dad6:	eba9 0306 	sub.w	r3, r9, r6
    dada:	2b0f      	cmp	r3, #15
    dadc:	dc7a      	bgt.n	dbd4 <_malloc_r+0x2d0>
    dade:	f8df b124 	ldr.w	fp, [pc, #292]	; dc04 <_malloc_r+0x300>
    dae2:	4b49      	ldr	r3, [pc, #292]	; (dc08 <_malloc_r+0x304>)
    dae4:	f8db 2000 	ldr.w	r2, [fp]
    dae8:	681b      	ldr	r3, [r3, #0]
    daea:	3201      	adds	r2, #1
    daec:	4433      	add	r3, r6
    daee:	eb05 0a09 	add.w	sl, r5, r9
    daf2:	f000 8133 	beq.w	dd5c <_malloc_r+0x458>
    daf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    dafa:	330f      	adds	r3, #15
    dafc:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    db00:	f028 080f 	bic.w	r8, r8, #15
    db04:	4641      	mov	r1, r8
    db06:	4620      	mov	r0, r4
    db08:	f000 fe38 	bl	e77c <_sbrk_r>
    db0c:	1c41      	adds	r1, r0, #1
    db0e:	4602      	mov	r2, r0
    db10:	f000 80f3 	beq.w	dcfa <_malloc_r+0x3f6>
    db14:	4582      	cmp	sl, r0
    db16:	f200 80ee 	bhi.w	dcf6 <_malloc_r+0x3f2>
    db1a:	4b3c      	ldr	r3, [pc, #240]	; (dc0c <_malloc_r+0x308>)
    db1c:	6819      	ldr	r1, [r3, #0]
    db1e:	4441      	add	r1, r8
    db20:	6019      	str	r1, [r3, #0]
    db22:	4608      	mov	r0, r1
    db24:	f000 814e 	beq.w	ddc4 <_malloc_r+0x4c0>
    db28:	f8db 1000 	ldr.w	r1, [fp]
    db2c:	9301      	str	r3, [sp, #4]
    db2e:	3101      	adds	r1, #1
    db30:	bf1b      	ittet	ne
    db32:	eba2 010a 	subne.w	r1, r2, sl
    db36:	1809      	addne	r1, r1, r0
    db38:	f8cb 2000 	streq.w	r2, [fp]
    db3c:	6019      	strne	r1, [r3, #0]
    db3e:	f012 0b07 	ands.w	fp, r2, #7
    db42:	f000 8117 	beq.w	dd74 <_malloc_r+0x470>
    db46:	f1cb 0108 	rsb	r1, fp, #8
    db4a:	440a      	add	r2, r1
    db4c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    db50:	4490      	add	r8, r2
    db52:	3108      	adds	r1, #8
    db54:	eba1 0108 	sub.w	r1, r1, r8
    db58:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    db5c:	4651      	mov	r1, sl
    db5e:	4620      	mov	r0, r4
    db60:	9200      	str	r2, [sp, #0]
    db62:	f000 fe0b 	bl	e77c <_sbrk_r>
    db66:	1c42      	adds	r2, r0, #1
    db68:	e9dd 2300 	ldrd	r2, r3, [sp]
    db6c:	f000 814f 	beq.w	de0e <_malloc_r+0x50a>
    db70:	1a80      	subs	r0, r0, r2
    db72:	eb00 080a 	add.w	r8, r0, sl
    db76:	6819      	ldr	r1, [r3, #0]
    db78:	60ba      	str	r2, [r7, #8]
    db7a:	f048 0001 	orr.w	r0, r8, #1
    db7e:	4451      	add	r1, sl
    db80:	42bd      	cmp	r5, r7
    db82:	6050      	str	r0, [r2, #4]
    db84:	6019      	str	r1, [r3, #0]
    db86:	f000 8129 	beq.w	dddc <_malloc_r+0x4d8>
    db8a:	f1b9 0f0f 	cmp.w	r9, #15
    db8e:	f240 8127 	bls.w	dde0 <_malloc_r+0x4dc>
    db92:	6868      	ldr	r0, [r5, #4]
    db94:	f1a9 0c0c 	sub.w	ip, r9, #12
    db98:	f02c 0c07 	bic.w	ip, ip, #7
    db9c:	f000 0001 	and.w	r0, r0, #1
    dba0:	ea40 000c 	orr.w	r0, r0, ip
    dba4:	6068      	str	r0, [r5, #4]
    dba6:	f04f 0e05 	mov.w	lr, #5
    dbaa:	eb05 000c 	add.w	r0, r5, ip
    dbae:	f1bc 0f0f 	cmp.w	ip, #15
    dbb2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    dbb6:	f200 8132 	bhi.w	de1e <_malloc_r+0x51a>
    dbba:	6850      	ldr	r0, [r2, #4]
    dbbc:	4615      	mov	r5, r2
    dbbe:	4b14      	ldr	r3, [pc, #80]	; (dc10 <_malloc_r+0x30c>)
    dbc0:	681a      	ldr	r2, [r3, #0]
    dbc2:	428a      	cmp	r2, r1
    dbc4:	bf38      	it	cc
    dbc6:	6019      	strcc	r1, [r3, #0]
    dbc8:	4b12      	ldr	r3, [pc, #72]	; (dc14 <_malloc_r+0x310>)
    dbca:	681a      	ldr	r2, [r3, #0]
    dbcc:	428a      	cmp	r2, r1
    dbce:	bf38      	it	cc
    dbd0:	6019      	strcc	r1, [r3, #0]
    dbd2:	e094      	b.n	dcfe <_malloc_r+0x3fa>
    dbd4:	19aa      	adds	r2, r5, r6
    dbd6:	f043 0301 	orr.w	r3, r3, #1
    dbda:	f046 0601 	orr.w	r6, r6, #1
    dbde:	606e      	str	r6, [r5, #4]
    dbe0:	4620      	mov	r0, r4
    dbe2:	60ba      	str	r2, [r7, #8]
    dbe4:	6053      	str	r3, [r2, #4]
    dbe6:	f000 f943 	bl	de70 <__malloc_unlock>
    dbea:	3508      	adds	r5, #8
    dbec:	4628      	mov	r0, r5
    dbee:	b003      	add	sp, #12
    dbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbf4:	68d9      	ldr	r1, [r3, #12]
    dbf6:	441a      	add	r2, r3
    dbf8:	e6a1      	b.n	d93e <_malloc_r+0x3a>
    dbfa:	bf00      	nop
    dbfc:	1fff88e0 	.word	0x1fff88e0
    dc00:	1fff88e8 	.word	0x1fff88e8
    dc04:	1fff8ce8 	.word	0x1fff8ce8
    dc08:	1fffc61c 	.word	0x1fffc61c
    dc0c:	1fffc5ec 	.word	0x1fffc5ec
    dc10:	1fffc614 	.word	0x1fffc614
    dc14:	1fffc618 	.word	0x1fffc618
    dc18:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    dc1c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    dc20:	d363      	bcc.n	dcea <_malloc_r+0x3e6>
    dc22:	2b14      	cmp	r3, #20
    dc24:	f200 80b7 	bhi.w	dd96 <_malloc_r+0x492>
    dc28:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    dc2c:	00c9      	lsls	r1, r1, #3
    dc2e:	335b      	adds	r3, #91	; 0x5b
    dc30:	eb07 0e01 	add.w	lr, r7, r1
    dc34:	5879      	ldr	r1, [r7, r1]
    dc36:	f1ae 0e08 	sub.w	lr, lr, #8
    dc3a:	458e      	cmp	lr, r1
    dc3c:	f000 8091 	beq.w	dd62 <_malloc_r+0x45e>
    dc40:	684b      	ldr	r3, [r1, #4]
    dc42:	f023 0303 	bic.w	r3, r3, #3
    dc46:	4293      	cmp	r3, r2
    dc48:	d902      	bls.n	dc50 <_malloc_r+0x34c>
    dc4a:	6889      	ldr	r1, [r1, #8]
    dc4c:	458e      	cmp	lr, r1
    dc4e:	d1f7      	bne.n	dc40 <_malloc_r+0x33c>
    dc50:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    dc54:	687a      	ldr	r2, [r7, #4]
    dc56:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    dc5a:	f8ce 5008 	str.w	r5, [lr, #8]
    dc5e:	60cd      	str	r5, [r1, #12]
    dc60:	e6d6      	b.n	da10 <_malloc_r+0x10c>
    dc62:	2b14      	cmp	r3, #20
    dc64:	d959      	bls.n	dd1a <_malloc_r+0x416>
    dc66:	2b54      	cmp	r3, #84	; 0x54
    dc68:	f200 809d 	bhi.w	dda6 <_malloc_r+0x4a2>
    dc6c:	0b33      	lsrs	r3, r6, #12
    dc6e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    dc72:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    dc76:	00c3      	lsls	r3, r0, #3
    dc78:	e68a      	b.n	d990 <_malloc_r+0x8c>
    dc7a:	f10e 0e01 	add.w	lr, lr, #1
    dc7e:	f01e 0f03 	tst.w	lr, #3
    dc82:	f105 0508 	add.w	r5, r5, #8
    dc86:	f47f aed5 	bne.w	da34 <_malloc_r+0x130>
    dc8a:	e051      	b.n	dd30 <_malloc_r+0x42c>
    dc8c:	4442      	add	r2, r8
    dc8e:	4645      	mov	r5, r8
    dc90:	6853      	ldr	r3, [r2, #4]
    dc92:	f8d8 100c 	ldr.w	r1, [r8, #12]
    dc96:	f043 0301 	orr.w	r3, r3, #1
    dc9a:	6053      	str	r3, [r2, #4]
    dc9c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    dca0:	4620      	mov	r0, r4
    dca2:	60d9      	str	r1, [r3, #12]
    dca4:	608b      	str	r3, [r1, #8]
    dca6:	f000 f8e3 	bl	de70 <__malloc_unlock>
    dcaa:	e6f3      	b.n	da94 <_malloc_r+0x190>
    dcac:	08f0      	lsrs	r0, r6, #3
    dcae:	f106 0208 	add.w	r2, r6, #8
    dcb2:	e637      	b.n	d924 <_malloc_r+0x20>
    dcb4:	442a      	add	r2, r5
    dcb6:	4620      	mov	r0, r4
    dcb8:	6853      	ldr	r3, [r2, #4]
    dcba:	f043 0301 	orr.w	r3, r3, #1
    dcbe:	6053      	str	r3, [r2, #4]
    dcc0:	3508      	adds	r5, #8
    dcc2:	f000 f8d5 	bl	de70 <__malloc_unlock>
    dcc6:	e6e5      	b.n	da94 <_malloc_r+0x190>
    dcc8:	19a9      	adds	r1, r5, r6
    dcca:	4620      	mov	r0, r4
    dccc:	f046 0601 	orr.w	r6, r6, #1
    dcd0:	f043 0401 	orr.w	r4, r3, #1
    dcd4:	606e      	str	r6, [r5, #4]
    dcd6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    dcda:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    dcde:	604c      	str	r4, [r1, #4]
    dce0:	50ab      	str	r3, [r5, r2]
    dce2:	f000 f8c5 	bl	de70 <__malloc_unlock>
    dce6:	3508      	adds	r5, #8
    dce8:	e6d4      	b.n	da94 <_malloc_r+0x190>
    dcea:	0993      	lsrs	r3, r2, #6
    dcec:	f103 0139 	add.w	r1, r3, #57	; 0x39
    dcf0:	00c9      	lsls	r1, r1, #3
    dcf2:	3338      	adds	r3, #56	; 0x38
    dcf4:	e79c      	b.n	dc30 <_malloc_r+0x32c>
    dcf6:	42bd      	cmp	r5, r7
    dcf8:	d05f      	beq.n	ddba <_malloc_r+0x4b6>
    dcfa:	68bd      	ldr	r5, [r7, #8]
    dcfc:	6868      	ldr	r0, [r5, #4]
    dcfe:	f020 0803 	bic.w	r8, r0, #3
    dd02:	4546      	cmp	r6, r8
    dd04:	eba8 0306 	sub.w	r3, r8, r6
    dd08:	d802      	bhi.n	dd10 <_malloc_r+0x40c>
    dd0a:	2b0f      	cmp	r3, #15
    dd0c:	f73f af62 	bgt.w	dbd4 <_malloc_r+0x2d0>
    dd10:	4620      	mov	r0, r4
    dd12:	f000 f8ad 	bl	de70 <__malloc_unlock>
    dd16:	2500      	movs	r5, #0
    dd18:	e6bc      	b.n	da94 <_malloc_r+0x190>
    dd1a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    dd1e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    dd22:	00c3      	lsls	r3, r0, #3
    dd24:	e634      	b.n	d990 <_malloc_r+0x8c>
    dd26:	f859 3908 	ldr.w	r3, [r9], #-8
    dd2a:	454b      	cmp	r3, r9
    dd2c:	f040 8096 	bne.w	de5c <_malloc_r+0x558>
    dd30:	f010 0f03 	tst.w	r0, #3
    dd34:	f100 30ff 	add.w	r0, r0, #4294967295
    dd38:	d1f5      	bne.n	dd26 <_malloc_r+0x422>
    dd3a:	687b      	ldr	r3, [r7, #4]
    dd3c:	ea23 0301 	bic.w	r3, r3, r1
    dd40:	607b      	str	r3, [r7, #4]
    dd42:	0049      	lsls	r1, r1, #1
    dd44:	4299      	cmp	r1, r3
    dd46:	f63f aec0 	bhi.w	daca <_malloc_r+0x1c6>
    dd4a:	b919      	cbnz	r1, dd54 <_malloc_r+0x450>
    dd4c:	e6bd      	b.n	daca <_malloc_r+0x1c6>
    dd4e:	0049      	lsls	r1, r1, #1
    dd50:	f10e 0e04 	add.w	lr, lr, #4
    dd54:	4219      	tst	r1, r3
    dd56:	d0fa      	beq.n	dd4e <_malloc_r+0x44a>
    dd58:	4670      	mov	r0, lr
    dd5a:	e667      	b.n	da2c <_malloc_r+0x128>
    dd5c:	f103 0810 	add.w	r8, r3, #16
    dd60:	e6d0      	b.n	db04 <_malloc_r+0x200>
    dd62:	109a      	asrs	r2, r3, #2
    dd64:	f04f 0801 	mov.w	r8, #1
    dd68:	687b      	ldr	r3, [r7, #4]
    dd6a:	fa08 f202 	lsl.w	r2, r8, r2
    dd6e:	431a      	orrs	r2, r3
    dd70:	607a      	str	r2, [r7, #4]
    dd72:	e770      	b.n	dc56 <_malloc_r+0x352>
    dd74:	eb02 0108 	add.w	r1, r2, r8
    dd78:	4249      	negs	r1, r1
    dd7a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    dd7e:	4651      	mov	r1, sl
    dd80:	4620      	mov	r0, r4
    dd82:	9200      	str	r2, [sp, #0]
    dd84:	f000 fcfa 	bl	e77c <_sbrk_r>
    dd88:	1c43      	adds	r3, r0, #1
    dd8a:	e9dd 2300 	ldrd	r2, r3, [sp]
    dd8e:	f47f aeef 	bne.w	db70 <_malloc_r+0x26c>
    dd92:	46da      	mov	sl, fp
    dd94:	e6ef      	b.n	db76 <_malloc_r+0x272>
    dd96:	2b54      	cmp	r3, #84	; 0x54
    dd98:	d825      	bhi.n	dde6 <_malloc_r+0x4e2>
    dd9a:	0b13      	lsrs	r3, r2, #12
    dd9c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    dda0:	00c9      	lsls	r1, r1, #3
    dda2:	336e      	adds	r3, #110	; 0x6e
    dda4:	e744      	b.n	dc30 <_malloc_r+0x32c>
    dda6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ddaa:	d825      	bhi.n	ddf8 <_malloc_r+0x4f4>
    ddac:	0bf3      	lsrs	r3, r6, #15
    ddae:	f103 0078 	add.w	r0, r3, #120	; 0x78
    ddb2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    ddb6:	00c3      	lsls	r3, r0, #3
    ddb8:	e5ea      	b.n	d990 <_malloc_r+0x8c>
    ddba:	4b29      	ldr	r3, [pc, #164]	; (de60 <_malloc_r+0x55c>)
    ddbc:	6818      	ldr	r0, [r3, #0]
    ddbe:	4440      	add	r0, r8
    ddc0:	6018      	str	r0, [r3, #0]
    ddc2:	e6b1      	b.n	db28 <_malloc_r+0x224>
    ddc4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    ddc8:	f1bc 0f00 	cmp.w	ip, #0
    ddcc:	f47f aeac 	bne.w	db28 <_malloc_r+0x224>
    ddd0:	68bd      	ldr	r5, [r7, #8]
    ddd2:	44c8      	add	r8, r9
    ddd4:	f048 0001 	orr.w	r0, r8, #1
    ddd8:	6068      	str	r0, [r5, #4]
    ddda:	e6f0      	b.n	dbbe <_malloc_r+0x2ba>
    dddc:	4615      	mov	r5, r2
    ddde:	e6ee      	b.n	dbbe <_malloc_r+0x2ba>
    dde0:	2301      	movs	r3, #1
    dde2:	6053      	str	r3, [r2, #4]
    dde4:	e794      	b.n	dd10 <_malloc_r+0x40c>
    dde6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ddea:	d823      	bhi.n	de34 <_malloc_r+0x530>
    ddec:	0bd3      	lsrs	r3, r2, #15
    ddee:	f103 0178 	add.w	r1, r3, #120	; 0x78
    ddf2:	00c9      	lsls	r1, r1, #3
    ddf4:	3377      	adds	r3, #119	; 0x77
    ddf6:	e71b      	b.n	dc30 <_malloc_r+0x32c>
    ddf8:	f240 5254 	movw	r2, #1364	; 0x554
    ddfc:	4293      	cmp	r3, r2
    ddfe:	d823      	bhi.n	de48 <_malloc_r+0x544>
    de00:	0cb3      	lsrs	r3, r6, #18
    de02:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    de06:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    de0a:	00c3      	lsls	r3, r0, #3
    de0c:	e5c0      	b.n	d990 <_malloc_r+0x8c>
    de0e:	f1ab 0b08 	sub.w	fp, fp, #8
    de12:	44d8      	add	r8, fp
    de14:	eba8 0802 	sub.w	r8, r8, r2
    de18:	f04f 0a00 	mov.w	sl, #0
    de1c:	e6ab      	b.n	db76 <_malloc_r+0x272>
    de1e:	f105 0108 	add.w	r1, r5, #8
    de22:	4620      	mov	r0, r4
    de24:	9300      	str	r3, [sp, #0]
    de26:	f000 fe1d 	bl	ea64 <_free_r>
    de2a:	68bd      	ldr	r5, [r7, #8]
    de2c:	9b00      	ldr	r3, [sp, #0]
    de2e:	6868      	ldr	r0, [r5, #4]
    de30:	6819      	ldr	r1, [r3, #0]
    de32:	e6c4      	b.n	dbbe <_malloc_r+0x2ba>
    de34:	f240 5154 	movw	r1, #1364	; 0x554
    de38:	428b      	cmp	r3, r1
    de3a:	d80b      	bhi.n	de54 <_malloc_r+0x550>
    de3c:	0c93      	lsrs	r3, r2, #18
    de3e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    de42:	00c9      	lsls	r1, r1, #3
    de44:	337c      	adds	r3, #124	; 0x7c
    de46:	e6f3      	b.n	dc30 <_malloc_r+0x32c>
    de48:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    de4c:	207f      	movs	r0, #127	; 0x7f
    de4e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    de52:	e59d      	b.n	d990 <_malloc_r+0x8c>
    de54:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    de58:	237e      	movs	r3, #126	; 0x7e
    de5a:	e6e9      	b.n	dc30 <_malloc_r+0x32c>
    de5c:	687b      	ldr	r3, [r7, #4]
    de5e:	e770      	b.n	dd42 <_malloc_r+0x43e>
    de60:	1fffc5ec 	.word	0x1fffc5ec

0000de64 <__malloc_lock>:
    de64:	4801      	ldr	r0, [pc, #4]	; (de6c <__malloc_lock+0x8>)
    de66:	f000 bcdf 	b.w	e828 <__retarget_lock_acquire_recursive>
    de6a:	bf00      	nop
    de6c:	1fffc764 	.word	0x1fffc764

0000de70 <__malloc_unlock>:
    de70:	4801      	ldr	r0, [pc, #4]	; (de78 <__malloc_unlock+0x8>)
    de72:	f000 bcdb 	b.w	e82c <__retarget_lock_release_recursive>
    de76:	bf00      	nop
    de78:	1fffc764 	.word	0x1fffc764

0000de7c <_realloc_r>:
    de7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de80:	4617      	mov	r7, r2
    de82:	2900      	cmp	r1, #0
    de84:	f000 8098 	beq.w	dfb8 <_realloc_r+0x13c>
    de88:	460c      	mov	r4, r1
    de8a:	f107 050b 	add.w	r5, r7, #11
    de8e:	4680      	mov	r8, r0
    de90:	f7ff ffe8 	bl	de64 <__malloc_lock>
    de94:	2d16      	cmp	r5, #22
    de96:	f854 1c04 	ldr.w	r1, [r4, #-4]
    de9a:	d85b      	bhi.n	df54 <_realloc_r+0xd8>
    de9c:	2510      	movs	r5, #16
    de9e:	462a      	mov	r2, r5
    dea0:	42af      	cmp	r7, r5
    dea2:	d85c      	bhi.n	df5e <_realloc_r+0xe2>
    dea4:	f021 0603 	bic.w	r6, r1, #3
    dea8:	4296      	cmp	r6, r2
    deaa:	f1a4 0908 	sub.w	r9, r4, #8
    deae:	da62      	bge.n	df76 <_realloc_r+0xfa>
    deb0:	4bbc      	ldr	r3, [pc, #752]	; (e1a4 <_realloc_r+0x328>)
    deb2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    deb6:	eb09 0006 	add.w	r0, r9, r6
    deba:	4584      	cmp	ip, r0
    debc:	f000 8097 	beq.w	dfee <_realloc_r+0x172>
    dec0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    dec4:	f02c 0301 	bic.w	r3, ip, #1
    dec8:	4403      	add	r3, r0
    deca:	685b      	ldr	r3, [r3, #4]
    decc:	07db      	lsls	r3, r3, #31
    dece:	d468      	bmi.n	dfa2 <_realloc_r+0x126>
    ded0:	f02c 0c03 	bic.w	ip, ip, #3
    ded4:	eb06 030c 	add.w	r3, r6, ip
    ded8:	4293      	cmp	r3, r2
    deda:	da47      	bge.n	df6c <_realloc_r+0xf0>
    dedc:	07cb      	lsls	r3, r1, #31
    dede:	d410      	bmi.n	df02 <_realloc_r+0x86>
    dee0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    dee4:	eba9 0a03 	sub.w	sl, r9, r3
    dee8:	f8da 3004 	ldr.w	r3, [sl, #4]
    deec:	f023 0103 	bic.w	r1, r3, #3
    def0:	448c      	add	ip, r1
    def2:	44b4      	add	ip, r6
    def4:	4594      	cmp	ip, r2
    def6:	f280 8111 	bge.w	e11c <_realloc_r+0x2a0>
    defa:	1873      	adds	r3, r6, r1
    defc:	4293      	cmp	r3, r2
    defe:	f280 80e8 	bge.w	e0d2 <_realloc_r+0x256>
    df02:	4639      	mov	r1, r7
    df04:	4640      	mov	r0, r8
    df06:	f7ff fcfd 	bl	d904 <_malloc_r>
    df0a:	4607      	mov	r7, r0
    df0c:	b1e0      	cbz	r0, df48 <_realloc_r+0xcc>
    df0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    df12:	f023 0301 	bic.w	r3, r3, #1
    df16:	444b      	add	r3, r9
    df18:	f1a0 0208 	sub.w	r2, r0, #8
    df1c:	4293      	cmp	r3, r2
    df1e:	f000 80d2 	beq.w	e0c6 <_realloc_r+0x24a>
    df22:	1f32      	subs	r2, r6, #4
    df24:	2a24      	cmp	r2, #36	; 0x24
    df26:	f200 80f5 	bhi.w	e114 <_realloc_r+0x298>
    df2a:	2a13      	cmp	r2, #19
    df2c:	f200 80ac 	bhi.w	e088 <_realloc_r+0x20c>
    df30:	4603      	mov	r3, r0
    df32:	4622      	mov	r2, r4
    df34:	6811      	ldr	r1, [r2, #0]
    df36:	6019      	str	r1, [r3, #0]
    df38:	6851      	ldr	r1, [r2, #4]
    df3a:	6059      	str	r1, [r3, #4]
    df3c:	6892      	ldr	r2, [r2, #8]
    df3e:	609a      	str	r2, [r3, #8]
    df40:	4621      	mov	r1, r4
    df42:	4640      	mov	r0, r8
    df44:	f000 fd8e 	bl	ea64 <_free_r>
    df48:	4640      	mov	r0, r8
    df4a:	f7ff ff91 	bl	de70 <__malloc_unlock>
    df4e:	4638      	mov	r0, r7
    df50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df54:	f025 0507 	bic.w	r5, r5, #7
    df58:	2d00      	cmp	r5, #0
    df5a:	462a      	mov	r2, r5
    df5c:	daa0      	bge.n	dea0 <_realloc_r+0x24>
    df5e:	230c      	movs	r3, #12
    df60:	f8c8 3000 	str.w	r3, [r8]
    df64:	2700      	movs	r7, #0
    df66:	4638      	mov	r0, r7
    df68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df6c:	461e      	mov	r6, r3
    df6e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    df72:	60d3      	str	r3, [r2, #12]
    df74:	609a      	str	r2, [r3, #8]
    df76:	1b73      	subs	r3, r6, r5
    df78:	2b0f      	cmp	r3, #15
    df7a:	d822      	bhi.n	dfc2 <_realloc_r+0x146>
    df7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    df80:	f003 0301 	and.w	r3, r3, #1
    df84:	4333      	orrs	r3, r6
    df86:	444e      	add	r6, r9
    df88:	f8c9 3004 	str.w	r3, [r9, #4]
    df8c:	6873      	ldr	r3, [r6, #4]
    df8e:	f043 0301 	orr.w	r3, r3, #1
    df92:	6073      	str	r3, [r6, #4]
    df94:	4640      	mov	r0, r8
    df96:	4627      	mov	r7, r4
    df98:	f7ff ff6a 	bl	de70 <__malloc_unlock>
    df9c:	4638      	mov	r0, r7
    df9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfa2:	07c9      	lsls	r1, r1, #31
    dfa4:	d4ad      	bmi.n	df02 <_realloc_r+0x86>
    dfa6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    dfaa:	eba9 0a03 	sub.w	sl, r9, r3
    dfae:	f8da 1004 	ldr.w	r1, [sl, #4]
    dfb2:	f021 0103 	bic.w	r1, r1, #3
    dfb6:	e7a0      	b.n	defa <_realloc_r+0x7e>
    dfb8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfbc:	4611      	mov	r1, r2
    dfbe:	f7ff bca1 	b.w	d904 <_malloc_r>
    dfc2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    dfc6:	eb09 0105 	add.w	r1, r9, r5
    dfca:	f002 0201 	and.w	r2, r2, #1
    dfce:	444e      	add	r6, r9
    dfd0:	f043 0301 	orr.w	r3, r3, #1
    dfd4:	432a      	orrs	r2, r5
    dfd6:	f8c9 2004 	str.w	r2, [r9, #4]
    dfda:	604b      	str	r3, [r1, #4]
    dfdc:	6873      	ldr	r3, [r6, #4]
    dfde:	f043 0301 	orr.w	r3, r3, #1
    dfe2:	3108      	adds	r1, #8
    dfe4:	6073      	str	r3, [r6, #4]
    dfe6:	4640      	mov	r0, r8
    dfe8:	f000 fd3c 	bl	ea64 <_free_r>
    dfec:	e7d2      	b.n	df94 <_realloc_r+0x118>
    dfee:	f8dc 0004 	ldr.w	r0, [ip, #4]
    dff2:	f020 0b03 	bic.w	fp, r0, #3
    dff6:	eb06 0c0b 	add.w	ip, r6, fp
    dffa:	f105 0010 	add.w	r0, r5, #16
    dffe:	4584      	cmp	ip, r0
    e000:	da4d      	bge.n	e09e <_realloc_r+0x222>
    e002:	07c9      	lsls	r1, r1, #31
    e004:	f53f af7d 	bmi.w	df02 <_realloc_r+0x86>
    e008:	f854 1c08 	ldr.w	r1, [r4, #-8]
    e00c:	eba9 0a01 	sub.w	sl, r9, r1
    e010:	f8da 1004 	ldr.w	r1, [sl, #4]
    e014:	f021 0103 	bic.w	r1, r1, #3
    e018:	448b      	add	fp, r1
    e01a:	44b3      	add	fp, r6
    e01c:	4558      	cmp	r0, fp
    e01e:	f73f af6c 	bgt.w	defa <_realloc_r+0x7e>
    e022:	4657      	mov	r7, sl
    e024:	f8da 100c 	ldr.w	r1, [sl, #12]
    e028:	f857 0f08 	ldr.w	r0, [r7, #8]!
    e02c:	1f32      	subs	r2, r6, #4
    e02e:	2a24      	cmp	r2, #36	; 0x24
    e030:	60c1      	str	r1, [r0, #12]
    e032:	6088      	str	r0, [r1, #8]
    e034:	f200 80db 	bhi.w	e1ee <_realloc_r+0x372>
    e038:	2a13      	cmp	r2, #19
    e03a:	f240 80d6 	bls.w	e1ea <_realloc_r+0x36e>
    e03e:	6821      	ldr	r1, [r4, #0]
    e040:	f8ca 1008 	str.w	r1, [sl, #8]
    e044:	6861      	ldr	r1, [r4, #4]
    e046:	f8ca 100c 	str.w	r1, [sl, #12]
    e04a:	2a1b      	cmp	r2, #27
    e04c:	f200 80df 	bhi.w	e20e <_realloc_r+0x392>
    e050:	3408      	adds	r4, #8
    e052:	f10a 0210 	add.w	r2, sl, #16
    e056:	6821      	ldr	r1, [r4, #0]
    e058:	6011      	str	r1, [r2, #0]
    e05a:	6861      	ldr	r1, [r4, #4]
    e05c:	6051      	str	r1, [r2, #4]
    e05e:	68a1      	ldr	r1, [r4, #8]
    e060:	6091      	str	r1, [r2, #8]
    e062:	eb0a 0105 	add.w	r1, sl, r5
    e066:	ebab 0205 	sub.w	r2, fp, r5
    e06a:	f042 0201 	orr.w	r2, r2, #1
    e06e:	6099      	str	r1, [r3, #8]
    e070:	604a      	str	r2, [r1, #4]
    e072:	f8da 3004 	ldr.w	r3, [sl, #4]
    e076:	f003 0301 	and.w	r3, r3, #1
    e07a:	432b      	orrs	r3, r5
    e07c:	4640      	mov	r0, r8
    e07e:	f8ca 3004 	str.w	r3, [sl, #4]
    e082:	f7ff fef5 	bl	de70 <__malloc_unlock>
    e086:	e76e      	b.n	df66 <_realloc_r+0xea>
    e088:	6823      	ldr	r3, [r4, #0]
    e08a:	6003      	str	r3, [r0, #0]
    e08c:	6863      	ldr	r3, [r4, #4]
    e08e:	6043      	str	r3, [r0, #4]
    e090:	2a1b      	cmp	r2, #27
    e092:	d868      	bhi.n	e166 <_realloc_r+0x2ea>
    e094:	f104 0208 	add.w	r2, r4, #8
    e098:	f100 0308 	add.w	r3, r0, #8
    e09c:	e74a      	b.n	df34 <_realloc_r+0xb8>
    e09e:	eb09 0205 	add.w	r2, r9, r5
    e0a2:	609a      	str	r2, [r3, #8]
    e0a4:	ebac 0305 	sub.w	r3, ip, r5
    e0a8:	f043 0301 	orr.w	r3, r3, #1
    e0ac:	6053      	str	r3, [r2, #4]
    e0ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e0b2:	f003 0301 	and.w	r3, r3, #1
    e0b6:	432b      	orrs	r3, r5
    e0b8:	4640      	mov	r0, r8
    e0ba:	f844 3c04 	str.w	r3, [r4, #-4]
    e0be:	f7ff fed7 	bl	de70 <__malloc_unlock>
    e0c2:	4627      	mov	r7, r4
    e0c4:	e74f      	b.n	df66 <_realloc_r+0xea>
    e0c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    e0ca:	f023 0303 	bic.w	r3, r3, #3
    e0ce:	441e      	add	r6, r3
    e0d0:	e751      	b.n	df76 <_realloc_r+0xfa>
    e0d2:	4657      	mov	r7, sl
    e0d4:	f8da 100c 	ldr.w	r1, [sl, #12]
    e0d8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    e0dc:	1f32      	subs	r2, r6, #4
    e0de:	2a24      	cmp	r2, #36	; 0x24
    e0e0:	60c1      	str	r1, [r0, #12]
    e0e2:	6088      	str	r0, [r1, #8]
    e0e4:	d84c      	bhi.n	e180 <_realloc_r+0x304>
    e0e6:	2a13      	cmp	r2, #19
    e0e8:	d948      	bls.n	e17c <_realloc_r+0x300>
    e0ea:	6821      	ldr	r1, [r4, #0]
    e0ec:	f8ca 1008 	str.w	r1, [sl, #8]
    e0f0:	6861      	ldr	r1, [r4, #4]
    e0f2:	f8ca 100c 	str.w	r1, [sl, #12]
    e0f6:	2a1b      	cmp	r2, #27
    e0f8:	d856      	bhi.n	e1a8 <_realloc_r+0x32c>
    e0fa:	3408      	adds	r4, #8
    e0fc:	f10a 0210 	add.w	r2, sl, #16
    e100:	461e      	mov	r6, r3
    e102:	6823      	ldr	r3, [r4, #0]
    e104:	6013      	str	r3, [r2, #0]
    e106:	6863      	ldr	r3, [r4, #4]
    e108:	6053      	str	r3, [r2, #4]
    e10a:	68a3      	ldr	r3, [r4, #8]
    e10c:	6093      	str	r3, [r2, #8]
    e10e:	46d1      	mov	r9, sl
    e110:	463c      	mov	r4, r7
    e112:	e730      	b.n	df76 <_realloc_r+0xfa>
    e114:	4621      	mov	r1, r4
    e116:	f000 f9ed 	bl	e4f4 <memmove>
    e11a:	e711      	b.n	df40 <_realloc_r+0xc4>
    e11c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    e120:	4657      	mov	r7, sl
    e122:	60cb      	str	r3, [r1, #12]
    e124:	6099      	str	r1, [r3, #8]
    e126:	f857 1f08 	ldr.w	r1, [r7, #8]!
    e12a:	f8da 300c 	ldr.w	r3, [sl, #12]
    e12e:	60cb      	str	r3, [r1, #12]
    e130:	1f32      	subs	r2, r6, #4
    e132:	2a24      	cmp	r2, #36	; 0x24
    e134:	6099      	str	r1, [r3, #8]
    e136:	d82d      	bhi.n	e194 <_realloc_r+0x318>
    e138:	2a13      	cmp	r2, #19
    e13a:	d929      	bls.n	e190 <_realloc_r+0x314>
    e13c:	6823      	ldr	r3, [r4, #0]
    e13e:	f8ca 3008 	str.w	r3, [sl, #8]
    e142:	6863      	ldr	r3, [r4, #4]
    e144:	f8ca 300c 	str.w	r3, [sl, #12]
    e148:	2a1b      	cmp	r2, #27
    e14a:	d842      	bhi.n	e1d2 <_realloc_r+0x356>
    e14c:	3408      	adds	r4, #8
    e14e:	f10a 0310 	add.w	r3, sl, #16
    e152:	6822      	ldr	r2, [r4, #0]
    e154:	601a      	str	r2, [r3, #0]
    e156:	6862      	ldr	r2, [r4, #4]
    e158:	605a      	str	r2, [r3, #4]
    e15a:	68a2      	ldr	r2, [r4, #8]
    e15c:	609a      	str	r2, [r3, #8]
    e15e:	4666      	mov	r6, ip
    e160:	46d1      	mov	r9, sl
    e162:	463c      	mov	r4, r7
    e164:	e707      	b.n	df76 <_realloc_r+0xfa>
    e166:	68a3      	ldr	r3, [r4, #8]
    e168:	6083      	str	r3, [r0, #8]
    e16a:	68e3      	ldr	r3, [r4, #12]
    e16c:	60c3      	str	r3, [r0, #12]
    e16e:	2a24      	cmp	r2, #36	; 0x24
    e170:	d026      	beq.n	e1c0 <_realloc_r+0x344>
    e172:	f104 0210 	add.w	r2, r4, #16
    e176:	f100 0310 	add.w	r3, r0, #16
    e17a:	e6db      	b.n	df34 <_realloc_r+0xb8>
    e17c:	463a      	mov	r2, r7
    e17e:	e7bf      	b.n	e100 <_realloc_r+0x284>
    e180:	4621      	mov	r1, r4
    e182:	4638      	mov	r0, r7
    e184:	461e      	mov	r6, r3
    e186:	46d1      	mov	r9, sl
    e188:	f000 f9b4 	bl	e4f4 <memmove>
    e18c:	463c      	mov	r4, r7
    e18e:	e6f2      	b.n	df76 <_realloc_r+0xfa>
    e190:	463b      	mov	r3, r7
    e192:	e7de      	b.n	e152 <_realloc_r+0x2d6>
    e194:	4621      	mov	r1, r4
    e196:	4638      	mov	r0, r7
    e198:	4666      	mov	r6, ip
    e19a:	46d1      	mov	r9, sl
    e19c:	f000 f9aa 	bl	e4f4 <memmove>
    e1a0:	463c      	mov	r4, r7
    e1a2:	e6e8      	b.n	df76 <_realloc_r+0xfa>
    e1a4:	1fff88e0 	.word	0x1fff88e0
    e1a8:	68a1      	ldr	r1, [r4, #8]
    e1aa:	f8ca 1010 	str.w	r1, [sl, #16]
    e1ae:	68e1      	ldr	r1, [r4, #12]
    e1b0:	f8ca 1014 	str.w	r1, [sl, #20]
    e1b4:	2a24      	cmp	r2, #36	; 0x24
    e1b6:	d020      	beq.n	e1fa <_realloc_r+0x37e>
    e1b8:	3410      	adds	r4, #16
    e1ba:	f10a 0218 	add.w	r2, sl, #24
    e1be:	e79f      	b.n	e100 <_realloc_r+0x284>
    e1c0:	6923      	ldr	r3, [r4, #16]
    e1c2:	6103      	str	r3, [r0, #16]
    e1c4:	6961      	ldr	r1, [r4, #20]
    e1c6:	6141      	str	r1, [r0, #20]
    e1c8:	f104 0218 	add.w	r2, r4, #24
    e1cc:	f100 0318 	add.w	r3, r0, #24
    e1d0:	e6b0      	b.n	df34 <_realloc_r+0xb8>
    e1d2:	68a3      	ldr	r3, [r4, #8]
    e1d4:	f8ca 3010 	str.w	r3, [sl, #16]
    e1d8:	68e3      	ldr	r3, [r4, #12]
    e1da:	f8ca 3014 	str.w	r3, [sl, #20]
    e1de:	2a24      	cmp	r2, #36	; 0x24
    e1e0:	d021      	beq.n	e226 <_realloc_r+0x3aa>
    e1e2:	3410      	adds	r4, #16
    e1e4:	f10a 0318 	add.w	r3, sl, #24
    e1e8:	e7b3      	b.n	e152 <_realloc_r+0x2d6>
    e1ea:	463a      	mov	r2, r7
    e1ec:	e733      	b.n	e056 <_realloc_r+0x1da>
    e1ee:	4621      	mov	r1, r4
    e1f0:	4638      	mov	r0, r7
    e1f2:	f000 f97f 	bl	e4f4 <memmove>
    e1f6:	4b16      	ldr	r3, [pc, #88]	; (e250 <_realloc_r+0x3d4>)
    e1f8:	e733      	b.n	e062 <_realloc_r+0x1e6>
    e1fa:	6922      	ldr	r2, [r4, #16]
    e1fc:	f8ca 2018 	str.w	r2, [sl, #24]
    e200:	6962      	ldr	r2, [r4, #20]
    e202:	f8ca 201c 	str.w	r2, [sl, #28]
    e206:	3418      	adds	r4, #24
    e208:	f10a 0220 	add.w	r2, sl, #32
    e20c:	e778      	b.n	e100 <_realloc_r+0x284>
    e20e:	68a1      	ldr	r1, [r4, #8]
    e210:	f8ca 1010 	str.w	r1, [sl, #16]
    e214:	68e1      	ldr	r1, [r4, #12]
    e216:	f8ca 1014 	str.w	r1, [sl, #20]
    e21a:	2a24      	cmp	r2, #36	; 0x24
    e21c:	d00d      	beq.n	e23a <_realloc_r+0x3be>
    e21e:	3410      	adds	r4, #16
    e220:	f10a 0218 	add.w	r2, sl, #24
    e224:	e717      	b.n	e056 <_realloc_r+0x1da>
    e226:	6923      	ldr	r3, [r4, #16]
    e228:	f8ca 3018 	str.w	r3, [sl, #24]
    e22c:	6963      	ldr	r3, [r4, #20]
    e22e:	f8ca 301c 	str.w	r3, [sl, #28]
    e232:	3418      	adds	r4, #24
    e234:	f10a 0320 	add.w	r3, sl, #32
    e238:	e78b      	b.n	e152 <_realloc_r+0x2d6>
    e23a:	6922      	ldr	r2, [r4, #16]
    e23c:	f8ca 2018 	str.w	r2, [sl, #24]
    e240:	6962      	ldr	r2, [r4, #20]
    e242:	f8ca 201c 	str.w	r2, [sl, #28]
    e246:	3418      	adds	r4, #24
    e248:	f10a 0220 	add.w	r2, sl, #32
    e24c:	e703      	b.n	e056 <_realloc_r+0x1da>
    e24e:	bf00      	nop
    e250:	1fff88e0 	.word	0x1fff88e0

0000e254 <__cxa_atexit>:
    e254:	4613      	mov	r3, r2
    e256:	460a      	mov	r2, r1
    e258:	4601      	mov	r1, r0
    e25a:	2002      	movs	r0, #2
    e25c:	f000 bb5e 	b.w	e91c <__register_exitproc>

0000e260 <stdio_exit_handler>:
    e260:	4a02      	ldr	r2, [pc, #8]	; (e26c <stdio_exit_handler+0xc>)
    e262:	4903      	ldr	r1, [pc, #12]	; (e270 <stdio_exit_handler+0x10>)
    e264:	4803      	ldr	r0, [pc, #12]	; (e274 <stdio_exit_handler+0x14>)
    e266:	f000 b8bb 	b.w	e3e0 <_fwalk_sglue>
    e26a:	bf00      	nop
    e26c:	1fff8cf0 	.word	0x1fff8cf0
    e270:	00010fb9 	.word	0x00010fb9
    e274:	1fff8e68 	.word	0x1fff8e68

0000e278 <cleanup_stdio>:
    e278:	4b0c      	ldr	r3, [pc, #48]	; (e2ac <cleanup_stdio+0x34>)
    e27a:	6841      	ldr	r1, [r0, #4]
    e27c:	4299      	cmp	r1, r3
    e27e:	b510      	push	{r4, lr}
    e280:	4604      	mov	r4, r0
    e282:	d001      	beq.n	e288 <cleanup_stdio+0x10>
    e284:	f002 fe98 	bl	10fb8 <_fclose_r>
    e288:	68a1      	ldr	r1, [r4, #8]
    e28a:	4b09      	ldr	r3, [pc, #36]	; (e2b0 <cleanup_stdio+0x38>)
    e28c:	4299      	cmp	r1, r3
    e28e:	d002      	beq.n	e296 <cleanup_stdio+0x1e>
    e290:	4620      	mov	r0, r4
    e292:	f002 fe91 	bl	10fb8 <_fclose_r>
    e296:	68e1      	ldr	r1, [r4, #12]
    e298:	4b06      	ldr	r3, [pc, #24]	; (e2b4 <cleanup_stdio+0x3c>)
    e29a:	4299      	cmp	r1, r3
    e29c:	d004      	beq.n	e2a8 <cleanup_stdio+0x30>
    e29e:	4620      	mov	r0, r4
    e2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2a4:	f002 be88 	b.w	10fb8 <_fclose_r>
    e2a8:	bd10      	pop	{r4, pc}
    e2aa:	bf00      	nop
    e2ac:	1fffc620 	.word	0x1fffc620
    e2b0:	1fffc688 	.word	0x1fffc688
    e2b4:	1fffc6f0 	.word	0x1fffc6f0

0000e2b8 <global_stdio_init.part.0>:
    e2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e2bc:	4c2a      	ldr	r4, [pc, #168]	; (e368 <global_stdio_init.part.0+0xb0>)
    e2be:	4b2b      	ldr	r3, [pc, #172]	; (e36c <global_stdio_init.part.0+0xb4>)
    e2c0:	482b      	ldr	r0, [pc, #172]	; (e370 <global_stdio_init.part.0+0xb8>)
    e2c2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; e374 <global_stdio_init.part.0+0xbc>
    e2c6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; e378 <global_stdio_init.part.0+0xc0>
    e2ca:	4f2c      	ldr	r7, [pc, #176]	; (e37c <global_stdio_init.part.0+0xc4>)
    e2cc:	6018      	str	r0, [r3, #0]
    e2ce:	2500      	movs	r5, #0
    e2d0:	2304      	movs	r3, #4
    e2d2:	2208      	movs	r2, #8
    e2d4:	4629      	mov	r1, r5
    e2d6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    e2da:	4e29      	ldr	r6, [pc, #164]	; (e380 <global_stdio_init.part.0+0xc8>)
    e2dc:	6665      	str	r5, [r4, #100]	; 0x64
    e2de:	e9c4 5302 	strd	r5, r3, [r4, #8]
    e2e2:	e9c4 5500 	strd	r5, r5, [r4]
    e2e6:	e9c4 5504 	strd	r5, r5, [r4, #16]
    e2ea:	61a5      	str	r5, [r4, #24]
    e2ec:	f000 f97e 	bl	e5ec <memset>
    e2f0:	4b24      	ldr	r3, [pc, #144]	; (e384 <global_stdio_init.part.0+0xcc>)
    e2f2:	6763      	str	r3, [r4, #116]	; 0x74
    e2f4:	2208      	movs	r2, #8
    e2f6:	4629      	mov	r1, r5
    e2f8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    e2fc:	e9c4 4907 	strd	r4, r9, [r4, #28]
    e300:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    e304:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    e308:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    e30c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    e310:	6725      	str	r5, [r4, #112]	; 0x70
    e312:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    e316:	62e6      	str	r6, [r4, #44]	; 0x2c
    e318:	f000 f968 	bl	e5ec <memset>
    e31c:	4b1a      	ldr	r3, [pc, #104]	; (e388 <global_stdio_init.part.0+0xd0>)
    e31e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    e322:	4629      	mov	r1, r5
    e324:	f104 0368 	add.w	r3, r4, #104	; 0x68
    e328:	2208      	movs	r2, #8
    e32a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    e32e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    e332:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    e336:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    e33a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    e33e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    e342:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    e346:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    e34a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    e34e:	f000 f94d 	bl	e5ec <memset>
    e352:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    e356:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    e35a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    e35e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    e362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e366:	bf00      	nop
    e368:	1fffc620 	.word	0x1fffc620
    e36c:	1fffc758 	.word	0x1fffc758
    e370:	0000e261 	.word	0x0000e261
    e374:	0000e469 	.word	0x0000e469
    e378:	0000e48d 	.word	0x0000e48d
    e37c:	0000e4cd 	.word	0x0000e4cd
    e380:	0000e4ed 	.word	0x0000e4ed
    e384:	00010009 	.word	0x00010009
    e388:	00020012 	.word	0x00020012

0000e38c <__sinit>:
    e38c:	b510      	push	{r4, lr}
    e38e:	4604      	mov	r4, r0
    e390:	480a      	ldr	r0, [pc, #40]	; (e3bc <__sinit+0x30>)
    e392:	f000 fa49 	bl	e828 <__retarget_lock_acquire_recursive>
    e396:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e398:	b923      	cbnz	r3, e3a4 <__sinit+0x18>
    e39a:	4b09      	ldr	r3, [pc, #36]	; (e3c0 <__sinit+0x34>)
    e39c:	4a09      	ldr	r2, [pc, #36]	; (e3c4 <__sinit+0x38>)
    e39e:	681b      	ldr	r3, [r3, #0]
    e3a0:	6362      	str	r2, [r4, #52]	; 0x34
    e3a2:	b123      	cbz	r3, e3ae <__sinit+0x22>
    e3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3a8:	4804      	ldr	r0, [pc, #16]	; (e3bc <__sinit+0x30>)
    e3aa:	f000 ba3f 	b.w	e82c <__retarget_lock_release_recursive>
    e3ae:	f7ff ff83 	bl	e2b8 <global_stdio_init.part.0>
    e3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3b6:	4801      	ldr	r0, [pc, #4]	; (e3bc <__sinit+0x30>)
    e3b8:	f000 ba38 	b.w	e82c <__retarget_lock_release_recursive>
    e3bc:	1fffc768 	.word	0x1fffc768
    e3c0:	1fffc758 	.word	0x1fffc758
    e3c4:	0000e279 	.word	0x0000e279

0000e3c8 <__sfp_lock_acquire>:
    e3c8:	4801      	ldr	r0, [pc, #4]	; (e3d0 <__sfp_lock_acquire+0x8>)
    e3ca:	f000 ba2d 	b.w	e828 <__retarget_lock_acquire_recursive>
    e3ce:	bf00      	nop
    e3d0:	1fffc768 	.word	0x1fffc768

0000e3d4 <__sfp_lock_release>:
    e3d4:	4801      	ldr	r0, [pc, #4]	; (e3dc <__sfp_lock_release+0x8>)
    e3d6:	f000 ba29 	b.w	e82c <__retarget_lock_release_recursive>
    e3da:	bf00      	nop
    e3dc:	1fffc768 	.word	0x1fffc768

0000e3e0 <_fwalk_sglue>:
    e3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e3e4:	4680      	mov	r8, r0
    e3e6:	460f      	mov	r7, r1
    e3e8:	4616      	mov	r6, r2
    e3ea:	f04f 0900 	mov.w	r9, #0
    e3ee:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    e3f2:	3d01      	subs	r5, #1
    e3f4:	d411      	bmi.n	e41a <_fwalk_sglue+0x3a>
    e3f6:	89a3      	ldrh	r3, [r4, #12]
    e3f8:	2b01      	cmp	r3, #1
    e3fa:	f105 35ff 	add.w	r5, r5, #4294967295
    e3fe:	d908      	bls.n	e412 <_fwalk_sglue+0x32>
    e400:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    e404:	3301      	adds	r3, #1
    e406:	4621      	mov	r1, r4
    e408:	d003      	beq.n	e412 <_fwalk_sglue+0x32>
    e40a:	4640      	mov	r0, r8
    e40c:	47b8      	blx	r7
    e40e:	ea49 0900 	orr.w	r9, r9, r0
    e412:	1c6b      	adds	r3, r5, #1
    e414:	f104 0468 	add.w	r4, r4, #104	; 0x68
    e418:	d1ed      	bne.n	e3f6 <_fwalk_sglue+0x16>
    e41a:	6836      	ldr	r6, [r6, #0]
    e41c:	2e00      	cmp	r6, #0
    e41e:	d1e6      	bne.n	e3ee <_fwalk_sglue+0xe>
    e420:	4648      	mov	r0, r9
    e422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e426:	bf00      	nop

0000e428 <sprintf>:
    e428:	b40e      	push	{r1, r2, r3}
    e42a:	b510      	push	{r4, lr}
    e42c:	b09d      	sub	sp, #116	; 0x74
    e42e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e432:	ab1f      	add	r3, sp, #124	; 0x7c
    e434:	e9cd 0106 	strd	r0, r1, [sp, #24]
    e438:	9104      	str	r1, [sp, #16]
    e43a:	4909      	ldr	r1, [pc, #36]	; (e460 <sprintf+0x38>)
    e43c:	f853 2b04 	ldr.w	r2, [r3], #4
    e440:	9002      	str	r0, [sp, #8]
    e442:	4c08      	ldr	r4, [pc, #32]	; (e464 <sprintf+0x3c>)
    e444:	6808      	ldr	r0, [r1, #0]
    e446:	9301      	str	r3, [sp, #4]
    e448:	a902      	add	r1, sp, #8
    e44a:	9405      	str	r4, [sp, #20]
    e44c:	f000 ffe2 	bl	f414 <_svfprintf_r>
    e450:	9b02      	ldr	r3, [sp, #8]
    e452:	2200      	movs	r2, #0
    e454:	701a      	strb	r2, [r3, #0]
    e456:	b01d      	add	sp, #116	; 0x74
    e458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e45c:	b003      	add	sp, #12
    e45e:	4770      	bx	lr
    e460:	1fff8f88 	.word	0x1fff8f88
    e464:	ffff0208 	.word	0xffff0208

0000e468 <__sread>:
    e468:	b510      	push	{r4, lr}
    e46a:	460c      	mov	r4, r1
    e46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e470:	f000 f96e 	bl	e750 <_read_r>
    e474:	2800      	cmp	r0, #0
    e476:	db03      	blt.n	e480 <__sread+0x18>
    e478:	6d23      	ldr	r3, [r4, #80]	; 0x50
    e47a:	4403      	add	r3, r0
    e47c:	6523      	str	r3, [r4, #80]	; 0x50
    e47e:	bd10      	pop	{r4, pc}
    e480:	89a3      	ldrh	r3, [r4, #12]
    e482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e486:	81a3      	strh	r3, [r4, #12]
    e488:	bd10      	pop	{r4, pc}
    e48a:	bf00      	nop

0000e48c <__swrite>:
    e48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e490:	460c      	mov	r4, r1
    e492:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    e496:	461f      	mov	r7, r3
    e498:	05cb      	lsls	r3, r1, #23
    e49a:	4605      	mov	r5, r0
    e49c:	4616      	mov	r6, r2
    e49e:	d40b      	bmi.n	e4b8 <__swrite+0x2c>
    e4a0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    e4a4:	81a1      	strh	r1, [r4, #12]
    e4a6:	463b      	mov	r3, r7
    e4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e4ac:	4632      	mov	r2, r6
    e4ae:	4628      	mov	r0, r5
    e4b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e4b4:	f000 b974 	b.w	e7a0 <_write_r>
    e4b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e4bc:	2302      	movs	r3, #2
    e4be:	2200      	movs	r2, #0
    e4c0:	f000 f930 	bl	e724 <_lseek_r>
    e4c4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    e4c8:	e7ea      	b.n	e4a0 <__swrite+0x14>
    e4ca:	bf00      	nop

0000e4cc <__sseek>:
    e4cc:	b510      	push	{r4, lr}
    e4ce:	460c      	mov	r4, r1
    e4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e4d4:	f000 f926 	bl	e724 <_lseek_r>
    e4d8:	89a3      	ldrh	r3, [r4, #12]
    e4da:	1c42      	adds	r2, r0, #1
    e4dc:	bf0e      	itee	eq
    e4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    e4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    e4e6:	6520      	strne	r0, [r4, #80]	; 0x50
    e4e8:	81a3      	strh	r3, [r4, #12]
    e4ea:	bd10      	pop	{r4, pc}

0000e4ec <__sclose>:
    e4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e4f0:	f000 b906 	b.w	e700 <_close_r>

0000e4f4 <memmove>:
    e4f4:	4288      	cmp	r0, r1
    e4f6:	d90d      	bls.n	e514 <memmove+0x20>
    e4f8:	188b      	adds	r3, r1, r2
    e4fa:	4283      	cmp	r3, r0
    e4fc:	d90a      	bls.n	e514 <memmove+0x20>
    e4fe:	eb00 0c02 	add.w	ip, r0, r2
    e502:	b1ba      	cbz	r2, e534 <memmove+0x40>
    e504:	4662      	mov	r2, ip
    e506:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    e50a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    e50e:	4299      	cmp	r1, r3
    e510:	d1f9      	bne.n	e506 <memmove+0x12>
    e512:	4770      	bx	lr
    e514:	2a0f      	cmp	r2, #15
    e516:	d80e      	bhi.n	e536 <memmove+0x42>
    e518:	4603      	mov	r3, r0
    e51a:	f102 3cff 	add.w	ip, r2, #4294967295
    e51e:	b14a      	cbz	r2, e534 <memmove+0x40>
    e520:	f10c 0c01 	add.w	ip, ip, #1
    e524:	3b01      	subs	r3, #1
    e526:	448c      	add	ip, r1
    e528:	f811 2b01 	ldrb.w	r2, [r1], #1
    e52c:	f803 2f01 	strb.w	r2, [r3, #1]!
    e530:	4561      	cmp	r1, ip
    e532:	d1f9      	bne.n	e528 <memmove+0x34>
    e534:	4770      	bx	lr
    e536:	ea40 0301 	orr.w	r3, r0, r1
    e53a:	079b      	lsls	r3, r3, #30
    e53c:	d150      	bne.n	e5e0 <memmove+0xec>
    e53e:	f1a2 0310 	sub.w	r3, r2, #16
    e542:	b570      	push	{r4, r5, r6, lr}
    e544:	f101 0c20 	add.w	ip, r1, #32
    e548:	f023 050f 	bic.w	r5, r3, #15
    e54c:	f101 0e10 	add.w	lr, r1, #16
    e550:	f100 0410 	add.w	r4, r0, #16
    e554:	44ac      	add	ip, r5
    e556:	091b      	lsrs	r3, r3, #4
    e558:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    e55c:	f844 5c10 	str.w	r5, [r4, #-16]
    e560:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    e564:	f844 5c0c 	str.w	r5, [r4, #-12]
    e568:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    e56c:	f844 5c08 	str.w	r5, [r4, #-8]
    e570:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    e574:	f844 5c04 	str.w	r5, [r4, #-4]
    e578:	f10e 0e10 	add.w	lr, lr, #16
    e57c:	45e6      	cmp	lr, ip
    e57e:	f104 0410 	add.w	r4, r4, #16
    e582:	d1e9      	bne.n	e558 <memmove+0x64>
    e584:	3301      	adds	r3, #1
    e586:	f012 0f0c 	tst.w	r2, #12
    e58a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    e58e:	f002 040f 	and.w	r4, r2, #15
    e592:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    e596:	d027      	beq.n	e5e8 <memmove+0xf4>
    e598:	3c04      	subs	r4, #4
    e59a:	f024 0603 	bic.w	r6, r4, #3
    e59e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    e5a2:	441e      	add	r6, r3
    e5a4:	1f1c      	subs	r4, r3, #4
    e5a6:	468e      	mov	lr, r1
    e5a8:	f85e 5b04 	ldr.w	r5, [lr], #4
    e5ac:	f844 5f04 	str.w	r5, [r4, #4]!
    e5b0:	42b4      	cmp	r4, r6
    e5b2:	d1f9      	bne.n	e5a8 <memmove+0xb4>
    e5b4:	f10c 0401 	add.w	r4, ip, #1
    e5b8:	f002 0203 	and.w	r2, r2, #3
    e5bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e5c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    e5c4:	f102 3cff 	add.w	ip, r2, #4294967295
    e5c8:	b14a      	cbz	r2, e5de <memmove+0xea>
    e5ca:	f10c 0c01 	add.w	ip, ip, #1
    e5ce:	3b01      	subs	r3, #1
    e5d0:	448c      	add	ip, r1
    e5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
    e5d6:	f803 2f01 	strb.w	r2, [r3, #1]!
    e5da:	4561      	cmp	r1, ip
    e5dc:	d1f9      	bne.n	e5d2 <memmove+0xde>
    e5de:	bd70      	pop	{r4, r5, r6, pc}
    e5e0:	f102 3cff 	add.w	ip, r2, #4294967295
    e5e4:	4603      	mov	r3, r0
    e5e6:	e79b      	b.n	e520 <memmove+0x2c>
    e5e8:	4622      	mov	r2, r4
    e5ea:	e7eb      	b.n	e5c4 <memmove+0xd0>

0000e5ec <memset>:
    e5ec:	0783      	lsls	r3, r0, #30
    e5ee:	b530      	push	{r4, r5, lr}
    e5f0:	d048      	beq.n	e684 <memset+0x98>
    e5f2:	1e54      	subs	r4, r2, #1
    e5f4:	2a00      	cmp	r2, #0
    e5f6:	d03f      	beq.n	e678 <memset+0x8c>
    e5f8:	b2ca      	uxtb	r2, r1
    e5fa:	4603      	mov	r3, r0
    e5fc:	e001      	b.n	e602 <memset+0x16>
    e5fe:	3c01      	subs	r4, #1
    e600:	d33a      	bcc.n	e678 <memset+0x8c>
    e602:	f803 2b01 	strb.w	r2, [r3], #1
    e606:	079d      	lsls	r5, r3, #30
    e608:	d1f9      	bne.n	e5fe <memset+0x12>
    e60a:	2c03      	cmp	r4, #3
    e60c:	d92d      	bls.n	e66a <memset+0x7e>
    e60e:	b2cd      	uxtb	r5, r1
    e610:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e614:	2c0f      	cmp	r4, #15
    e616:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e61a:	d936      	bls.n	e68a <memset+0x9e>
    e61c:	f1a4 0210 	sub.w	r2, r4, #16
    e620:	f022 0c0f 	bic.w	ip, r2, #15
    e624:	f103 0e20 	add.w	lr, r3, #32
    e628:	44e6      	add	lr, ip
    e62a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    e62e:	f103 0210 	add.w	r2, r3, #16
    e632:	e942 5504 	strd	r5, r5, [r2, #-16]
    e636:	e942 5502 	strd	r5, r5, [r2, #-8]
    e63a:	3210      	adds	r2, #16
    e63c:	4572      	cmp	r2, lr
    e63e:	d1f8      	bne.n	e632 <memset+0x46>
    e640:	f10c 0201 	add.w	r2, ip, #1
    e644:	f014 0f0c 	tst.w	r4, #12
    e648:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e64c:	f004 0c0f 	and.w	ip, r4, #15
    e650:	d013      	beq.n	e67a <memset+0x8e>
    e652:	f1ac 0304 	sub.w	r3, ip, #4
    e656:	f023 0303 	bic.w	r3, r3, #3
    e65a:	3304      	adds	r3, #4
    e65c:	4413      	add	r3, r2
    e65e:	f842 5b04 	str.w	r5, [r2], #4
    e662:	4293      	cmp	r3, r2
    e664:	d1fb      	bne.n	e65e <memset+0x72>
    e666:	f00c 0403 	and.w	r4, ip, #3
    e66a:	b12c      	cbz	r4, e678 <memset+0x8c>
    e66c:	b2c9      	uxtb	r1, r1
    e66e:	441c      	add	r4, r3
    e670:	f803 1b01 	strb.w	r1, [r3], #1
    e674:	429c      	cmp	r4, r3
    e676:	d1fb      	bne.n	e670 <memset+0x84>
    e678:	bd30      	pop	{r4, r5, pc}
    e67a:	4664      	mov	r4, ip
    e67c:	4613      	mov	r3, r2
    e67e:	2c00      	cmp	r4, #0
    e680:	d1f4      	bne.n	e66c <memset+0x80>
    e682:	e7f9      	b.n	e678 <memset+0x8c>
    e684:	4603      	mov	r3, r0
    e686:	4614      	mov	r4, r2
    e688:	e7bf      	b.n	e60a <memset+0x1e>
    e68a:	461a      	mov	r2, r3
    e68c:	46a4      	mov	ip, r4
    e68e:	e7e0      	b.n	e652 <memset+0x66>

0000e690 <strncpy>:
    e690:	ea40 0301 	orr.w	r3, r0, r1
    e694:	079b      	lsls	r3, r3, #30
    e696:	b530      	push	{r4, r5, lr}
    e698:	d101      	bne.n	e69e <strncpy+0xe>
    e69a:	2a03      	cmp	r2, #3
    e69c:	d80f      	bhi.n	e6be <strncpy+0x2e>
    e69e:	4684      	mov	ip, r0
    e6a0:	f101 3eff 	add.w	lr, r1, #4294967295
    e6a4:	e007      	b.n	e6b6 <strncpy+0x26>
    e6a6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    e6aa:	f803 1b01 	strb.w	r1, [r3], #1
    e6ae:	1e54      	subs	r4, r2, #1
    e6b0:	b1c1      	cbz	r1, e6e4 <strncpy+0x54>
    e6b2:	469c      	mov	ip, r3
    e6b4:	4622      	mov	r2, r4
    e6b6:	4663      	mov	r3, ip
    e6b8:	2a00      	cmp	r2, #0
    e6ba:	d1f4      	bne.n	e6a6 <strncpy+0x16>
    e6bc:	bd30      	pop	{r4, r5, pc}
    e6be:	460b      	mov	r3, r1
    e6c0:	4684      	mov	ip, r0
    e6c2:	4619      	mov	r1, r3
    e6c4:	f853 5b04 	ldr.w	r5, [r3], #4
    e6c8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    e6cc:	ea24 0405 	bic.w	r4, r4, r5
    e6d0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    e6d4:	d1e4      	bne.n	e6a0 <strncpy+0x10>
    e6d6:	3a04      	subs	r2, #4
    e6d8:	2a03      	cmp	r2, #3
    e6da:	f84c 5b04 	str.w	r5, [ip], #4
    e6de:	4619      	mov	r1, r3
    e6e0:	d8ef      	bhi.n	e6c2 <strncpy+0x32>
    e6e2:	e7dd      	b.n	e6a0 <strncpy+0x10>
    e6e4:	4494      	add	ip, r2
    e6e6:	2c00      	cmp	r4, #0
    e6e8:	d0e8      	beq.n	e6bc <strncpy+0x2c>
    e6ea:	f803 1b01 	strb.w	r1, [r3], #1
    e6ee:	4563      	cmp	r3, ip
    e6f0:	d1fb      	bne.n	e6ea <strncpy+0x5a>
    e6f2:	bd30      	pop	{r4, r5, pc}

0000e6f4 <__locale_mb_cur_max>:
    e6f4:	4b01      	ldr	r3, [pc, #4]	; (e6fc <__locale_mb_cur_max+0x8>)
    e6f6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    e6fa:	4770      	bx	lr
    e6fc:	1fff8cfc 	.word	0x1fff8cfc

0000e700 <_close_r>:
    e700:	b538      	push	{r3, r4, r5, lr}
    e702:	4d07      	ldr	r5, [pc, #28]	; (e720 <_close_r+0x20>)
    e704:	2200      	movs	r2, #0
    e706:	4604      	mov	r4, r0
    e708:	4608      	mov	r0, r1
    e70a:	602a      	str	r2, [r5, #0]
    e70c:	f7fb ff2c 	bl	a568 <_close>
    e710:	1c43      	adds	r3, r0, #1
    e712:	d000      	beq.n	e716 <_close_r+0x16>
    e714:	bd38      	pop	{r3, r4, r5, pc}
    e716:	682b      	ldr	r3, [r5, #0]
    e718:	2b00      	cmp	r3, #0
    e71a:	d0fb      	beq.n	e714 <_close_r+0x14>
    e71c:	6023      	str	r3, [r4, #0]
    e71e:	bd38      	pop	{r3, r4, r5, pc}
    e720:	1fffc75c 	.word	0x1fffc75c

0000e724 <_lseek_r>:
    e724:	b538      	push	{r3, r4, r5, lr}
    e726:	460c      	mov	r4, r1
    e728:	4d08      	ldr	r5, [pc, #32]	; (e74c <_lseek_r+0x28>)
    e72a:	4684      	mov	ip, r0
    e72c:	4611      	mov	r1, r2
    e72e:	4620      	mov	r0, r4
    e730:	461a      	mov	r2, r3
    e732:	2300      	movs	r3, #0
    e734:	602b      	str	r3, [r5, #0]
    e736:	4664      	mov	r4, ip
    e738:	f7fb ff22 	bl	a580 <_lseek>
    e73c:	1c43      	adds	r3, r0, #1
    e73e:	d000      	beq.n	e742 <_lseek_r+0x1e>
    e740:	bd38      	pop	{r3, r4, r5, pc}
    e742:	682b      	ldr	r3, [r5, #0]
    e744:	2b00      	cmp	r3, #0
    e746:	d0fb      	beq.n	e740 <_lseek_r+0x1c>
    e748:	6023      	str	r3, [r4, #0]
    e74a:	bd38      	pop	{r3, r4, r5, pc}
    e74c:	1fffc75c 	.word	0x1fffc75c

0000e750 <_read_r>:
    e750:	b538      	push	{r3, r4, r5, lr}
    e752:	460c      	mov	r4, r1
    e754:	4d08      	ldr	r5, [pc, #32]	; (e778 <_read_r+0x28>)
    e756:	4684      	mov	ip, r0
    e758:	4611      	mov	r1, r2
    e75a:	4620      	mov	r0, r4
    e75c:	461a      	mov	r2, r3
    e75e:	2300      	movs	r3, #0
    e760:	602b      	str	r3, [r5, #0]
    e762:	4664      	mov	r4, ip
    e764:	f7fb fefe 	bl	a564 <_read>
    e768:	1c43      	adds	r3, r0, #1
    e76a:	d000      	beq.n	e76e <_read_r+0x1e>
    e76c:	bd38      	pop	{r3, r4, r5, pc}
    e76e:	682b      	ldr	r3, [r5, #0]
    e770:	2b00      	cmp	r3, #0
    e772:	d0fb      	beq.n	e76c <_read_r+0x1c>
    e774:	6023      	str	r3, [r4, #0]
    e776:	bd38      	pop	{r3, r4, r5, pc}
    e778:	1fffc75c 	.word	0x1fffc75c

0000e77c <_sbrk_r>:
    e77c:	b538      	push	{r3, r4, r5, lr}
    e77e:	4d07      	ldr	r5, [pc, #28]	; (e79c <_sbrk_r+0x20>)
    e780:	2200      	movs	r2, #0
    e782:	4604      	mov	r4, r0
    e784:	4608      	mov	r0, r1
    e786:	602a      	str	r2, [r5, #0]
    e788:	f7fb fed6 	bl	a538 <_sbrk>
    e78c:	1c43      	adds	r3, r0, #1
    e78e:	d000      	beq.n	e792 <_sbrk_r+0x16>
    e790:	bd38      	pop	{r3, r4, r5, pc}
    e792:	682b      	ldr	r3, [r5, #0]
    e794:	2b00      	cmp	r3, #0
    e796:	d0fb      	beq.n	e790 <_sbrk_r+0x14>
    e798:	6023      	str	r3, [r4, #0]
    e79a:	bd38      	pop	{r3, r4, r5, pc}
    e79c:	1fffc75c 	.word	0x1fffc75c

0000e7a0 <_write_r>:
    e7a0:	b538      	push	{r3, r4, r5, lr}
    e7a2:	460c      	mov	r4, r1
    e7a4:	4d08      	ldr	r5, [pc, #32]	; (e7c8 <_write_r+0x28>)
    e7a6:	4684      	mov	ip, r0
    e7a8:	4611      	mov	r1, r2
    e7aa:	4620      	mov	r0, r4
    e7ac:	461a      	mov	r2, r3
    e7ae:	2300      	movs	r3, #0
    e7b0:	602b      	str	r3, [r5, #0]
    e7b2:	4664      	mov	r4, ip
    e7b4:	f7fb faec 	bl	9d90 <_write>
    e7b8:	1c43      	adds	r3, r0, #1
    e7ba:	d000      	beq.n	e7be <_write_r+0x1e>
    e7bc:	bd38      	pop	{r3, r4, r5, pc}
    e7be:	682b      	ldr	r3, [r5, #0]
    e7c0:	2b00      	cmp	r3, #0
    e7c2:	d0fb      	beq.n	e7bc <_write_r+0x1c>
    e7c4:	6023      	str	r3, [r4, #0]
    e7c6:	bd38      	pop	{r3, r4, r5, pc}
    e7c8:	1fffc75c 	.word	0x1fffc75c

0000e7cc <__errno>:
    e7cc:	4b01      	ldr	r3, [pc, #4]	; (e7d4 <__errno+0x8>)
    e7ce:	6818      	ldr	r0, [r3, #0]
    e7d0:	4770      	bx	lr
    e7d2:	bf00      	nop
    e7d4:	1fff8f88 	.word	0x1fff8f88

0000e7d8 <__libc_init_array>:
    e7d8:	b570      	push	{r4, r5, r6, lr}
    e7da:	4e0d      	ldr	r6, [pc, #52]	; (e810 <__libc_init_array+0x38>)
    e7dc:	4d0d      	ldr	r5, [pc, #52]	; (e814 <__libc_init_array+0x3c>)
    e7de:	1b76      	subs	r6, r6, r5
    e7e0:	10b6      	asrs	r6, r6, #2
    e7e2:	d006      	beq.n	e7f2 <__libc_init_array+0x1a>
    e7e4:	2400      	movs	r4, #0
    e7e6:	f855 3b04 	ldr.w	r3, [r5], #4
    e7ea:	3401      	adds	r4, #1
    e7ec:	4798      	blx	r3
    e7ee:	42a6      	cmp	r6, r4
    e7f0:	d1f9      	bne.n	e7e6 <__libc_init_array+0xe>
    e7f2:	4e09      	ldr	r6, [pc, #36]	; (e818 <__libc_init_array+0x40>)
    e7f4:	4d09      	ldr	r5, [pc, #36]	; (e81c <__libc_init_array+0x44>)
    e7f6:	1b76      	subs	r6, r6, r5
    e7f8:	f007 fc62 	bl	160c0 <_init>
    e7fc:	10b6      	asrs	r6, r6, #2
    e7fe:	d006      	beq.n	e80e <__libc_init_array+0x36>
    e800:	2400      	movs	r4, #0
    e802:	f855 3b04 	ldr.w	r3, [r5], #4
    e806:	3401      	adds	r4, #1
    e808:	4798      	blx	r3
    e80a:	42a6      	cmp	r6, r4
    e80c:	d1f9      	bne.n	e802 <__libc_init_array+0x2a>
    e80e:	bd70      	pop	{r4, r5, r6, pc}
    e810:	000160cc 	.word	0x000160cc
    e814:	000160cc 	.word	0x000160cc
    e818:	000160e0 	.word	0x000160e0
    e81c:	000160cc 	.word	0x000160cc

0000e820 <__retarget_lock_init_recursive>:
    e820:	4770      	bx	lr
    e822:	bf00      	nop

0000e824 <__retarget_lock_close_recursive>:
    e824:	4770      	bx	lr
    e826:	bf00      	nop

0000e828 <__retarget_lock_acquire_recursive>:
    e828:	4770      	bx	lr
    e82a:	bf00      	nop

0000e82c <__retarget_lock_release_recursive>:
    e82c:	4770      	bx	lr
    e82e:	bf00      	nop
    e830:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e834:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e838:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e83c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000e840 <strlen>:
    e840:	f890 f000 	pld	[r0]
    e844:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    e848:	f020 0107 	bic.w	r1, r0, #7
    e84c:	f06f 0c00 	mvn.w	ip, #0
    e850:	f010 0407 	ands.w	r4, r0, #7
    e854:	f891 f020 	pld	[r1, #32]
    e858:	f040 8049 	bne.w	e8ee <strlen+0xae>
    e85c:	f04f 0400 	mov.w	r4, #0
    e860:	f06f 0007 	mvn.w	r0, #7
    e864:	e9d1 2300 	ldrd	r2, r3, [r1]
    e868:	f891 f040 	pld	[r1, #64]	; 0x40
    e86c:	f100 0008 	add.w	r0, r0, #8
    e870:	fa82 f24c 	uadd8	r2, r2, ip
    e874:	faa4 f28c 	sel	r2, r4, ip
    e878:	fa83 f34c 	uadd8	r3, r3, ip
    e87c:	faa2 f38c 	sel	r3, r2, ip
    e880:	bb4b      	cbnz	r3, e8d6 <strlen+0x96>
    e882:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e886:	fa82 f24c 	uadd8	r2, r2, ip
    e88a:	f100 0008 	add.w	r0, r0, #8
    e88e:	faa4 f28c 	sel	r2, r4, ip
    e892:	fa83 f34c 	uadd8	r3, r3, ip
    e896:	faa2 f38c 	sel	r3, r2, ip
    e89a:	b9e3      	cbnz	r3, e8d6 <strlen+0x96>
    e89c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e8a0:	fa82 f24c 	uadd8	r2, r2, ip
    e8a4:	f100 0008 	add.w	r0, r0, #8
    e8a8:	faa4 f28c 	sel	r2, r4, ip
    e8ac:	fa83 f34c 	uadd8	r3, r3, ip
    e8b0:	faa2 f38c 	sel	r3, r2, ip
    e8b4:	b97b      	cbnz	r3, e8d6 <strlen+0x96>
    e8b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e8ba:	f101 0120 	add.w	r1, r1, #32
    e8be:	fa82 f24c 	uadd8	r2, r2, ip
    e8c2:	f100 0008 	add.w	r0, r0, #8
    e8c6:	faa4 f28c 	sel	r2, r4, ip
    e8ca:	fa83 f34c 	uadd8	r3, r3, ip
    e8ce:	faa2 f38c 	sel	r3, r2, ip
    e8d2:	2b00      	cmp	r3, #0
    e8d4:	d0c6      	beq.n	e864 <strlen+0x24>
    e8d6:	2a00      	cmp	r2, #0
    e8d8:	bf04      	itt	eq
    e8da:	3004      	addeq	r0, #4
    e8dc:	461a      	moveq	r2, r3
    e8de:	ba12      	rev	r2, r2
    e8e0:	fab2 f282 	clz	r2, r2
    e8e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e8e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e8ec:	4770      	bx	lr
    e8ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    e8f2:	f004 0503 	and.w	r5, r4, #3
    e8f6:	f1c4 0000 	rsb	r0, r4, #0
    e8fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e8fe:	f014 0f04 	tst.w	r4, #4
    e902:	f891 f040 	pld	[r1, #64]	; 0x40
    e906:	fa0c f505 	lsl.w	r5, ip, r5
    e90a:	ea62 0205 	orn	r2, r2, r5
    e90e:	bf1c      	itt	ne
    e910:	ea63 0305 	ornne	r3, r3, r5
    e914:	4662      	movne	r2, ip
    e916:	f04f 0400 	mov.w	r4, #0
    e91a:	e7a9      	b.n	e870 <strlen+0x30>

0000e91c <__register_exitproc>:
    e91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e920:	f8df a074 	ldr.w	sl, [pc, #116]	; e998 <__register_exitproc+0x7c>
    e924:	4606      	mov	r6, r0
    e926:	f8da 0000 	ldr.w	r0, [sl]
    e92a:	4698      	mov	r8, r3
    e92c:	460f      	mov	r7, r1
    e92e:	4691      	mov	r9, r2
    e930:	f7ff ff7a 	bl	e828 <__retarget_lock_acquire_recursive>
    e934:	4b19      	ldr	r3, [pc, #100]	; (e99c <__register_exitproc+0x80>)
    e936:	681c      	ldr	r4, [r3, #0]
    e938:	b324      	cbz	r4, e984 <__register_exitproc+0x68>
    e93a:	6865      	ldr	r5, [r4, #4]
    e93c:	2d1f      	cmp	r5, #31
    e93e:	dc24      	bgt.n	e98a <__register_exitproc+0x6e>
    e940:	b95e      	cbnz	r6, e95a <__register_exitproc+0x3e>
    e942:	1c6b      	adds	r3, r5, #1
    e944:	3502      	adds	r5, #2
    e946:	f8da 0000 	ldr.w	r0, [sl]
    e94a:	6063      	str	r3, [r4, #4]
    e94c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    e950:	f7ff ff6c 	bl	e82c <__retarget_lock_release_recursive>
    e954:	2000      	movs	r0, #0
    e956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e95a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    e95e:	2301      	movs	r3, #1
    e960:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    e964:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    e968:	40ab      	lsls	r3, r5
    e96a:	431a      	orrs	r2, r3
    e96c:	2e02      	cmp	r6, #2
    e96e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    e972:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    e976:	d1e4      	bne.n	e942 <__register_exitproc+0x26>
    e978:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    e97c:	431a      	orrs	r2, r3
    e97e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    e982:	e7de      	b.n	e942 <__register_exitproc+0x26>
    e984:	4c06      	ldr	r4, [pc, #24]	; (e9a0 <__register_exitproc+0x84>)
    e986:	601c      	str	r4, [r3, #0]
    e988:	e7d7      	b.n	e93a <__register_exitproc+0x1e>
    e98a:	f8da 0000 	ldr.w	r0, [sl]
    e98e:	f7ff ff4d 	bl	e82c <__retarget_lock_release_recursive>
    e992:	f04f 30ff 	mov.w	r0, #4294967295
    e996:	e7de      	b.n	e956 <__register_exitproc+0x3a>
    e998:	1fff8f8c 	.word	0x1fff8f8c
    e99c:	1fffc8fc 	.word	0x1fffc8fc
    e9a0:	1fffc76c 	.word	0x1fffc76c

0000e9a4 <register_fini>:
    e9a4:	4b02      	ldr	r3, [pc, #8]	; (e9b0 <register_fini+0xc>)
    e9a6:	b113      	cbz	r3, e9ae <register_fini+0xa>
    e9a8:	4802      	ldr	r0, [pc, #8]	; (e9b4 <register_fini+0x10>)
    e9aa:	f000 b805 	b.w	e9b8 <atexit>
    e9ae:	4770      	bx	lr
    e9b0:	00000000 	.word	0x00000000
    e9b4:	000111fd 	.word	0x000111fd

0000e9b8 <atexit>:
    e9b8:	2300      	movs	r3, #0
    e9ba:	4601      	mov	r1, r0
    e9bc:	461a      	mov	r2, r3
    e9be:	4618      	mov	r0, r3
    e9c0:	f7ff bfac 	b.w	e91c <__register_exitproc>

0000e9c4 <_malloc_trim_r>:
    e9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9c6:	4f24      	ldr	r7, [pc, #144]	; (ea58 <_malloc_trim_r+0x94>)
    e9c8:	460c      	mov	r4, r1
    e9ca:	4606      	mov	r6, r0
    e9cc:	f7ff fa4a 	bl	de64 <__malloc_lock>
    e9d0:	68bb      	ldr	r3, [r7, #8]
    e9d2:	685d      	ldr	r5, [r3, #4]
    e9d4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    e9d8:	310f      	adds	r1, #15
    e9da:	f025 0503 	bic.w	r5, r5, #3
    e9de:	194b      	adds	r3, r1, r5
    e9e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    e9e4:	f023 030f 	bic.w	r3, r3, #15
    e9e8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    e9ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    e9f0:	db07      	blt.n	ea02 <_malloc_trim_r+0x3e>
    e9f2:	2100      	movs	r1, #0
    e9f4:	4630      	mov	r0, r6
    e9f6:	f7ff fec1 	bl	e77c <_sbrk_r>
    e9fa:	68bb      	ldr	r3, [r7, #8]
    e9fc:	442b      	add	r3, r5
    e9fe:	4298      	cmp	r0, r3
    ea00:	d004      	beq.n	ea0c <_malloc_trim_r+0x48>
    ea02:	4630      	mov	r0, r6
    ea04:	f7ff fa34 	bl	de70 <__malloc_unlock>
    ea08:	2000      	movs	r0, #0
    ea0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea0c:	4261      	negs	r1, r4
    ea0e:	4630      	mov	r0, r6
    ea10:	f7ff feb4 	bl	e77c <_sbrk_r>
    ea14:	3001      	adds	r0, #1
    ea16:	d00d      	beq.n	ea34 <_malloc_trim_r+0x70>
    ea18:	4a10      	ldr	r2, [pc, #64]	; (ea5c <_malloc_trim_r+0x98>)
    ea1a:	68bb      	ldr	r3, [r7, #8]
    ea1c:	1b2d      	subs	r5, r5, r4
    ea1e:	f045 0501 	orr.w	r5, r5, #1
    ea22:	605d      	str	r5, [r3, #4]
    ea24:	6813      	ldr	r3, [r2, #0]
    ea26:	4630      	mov	r0, r6
    ea28:	1b1b      	subs	r3, r3, r4
    ea2a:	6013      	str	r3, [r2, #0]
    ea2c:	f7ff fa20 	bl	de70 <__malloc_unlock>
    ea30:	2001      	movs	r0, #1
    ea32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea34:	2100      	movs	r1, #0
    ea36:	4630      	mov	r0, r6
    ea38:	f7ff fea0 	bl	e77c <_sbrk_r>
    ea3c:	68ba      	ldr	r2, [r7, #8]
    ea3e:	1a83      	subs	r3, r0, r2
    ea40:	2b0f      	cmp	r3, #15
    ea42:	ddde      	ble.n	ea02 <_malloc_trim_r+0x3e>
    ea44:	f043 0301 	orr.w	r3, r3, #1
    ea48:	6053      	str	r3, [r2, #4]
    ea4a:	4b05      	ldr	r3, [pc, #20]	; (ea60 <_malloc_trim_r+0x9c>)
    ea4c:	4903      	ldr	r1, [pc, #12]	; (ea5c <_malloc_trim_r+0x98>)
    ea4e:	681b      	ldr	r3, [r3, #0]
    ea50:	1ac0      	subs	r0, r0, r3
    ea52:	6008      	str	r0, [r1, #0]
    ea54:	e7d5      	b.n	ea02 <_malloc_trim_r+0x3e>
    ea56:	bf00      	nop
    ea58:	1fff88e0 	.word	0x1fff88e0
    ea5c:	1fffc5ec 	.word	0x1fffc5ec
    ea60:	1fff8ce8 	.word	0x1fff8ce8

0000ea64 <_free_r>:
    ea64:	2900      	cmp	r1, #0
    ea66:	d061      	beq.n	eb2c <_free_r+0xc8>
    ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea6a:	460c      	mov	r4, r1
    ea6c:	4606      	mov	r6, r0
    ea6e:	f7ff f9f9 	bl	de64 <__malloc_lock>
    ea72:	f854 2c04 	ldr.w	r2, [r4, #-4]
    ea76:	4f7b      	ldr	r7, [pc, #492]	; (ec64 <_free_r+0x200>)
    ea78:	f1a4 0508 	sub.w	r5, r4, #8
    ea7c:	f022 0101 	bic.w	r1, r2, #1
    ea80:	eb05 0c01 	add.w	ip, r5, r1
    ea84:	68b8      	ldr	r0, [r7, #8]
    ea86:	f8dc 3004 	ldr.w	r3, [ip, #4]
    ea8a:	4560      	cmp	r0, ip
    ea8c:	f023 0303 	bic.w	r3, r3, #3
    ea90:	f000 808b 	beq.w	ebaa <_free_r+0x146>
    ea94:	07d2      	lsls	r2, r2, #31
    ea96:	f8cc 3004 	str.w	r3, [ip, #4]
    ea9a:	d432      	bmi.n	eb02 <_free_r+0x9e>
    ea9c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    eaa0:	1aad      	subs	r5, r5, r2
    eaa2:	4411      	add	r1, r2
    eaa4:	68aa      	ldr	r2, [r5, #8]
    eaa6:	f107 0008 	add.w	r0, r7, #8
    eaaa:	4282      	cmp	r2, r0
    eaac:	d06a      	beq.n	eb84 <_free_r+0x120>
    eaae:	eb0c 0403 	add.w	r4, ip, r3
    eab2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    eab6:	68ec      	ldr	r4, [r5, #12]
    eab8:	60d4      	str	r4, [r2, #12]
    eaba:	f01e 0f01 	tst.w	lr, #1
    eabe:	60a2      	str	r2, [r4, #8]
    eac0:	f000 8097 	beq.w	ebf2 <_free_r+0x18e>
    eac4:	f041 0301 	orr.w	r3, r1, #1
    eac8:	606b      	str	r3, [r5, #4]
    eaca:	f8cc 1000 	str.w	r1, [ip]
    eace:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    ead2:	d235      	bcs.n	eb40 <_free_r+0xdc>
    ead4:	6878      	ldr	r0, [r7, #4]
    ead6:	08cb      	lsrs	r3, r1, #3
    ead8:	2201      	movs	r2, #1
    eada:	0949      	lsrs	r1, r1, #5
    eadc:	3301      	adds	r3, #1
    eade:	408a      	lsls	r2, r1
    eae0:	4302      	orrs	r2, r0
    eae2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    eae6:	607a      	str	r2, [r7, #4]
    eae8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    eaec:	3a08      	subs	r2, #8
    eaee:	e9c5 1202 	strd	r1, r2, [r5, #8]
    eaf2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    eaf6:	60cd      	str	r5, [r1, #12]
    eaf8:	4630      	mov	r0, r6
    eafa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    eafe:	f7ff b9b7 	b.w	de70 <__malloc_unlock>
    eb02:	eb0c 0203 	add.w	r2, ip, r3
    eb06:	6852      	ldr	r2, [r2, #4]
    eb08:	07d0      	lsls	r0, r2, #31
    eb0a:	d410      	bmi.n	eb2e <_free_r+0xca>
    eb0c:	4419      	add	r1, r3
    eb0e:	f107 0008 	add.w	r0, r7, #8
    eb12:	f8dc 3008 	ldr.w	r3, [ip, #8]
    eb16:	4283      	cmp	r3, r0
    eb18:	d073      	beq.n	ec02 <_free_r+0x19e>
    eb1a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    eb1e:	60da      	str	r2, [r3, #12]
    eb20:	6093      	str	r3, [r2, #8]
    eb22:	f041 0301 	orr.w	r3, r1, #1
    eb26:	606b      	str	r3, [r5, #4]
    eb28:	5069      	str	r1, [r5, r1]
    eb2a:	e7d0      	b.n	eace <_free_r+0x6a>
    eb2c:	4770      	bx	lr
    eb2e:	f041 0301 	orr.w	r3, r1, #1
    eb32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    eb36:	f844 3c04 	str.w	r3, [r4, #-4]
    eb3a:	f8cc 1000 	str.w	r1, [ip]
    eb3e:	d3c9      	bcc.n	ead4 <_free_r+0x70>
    eb40:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    eb44:	ea4f 2351 	mov.w	r3, r1, lsr #9
    eb48:	d248      	bcs.n	ebdc <_free_r+0x178>
    eb4a:	098b      	lsrs	r3, r1, #6
    eb4c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    eb50:	f103 0238 	add.w	r2, r3, #56	; 0x38
    eb54:	00c3      	lsls	r3, r0, #3
    eb56:	18f8      	adds	r0, r7, r3
    eb58:	58fb      	ldr	r3, [r7, r3]
    eb5a:	3808      	subs	r0, #8
    eb5c:	4298      	cmp	r0, r3
    eb5e:	d059      	beq.n	ec14 <_free_r+0x1b0>
    eb60:	685a      	ldr	r2, [r3, #4]
    eb62:	f022 0203 	bic.w	r2, r2, #3
    eb66:	428a      	cmp	r2, r1
    eb68:	d902      	bls.n	eb70 <_free_r+0x10c>
    eb6a:	689b      	ldr	r3, [r3, #8]
    eb6c:	4298      	cmp	r0, r3
    eb6e:	d1f7      	bne.n	eb60 <_free_r+0xfc>
    eb70:	68d8      	ldr	r0, [r3, #12]
    eb72:	e9c5 3002 	strd	r3, r0, [r5, #8]
    eb76:	6085      	str	r5, [r0, #8]
    eb78:	60dd      	str	r5, [r3, #12]
    eb7a:	4630      	mov	r0, r6
    eb7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    eb80:	f7ff b976 	b.w	de70 <__malloc_unlock>
    eb84:	eb0c 0203 	add.w	r2, ip, r3
    eb88:	6852      	ldr	r2, [r2, #4]
    eb8a:	07d2      	lsls	r2, r2, #31
    eb8c:	d463      	bmi.n	ec56 <_free_r+0x1f2>
    eb8e:	440b      	add	r3, r1
    eb90:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    eb94:	60ca      	str	r2, [r1, #12]
    eb96:	6091      	str	r1, [r2, #8]
    eb98:	f043 0201 	orr.w	r2, r3, #1
    eb9c:	606a      	str	r2, [r5, #4]
    eb9e:	4630      	mov	r0, r6
    eba0:	50eb      	str	r3, [r5, r3]
    eba2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    eba6:	f7ff b963 	b.w	de70 <__malloc_unlock>
    ebaa:	440b      	add	r3, r1
    ebac:	07d1      	lsls	r1, r2, #31
    ebae:	d407      	bmi.n	ebc0 <_free_r+0x15c>
    ebb0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    ebb4:	1aad      	subs	r5, r5, r2
    ebb6:	4413      	add	r3, r2
    ebb8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    ebbc:	60ca      	str	r2, [r1, #12]
    ebbe:	6091      	str	r1, [r2, #8]
    ebc0:	f043 0201 	orr.w	r2, r3, #1
    ebc4:	606a      	str	r2, [r5, #4]
    ebc6:	4a28      	ldr	r2, [pc, #160]	; (ec68 <_free_r+0x204>)
    ebc8:	60bd      	str	r5, [r7, #8]
    ebca:	6812      	ldr	r2, [r2, #0]
    ebcc:	429a      	cmp	r2, r3
    ebce:	d893      	bhi.n	eaf8 <_free_r+0x94>
    ebd0:	4b26      	ldr	r3, [pc, #152]	; (ec6c <_free_r+0x208>)
    ebd2:	4630      	mov	r0, r6
    ebd4:	6819      	ldr	r1, [r3, #0]
    ebd6:	f7ff fef5 	bl	e9c4 <_malloc_trim_r>
    ebda:	e78d      	b.n	eaf8 <_free_r+0x94>
    ebdc:	2b14      	cmp	r3, #20
    ebde:	d90a      	bls.n	ebf6 <_free_r+0x192>
    ebe0:	2b54      	cmp	r3, #84	; 0x54
    ebe2:	d81f      	bhi.n	ec24 <_free_r+0x1c0>
    ebe4:	0b0b      	lsrs	r3, r1, #12
    ebe6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    ebea:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    ebee:	00c3      	lsls	r3, r0, #3
    ebf0:	e7b1      	b.n	eb56 <_free_r+0xf2>
    ebf2:	4419      	add	r1, r3
    ebf4:	e78d      	b.n	eb12 <_free_r+0xae>
    ebf6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    ebfa:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    ebfe:	00c3      	lsls	r3, r0, #3
    ec00:	e7a9      	b.n	eb56 <_free_r+0xf2>
    ec02:	f041 0301 	orr.w	r3, r1, #1
    ec06:	e9c7 5504 	strd	r5, r5, [r7, #16]
    ec0a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    ec0e:	606b      	str	r3, [r5, #4]
    ec10:	5069      	str	r1, [r5, r1]
    ec12:	e771      	b.n	eaf8 <_free_r+0x94>
    ec14:	6879      	ldr	r1, [r7, #4]
    ec16:	1092      	asrs	r2, r2, #2
    ec18:	2401      	movs	r4, #1
    ec1a:	fa04 f202 	lsl.w	r2, r4, r2
    ec1e:	430a      	orrs	r2, r1
    ec20:	607a      	str	r2, [r7, #4]
    ec22:	e7a6      	b.n	eb72 <_free_r+0x10e>
    ec24:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ec28:	d806      	bhi.n	ec38 <_free_r+0x1d4>
    ec2a:	0bcb      	lsrs	r3, r1, #15
    ec2c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    ec30:	f103 0277 	add.w	r2, r3, #119	; 0x77
    ec34:	00c3      	lsls	r3, r0, #3
    ec36:	e78e      	b.n	eb56 <_free_r+0xf2>
    ec38:	f240 5254 	movw	r2, #1364	; 0x554
    ec3c:	4293      	cmp	r3, r2
    ec3e:	d806      	bhi.n	ec4e <_free_r+0x1ea>
    ec40:	0c8b      	lsrs	r3, r1, #18
    ec42:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    ec46:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    ec4a:	00c3      	lsls	r3, r0, #3
    ec4c:	e783      	b.n	eb56 <_free_r+0xf2>
    ec4e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    ec52:	227e      	movs	r2, #126	; 0x7e
    ec54:	e77f      	b.n	eb56 <_free_r+0xf2>
    ec56:	f041 0301 	orr.w	r3, r1, #1
    ec5a:	606b      	str	r3, [r5, #4]
    ec5c:	f8cc 1000 	str.w	r1, [ip]
    ec60:	e74a      	b.n	eaf8 <_free_r+0x94>
    ec62:	bf00      	nop
    ec64:	1fff88e0 	.word	0x1fff88e0
    ec68:	1fff8cec 	.word	0x1fff8cec
    ec6c:	1fffc61c 	.word	0x1fffc61c

0000ec70 <__ascii_mbtowc>:
    ec70:	b082      	sub	sp, #8
    ec72:	b149      	cbz	r1, ec88 <__ascii_mbtowc+0x18>
    ec74:	b15a      	cbz	r2, ec8e <__ascii_mbtowc+0x1e>
    ec76:	b16b      	cbz	r3, ec94 <__ascii_mbtowc+0x24>
    ec78:	7813      	ldrb	r3, [r2, #0]
    ec7a:	600b      	str	r3, [r1, #0]
    ec7c:	7812      	ldrb	r2, [r2, #0]
    ec7e:	1e10      	subs	r0, r2, #0
    ec80:	bf18      	it	ne
    ec82:	2001      	movne	r0, #1
    ec84:	b002      	add	sp, #8
    ec86:	4770      	bx	lr
    ec88:	a901      	add	r1, sp, #4
    ec8a:	2a00      	cmp	r2, #0
    ec8c:	d1f3      	bne.n	ec76 <__ascii_mbtowc+0x6>
    ec8e:	4610      	mov	r0, r2
    ec90:	b002      	add	sp, #8
    ec92:	4770      	bx	lr
    ec94:	f06f 0001 	mvn.w	r0, #1
    ec98:	e7f4      	b.n	ec84 <__ascii_mbtowc+0x14>
    ec9a:	bf00      	nop

0000ec9c <_Balloc>:
    ec9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ec9e:	b570      	push	{r4, r5, r6, lr}
    eca0:	4605      	mov	r5, r0
    eca2:	460c      	mov	r4, r1
    eca4:	b14b      	cbz	r3, ecba <_Balloc+0x1e>
    eca6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    ecaa:	b180      	cbz	r0, ecce <_Balloc+0x32>
    ecac:	6802      	ldr	r2, [r0, #0]
    ecae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    ecb2:	2300      	movs	r3, #0
    ecb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    ecb8:	bd70      	pop	{r4, r5, r6, pc}
    ecba:	2221      	movs	r2, #33	; 0x21
    ecbc:	2104      	movs	r1, #4
    ecbe:	f002 fb5f 	bl	11380 <_calloc_r>
    ecc2:	4603      	mov	r3, r0
    ecc4:	6468      	str	r0, [r5, #68]	; 0x44
    ecc6:	2800      	cmp	r0, #0
    ecc8:	d1ed      	bne.n	eca6 <_Balloc+0xa>
    ecca:	2000      	movs	r0, #0
    eccc:	bd70      	pop	{r4, r5, r6, pc}
    ecce:	2101      	movs	r1, #1
    ecd0:	fa01 f604 	lsl.w	r6, r1, r4
    ecd4:	1d72      	adds	r2, r6, #5
    ecd6:	0092      	lsls	r2, r2, #2
    ecd8:	4628      	mov	r0, r5
    ecda:	f002 fb51 	bl	11380 <_calloc_r>
    ecde:	2800      	cmp	r0, #0
    ece0:	d0f3      	beq.n	ecca <_Balloc+0x2e>
    ece2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    ece6:	e7e4      	b.n	ecb2 <_Balloc+0x16>

0000ece8 <_Bfree>:
    ece8:	b131      	cbz	r1, ecf8 <_Bfree+0x10>
    ecea:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ecec:	684a      	ldr	r2, [r1, #4]
    ecee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ecf2:	6008      	str	r0, [r1, #0]
    ecf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ecf8:	4770      	bx	lr
    ecfa:	bf00      	nop

0000ecfc <__multadd>:
    ecfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed00:	690d      	ldr	r5, [r1, #16]
    ed02:	4607      	mov	r7, r0
    ed04:	460e      	mov	r6, r1
    ed06:	461c      	mov	r4, r3
    ed08:	f101 0e14 	add.w	lr, r1, #20
    ed0c:	2000      	movs	r0, #0
    ed0e:	f8de 1000 	ldr.w	r1, [lr]
    ed12:	b28b      	uxth	r3, r1
    ed14:	fb02 4303 	mla	r3, r2, r3, r4
    ed18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ed1c:	0c09      	lsrs	r1, r1, #16
    ed1e:	fb02 cc01 	mla	ip, r2, r1, ip
    ed22:	3001      	adds	r0, #1
    ed24:	b29b      	uxth	r3, r3
    ed26:	eb03 430c 	add.w	r3, r3, ip, lsl #16
    ed2a:	4285      	cmp	r5, r0
    ed2c:	f84e 3b04 	str.w	r3, [lr], #4
    ed30:	ea4f 441c 	mov.w	r4, ip, lsr #16
    ed34:	dceb      	bgt.n	ed0e <__multadd+0x12>
    ed36:	b13c      	cbz	r4, ed48 <__multadd+0x4c>
    ed38:	68b3      	ldr	r3, [r6, #8]
    ed3a:	42ab      	cmp	r3, r5
    ed3c:	dd07      	ble.n	ed4e <__multadd+0x52>
    ed3e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    ed42:	3501      	adds	r5, #1
    ed44:	615c      	str	r4, [r3, #20]
    ed46:	6135      	str	r5, [r6, #16]
    ed48:	4630      	mov	r0, r6
    ed4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed4e:	6871      	ldr	r1, [r6, #4]
    ed50:	4638      	mov	r0, r7
    ed52:	3101      	adds	r1, #1
    ed54:	f7ff ffa2 	bl	ec9c <_Balloc>
    ed58:	4680      	mov	r8, r0
    ed5a:	b1a8      	cbz	r0, ed88 <__multadd+0x8c>
    ed5c:	6932      	ldr	r2, [r6, #16]
    ed5e:	3202      	adds	r2, #2
    ed60:	f106 010c 	add.w	r1, r6, #12
    ed64:	0092      	lsls	r2, r2, #2
    ed66:	300c      	adds	r0, #12
    ed68:	f7fb fae4 	bl	a334 <memcpy>
    ed6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ed6e:	6872      	ldr	r2, [r6, #4]
    ed70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ed74:	6031      	str	r1, [r6, #0]
    ed76:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    ed7a:	4646      	mov	r6, r8
    ed7c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    ed80:	3501      	adds	r5, #1
    ed82:	615c      	str	r4, [r3, #20]
    ed84:	6135      	str	r5, [r6, #16]
    ed86:	e7df      	b.n	ed48 <__multadd+0x4c>
    ed88:	4b02      	ldr	r3, [pc, #8]	; (ed94 <__multadd+0x98>)
    ed8a:	4803      	ldr	r0, [pc, #12]	; (ed98 <__multadd+0x9c>)
    ed8c:	4642      	mov	r2, r8
    ed8e:	21ba      	movs	r1, #186	; 0xba
    ed90:	f002 fad6 	bl	11340 <__assert_func>
    ed94:	00015e30 	.word	0x00015e30
    ed98:	00015e44 	.word	0x00015e44

0000ed9c <__hi0bits>:
    ed9c:	0c02      	lsrs	r2, r0, #16
    ed9e:	0412      	lsls	r2, r2, #16
    eda0:	4603      	mov	r3, r0
    eda2:	b9ca      	cbnz	r2, edd8 <__hi0bits+0x3c>
    eda4:	0403      	lsls	r3, r0, #16
    eda6:	2010      	movs	r0, #16
    eda8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    edac:	bf04      	itt	eq
    edae:	021b      	lsleq	r3, r3, #8
    edb0:	3008      	addeq	r0, #8
    edb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    edb6:	bf04      	itt	eq
    edb8:	011b      	lsleq	r3, r3, #4
    edba:	3004      	addeq	r0, #4
    edbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    edc0:	bf04      	itt	eq
    edc2:	009b      	lsleq	r3, r3, #2
    edc4:	3002      	addeq	r0, #2
    edc6:	2b00      	cmp	r3, #0
    edc8:	db05      	blt.n	edd6 <__hi0bits+0x3a>
    edca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    edce:	f100 0001 	add.w	r0, r0, #1
    edd2:	bf08      	it	eq
    edd4:	2020      	moveq	r0, #32
    edd6:	4770      	bx	lr
    edd8:	2000      	movs	r0, #0
    edda:	e7e5      	b.n	eda8 <__hi0bits+0xc>

0000eddc <__lo0bits>:
    eddc:	6803      	ldr	r3, [r0, #0]
    edde:	f013 0207 	ands.w	r2, r3, #7
    ede2:	4601      	mov	r1, r0
    ede4:	d007      	beq.n	edf6 <__lo0bits+0x1a>
    ede6:	07da      	lsls	r2, r3, #31
    ede8:	d41f      	bmi.n	ee2a <__lo0bits+0x4e>
    edea:	0798      	lsls	r0, r3, #30
    edec:	d521      	bpl.n	ee32 <__lo0bits+0x56>
    edee:	085b      	lsrs	r3, r3, #1
    edf0:	600b      	str	r3, [r1, #0]
    edf2:	2001      	movs	r0, #1
    edf4:	4770      	bx	lr
    edf6:	b298      	uxth	r0, r3
    edf8:	b1a0      	cbz	r0, ee24 <__lo0bits+0x48>
    edfa:	4610      	mov	r0, r2
    edfc:	b2da      	uxtb	r2, r3
    edfe:	b90a      	cbnz	r2, ee04 <__lo0bits+0x28>
    ee00:	3008      	adds	r0, #8
    ee02:	0a1b      	lsrs	r3, r3, #8
    ee04:	071a      	lsls	r2, r3, #28
    ee06:	bf04      	itt	eq
    ee08:	091b      	lsreq	r3, r3, #4
    ee0a:	3004      	addeq	r0, #4
    ee0c:	079a      	lsls	r2, r3, #30
    ee0e:	bf04      	itt	eq
    ee10:	089b      	lsreq	r3, r3, #2
    ee12:	3002      	addeq	r0, #2
    ee14:	07da      	lsls	r2, r3, #31
    ee16:	d403      	bmi.n	ee20 <__lo0bits+0x44>
    ee18:	085b      	lsrs	r3, r3, #1
    ee1a:	f100 0001 	add.w	r0, r0, #1
    ee1e:	d006      	beq.n	ee2e <__lo0bits+0x52>
    ee20:	600b      	str	r3, [r1, #0]
    ee22:	4770      	bx	lr
    ee24:	0c1b      	lsrs	r3, r3, #16
    ee26:	2010      	movs	r0, #16
    ee28:	e7e8      	b.n	edfc <__lo0bits+0x20>
    ee2a:	2000      	movs	r0, #0
    ee2c:	4770      	bx	lr
    ee2e:	2020      	movs	r0, #32
    ee30:	4770      	bx	lr
    ee32:	089b      	lsrs	r3, r3, #2
    ee34:	600b      	str	r3, [r1, #0]
    ee36:	2002      	movs	r0, #2
    ee38:	4770      	bx	lr
    ee3a:	bf00      	nop

0000ee3c <__i2b>:
    ee3c:	b538      	push	{r3, r4, r5, lr}
    ee3e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ee40:	4604      	mov	r4, r0
    ee42:	460d      	mov	r5, r1
    ee44:	b14b      	cbz	r3, ee5a <__i2b+0x1e>
    ee46:	6858      	ldr	r0, [r3, #4]
    ee48:	b1b0      	cbz	r0, ee78 <__i2b+0x3c>
    ee4a:	6802      	ldr	r2, [r0, #0]
    ee4c:	605a      	str	r2, [r3, #4]
    ee4e:	2200      	movs	r2, #0
    ee50:	2301      	movs	r3, #1
    ee52:	e9c0 3504 	strd	r3, r5, [r0, #16]
    ee56:	60c2      	str	r2, [r0, #12]
    ee58:	bd38      	pop	{r3, r4, r5, pc}
    ee5a:	2221      	movs	r2, #33	; 0x21
    ee5c:	2104      	movs	r1, #4
    ee5e:	f002 fa8f 	bl	11380 <_calloc_r>
    ee62:	4603      	mov	r3, r0
    ee64:	6460      	str	r0, [r4, #68]	; 0x44
    ee66:	2800      	cmp	r0, #0
    ee68:	d1ed      	bne.n	ee46 <__i2b+0xa>
    ee6a:	4b09      	ldr	r3, [pc, #36]	; (ee90 <__i2b+0x54>)
    ee6c:	4809      	ldr	r0, [pc, #36]	; (ee94 <__i2b+0x58>)
    ee6e:	2200      	movs	r2, #0
    ee70:	f240 1145 	movw	r1, #325	; 0x145
    ee74:	f002 fa64 	bl	11340 <__assert_func>
    ee78:	221c      	movs	r2, #28
    ee7a:	2101      	movs	r1, #1
    ee7c:	4620      	mov	r0, r4
    ee7e:	f002 fa7f 	bl	11380 <_calloc_r>
    ee82:	2800      	cmp	r0, #0
    ee84:	d0f1      	beq.n	ee6a <__i2b+0x2e>
    ee86:	2201      	movs	r2, #1
    ee88:	2302      	movs	r3, #2
    ee8a:	e9c0 2301 	strd	r2, r3, [r0, #4]
    ee8e:	e7de      	b.n	ee4e <__i2b+0x12>
    ee90:	00015e30 	.word	0x00015e30
    ee94:	00015e44 	.word	0x00015e44

0000ee98 <__multiply>:
    ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee9c:	690e      	ldr	r6, [r1, #16]
    ee9e:	6915      	ldr	r5, [r2, #16]
    eea0:	42ae      	cmp	r6, r5
    eea2:	b085      	sub	sp, #20
    eea4:	4688      	mov	r8, r1
    eea6:	4614      	mov	r4, r2
    eea8:	db05      	blt.n	eeb6 <__multiply+0x1e>
    eeaa:	462a      	mov	r2, r5
    eeac:	4623      	mov	r3, r4
    eeae:	4635      	mov	r5, r6
    eeb0:	460c      	mov	r4, r1
    eeb2:	4616      	mov	r6, r2
    eeb4:	4698      	mov	r8, r3
    eeb6:	68a3      	ldr	r3, [r4, #8]
    eeb8:	6861      	ldr	r1, [r4, #4]
    eeba:	19af      	adds	r7, r5, r6
    eebc:	42bb      	cmp	r3, r7
    eebe:	bfb8      	it	lt
    eec0:	3101      	addlt	r1, #1
    eec2:	f7ff feeb 	bl	ec9c <_Balloc>
    eec6:	9001      	str	r0, [sp, #4]
    eec8:	2800      	cmp	r0, #0
    eeca:	f000 8087 	beq.w	efdc <__multiply+0x144>
    eece:	9b01      	ldr	r3, [sp, #4]
    eed0:	f103 0914 	add.w	r9, r3, #20
    eed4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    eed8:	45d1      	cmp	r9, sl
    eeda:	d205      	bcs.n	eee8 <__multiply+0x50>
    eedc:	464b      	mov	r3, r9
    eede:	2200      	movs	r2, #0
    eee0:	f843 2b04 	str.w	r2, [r3], #4
    eee4:	459a      	cmp	sl, r3
    eee6:	d8fb      	bhi.n	eee0 <__multiply+0x48>
    eee8:	f108 0814 	add.w	r8, r8, #20
    eeec:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    eef0:	f104 0314 	add.w	r3, r4, #20
    eef4:	45d8      	cmp	r8, fp
    eef6:	461a      	mov	r2, r3
    eef8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    eefc:	d25f      	bcs.n	efbe <__multiply+0x126>
    eefe:	1b2b      	subs	r3, r5, r4
    ef00:	3b15      	subs	r3, #21
    ef02:	f023 0303 	bic.w	r3, r3, #3
    ef06:	3304      	adds	r3, #4
    ef08:	3415      	adds	r4, #21
    ef0a:	42a5      	cmp	r5, r4
    ef0c:	bf38      	it	cc
    ef0e:	2304      	movcc	r3, #4
    ef10:	e9cd a702 	strd	sl, r7, [sp, #8]
    ef14:	46ac      	mov	ip, r5
    ef16:	461f      	mov	r7, r3
    ef18:	4692      	mov	sl, r2
    ef1a:	e005      	b.n	ef28 <__multiply+0x90>
    ef1c:	0c09      	lsrs	r1, r1, #16
    ef1e:	d129      	bne.n	ef74 <__multiply+0xdc>
    ef20:	45c3      	cmp	fp, r8
    ef22:	f109 0904 	add.w	r9, r9, #4
    ef26:	d948      	bls.n	efba <__multiply+0x122>
    ef28:	f858 1b04 	ldr.w	r1, [r8], #4
    ef2c:	b28d      	uxth	r5, r1
    ef2e:	2d00      	cmp	r5, #0
    ef30:	d0f4      	beq.n	ef1c <__multiply+0x84>
    ef32:	4656      	mov	r6, sl
    ef34:	464c      	mov	r4, r9
    ef36:	2300      	movs	r3, #0
    ef38:	f856 1b04 	ldr.w	r1, [r6], #4
    ef3c:	6822      	ldr	r2, [r4, #0]
    ef3e:	fa1f fe81 	uxth.w	lr, r1
    ef42:	b290      	uxth	r0, r2
    ef44:	0c09      	lsrs	r1, r1, #16
    ef46:	fb05 000e 	mla	r0, r5, lr, r0
    ef4a:	0c12      	lsrs	r2, r2, #16
    ef4c:	4403      	add	r3, r0
    ef4e:	fb05 2201 	mla	r2, r5, r1, r2
    ef52:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    ef56:	b29b      	uxth	r3, r3
    ef58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ef5c:	45b4      	cmp	ip, r6
    ef5e:	f844 3b04 	str.w	r3, [r4], #4
    ef62:	ea4f 4312 	mov.w	r3, r2, lsr #16
    ef66:	d8e7      	bhi.n	ef38 <__multiply+0xa0>
    ef68:	f849 3007 	str.w	r3, [r9, r7]
    ef6c:	f858 1c04 	ldr.w	r1, [r8, #-4]
    ef70:	0c09      	lsrs	r1, r1, #16
    ef72:	d0d5      	beq.n	ef20 <__multiply+0x88>
    ef74:	f8d9 3000 	ldr.w	r3, [r9]
    ef78:	4650      	mov	r0, sl
    ef7a:	461a      	mov	r2, r3
    ef7c:	464c      	mov	r4, r9
    ef7e:	2600      	movs	r6, #0
    ef80:	8805      	ldrh	r5, [r0, #0]
    ef82:	0c12      	lsrs	r2, r2, #16
    ef84:	fb01 2205 	mla	r2, r1, r5, r2
    ef88:	4416      	add	r6, r2
    ef8a:	b29b      	uxth	r3, r3
    ef8c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    ef90:	f844 3b04 	str.w	r3, [r4], #4
    ef94:	f850 5b04 	ldr.w	r5, [r0], #4
    ef98:	6822      	ldr	r2, [r4, #0]
    ef9a:	0c2d      	lsrs	r5, r5, #16
    ef9c:	b293      	uxth	r3, r2
    ef9e:	fb01 3305 	mla	r3, r1, r5, r3
    efa2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    efa6:	4584      	cmp	ip, r0
    efa8:	ea4f 4613 	mov.w	r6, r3, lsr #16
    efac:	d8e8      	bhi.n	ef80 <__multiply+0xe8>
    efae:	45c3      	cmp	fp, r8
    efb0:	f849 3007 	str.w	r3, [r9, r7]
    efb4:	f109 0904 	add.w	r9, r9, #4
    efb8:	d8b6      	bhi.n	ef28 <__multiply+0x90>
    efba:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    efbe:	2f00      	cmp	r7, #0
    efc0:	dc02      	bgt.n	efc8 <__multiply+0x130>
    efc2:	e005      	b.n	efd0 <__multiply+0x138>
    efc4:	3f01      	subs	r7, #1
    efc6:	d003      	beq.n	efd0 <__multiply+0x138>
    efc8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    efcc:	2b00      	cmp	r3, #0
    efce:	d0f9      	beq.n	efc4 <__multiply+0x12c>
    efd0:	9b01      	ldr	r3, [sp, #4]
    efd2:	4618      	mov	r0, r3
    efd4:	611f      	str	r7, [r3, #16]
    efd6:	b005      	add	sp, #20
    efd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efdc:	4b03      	ldr	r3, [pc, #12]	; (efec <__multiply+0x154>)
    efde:	4804      	ldr	r0, [pc, #16]	; (eff0 <__multiply+0x158>)
    efe0:	9a01      	ldr	r2, [sp, #4]
    efe2:	f44f 71b1 	mov.w	r1, #354	; 0x162
    efe6:	f002 f9ab 	bl	11340 <__assert_func>
    efea:	bf00      	nop
    efec:	00015e30 	.word	0x00015e30
    eff0:	00015e44 	.word	0x00015e44

0000eff4 <__pow5mult>:
    eff4:	f012 0303 	ands.w	r3, r2, #3
    eff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    effc:	4614      	mov	r4, r2
    effe:	4606      	mov	r6, r0
    f000:	d132      	bne.n	f068 <__pow5mult+0x74>
    f002:	460d      	mov	r5, r1
    f004:	10a4      	asrs	r4, r4, #2
    f006:	d020      	beq.n	f04a <__pow5mult+0x56>
    f008:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    f00c:	f1b8 0f00 	cmp.w	r8, #0
    f010:	d033      	beq.n	f07a <__pow5mult+0x86>
    f012:	07e3      	lsls	r3, r4, #31
    f014:	f04f 0700 	mov.w	r7, #0
    f018:	d407      	bmi.n	f02a <__pow5mult+0x36>
    f01a:	1064      	asrs	r4, r4, #1
    f01c:	d015      	beq.n	f04a <__pow5mult+0x56>
    f01e:	f8d8 0000 	ldr.w	r0, [r8]
    f022:	b1a8      	cbz	r0, f050 <__pow5mult+0x5c>
    f024:	4680      	mov	r8, r0
    f026:	07e3      	lsls	r3, r4, #31
    f028:	d5f7      	bpl.n	f01a <__pow5mult+0x26>
    f02a:	4642      	mov	r2, r8
    f02c:	4629      	mov	r1, r5
    f02e:	4630      	mov	r0, r6
    f030:	f7ff ff32 	bl	ee98 <__multiply>
    f034:	b1b5      	cbz	r5, f064 <__pow5mult+0x70>
    f036:	6869      	ldr	r1, [r5, #4]
    f038:	6c73      	ldr	r3, [r6, #68]	; 0x44
    f03a:	1064      	asrs	r4, r4, #1
    f03c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    f040:	602a      	str	r2, [r5, #0]
    f042:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    f046:	4605      	mov	r5, r0
    f048:	d1e9      	bne.n	f01e <__pow5mult+0x2a>
    f04a:	4628      	mov	r0, r5
    f04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f050:	4642      	mov	r2, r8
    f052:	4641      	mov	r1, r8
    f054:	4630      	mov	r0, r6
    f056:	f7ff ff1f 	bl	ee98 <__multiply>
    f05a:	f8c8 0000 	str.w	r0, [r8]
    f05e:	6007      	str	r7, [r0, #0]
    f060:	4680      	mov	r8, r0
    f062:	e7e0      	b.n	f026 <__pow5mult+0x32>
    f064:	4605      	mov	r5, r0
    f066:	e7d8      	b.n	f01a <__pow5mult+0x26>
    f068:	3b01      	subs	r3, #1
    f06a:	4a0f      	ldr	r2, [pc, #60]	; (f0a8 <__pow5mult+0xb4>)
    f06c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f070:	2300      	movs	r3, #0
    f072:	f7ff fe43 	bl	ecfc <__multadd>
    f076:	4605      	mov	r5, r0
    f078:	e7c4      	b.n	f004 <__pow5mult+0x10>
    f07a:	2101      	movs	r1, #1
    f07c:	4630      	mov	r0, r6
    f07e:	f7ff fe0d 	bl	ec9c <_Balloc>
    f082:	4680      	mov	r8, r0
    f084:	b140      	cbz	r0, f098 <__pow5mult+0xa4>
    f086:	2301      	movs	r3, #1
    f088:	f240 2271 	movw	r2, #625	; 0x271
    f08c:	e9c0 3204 	strd	r3, r2, [r0, #16]
    f090:	2300      	movs	r3, #0
    f092:	6430      	str	r0, [r6, #64]	; 0x40
    f094:	6003      	str	r3, [r0, #0]
    f096:	e7bc      	b.n	f012 <__pow5mult+0x1e>
    f098:	4b04      	ldr	r3, [pc, #16]	; (f0ac <__pow5mult+0xb8>)
    f09a:	4805      	ldr	r0, [pc, #20]	; (f0b0 <__pow5mult+0xbc>)
    f09c:	4642      	mov	r2, r8
    f09e:	f240 1145 	movw	r1, #325	; 0x145
    f0a2:	f002 f94d 	bl	11340 <__assert_func>
    f0a6:	bf00      	nop
    f0a8:	00015f90 	.word	0x00015f90
    f0ac:	00015e30 	.word	0x00015e30
    f0b0:	00015e44 	.word	0x00015e44

0000f0b4 <__lshift>:
    f0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f0b8:	460c      	mov	r4, r1
    f0ba:	4690      	mov	r8, r2
    f0bc:	6926      	ldr	r6, [r4, #16]
    f0be:	68a3      	ldr	r3, [r4, #8]
    f0c0:	6849      	ldr	r1, [r1, #4]
    f0c2:	eb06 1662 	add.w	r6, r6, r2, asr #5
    f0c6:	1c75      	adds	r5, r6, #1
    f0c8:	429d      	cmp	r5, r3
    f0ca:	4607      	mov	r7, r0
    f0cc:	ea4f 1962 	mov.w	r9, r2, asr #5
    f0d0:	dd04      	ble.n	f0dc <__lshift+0x28>
    f0d2:	005b      	lsls	r3, r3, #1
    f0d4:	429d      	cmp	r5, r3
    f0d6:	f101 0101 	add.w	r1, r1, #1
    f0da:	dcfa      	bgt.n	f0d2 <__lshift+0x1e>
    f0dc:	4638      	mov	r0, r7
    f0de:	f7ff fddd 	bl	ec9c <_Balloc>
    f0e2:	4684      	mov	ip, r0
    f0e4:	2800      	cmp	r0, #0
    f0e6:	d051      	beq.n	f18c <__lshift+0xd8>
    f0e8:	f1b9 0f00 	cmp.w	r9, #0
    f0ec:	f100 0014 	add.w	r0, r0, #20
    f0f0:	dd0e      	ble.n	f110 <__lshift+0x5c>
    f0f2:	f109 0205 	add.w	r2, r9, #5
    f0f6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    f0fa:	4603      	mov	r3, r0
    f0fc:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    f100:	2100      	movs	r1, #0
    f102:	f843 1b04 	str.w	r1, [r3], #4
    f106:	4293      	cmp	r3, r2
    f108:	d1fb      	bne.n	f102 <__lshift+0x4e>
    f10a:	f1ae 0314 	sub.w	r3, lr, #20
    f10e:	4418      	add	r0, r3
    f110:	6921      	ldr	r1, [r4, #16]
    f112:	f104 0314 	add.w	r3, r4, #20
    f116:	f018 081f 	ands.w	r8, r8, #31
    f11a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    f11e:	d02d      	beq.n	f17c <__lshift+0xc8>
    f120:	f1c8 0920 	rsb	r9, r8, #32
    f124:	4686      	mov	lr, r0
    f126:	f04f 0a00 	mov.w	sl, #0
    f12a:	681a      	ldr	r2, [r3, #0]
    f12c:	fa02 f208 	lsl.w	r2, r2, r8
    f130:	ea42 020a 	orr.w	r2, r2, sl
    f134:	f84e 2b04 	str.w	r2, [lr], #4
    f138:	f853 2b04 	ldr.w	r2, [r3], #4
    f13c:	4299      	cmp	r1, r3
    f13e:	fa22 fa09 	lsr.w	sl, r2, r9
    f142:	d8f2      	bhi.n	f12a <__lshift+0x76>
    f144:	1b0b      	subs	r3, r1, r4
    f146:	3b15      	subs	r3, #21
    f148:	f023 0303 	bic.w	r3, r3, #3
    f14c:	3304      	adds	r3, #4
    f14e:	f104 0215 	add.w	r2, r4, #21
    f152:	4291      	cmp	r1, r2
    f154:	bf38      	it	cc
    f156:	2304      	movcc	r3, #4
    f158:	f1ba 0f00 	cmp.w	sl, #0
    f15c:	bf18      	it	ne
    f15e:	462e      	movne	r6, r5
    f160:	f840 a003 	str.w	sl, [r0, r3]
    f164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f166:	6862      	ldr	r2, [r4, #4]
    f168:	f8cc 6010 	str.w	r6, [ip, #16]
    f16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    f170:	6021      	str	r1, [r4, #0]
    f172:	4660      	mov	r0, ip
    f174:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    f178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f17c:	3804      	subs	r0, #4
    f17e:	f853 2b04 	ldr.w	r2, [r3], #4
    f182:	f840 2f04 	str.w	r2, [r0, #4]!
    f186:	4299      	cmp	r1, r3
    f188:	d8f9      	bhi.n	f17e <__lshift+0xca>
    f18a:	e7eb      	b.n	f164 <__lshift+0xb0>
    f18c:	4b03      	ldr	r3, [pc, #12]	; (f19c <__lshift+0xe8>)
    f18e:	4804      	ldr	r0, [pc, #16]	; (f1a0 <__lshift+0xec>)
    f190:	4662      	mov	r2, ip
    f192:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    f196:	f002 f8d3 	bl	11340 <__assert_func>
    f19a:	bf00      	nop
    f19c:	00015e30 	.word	0x00015e30
    f1a0:	00015e44 	.word	0x00015e44

0000f1a4 <__mcmp>:
    f1a4:	690b      	ldr	r3, [r1, #16]
    f1a6:	4684      	mov	ip, r0
    f1a8:	6900      	ldr	r0, [r0, #16]
    f1aa:	1ac0      	subs	r0, r0, r3
    f1ac:	d115      	bne.n	f1da <__mcmp+0x36>
    f1ae:	f10c 0c14 	add.w	ip, ip, #20
    f1b2:	3114      	adds	r1, #20
    f1b4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    f1b8:	b410      	push	{r4}
    f1ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f1be:	e001      	b.n	f1c4 <__mcmp+0x20>
    f1c0:	4594      	cmp	ip, r2
    f1c2:	d208      	bcs.n	f1d6 <__mcmp+0x32>
    f1c4:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    f1c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    f1cc:	428c      	cmp	r4, r1
    f1ce:	d0f7      	beq.n	f1c0 <__mcmp+0x1c>
    f1d0:	d204      	bcs.n	f1dc <__mcmp+0x38>
    f1d2:	f04f 30ff 	mov.w	r0, #4294967295
    f1d6:	bc10      	pop	{r4}
    f1d8:	4770      	bx	lr
    f1da:	4770      	bx	lr
    f1dc:	2001      	movs	r0, #1
    f1de:	bc10      	pop	{r4}
    f1e0:	4770      	bx	lr
    f1e2:	bf00      	nop

0000f1e4 <__mdiff>:
    f1e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1e8:	690f      	ldr	r7, [r1, #16]
    f1ea:	6913      	ldr	r3, [r2, #16]
    f1ec:	1aff      	subs	r7, r7, r3
    f1ee:	2f00      	cmp	r7, #0
    f1f0:	460e      	mov	r6, r1
    f1f2:	4690      	mov	r8, r2
    f1f4:	d17f      	bne.n	f2f6 <__mdiff+0x112>
    f1f6:	f101 0514 	add.w	r5, r1, #20
    f1fa:	3214      	adds	r2, #20
    f1fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    f200:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    f204:	e001      	b.n	f20a <__mdiff+0x26>
    f206:	429d      	cmp	r5, r3
    f208:	d278      	bcs.n	f2fc <__mdiff+0x118>
    f20a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    f20e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    f212:	42a1      	cmp	r1, r4
    f214:	d0f7      	beq.n	f206 <__mdiff+0x22>
    f216:	d369      	bcc.n	f2ec <__mdiff+0x108>
    f218:	6871      	ldr	r1, [r6, #4]
    f21a:	f7ff fd3f 	bl	ec9c <_Balloc>
    f21e:	4681      	mov	r9, r0
    f220:	2800      	cmp	r0, #0
    f222:	d077      	beq.n	f314 <__mdiff+0x130>
    f224:	6935      	ldr	r5, [r6, #16]
    f226:	f8d8 2010 	ldr.w	r2, [r8, #16]
    f22a:	60c7      	str	r7, [r0, #12]
    f22c:	f108 0e14 	add.w	lr, r8, #20
    f230:	f106 0014 	add.w	r0, r6, #20
    f234:	f109 0a14 	add.w	sl, r9, #20
    f238:	f106 0110 	add.w	r1, r6, #16
    f23c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    f240:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    f244:	4656      	mov	r6, sl
    f246:	f04f 0c00 	mov.w	ip, #0
    f24a:	f85e 4b04 	ldr.w	r4, [lr], #4
    f24e:	f851 bf04 	ldr.w	fp, [r1, #4]!
    f252:	b2a3      	uxth	r3, r4
    f254:	fa1c fc8b 	uxtah	ip, ip, fp
    f258:	ebac 0303 	sub.w	r3, ip, r3
    f25c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    f260:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    f264:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    f268:	b29b      	uxth	r3, r3
    f26a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    f26e:	4572      	cmp	r2, lr
    f270:	f846 3b04 	str.w	r3, [r6], #4
    f274:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    f278:	d8e7      	bhi.n	f24a <__mdiff+0x66>
    f27a:	eba2 0108 	sub.w	r1, r2, r8
    f27e:	3915      	subs	r1, #21
    f280:	f108 0815 	add.w	r8, r8, #21
    f284:	4542      	cmp	r2, r8
    f286:	f021 0403 	bic.w	r4, r1, #3
    f28a:	f104 0404 	add.w	r4, r4, #4
    f28e:	bf38      	it	cc
    f290:	2404      	movcc	r4, #4
    f292:	4420      	add	r0, r4
    f294:	f021 0203 	bic.w	r2, r1, #3
    f298:	bf38      	it	cc
    f29a:	2200      	movcc	r2, #0
    f29c:	4287      	cmp	r7, r0
    f29e:	4452      	add	r2, sl
    f2a0:	4454      	add	r4, sl
    f2a2:	d918      	bls.n	f2d6 <__mdiff+0xf2>
    f2a4:	4626      	mov	r6, r4
    f2a6:	4601      	mov	r1, r0
    f2a8:	f851 3b04 	ldr.w	r3, [r1], #4
    f2ac:	fa1c fc83 	uxtah	ip, ip, r3
    f2b0:	ea4f 422c 	mov.w	r2, ip, asr #16
    f2b4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    f2b8:	fa1f fc8c 	uxth.w	ip, ip
    f2bc:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    f2c0:	428f      	cmp	r7, r1
    f2c2:	f846 3b04 	str.w	r3, [r6], #4
    f2c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
    f2ca:	d8ed      	bhi.n	f2a8 <__mdiff+0xc4>
    f2cc:	3f01      	subs	r7, #1
    f2ce:	1a3f      	subs	r7, r7, r0
    f2d0:	f027 0703 	bic.w	r7, r7, #3
    f2d4:	19e2      	adds	r2, r4, r7
    f2d6:	b923      	cbnz	r3, f2e2 <__mdiff+0xfe>
    f2d8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    f2dc:	3d01      	subs	r5, #1
    f2de:	2b00      	cmp	r3, #0
    f2e0:	d0fa      	beq.n	f2d8 <__mdiff+0xf4>
    f2e2:	f8c9 5010 	str.w	r5, [r9, #16]
    f2e6:	4648      	mov	r0, r9
    f2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2ec:	4633      	mov	r3, r6
    f2ee:	2701      	movs	r7, #1
    f2f0:	4646      	mov	r6, r8
    f2f2:	4698      	mov	r8, r3
    f2f4:	e790      	b.n	f218 <__mdiff+0x34>
    f2f6:	dbf9      	blt.n	f2ec <__mdiff+0x108>
    f2f8:	2700      	movs	r7, #0
    f2fa:	e78d      	b.n	f218 <__mdiff+0x34>
    f2fc:	2100      	movs	r1, #0
    f2fe:	f7ff fccd 	bl	ec9c <_Balloc>
    f302:	4681      	mov	r9, r0
    f304:	b168      	cbz	r0, f322 <__mdiff+0x13e>
    f306:	2201      	movs	r2, #1
    f308:	2300      	movs	r3, #0
    f30a:	e9c9 2304 	strd	r2, r3, [r9, #16]
    f30e:	4648      	mov	r0, r9
    f310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f314:	4b06      	ldr	r3, [pc, #24]	; (f330 <__mdiff+0x14c>)
    f316:	4807      	ldr	r0, [pc, #28]	; (f334 <__mdiff+0x150>)
    f318:	464a      	mov	r2, r9
    f31a:	f240 2145 	movw	r1, #581	; 0x245
    f31e:	f002 f80f 	bl	11340 <__assert_func>
    f322:	4b03      	ldr	r3, [pc, #12]	; (f330 <__mdiff+0x14c>)
    f324:	4803      	ldr	r0, [pc, #12]	; (f334 <__mdiff+0x150>)
    f326:	464a      	mov	r2, r9
    f328:	f240 2137 	movw	r1, #567	; 0x237
    f32c:	f002 f808 	bl	11340 <__assert_func>
    f330:	00015e30 	.word	0x00015e30
    f334:	00015e44 	.word	0x00015e44

0000f338 <__d2b>:
    f338:	b570      	push	{r4, r5, r6, lr}
    f33a:	2101      	movs	r1, #1
    f33c:	b082      	sub	sp, #8
    f33e:	4616      	mov	r6, r2
    f340:	461d      	mov	r5, r3
    f342:	f7ff fcab 	bl	ec9c <_Balloc>
    f346:	4604      	mov	r4, r0
    f348:	2800      	cmp	r0, #0
    f34a:	d04a      	beq.n	f3e2 <__d2b+0xaa>
    f34c:	462b      	mov	r3, r5
    f34e:	f3c5 550a 	ubfx	r5, r5, #20, #11
    f352:	f3c3 0313 	ubfx	r3, r3, #0, #20
    f356:	b10d      	cbz	r5, f35c <__d2b+0x24>
    f358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f35c:	2e00      	cmp	r6, #0
    f35e:	9301      	str	r3, [sp, #4]
    f360:	d114      	bne.n	f38c <__d2b+0x54>
    f362:	a801      	add	r0, sp, #4
    f364:	f7ff fd3a 	bl	eddc <__lo0bits>
    f368:	9b01      	ldr	r3, [sp, #4]
    f36a:	6163      	str	r3, [r4, #20]
    f36c:	2101      	movs	r1, #1
    f36e:	3020      	adds	r0, #32
    f370:	6121      	str	r1, [r4, #16]
    f372:	b315      	cbz	r5, f3ba <__d2b+0x82>
    f374:	9b06      	ldr	r3, [sp, #24]
    f376:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    f37a:	4405      	add	r5, r0
    f37c:	601d      	str	r5, [r3, #0]
    f37e:	9b07      	ldr	r3, [sp, #28]
    f380:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    f384:	6018      	str	r0, [r3, #0]
    f386:	4620      	mov	r0, r4
    f388:	b002      	add	sp, #8
    f38a:	bd70      	pop	{r4, r5, r6, pc}
    f38c:	4668      	mov	r0, sp
    f38e:	9600      	str	r6, [sp, #0]
    f390:	f7ff fd24 	bl	eddc <__lo0bits>
    f394:	b308      	cbz	r0, f3da <__d2b+0xa2>
    f396:	9b01      	ldr	r3, [sp, #4]
    f398:	9900      	ldr	r1, [sp, #0]
    f39a:	f1c0 0220 	rsb	r2, r0, #32
    f39e:	fa03 f202 	lsl.w	r2, r3, r2
    f3a2:	430a      	orrs	r2, r1
    f3a4:	40c3      	lsrs	r3, r0
    f3a6:	9301      	str	r3, [sp, #4]
    f3a8:	6162      	str	r2, [r4, #20]
    f3aa:	2b00      	cmp	r3, #0
    f3ac:	bf14      	ite	ne
    f3ae:	2102      	movne	r1, #2
    f3b0:	2101      	moveq	r1, #1
    f3b2:	61a3      	str	r3, [r4, #24]
    f3b4:	6121      	str	r1, [r4, #16]
    f3b6:	2d00      	cmp	r5, #0
    f3b8:	d1dc      	bne.n	f374 <__d2b+0x3c>
    f3ba:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    f3be:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
    f3c2:	6910      	ldr	r0, [r2, #16]
    f3c4:	9a06      	ldr	r2, [sp, #24]
    f3c6:	6013      	str	r3, [r2, #0]
    f3c8:	f7ff fce8 	bl	ed9c <__hi0bits>
    f3cc:	9b07      	ldr	r3, [sp, #28]
    f3ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    f3d2:	6018      	str	r0, [r3, #0]
    f3d4:	4620      	mov	r0, r4
    f3d6:	b002      	add	sp, #8
    f3d8:	bd70      	pop	{r4, r5, r6, pc}
    f3da:	e9dd 2300 	ldrd	r2, r3, [sp]
    f3de:	6162      	str	r2, [r4, #20]
    f3e0:	e7e3      	b.n	f3aa <__d2b+0x72>
    f3e2:	4b03      	ldr	r3, [pc, #12]	; (f3f0 <__d2b+0xb8>)
    f3e4:	4803      	ldr	r0, [pc, #12]	; (f3f4 <__d2b+0xbc>)
    f3e6:	4622      	mov	r2, r4
    f3e8:	f240 310f 	movw	r1, #783	; 0x30f
    f3ec:	f001 ffa8 	bl	11340 <__assert_func>
    f3f0:	00015e30 	.word	0x00015e30
    f3f4:	00015e44 	.word	0x00015e44

0000f3f8 <__ascii_wctomb>:
    f3f8:	b149      	cbz	r1, f40e <__ascii_wctomb+0x16>
    f3fa:	2aff      	cmp	r2, #255	; 0xff
    f3fc:	d802      	bhi.n	f404 <__ascii_wctomb+0xc>
    f3fe:	700a      	strb	r2, [r1, #0]
    f400:	2001      	movs	r0, #1
    f402:	4770      	bx	lr
    f404:	238a      	movs	r3, #138	; 0x8a
    f406:	6003      	str	r3, [r0, #0]
    f408:	f04f 30ff 	mov.w	r0, #4294967295
    f40c:	4770      	bx	lr
    f40e:	4608      	mov	r0, r1
    f410:	4770      	bx	lr
    f412:	bf00      	nop

0000f414 <_svfprintf_r>:
    f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f418:	b0d9      	sub	sp, #356	; 0x164
    f41a:	460c      	mov	r4, r1
    f41c:	910c      	str	r1, [sp, #48]	; 0x30
    f41e:	4690      	mov	r8, r2
    f420:	930e      	str	r3, [sp, #56]	; 0x38
    f422:	4682      	mov	sl, r0
    f424:	f001 fee6 	bl	111f4 <_localeconv_r>
    f428:	6803      	ldr	r3, [r0, #0]
    f42a:	9319      	str	r3, [sp, #100]	; 0x64
    f42c:	4618      	mov	r0, r3
    f42e:	f7ff fa07 	bl	e840 <strlen>
    f432:	2208      	movs	r2, #8
    f434:	9017      	str	r0, [sp, #92]	; 0x5c
    f436:	2100      	movs	r1, #0
    f438:	a828      	add	r0, sp, #160	; 0xa0
    f43a:	f7ff f8d7 	bl	e5ec <memset>
    f43e:	89a3      	ldrh	r3, [r4, #12]
    f440:	061f      	lsls	r7, r3, #24
    f442:	d503      	bpl.n	f44c <_svfprintf_r+0x38>
    f444:	6923      	ldr	r3, [r4, #16]
    f446:	2b00      	cmp	r3, #0
    f448:	f000 873f 	beq.w	102ca <_svfprintf_r+0xeb6>
    f44c:	2300      	movs	r3, #0
    f44e:	aa2f      	add	r2, sp, #188	; 0xbc
    f450:	2400      	movs	r4, #0
    f452:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
    f456:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    f45a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    f45e:	9313      	str	r3, [sp, #76]	; 0x4c
    f460:	9318      	str	r3, [sp, #96]	; 0x60
    f462:	9309      	str	r3, [sp, #36]	; 0x24
    f464:	2300      	movs	r3, #0
    f466:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    f46a:	922c      	str	r2, [sp, #176]	; 0xb0
    f46c:	4691      	mov	r9, r2
    f46e:	4644      	mov	r4, r8
    f470:	46a0      	mov	r8, r4
    f472:	4b78      	ldr	r3, [pc, #480]	; (f654 <_svfprintf_r+0x240>)
    f474:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    f478:	f7ff f93c 	bl	e6f4 <__locale_mb_cur_max>
    f47c:	4603      	mov	r3, r0
    f47e:	a828      	add	r0, sp, #160	; 0xa0
    f480:	9000      	str	r0, [sp, #0]
    f482:	4642      	mov	r2, r8
    f484:	a924      	add	r1, sp, #144	; 0x90
    f486:	4650      	mov	r0, sl
    f488:	47a8      	blx	r5
    f48a:	2800      	cmp	r0, #0
    f48c:	f000 80b0 	beq.w	f5f0 <_svfprintf_r+0x1dc>
    f490:	f2c0 80a6 	blt.w	f5e0 <_svfprintf_r+0x1cc>
    f494:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f496:	2a25      	cmp	r2, #37	; 0x25
    f498:	4603      	mov	r3, r0
    f49a:	d001      	beq.n	f4a0 <_svfprintf_r+0x8c>
    f49c:	4498      	add	r8, r3
    f49e:	e7e8      	b.n	f472 <_svfprintf_r+0x5e>
    f4a0:	ebb8 0704 	subs.w	r7, r8, r4
    f4a4:	4606      	mov	r6, r0
    f4a6:	f040 80a7 	bne.w	f5f8 <_svfprintf_r+0x1e4>
    f4aa:	2300      	movs	r3, #0
    f4ac:	f04f 32ff 	mov.w	r2, #4294967295
    f4b0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    f4b4:	469b      	mov	fp, r3
    f4b6:	930b      	str	r3, [sp, #44]	; 0x2c
    f4b8:	f108 0801 	add.w	r8, r8, #1
    f4bc:	f898 3000 	ldrb.w	r3, [r8]
    f4c0:	9208      	str	r2, [sp, #32]
    f4c2:	252b      	movs	r5, #43	; 0x2b
    f4c4:	2620      	movs	r6, #32
    f4c6:	f108 0801 	add.w	r8, r8, #1
    f4ca:	f1a3 0220 	sub.w	r2, r3, #32
    f4ce:	2a5a      	cmp	r2, #90	; 0x5a
    f4d0:	f200 80c2 	bhi.w	f658 <_svfprintf_r+0x244>
    f4d4:	e8df f012 	tbh	[pc, r2, lsl #1]
    f4d8:	00c002e6 	.word	0x00c002e6
    f4dc:	02e100c0 	.word	0x02e100c0
    f4e0:	00c000c0 	.word	0x00c000c0
    f4e4:	006a00c0 	.word	0x006a00c0
    f4e8:	00c000c0 	.word	0x00c000c0
    f4ec:	02840208 	.word	0x02840208
    f4f0:	021300c0 	.word	0x021300c0
    f4f4:	00c002c7 	.word	0x00c002c7
    f4f8:	005b02c2 	.word	0x005b02c2
    f4fc:	005b005b 	.word	0x005b005b
    f500:	005b005b 	.word	0x005b005b
    f504:	005b005b 	.word	0x005b005b
    f508:	005b005b 	.word	0x005b005b
    f50c:	00c000c0 	.word	0x00c000c0
    f510:	00c000c0 	.word	0x00c000c0
    f514:	00c000c0 	.word	0x00c000c0
    f518:	014300c0 	.word	0x014300c0
    f51c:	018900c0 	.word	0x018900c0
    f520:	0143021d 	.word	0x0143021d
    f524:	01430143 	.word	0x01430143
    f528:	00c000c0 	.word	0x00c000c0
    f52c:	00c000c0 	.word	0x00c000c0
    f530:	00c00218 	.word	0x00c00218
    f534:	029600c0 	.word	0x029600c0
    f538:	00c000c0 	.word	0x00c000c0
    f53c:	01b100c0 	.word	0x01b100c0
    f540:	02a900c0 	.word	0x02a900c0
    f544:	00c000c0 	.word	0x00c000c0
    f548:	00c006dd 	.word	0x00c006dd
    f54c:	00c000c0 	.word	0x00c000c0
    f550:	00c000c0 	.word	0x00c000c0
    f554:	00c000c0 	.word	0x00c000c0
    f558:	014300c0 	.word	0x014300c0
    f55c:	018900c0 	.word	0x018900c0
    f560:	014301e2 	.word	0x014301e2
    f564:	01430143 	.word	0x01430143
    f568:	01e20277 	.word	0x01e20277
    f56c:	00c0007f 	.word	0x00c0007f
    f570:	00c00289 	.word	0x00c00289
    f574:	06da025f 	.word	0x06da025f
    f578:	007f0232 	.word	0x007f0232
    f57c:	01b100c0 	.word	0x01b100c0
    f580:	06b4007c 	.word	0x06b4007c
    f584:	00c000c0 	.word	0x00c000c0
    f588:	00c006b8 	.word	0x00c006b8
    f58c:	007c      	.short	0x007c
    f58e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f592:	2100      	movs	r1, #0
    f594:	f818 3b01 	ldrb.w	r3, [r8], #1
    f598:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f59c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f5a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f5a4:	2a09      	cmp	r2, #9
    f5a6:	d9f5      	bls.n	f594 <_svfprintf_r+0x180>
    f5a8:	910b      	str	r1, [sp, #44]	; 0x2c
    f5aa:	e78e      	b.n	f4ca <_svfprintf_r+0xb6>
    f5ac:	4650      	mov	r0, sl
    f5ae:	f001 fe21 	bl	111f4 <_localeconv_r>
    f5b2:	6843      	ldr	r3, [r0, #4]
    f5b4:	931c      	str	r3, [sp, #112]	; 0x70
    f5b6:	4618      	mov	r0, r3
    f5b8:	f7ff f942 	bl	e840 <strlen>
    f5bc:	901d      	str	r0, [sp, #116]	; 0x74
    f5be:	4607      	mov	r7, r0
    f5c0:	4650      	mov	r0, sl
    f5c2:	f001 fe17 	bl	111f4 <_localeconv_r>
    f5c6:	6883      	ldr	r3, [r0, #8]
    f5c8:	931a      	str	r3, [sp, #104]	; 0x68
    f5ca:	2f00      	cmp	r7, #0
    f5cc:	f040 85b1 	bne.w	10132 <_svfprintf_r+0xd1e>
    f5d0:	f898 3000 	ldrb.w	r3, [r8]
    f5d4:	e777      	b.n	f4c6 <_svfprintf_r+0xb2>
    f5d6:	f898 3000 	ldrb.w	r3, [r8]
    f5da:	f04b 0b20 	orr.w	fp, fp, #32
    f5de:	e772      	b.n	f4c6 <_svfprintf_r+0xb2>
    f5e0:	2208      	movs	r2, #8
    f5e2:	2100      	movs	r1, #0
    f5e4:	a828      	add	r0, sp, #160	; 0xa0
    f5e6:	f7ff f801 	bl	e5ec <memset>
    f5ea:	2301      	movs	r3, #1
    f5ec:	4498      	add	r8, r3
    f5ee:	e740      	b.n	f472 <_svfprintf_r+0x5e>
    f5f0:	ebb8 0704 	subs.w	r7, r8, r4
    f5f4:	4606      	mov	r6, r0
    f5f6:	d011      	beq.n	f61c <_svfprintf_r+0x208>
    f5f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    f5fa:	443b      	add	r3, r7
    f5fc:	932e      	str	r3, [sp, #184]	; 0xb8
    f5fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f600:	3301      	adds	r3, #1
    f602:	2b07      	cmp	r3, #7
    f604:	e9c9 4700 	strd	r4, r7, [r9]
    f608:	932d      	str	r3, [sp, #180]	; 0xb4
    f60a:	dc19      	bgt.n	f640 <_svfprintf_r+0x22c>
    f60c:	f109 0908 	add.w	r9, r9, #8
    f610:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f612:	443b      	add	r3, r7
    f614:	9309      	str	r3, [sp, #36]	; 0x24
    f616:	2e00      	cmp	r6, #0
    f618:	f47f af47 	bne.w	f4aa <_svfprintf_r+0x96>
    f61c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    f61e:	2b00      	cmp	r3, #0
    f620:	f041 8201 	bne.w	10a26 <_svfprintf_r+0x1612>
    f624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f626:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    f62a:	f013 0f40 	tst.w	r3, #64	; 0x40
    f62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f630:	bf18      	it	ne
    f632:	f04f 33ff 	movne.w	r3, #4294967295
    f636:	9309      	str	r3, [sp, #36]	; 0x24
    f638:	9809      	ldr	r0, [sp, #36]	; 0x24
    f63a:	b059      	add	sp, #356	; 0x164
    f63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f640:	990c      	ldr	r1, [sp, #48]	; 0x30
    f642:	aa2c      	add	r2, sp, #176	; 0xb0
    f644:	4650      	mov	r0, sl
    f646:	f002 ff0f 	bl	12468 <__ssprint_r>
    f64a:	2800      	cmp	r0, #0
    f64c:	d1ea      	bne.n	f624 <_svfprintf_r+0x210>
    f64e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f652:	e7dd      	b.n	f610 <_svfprintf_r+0x1fc>
    f654:	1fff8cfc 	.word	0x1fff8cfc
    f658:	9310      	str	r3, [sp, #64]	; 0x40
    f65a:	2b00      	cmp	r3, #0
    f65c:	d0de      	beq.n	f61c <_svfprintf_r+0x208>
    f65e:	2200      	movs	r2, #0
    f660:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    f664:	2301      	movs	r3, #1
    f666:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f66a:	9307      	str	r3, [sp, #28]
    f66c:	920d      	str	r2, [sp, #52]	; 0x34
    f66e:	930a      	str	r3, [sp, #40]	; 0x28
    f670:	9208      	str	r2, [sp, #32]
    f672:	9212      	str	r2, [sp, #72]	; 0x48
    f674:	9216      	str	r2, [sp, #88]	; 0x58
    f676:	9211      	str	r2, [sp, #68]	; 0x44
    f678:	ac3f      	add	r4, sp, #252	; 0xfc
    f67a:	f01b 0302 	ands.w	r3, fp, #2
    f67e:	d002      	beq.n	f686 <_svfprintf_r+0x272>
    f680:	9907      	ldr	r1, [sp, #28]
    f682:	3102      	adds	r1, #2
    f684:	9107      	str	r1, [sp, #28]
    f686:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    f68a:	910f      	str	r1, [sp, #60]	; 0x3c
    f68c:	d105      	bne.n	f69a <_svfprintf_r+0x286>
    f68e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f690:	9807      	ldr	r0, [sp, #28]
    f692:	1a0f      	subs	r7, r1, r0
    f694:	2f00      	cmp	r7, #0
    f696:	f300 8382 	bgt.w	fd9e <_svfprintf_r+0x98a>
    f69a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f69c:	b182      	cbz	r2, f6c0 <_svfprintf_r+0x2ac>
    f69e:	2201      	movs	r2, #1
    f6a0:	f8c9 2004 	str.w	r2, [r9, #4]
    f6a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f6a6:	3201      	adds	r2, #1
    f6a8:	3601      	adds	r6, #1
    f6aa:	f10d 0187 	add.w	r1, sp, #135	; 0x87
    f6ae:	2a07      	cmp	r2, #7
    f6b0:	962e      	str	r6, [sp, #184]	; 0xb8
    f6b2:	922d      	str	r2, [sp, #180]	; 0xb4
    f6b4:	f8c9 1000 	str.w	r1, [r9]
    f6b8:	f300 83bd 	bgt.w	fe36 <_svfprintf_r+0xa22>
    f6bc:	f109 0908 	add.w	r9, r9, #8
    f6c0:	b183      	cbz	r3, f6e4 <_svfprintf_r+0x2d0>
    f6c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f6c4:	aa22      	add	r2, sp, #136	; 0x88
    f6c6:	3301      	adds	r3, #1
    f6c8:	3602      	adds	r6, #2
    f6ca:	f8c9 2000 	str.w	r2, [r9]
    f6ce:	2b07      	cmp	r3, #7
    f6d0:	f04f 0202 	mov.w	r2, #2
    f6d4:	962e      	str	r6, [sp, #184]	; 0xb8
    f6d6:	932d      	str	r3, [sp, #180]	; 0xb4
    f6d8:	f8c9 2004 	str.w	r2, [r9, #4]
    f6dc:	f300 83c0 	bgt.w	fe60 <_svfprintf_r+0xa4c>
    f6e0:	f109 0908 	add.w	r9, r9, #8
    f6e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f6e6:	2b80      	cmp	r3, #128	; 0x80
    f6e8:	f000 8281 	beq.w	fbee <_svfprintf_r+0x7da>
    f6ec:	9b08      	ldr	r3, [sp, #32]
    f6ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f6f0:	1a9f      	subs	r7, r3, r2
    f6f2:	2f00      	cmp	r7, #0
    f6f4:	f300 82bc 	bgt.w	fc70 <_svfprintf_r+0x85c>
    f6f8:	f41b 7f80 	tst.w	fp, #256	; 0x100
    f6fc:	f040 821e 	bne.w	fb3c <_svfprintf_r+0x728>
    f700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f702:	f8c9 3004 	str.w	r3, [r9, #4]
    f706:	441e      	add	r6, r3
    f708:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f70a:	f8c9 4000 	str.w	r4, [r9]
    f70e:	3301      	adds	r3, #1
    f710:	2b07      	cmp	r3, #7
    f712:	962e      	str	r6, [sp, #184]	; 0xb8
    f714:	932d      	str	r3, [sp, #180]	; 0xb4
    f716:	f300 8337 	bgt.w	fd88 <_svfprintf_r+0x974>
    f71a:	f109 0908 	add.w	r9, r9, #8
    f71e:	f01b 0f04 	tst.w	fp, #4
    f722:	d005      	beq.n	f730 <_svfprintf_r+0x31c>
    f724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f726:	9a07      	ldr	r2, [sp, #28]
    f728:	1a9c      	subs	r4, r3, r2
    f72a:	2c00      	cmp	r4, #0
    f72c:	f300 83a4 	bgt.w	fe78 <_svfprintf_r+0xa64>
    f730:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f732:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f734:	9907      	ldr	r1, [sp, #28]
    f736:	428a      	cmp	r2, r1
    f738:	bfac      	ite	ge
    f73a:	189b      	addge	r3, r3, r2
    f73c:	185b      	addlt	r3, r3, r1
    f73e:	9309      	str	r3, [sp, #36]	; 0x24
    f740:	2e00      	cmp	r6, #0
    f742:	f040 82ca 	bne.w	fcda <_svfprintf_r+0x8c6>
    f746:	2300      	movs	r3, #0
    f748:	932d      	str	r3, [sp, #180]	; 0xb4
    f74a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f74c:	b11b      	cbz	r3, f756 <_svfprintf_r+0x342>
    f74e:	990d      	ldr	r1, [sp, #52]	; 0x34
    f750:	4650      	mov	r0, sl
    f752:	f7ff f987 	bl	ea64 <_free_r>
    f756:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f75a:	4644      	mov	r4, r8
    f75c:	e688      	b.n	f470 <_svfprintf_r+0x5c>
    f75e:	9310      	str	r3, [sp, #64]	; 0x40
    f760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f762:	3307      	adds	r3, #7
    f764:	f023 0107 	bic.w	r1, r3, #7
    f768:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    f76c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    f770:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    f774:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    f778:	910e      	str	r1, [sp, #56]	; 0x38
    f77a:	4616      	mov	r6, r2
    f77c:	4610      	mov	r0, r2
    f77e:	4bb3      	ldr	r3, [pc, #716]	; (fa4c <_svfprintf_r+0x638>)
    f780:	4629      	mov	r1, r5
    f782:	f04f 32ff 	mov.w	r2, #4294967295
    f786:	f7fd fd65 	bl	d254 <__aeabi_dcmpun>
    f78a:	2800      	cmp	r0, #0
    f78c:	f040 84fc 	bne.w	10188 <_svfprintf_r+0xd74>
    f790:	4bae      	ldr	r3, [pc, #696]	; (fa4c <_svfprintf_r+0x638>)
    f792:	4630      	mov	r0, r6
    f794:	4629      	mov	r1, r5
    f796:	f04f 32ff 	mov.w	r2, #4294967295
    f79a:	f7fd fd3d 	bl	d218 <__aeabi_dcmple>
    f79e:	2800      	cmp	r0, #0
    f7a0:	f040 84f2 	bne.w	10188 <_svfprintf_r+0xd74>
    f7a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f7a8:	2200      	movs	r2, #0
    f7aa:	2300      	movs	r3, #0
    f7ac:	f7fd fd2a 	bl	d204 <__aeabi_dcmplt>
    f7b0:	2800      	cmp	r0, #0
    f7b2:	f041 8038 	bne.w	10826 <_svfprintf_r+0x1412>
    f7b6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f7ba:	4ca5      	ldr	r4, [pc, #660]	; (fa50 <_svfprintf_r+0x63c>)
    f7bc:	4ba5      	ldr	r3, [pc, #660]	; (fa54 <_svfprintf_r+0x640>)
    f7be:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f7c2:	9910      	ldr	r1, [sp, #64]	; 0x40
    f7c4:	2947      	cmp	r1, #71	; 0x47
    f7c6:	bfc8      	it	gt
    f7c8:	461c      	movgt	r4, r3
    f7ca:	2300      	movs	r3, #0
    f7cc:	2103      	movs	r1, #3
    f7ce:	930d      	str	r3, [sp, #52]	; 0x34
    f7d0:	9107      	str	r1, [sp, #28]
    f7d2:	910a      	str	r1, [sp, #40]	; 0x28
    f7d4:	9308      	str	r3, [sp, #32]
    f7d6:	9312      	str	r3, [sp, #72]	; 0x48
    f7d8:	9316      	str	r3, [sp, #88]	; 0x58
    f7da:	9311      	str	r3, [sp, #68]	; 0x44
    f7dc:	2a00      	cmp	r2, #0
    f7de:	f43f af4c 	beq.w	f67a <_svfprintf_r+0x266>
    f7e2:	9b07      	ldr	r3, [sp, #28]
    f7e4:	3301      	adds	r3, #1
    f7e6:	9307      	str	r3, [sp, #28]
    f7e8:	e747      	b.n	f67a <_svfprintf_r+0x266>
    f7ea:	2b43      	cmp	r3, #67	; 0x43
    f7ec:	9310      	str	r3, [sp, #64]	; 0x40
    f7ee:	d003      	beq.n	f7f8 <_svfprintf_r+0x3e4>
    f7f0:	f01b 0f10 	tst.w	fp, #16
    f7f4:	f000 8551 	beq.w	1029a <_svfprintf_r+0xe86>
    f7f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    f7fa:	2208      	movs	r2, #8
    f7fc:	2100      	movs	r1, #0
    f7fe:	a82a      	add	r0, sp, #168	; 0xa8
    f800:	ac3f      	add	r4, sp, #252	; 0xfc
    f802:	f7fe fef3 	bl	e5ec <memset>
    f806:	ab2a      	add	r3, sp, #168	; 0xa8
    f808:	f856 2b04 	ldr.w	r2, [r6], #4
    f80c:	4621      	mov	r1, r4
    f80e:	4650      	mov	r0, sl
    f810:	f002 fde2 	bl	123d8 <_wcrtomb_r>
    f814:	4603      	mov	r3, r0
    f816:	3301      	adds	r3, #1
    f818:	900a      	str	r0, [sp, #40]	; 0x28
    f81a:	f001 82c3 	beq.w	10da4 <_svfprintf_r+0x1990>
    f81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f820:	960e      	str	r6, [sp, #56]	; 0x38
    f822:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f826:	9307      	str	r3, [sp, #28]
    f828:	2200      	movs	r2, #0
    f82a:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f82e:	920d      	str	r2, [sp, #52]	; 0x34
    f830:	9208      	str	r2, [sp, #32]
    f832:	9212      	str	r2, [sp, #72]	; 0x48
    f834:	9216      	str	r2, [sp, #88]	; 0x58
    f836:	9211      	str	r2, [sp, #68]	; 0x44
    f838:	e71f      	b.n	f67a <_svfprintf_r+0x266>
    f83a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    f83c:	9310      	str	r3, [sp, #64]	; 0x40
    f83e:	f857 4b04 	ldr.w	r4, [r7], #4
    f842:	2300      	movs	r3, #0
    f844:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    f848:	2c00      	cmp	r4, #0
    f84a:	f000 854d 	beq.w	102e8 <_svfprintf_r+0xed4>
    f84e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f850:	2b53      	cmp	r3, #83	; 0x53
    f852:	f000 86d4 	beq.w	105fe <_svfprintf_r+0x11ea>
    f856:	f01b 0310 	ands.w	r3, fp, #16
    f85a:	9311      	str	r3, [sp, #68]	; 0x44
    f85c:	f040 86cf 	bne.w	105fe <_svfprintf_r+0x11ea>
    f860:	9b08      	ldr	r3, [sp, #32]
    f862:	1c5d      	adds	r5, r3, #1
    f864:	f001 80cc 	beq.w	10a00 <_svfprintf_r+0x15ec>
    f868:	9911      	ldr	r1, [sp, #68]	; 0x44
    f86a:	461a      	mov	r2, r3
    f86c:	4620      	mov	r0, r4
    f86e:	f001 fcdf 	bl	11230 <memchr>
    f872:	900d      	str	r0, [sp, #52]	; 0x34
    f874:	2800      	cmp	r0, #0
    f876:	f001 8351 	beq.w	10f1c <_svfprintf_r+0x1b08>
    f87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f87c:	9911      	ldr	r1, [sp, #68]	; 0x44
    f87e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f882:	970e      	str	r7, [sp, #56]	; 0x38
    f884:	1b1b      	subs	r3, r3, r4
    f886:	930a      	str	r3, [sp, #40]	; 0x28
    f888:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f88c:	9307      	str	r3, [sp, #28]
    f88e:	2373      	movs	r3, #115	; 0x73
    f890:	9108      	str	r1, [sp, #32]
    f892:	9112      	str	r1, [sp, #72]	; 0x48
    f894:	9116      	str	r1, [sp, #88]	; 0x58
    f896:	910d      	str	r1, [sp, #52]	; 0x34
    f898:	9310      	str	r3, [sp, #64]	; 0x40
    f89a:	e79f      	b.n	f7dc <_svfprintf_r+0x3c8>
    f89c:	f01b 0f20 	tst.w	fp, #32
    f8a0:	9310      	str	r3, [sp, #64]	; 0x40
    f8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f8a4:	d03c      	beq.n	f920 <_svfprintf_r+0x50c>
    f8a6:	3307      	adds	r3, #7
    f8a8:	f023 0307 	bic.w	r3, r3, #7
    f8ac:	461a      	mov	r2, r3
    f8ae:	4611      	mov	r1, r2
    f8b0:	685b      	ldr	r3, [r3, #4]
    f8b2:	f851 2b08 	ldr.w	r2, [r1], #8
    f8b6:	910e      	str	r1, [sp, #56]	; 0x38
    f8b8:	4619      	mov	r1, r3
    f8ba:	2b00      	cmp	r3, #0
    f8bc:	f2c0 8401 	blt.w	100c2 <_svfprintf_r+0xcae>
    f8c0:	9b08      	ldr	r3, [sp, #32]
    f8c2:	3301      	adds	r3, #1
    f8c4:	f000 82a8 	beq.w	fe18 <_svfprintf_r+0xa04>
    f8c8:	ea52 0301 	orrs.w	r3, r2, r1
    f8cc:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    f8d0:	f040 82a3 	bne.w	fe1a <_svfprintf_r+0xa06>
    f8d4:	9b08      	ldr	r3, [sp, #32]
    f8d6:	2b00      	cmp	r3, #0
    f8d8:	f040 82a4 	bne.w	fe24 <_svfprintf_r+0xa10>
    f8dc:	46ab      	mov	fp, r5
    f8de:	2300      	movs	r3, #0
    f8e0:	9308      	str	r3, [sp, #32]
    f8e2:	930a      	str	r3, [sp, #40]	; 0x28
    f8e4:	ac58      	add	r4, sp, #352	; 0x160
    f8e6:	e0ff      	b.n	fae8 <_svfprintf_r+0x6d4>
    f8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f8ea:	f853 2b04 	ldr.w	r2, [r3], #4
    f8ee:	920b      	str	r2, [sp, #44]	; 0x2c
    f8f0:	2a00      	cmp	r2, #0
    f8f2:	f280 840c 	bge.w	1010e <_svfprintf_r+0xcfa>
    f8f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f8f8:	930e      	str	r3, [sp, #56]	; 0x38
    f8fa:	4252      	negs	r2, r2
    f8fc:	920b      	str	r2, [sp, #44]	; 0x2c
    f8fe:	f898 3000 	ldrb.w	r3, [r8]
    f902:	f04b 0b04 	orr.w	fp, fp, #4
    f906:	e5de      	b.n	f4c6 <_svfprintf_r+0xb2>
    f908:	f898 3000 	ldrb.w	r3, [r8]
    f90c:	f04b 0b08 	orr.w	fp, fp, #8
    f910:	e5d9      	b.n	f4c6 <_svfprintf_r+0xb2>
    f912:	f04b 0b10 	orr.w	fp, fp, #16
    f916:	f01b 0f20 	tst.w	fp, #32
    f91a:	9310      	str	r3, [sp, #64]	; 0x40
    f91c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f91e:	d1c2      	bne.n	f8a6 <_svfprintf_r+0x492>
    f920:	f01b 0f10 	tst.w	fp, #16
    f924:	f040 83fe 	bne.w	10124 <_svfprintf_r+0xd10>
    f928:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f92c:	f000 83f6 	beq.w	1011c <_svfprintf_r+0xd08>
    f930:	f933 2b04 	ldrsh.w	r2, [r3], #4
    f934:	930e      	str	r3, [sp, #56]	; 0x38
    f936:	17d1      	asrs	r1, r2, #31
    f938:	460b      	mov	r3, r1
    f93a:	e7be      	b.n	f8ba <_svfprintf_r+0x4a6>
    f93c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f93e:	f853 2b04 	ldr.w	r2, [r3], #4
    f942:	930e      	str	r3, [sp, #56]	; 0x38
    f944:	f647 0330 	movw	r3, #30768	; 0x7830
    f948:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    f94c:	2078      	movs	r0, #120	; 0x78
    f94e:	4b42      	ldr	r3, [pc, #264]	; (fa58 <_svfprintf_r+0x644>)
    f950:	9318      	str	r3, [sp, #96]	; 0x60
    f952:	f04b 0502 	orr.w	r5, fp, #2
    f956:	2100      	movs	r1, #0
    f958:	2302      	movs	r3, #2
    f95a:	9010      	str	r0, [sp, #64]	; 0x40
    f95c:	2000      	movs	r0, #0
    f95e:	9c08      	ldr	r4, [sp, #32]
    f960:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    f964:	1c60      	adds	r0, r4, #1
    f966:	f000 80a8 	beq.w	faba <_svfprintf_r+0x6a6>
    f96a:	ea52 0001 	orrs.w	r0, r2, r1
    f96e:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    f972:	f040 80a1 	bne.w	fab8 <_svfprintf_r+0x6a4>
    f976:	2c00      	cmp	r4, #0
    f978:	f040 8695 	bne.w	106a6 <_svfprintf_r+0x1292>
    f97c:	2b00      	cmp	r3, #0
    f97e:	d1ae      	bne.n	f8de <_svfprintf_r+0x4ca>
    f980:	f015 0301 	ands.w	r3, r5, #1
    f984:	930a      	str	r3, [sp, #40]	; 0x28
    f986:	f000 83c7 	beq.w	10118 <_svfprintf_r+0xd04>
    f98a:	2330      	movs	r3, #48	; 0x30
    f98c:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
    f990:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f994:	e0a8      	b.n	fae8 <_svfprintf_r+0x6d4>
    f996:	f01b 0f20 	tst.w	fp, #32
    f99a:	f040 83e5 	bne.w	10168 <_svfprintf_r+0xd54>
    f99e:	f01b 0f10 	tst.w	fp, #16
    f9a2:	f040 8686 	bne.w	106b2 <_svfprintf_r+0x129e>
    f9a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f9aa:	f040 877f 	bne.w	108ac <_svfprintf_r+0x1498>
    f9ae:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f9b2:	f000 867e 	beq.w	106b2 <_svfprintf_r+0x129e>
    f9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f9b8:	9909      	ldr	r1, [sp, #36]	; 0x24
    f9ba:	f853 2b04 	ldr.w	r2, [r3], #4
    f9be:	930e      	str	r3, [sp, #56]	; 0x38
    f9c0:	7011      	strb	r1, [r2, #0]
    f9c2:	4644      	mov	r4, r8
    f9c4:	e554      	b.n	f470 <_svfprintf_r+0x5c>
    f9c6:	f898 3000 	ldrb.w	r3, [r8]
    f9ca:	2b68      	cmp	r3, #104	; 0x68
    f9cc:	bf03      	ittte	eq
    f9ce:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f9d2:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    f9d6:	f108 0801 	addeq.w	r8, r8, #1
    f9da:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    f9de:	e572      	b.n	f4c6 <_svfprintf_r+0xb2>
    f9e0:	f898 3000 	ldrb.w	r3, [r8]
    f9e4:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    f9e8:	e56d      	b.n	f4c6 <_svfprintf_r+0xb2>
    f9ea:	f898 3000 	ldrb.w	r3, [r8]
    f9ee:	2b6c      	cmp	r3, #108	; 0x6c
    f9f0:	bf03      	ittte	eq
    f9f2:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f9f6:	f04b 0b20 	orreq.w	fp, fp, #32
    f9fa:	f108 0801 	addeq.w	r8, r8, #1
    f9fe:	f04b 0b10 	orrne.w	fp, fp, #16
    fa02:	e560      	b.n	f4c6 <_svfprintf_r+0xb2>
    fa04:	9310      	str	r3, [sp, #64]	; 0x40
    fa06:	f04b 0b10 	orr.w	fp, fp, #16
    fa0a:	f01b 0120 	ands.w	r1, fp, #32
    fa0e:	f000 834a 	beq.w	100a6 <_svfprintf_r+0xc92>
    fa12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fa14:	3307      	adds	r3, #7
    fa16:	f023 0307 	bic.w	r3, r3, #7
    fa1a:	6859      	ldr	r1, [r3, #4]
    fa1c:	f853 2b08 	ldr.w	r2, [r3], #8
    fa20:	930e      	str	r3, [sp, #56]	; 0x38
    fa22:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    fa26:	2300      	movs	r3, #0
    fa28:	e798      	b.n	f95c <_svfprintf_r+0x548>
    fa2a:	9310      	str	r3, [sp, #64]	; 0x40
    fa2c:	f04b 0510 	orr.w	r5, fp, #16
    fa30:	f015 0120 	ands.w	r1, r5, #32
    fa34:	f000 8328 	beq.w	10088 <_svfprintf_r+0xc74>
    fa38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fa3a:	3307      	adds	r3, #7
    fa3c:	f023 0307 	bic.w	r3, r3, #7
    fa40:	6859      	ldr	r1, [r3, #4]
    fa42:	f853 2b08 	ldr.w	r2, [r3], #8
    fa46:	930e      	str	r3, [sp, #56]	; 0x38
    fa48:	2301      	movs	r3, #1
    fa4a:	e787      	b.n	f95c <_svfprintf_r+0x548>
    fa4c:	7fefffff 	.word	0x7fefffff
    fa50:	00015f9c 	.word	0x00015f9c
    fa54:	00015b28 	.word	0x00015b28
    fa58:	00015fa4 	.word	0x00015fa4
    fa5c:	f898 3000 	ldrb.w	r3, [r8]
    fa60:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    fa64:	e52f      	b.n	f4c6 <_svfprintf_r+0xb2>
    fa66:	4641      	mov	r1, r8
    fa68:	f811 3b01 	ldrb.w	r3, [r1], #1
    fa6c:	2b2a      	cmp	r3, #42	; 0x2a
    fa6e:	f001 827f 	beq.w	10f70 <_svfprintf_r+0x1b5c>
    fa72:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    fa76:	2a09      	cmp	r2, #9
    fa78:	4688      	mov	r8, r1
    fa7a:	bf98      	it	ls
    fa7c:	2100      	movls	r1, #0
    fa7e:	f201 8176 	bhi.w	10d6e <_svfprintf_r+0x195a>
    fa82:	f818 3b01 	ldrb.w	r3, [r8], #1
    fa86:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    fa8a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    fa8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    fa92:	2a09      	cmp	r2, #9
    fa94:	d9f5      	bls.n	fa82 <_svfprintf_r+0x66e>
    fa96:	9108      	str	r1, [sp, #32]
    fa98:	e517      	b.n	f4ca <_svfprintf_r+0xb6>
    fa9a:	f898 3000 	ldrb.w	r3, [r8]
    fa9e:	f04b 0b01 	orr.w	fp, fp, #1
    faa2:	e510      	b.n	f4c6 <_svfprintf_r+0xb2>
    faa4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    faa8:	2b00      	cmp	r3, #0
    faaa:	f47f ad91 	bne.w	f5d0 <_svfprintf_r+0x1bc>
    faae:	f898 3000 	ldrb.w	r3, [r8]
    fab2:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
    fab6:	e506      	b.n	f4c6 <_svfprintf_r+0xb2>
    fab8:	465d      	mov	r5, fp
    faba:	2b01      	cmp	r3, #1
    fabc:	f000 81ad 	beq.w	fe1a <_svfprintf_r+0xa06>
    fac0:	2b02      	cmp	r3, #2
    fac2:	ac58      	add	r4, sp, #352	; 0x160
    fac4:	d11f      	bne.n	fb06 <_svfprintf_r+0x6f2>
    fac6:	9818      	ldr	r0, [sp, #96]	; 0x60
    fac8:	f002 030f 	and.w	r3, r2, #15
    facc:	0912      	lsrs	r2, r2, #4
    face:	5cc3      	ldrb	r3, [r0, r3]
    fad0:	f804 3d01 	strb.w	r3, [r4, #-1]!
    fad4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    fad8:	0909      	lsrs	r1, r1, #4
    fada:	ea52 0301 	orrs.w	r3, r2, r1
    fade:	d1f3      	bne.n	fac8 <_svfprintf_r+0x6b4>
    fae0:	ab58      	add	r3, sp, #352	; 0x160
    fae2:	1b1b      	subs	r3, r3, r4
    fae4:	46ab      	mov	fp, r5
    fae6:	930a      	str	r3, [sp, #40]	; 0x28
    fae8:	990a      	ldr	r1, [sp, #40]	; 0x28
    faea:	9808      	ldr	r0, [sp, #32]
    faec:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    faf0:	4281      	cmp	r1, r0
    faf2:	f04f 0300 	mov.w	r3, #0
    faf6:	bfb8      	it	lt
    faf8:	4601      	movlt	r1, r0
    fafa:	930d      	str	r3, [sp, #52]	; 0x34
    fafc:	9107      	str	r1, [sp, #28]
    fafe:	9312      	str	r3, [sp, #72]	; 0x48
    fb00:	9316      	str	r3, [sp, #88]	; 0x58
    fb02:	9311      	str	r3, [sp, #68]	; 0x44
    fb04:	e66a      	b.n	f7dc <_svfprintf_r+0x3c8>
    fb06:	f002 0307 	and.w	r3, r2, #7
    fb0a:	08d2      	lsrs	r2, r2, #3
    fb0c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    fb10:	08c9      	lsrs	r1, r1, #3
    fb12:	3330      	adds	r3, #48	; 0x30
    fb14:	ea52 0601 	orrs.w	r6, r2, r1
    fb18:	4620      	mov	r0, r4
    fb1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
    fb1e:	d1f2      	bne.n	fb06 <_svfprintf_r+0x6f2>
    fb20:	07e9      	lsls	r1, r5, #31
    fb22:	d5dd      	bpl.n	fae0 <_svfprintf_r+0x6cc>
    fb24:	2b30      	cmp	r3, #48	; 0x30
    fb26:	d0db      	beq.n	fae0 <_svfprintf_r+0x6cc>
    fb28:	2330      	movs	r3, #48	; 0x30
    fb2a:	3802      	subs	r0, #2
    fb2c:	f804 3c01 	strb.w	r3, [r4, #-1]
    fb30:	ab58      	add	r3, sp, #352	; 0x160
    fb32:	1a1b      	subs	r3, r3, r0
    fb34:	46ab      	mov	fp, r5
    fb36:	930a      	str	r3, [sp, #40]	; 0x28
    fb38:	4604      	mov	r4, r0
    fb3a:	e7d5      	b.n	fae8 <_svfprintf_r+0x6d4>
    fb3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fb3e:	2b65      	cmp	r3, #101	; 0x65
    fb40:	f340 80dc 	ble.w	fcfc <_svfprintf_r+0x8e8>
    fb44:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    fb48:	2200      	movs	r2, #0
    fb4a:	2300      	movs	r3, #0
    fb4c:	f7fd fb50 	bl	d1f0 <__aeabi_dcmpeq>
    fb50:	2800      	cmp	r0, #0
    fb52:	f000 81c8 	beq.w	fee6 <_svfprintf_r+0xad2>
    fb56:	2301      	movs	r3, #1
    fb58:	f8c9 3004 	str.w	r3, [r9, #4]
    fb5c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fb5e:	4abd      	ldr	r2, [pc, #756]	; (fe54 <_svfprintf_r+0xa40>)
    fb60:	f8c9 2000 	str.w	r2, [r9]
    fb64:	3301      	adds	r3, #1
    fb66:	3601      	adds	r6, #1
    fb68:	2b07      	cmp	r3, #7
    fb6a:	962e      	str	r6, [sp, #184]	; 0xb8
    fb6c:	932d      	str	r3, [sp, #180]	; 0xb4
    fb6e:	f300 8539 	bgt.w	105e4 <_svfprintf_r+0x11d0>
    fb72:	f109 0908 	add.w	r9, r9, #8
    fb76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fb78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fb7a:	4293      	cmp	r3, r2
    fb7c:	f280 82c2 	bge.w	10104 <_svfprintf_r+0xcf0>
    fb80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fb82:	9a19      	ldr	r2, [sp, #100]	; 0x64
    fb84:	441e      	add	r6, r3
    fb86:	e9c9 2300 	strd	r2, r3, [r9]
    fb8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fb8c:	962e      	str	r6, [sp, #184]	; 0xb8
    fb8e:	3301      	adds	r3, #1
    fb90:	2b07      	cmp	r3, #7
    fb92:	932d      	str	r3, [sp, #180]	; 0xb4
    fb94:	f300 838d 	bgt.w	102b2 <_svfprintf_r+0xe9e>
    fb98:	f109 0908 	add.w	r9, r9, #8
    fb9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fb9e:	1e5c      	subs	r4, r3, #1
    fba0:	2c00      	cmp	r4, #0
    fba2:	f77f adbc 	ble.w	f71e <_svfprintf_r+0x30a>
    fba6:	2c10      	cmp	r4, #16
    fba8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fbaa:	4dab      	ldr	r5, [pc, #684]	; (fe58 <_svfprintf_r+0xa44>)
    fbac:	f340 8555 	ble.w	1065a <_svfprintf_r+0x1246>
    fbb0:	4632      	mov	r2, r6
    fbb2:	2710      	movs	r7, #16
    fbb4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    fbb6:	e005      	b.n	fbc4 <_svfprintf_r+0x7b0>
    fbb8:	f109 0908 	add.w	r9, r9, #8
    fbbc:	3c10      	subs	r4, #16
    fbbe:	2c10      	cmp	r4, #16
    fbc0:	f340 854a 	ble.w	10658 <_svfprintf_r+0x1244>
    fbc4:	3301      	adds	r3, #1
    fbc6:	3210      	adds	r2, #16
    fbc8:	2b07      	cmp	r3, #7
    fbca:	e9c9 5700 	strd	r5, r7, [r9]
    fbce:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fbd2:	ddf1      	ble.n	fbb8 <_svfprintf_r+0x7a4>
    fbd4:	aa2c      	add	r2, sp, #176	; 0xb0
    fbd6:	4631      	mov	r1, r6
    fbd8:	4650      	mov	r0, sl
    fbda:	f002 fc45 	bl	12468 <__ssprint_r>
    fbde:	2800      	cmp	r0, #0
    fbe0:	f040 8083 	bne.w	fcea <_svfprintf_r+0x8d6>
    fbe4:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fbe8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fbec:	e7e6      	b.n	fbbc <_svfprintf_r+0x7a8>
    fbee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fbf0:	9a07      	ldr	r2, [sp, #28]
    fbf2:	1a9f      	subs	r7, r3, r2
    fbf4:	2f00      	cmp	r7, #0
    fbf6:	f77f ad79 	ble.w	f6ec <_svfprintf_r+0x2d8>
    fbfa:	2f10      	cmp	r7, #16
    fbfc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fbfe:	4d96      	ldr	r5, [pc, #600]	; (fe58 <_svfprintf_r+0xa44>)
    fc00:	dd23      	ble.n	fc4a <_svfprintf_r+0x836>
    fc02:	4632      	mov	r2, r6
    fc04:	4626      	mov	r6, r4
    fc06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fc08:	e004      	b.n	fc14 <_svfprintf_r+0x800>
    fc0a:	3f10      	subs	r7, #16
    fc0c:	2f10      	cmp	r7, #16
    fc0e:	f109 0908 	add.w	r9, r9, #8
    fc12:	dd18      	ble.n	fc46 <_svfprintf_r+0x832>
    fc14:	3301      	adds	r3, #1
    fc16:	3210      	adds	r2, #16
    fc18:	2110      	movs	r1, #16
    fc1a:	2b07      	cmp	r3, #7
    fc1c:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fc20:	f8c9 5000 	str.w	r5, [r9]
    fc24:	f8c9 1004 	str.w	r1, [r9, #4]
    fc28:	ddef      	ble.n	fc0a <_svfprintf_r+0x7f6>
    fc2a:	aa2c      	add	r2, sp, #176	; 0xb0
    fc2c:	4621      	mov	r1, r4
    fc2e:	4650      	mov	r0, sl
    fc30:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fc34:	f002 fc18 	bl	12468 <__ssprint_r>
    fc38:	2800      	cmp	r0, #0
    fc3a:	d156      	bne.n	fcea <_svfprintf_r+0x8d6>
    fc3c:	3f10      	subs	r7, #16
    fc3e:	2f10      	cmp	r7, #16
    fc40:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fc44:	dce6      	bgt.n	fc14 <_svfprintf_r+0x800>
    fc46:	4634      	mov	r4, r6
    fc48:	4616      	mov	r6, r2
    fc4a:	3301      	adds	r3, #1
    fc4c:	443e      	add	r6, r7
    fc4e:	2b07      	cmp	r3, #7
    fc50:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fc54:	f8c9 5000 	str.w	r5, [r9]
    fc58:	f8c9 7004 	str.w	r7, [r9, #4]
    fc5c:	f300 8516 	bgt.w	1068c <_svfprintf_r+0x1278>
    fc60:	9b08      	ldr	r3, [sp, #32]
    fc62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fc64:	1a9f      	subs	r7, r3, r2
    fc66:	2f00      	cmp	r7, #0
    fc68:	f109 0908 	add.w	r9, r9, #8
    fc6c:	f77f ad44 	ble.w	f6f8 <_svfprintf_r+0x2e4>
    fc70:	2f10      	cmp	r7, #16
    fc72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fc74:	4d78      	ldr	r5, [pc, #480]	; (fe58 <_svfprintf_r+0xa44>)
    fc76:	dd22      	ble.n	fcbe <_svfprintf_r+0x8aa>
    fc78:	4632      	mov	r2, r6
    fc7a:	4626      	mov	r6, r4
    fc7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fc7e:	e004      	b.n	fc8a <_svfprintf_r+0x876>
    fc80:	3f10      	subs	r7, #16
    fc82:	2f10      	cmp	r7, #16
    fc84:	f109 0908 	add.w	r9, r9, #8
    fc88:	dd17      	ble.n	fcba <_svfprintf_r+0x8a6>
    fc8a:	3301      	adds	r3, #1
    fc8c:	3210      	adds	r2, #16
    fc8e:	2110      	movs	r1, #16
    fc90:	2b07      	cmp	r3, #7
    fc92:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fc96:	f8c9 5000 	str.w	r5, [r9]
    fc9a:	f8c9 1004 	str.w	r1, [r9, #4]
    fc9e:	ddef      	ble.n	fc80 <_svfprintf_r+0x86c>
    fca0:	aa2c      	add	r2, sp, #176	; 0xb0
    fca2:	4621      	mov	r1, r4
    fca4:	4650      	mov	r0, sl
    fca6:	f002 fbdf 	bl	12468 <__ssprint_r>
    fcaa:	b9f0      	cbnz	r0, fcea <_svfprintf_r+0x8d6>
    fcac:	3f10      	subs	r7, #16
    fcae:	2f10      	cmp	r7, #16
    fcb0:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fcb4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fcb8:	dce7      	bgt.n	fc8a <_svfprintf_r+0x876>
    fcba:	4634      	mov	r4, r6
    fcbc:	4616      	mov	r6, r2
    fcbe:	3301      	adds	r3, #1
    fcc0:	443e      	add	r6, r7
    fcc2:	2b07      	cmp	r3, #7
    fcc4:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fcc8:	f8c9 5000 	str.w	r5, [r9]
    fccc:	f8c9 7004 	str.w	r7, [r9, #4]
    fcd0:	f300 81cd 	bgt.w	1006e <_svfprintf_r+0xc5a>
    fcd4:	f109 0908 	add.w	r9, r9, #8
    fcd8:	e50e      	b.n	f6f8 <_svfprintf_r+0x2e4>
    fcda:	990c      	ldr	r1, [sp, #48]	; 0x30
    fcdc:	aa2c      	add	r2, sp, #176	; 0xb0
    fcde:	4650      	mov	r0, sl
    fce0:	f002 fbc2 	bl	12468 <__ssprint_r>
    fce4:	2800      	cmp	r0, #0
    fce6:	f43f ad2e 	beq.w	f746 <_svfprintf_r+0x332>
    fcea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fcec:	2b00      	cmp	r3, #0
    fcee:	f43f ac99 	beq.w	f624 <_svfprintf_r+0x210>
    fcf2:	990d      	ldr	r1, [sp, #52]	; 0x34
    fcf4:	4650      	mov	r0, sl
    fcf6:	f7fe feb5 	bl	ea64 <_free_r>
    fcfa:	e493      	b.n	f624 <_svfprintf_r+0x210>
    fcfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fcfe:	2b01      	cmp	r3, #1
    fd00:	f340 816e 	ble.w	ffe0 <_svfprintf_r+0xbcc>
    fd04:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    fd06:	f8c9 4000 	str.w	r4, [r9]
    fd0a:	2301      	movs	r3, #1
    fd0c:	441f      	add	r7, r3
    fd0e:	3601      	adds	r6, #1
    fd10:	2f07      	cmp	r7, #7
    fd12:	f8c9 3004 	str.w	r3, [r9, #4]
    fd16:	962e      	str	r6, [sp, #184]	; 0xb8
    fd18:	972d      	str	r7, [sp, #180]	; 0xb4
    fd1a:	f300 81d9 	bgt.w	100d0 <_svfprintf_r+0xcbc>
    fd1e:	f109 0908 	add.w	r9, r9, #8
    fd22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fd24:	9a19      	ldr	r2, [sp, #100]	; 0x64
    fd26:	3701      	adds	r7, #1
    fd28:	441e      	add	r6, r3
    fd2a:	2f07      	cmp	r7, #7
    fd2c:	e9c9 2300 	strd	r2, r3, [r9]
    fd30:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    fd34:	f300 81d9 	bgt.w	100ea <_svfprintf_r+0xcd6>
    fd38:	f109 0908 	add.w	r9, r9, #8
    fd3c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    fd40:	2200      	movs	r2, #0
    fd42:	2300      	movs	r3, #0
    fd44:	f7fd fa54 	bl	d1f0 <__aeabi_dcmpeq>
    fd48:	2800      	cmp	r0, #0
    fd4a:	f040 8167 	bne.w	1001c <_svfprintf_r+0xc08>
    fd4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fd50:	3701      	adds	r7, #1
    fd52:	3b01      	subs	r3, #1
    fd54:	3401      	adds	r4, #1
    fd56:	441e      	add	r6, r3
    fd58:	2f07      	cmp	r7, #7
    fd5a:	f8c9 4000 	str.w	r4, [r9]
    fd5e:	972d      	str	r7, [sp, #180]	; 0xb4
    fd60:	f8c9 3004 	str.w	r3, [r9, #4]
    fd64:	962e      	str	r6, [sp, #184]	; 0xb8
    fd66:	f300 814c 	bgt.w	10002 <_svfprintf_r+0xbee>
    fd6a:	f109 0908 	add.w	r9, r9, #8
    fd6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fd70:	f8c9 3004 	str.w	r3, [r9, #4]
    fd74:	3701      	adds	r7, #1
    fd76:	441e      	add	r6, r3
    fd78:	2f07      	cmp	r7, #7
    fd7a:	ab26      	add	r3, sp, #152	; 0x98
    fd7c:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    fd80:	f8c9 3000 	str.w	r3, [r9]
    fd84:	f77f acc9 	ble.w	f71a <_svfprintf_r+0x306>
    fd88:	990c      	ldr	r1, [sp, #48]	; 0x30
    fd8a:	aa2c      	add	r2, sp, #176	; 0xb0
    fd8c:	4650      	mov	r0, sl
    fd8e:	f002 fb6b 	bl	12468 <__ssprint_r>
    fd92:	2800      	cmp	r0, #0
    fd94:	d1a9      	bne.n	fcea <_svfprintf_r+0x8d6>
    fd96:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fd98:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fd9c:	e4bf      	b.n	f71e <_svfprintf_r+0x30a>
    fd9e:	2f10      	cmp	r7, #16
    fda0:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    fda4:	4d2d      	ldr	r5, [pc, #180]	; (fe5c <_svfprintf_r+0xa48>)
    fda6:	dd27      	ble.n	fdf8 <_svfprintf_r+0x9e4>
    fda8:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    fdac:	2610      	movs	r6, #16
    fdae:	46d0      	mov	r8, sl
    fdb0:	46a2      	mov	sl, r4
    fdb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fdb4:	e004      	b.n	fdc0 <_svfprintf_r+0x9ac>
    fdb6:	3f10      	subs	r7, #16
    fdb8:	2f10      	cmp	r7, #16
    fdba:	f109 0908 	add.w	r9, r9, #8
    fdbe:	dd16      	ble.n	fdee <_svfprintf_r+0x9da>
    fdc0:	3201      	adds	r2, #1
    fdc2:	3110      	adds	r1, #16
    fdc4:	2a07      	cmp	r2, #7
    fdc6:	e9c9 5600 	strd	r5, r6, [r9]
    fdca:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
    fdce:	ddf2      	ble.n	fdb6 <_svfprintf_r+0x9a2>
    fdd0:	aa2c      	add	r2, sp, #176	; 0xb0
    fdd2:	4621      	mov	r1, r4
    fdd4:	4640      	mov	r0, r8
    fdd6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fdda:	f002 fb45 	bl	12468 <__ssprint_r>
    fdde:	2800      	cmp	r0, #0
    fde0:	f040 83f2 	bne.w	105c8 <_svfprintf_r+0x11b4>
    fde4:	3f10      	subs	r7, #16
    fde6:	2f10      	cmp	r7, #16
    fde8:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    fdec:	dce8      	bgt.n	fdc0 <_svfprintf_r+0x9ac>
    fdee:	4654      	mov	r4, sl
    fdf0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fdf2:	46c2      	mov	sl, r8
    fdf4:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
    fdf8:	f8c9 5000 	str.w	r5, [r9]
    fdfc:	3201      	adds	r2, #1
    fdfe:	187e      	adds	r6, r7, r1
    fe00:	2a07      	cmp	r2, #7
    fe02:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
    fe06:	f8c9 7004 	str.w	r7, [r9, #4]
    fe0a:	f300 83cc 	bgt.w	105a6 <_svfprintf_r+0x1192>
    fe0e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    fe12:	f109 0908 	add.w	r9, r9, #8
    fe16:	e441      	b.n	f69c <_svfprintf_r+0x288>
    fe18:	465d      	mov	r5, fp
    fe1a:	2a0a      	cmp	r2, #10
    fe1c:	f171 0300 	sbcs.w	r3, r1, #0
    fe20:	f080 8329 	bcs.w	10476 <_svfprintf_r+0x1062>
    fe24:	3230      	adds	r2, #48	; 0x30
    fe26:	2301      	movs	r3, #1
    fe28:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
    fe2c:	46ab      	mov	fp, r5
    fe2e:	930a      	str	r3, [sp, #40]	; 0x28
    fe30:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    fe34:	e658      	b.n	fae8 <_svfprintf_r+0x6d4>
    fe36:	990c      	ldr	r1, [sp, #48]	; 0x30
    fe38:	931e      	str	r3, [sp, #120]	; 0x78
    fe3a:	aa2c      	add	r2, sp, #176	; 0xb0
    fe3c:	4650      	mov	r0, sl
    fe3e:	f002 fb13 	bl	12468 <__ssprint_r>
    fe42:	2800      	cmp	r0, #0
    fe44:	f47f af51 	bne.w	fcea <_svfprintf_r+0x8d6>
    fe48:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fe4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fe4c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fe50:	e436      	b.n	f6c0 <_svfprintf_r+0x2ac>
    fe52:	bf00      	nop
    fe54:	00014860 	.word	0x00014860
    fe58:	00015fe4 	.word	0x00015fe4
    fe5c:	00015fd4 	.word	0x00015fd4
    fe60:	990c      	ldr	r1, [sp, #48]	; 0x30
    fe62:	aa2c      	add	r2, sp, #176	; 0xb0
    fe64:	4650      	mov	r0, sl
    fe66:	f002 faff 	bl	12468 <__ssprint_r>
    fe6a:	2800      	cmp	r0, #0
    fe6c:	f47f af3d 	bne.w	fcea <_svfprintf_r+0x8d6>
    fe70:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fe72:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fe76:	e435      	b.n	f6e4 <_svfprintf_r+0x2d0>
    fe78:	2c10      	cmp	r4, #16
    fe7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fe7c:	4db8      	ldr	r5, [pc, #736]	; (10160 <_svfprintf_r+0xd4c>)
    fe7e:	dd1f      	ble.n	fec0 <_svfprintf_r+0xaac>
    fe80:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    fe84:	2710      	movs	r7, #16
    fe86:	e004      	b.n	fe92 <_svfprintf_r+0xa7e>
    fe88:	3c10      	subs	r4, #16
    fe8a:	2c10      	cmp	r4, #16
    fe8c:	f109 0908 	add.w	r9, r9, #8
    fe90:	dd16      	ble.n	fec0 <_svfprintf_r+0xaac>
    fe92:	3301      	adds	r3, #1
    fe94:	3610      	adds	r6, #16
    fe96:	2b07      	cmp	r3, #7
    fe98:	e9c9 5700 	strd	r5, r7, [r9]
    fe9c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fea0:	ddf2      	ble.n	fe88 <_svfprintf_r+0xa74>
    fea2:	aa2c      	add	r2, sp, #176	; 0xb0
    fea4:	4659      	mov	r1, fp
    fea6:	4650      	mov	r0, sl
    fea8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    feac:	f002 fadc 	bl	12468 <__ssprint_r>
    feb0:	2800      	cmp	r0, #0
    feb2:	f47f af1a 	bne.w	fcea <_svfprintf_r+0x8d6>
    feb6:	3c10      	subs	r4, #16
    feb8:	2c10      	cmp	r4, #16
    feba:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
    febe:	dce8      	bgt.n	fe92 <_svfprintf_r+0xa7e>
    fec0:	3301      	adds	r3, #1
    fec2:	4426      	add	r6, r4
    fec4:	2b07      	cmp	r3, #7
    fec6:	e9c9 5400 	strd	r5, r4, [r9]
    feca:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fece:	f77f ac2f 	ble.w	f730 <_svfprintf_r+0x31c>
    fed2:	990c      	ldr	r1, [sp, #48]	; 0x30
    fed4:	aa2c      	add	r2, sp, #176	; 0xb0
    fed6:	4650      	mov	r0, sl
    fed8:	f002 fac6 	bl	12468 <__ssprint_r>
    fedc:	2800      	cmp	r0, #0
    fede:	f47f af04 	bne.w	fcea <_svfprintf_r+0x8d6>
    fee2:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fee4:	e424      	b.n	f730 <_svfprintf_r+0x31c>
    fee6:	9923      	ldr	r1, [sp, #140]	; 0x8c
    fee8:	2900      	cmp	r1, #0
    feea:	f340 8327 	ble.w	1053c <_svfprintf_r+0x1128>
    feee:	9d11      	ldr	r5, [sp, #68]	; 0x44
    fef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fef2:	429d      	cmp	r5, r3
    fef4:	bfa8      	it	ge
    fef6:	461d      	movge	r5, r3
    fef8:	2d00      	cmp	r5, #0
    fefa:	dd0b      	ble.n	ff14 <_svfprintf_r+0xb00>
    fefc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fefe:	3301      	adds	r3, #1
    ff00:	442e      	add	r6, r5
    ff02:	2b07      	cmp	r3, #7
    ff04:	e9c9 4500 	strd	r4, r5, [r9]
    ff08:	962e      	str	r6, [sp, #184]	; 0xb8
    ff0a:	932d      	str	r3, [sp, #180]	; 0xb4
    ff0c:	f300 86dd 	bgt.w	10cca <_svfprintf_r+0x18b6>
    ff10:	f109 0908 	add.w	r9, r9, #8
    ff14:	9f11      	ldr	r7, [sp, #68]	; 0x44
    ff16:	2d00      	cmp	r5, #0
    ff18:	bfa8      	it	ge
    ff1a:	1b7f      	subge	r7, r7, r5
    ff1c:	2f00      	cmp	r7, #0
    ff1e:	f300 81f4 	bgt.w	1030a <_svfprintf_r+0xef6>
    ff22:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ff24:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    ff28:	4423      	add	r3, r4
    ff2a:	930a      	str	r3, [sp, #40]	; 0x28
    ff2c:	f040 8214 	bne.w	10358 <_svfprintf_r+0xf44>
    ff30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ff32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ff34:	4293      	cmp	r3, r2
    ff36:	db03      	blt.n	ff40 <_svfprintf_r+0xb2c>
    ff38:	f01b 0f01 	tst.w	fp, #1
    ff3c:	f000 84a5 	beq.w	1088a <_svfprintf_r+0x1476>
    ff40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    ff42:	9919      	ldr	r1, [sp, #100]	; 0x64
    ff44:	4416      	add	r6, r2
    ff46:	e9c9 1200 	strd	r1, r2, [r9]
    ff4a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    ff4c:	962e      	str	r6, [sp, #184]	; 0xb8
    ff4e:	3201      	adds	r2, #1
    ff50:	2a07      	cmp	r2, #7
    ff52:	922d      	str	r2, [sp, #180]	; 0xb4
    ff54:	f300 86c6 	bgt.w	10ce4 <_svfprintf_r+0x18d0>
    ff58:	f109 0908 	add.w	r9, r9, #8
    ff5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ff5e:	18a5      	adds	r5, r4, r2
    ff60:	1ad4      	subs	r4, r2, r3
    ff62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff64:	1aed      	subs	r5, r5, r3
    ff66:	42a5      	cmp	r5, r4
    ff68:	bfa8      	it	ge
    ff6a:	4625      	movge	r5, r4
    ff6c:	2d00      	cmp	r5, #0
    ff6e:	dd0d      	ble.n	ff8c <_svfprintf_r+0xb78>
    ff70:	f8c9 3000 	str.w	r3, [r9]
    ff74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ff76:	f8c9 5004 	str.w	r5, [r9, #4]
    ff7a:	3301      	adds	r3, #1
    ff7c:	442e      	add	r6, r5
    ff7e:	2b07      	cmp	r3, #7
    ff80:	962e      	str	r6, [sp, #184]	; 0xb8
    ff82:	932d      	str	r3, [sp, #180]	; 0xb4
    ff84:	f300 86be 	bgt.w	10d04 <_svfprintf_r+0x18f0>
    ff88:	f109 0908 	add.w	r9, r9, #8
    ff8c:	2d00      	cmp	r5, #0
    ff8e:	bfa8      	it	ge
    ff90:	1b64      	subge	r4, r4, r5
    ff92:	2c00      	cmp	r4, #0
    ff94:	f77f abc3 	ble.w	f71e <_svfprintf_r+0x30a>
    ff98:	2c10      	cmp	r4, #16
    ff9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ff9c:	4d71      	ldr	r5, [pc, #452]	; (10164 <_svfprintf_r+0xd50>)
    ff9e:	f340 835c 	ble.w	1065a <_svfprintf_r+0x1246>
    ffa2:	4632      	mov	r2, r6
    ffa4:	2710      	movs	r7, #16
    ffa6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    ffa8:	e005      	b.n	ffb6 <_svfprintf_r+0xba2>
    ffaa:	f109 0908 	add.w	r9, r9, #8
    ffae:	3c10      	subs	r4, #16
    ffb0:	2c10      	cmp	r4, #16
    ffb2:	f340 8351 	ble.w	10658 <_svfprintf_r+0x1244>
    ffb6:	3301      	adds	r3, #1
    ffb8:	3210      	adds	r2, #16
    ffba:	2b07      	cmp	r3, #7
    ffbc:	e9c9 5700 	strd	r5, r7, [r9]
    ffc0:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    ffc4:	ddf1      	ble.n	ffaa <_svfprintf_r+0xb96>
    ffc6:	aa2c      	add	r2, sp, #176	; 0xb0
    ffc8:	4631      	mov	r1, r6
    ffca:	4650      	mov	r0, sl
    ffcc:	f002 fa4c 	bl	12468 <__ssprint_r>
    ffd0:	2800      	cmp	r0, #0
    ffd2:	f47f ae8a 	bne.w	fcea <_svfprintf_r+0x8d6>
    ffd6:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    ffda:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ffde:	e7e6      	b.n	ffae <_svfprintf_r+0xb9a>
    ffe0:	f01b 0f01 	tst.w	fp, #1
    ffe4:	f47f ae8e 	bne.w	fd04 <_svfprintf_r+0x8f0>
    ffe8:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    ffea:	f8c9 4000 	str.w	r4, [r9]
    ffee:	2301      	movs	r3, #1
    fff0:	441f      	add	r7, r3
    fff2:	3601      	adds	r6, #1
    fff4:	2f07      	cmp	r7, #7
    fff6:	f8c9 3004 	str.w	r3, [r9, #4]
    fffa:	962e      	str	r6, [sp, #184]	; 0xb8
    fffc:	972d      	str	r7, [sp, #180]	; 0xb4
    fffe:	f77f aeb4 	ble.w	fd6a <_svfprintf_r+0x956>
   10002:	990c      	ldr	r1, [sp, #48]	; 0x30
   10004:	aa2c      	add	r2, sp, #176	; 0xb0
   10006:	4650      	mov	r0, sl
   10008:	f002 fa2e 	bl	12468 <__ssprint_r>
   1000c:	2800      	cmp	r0, #0
   1000e:	f47f ae6c 	bne.w	fcea <_svfprintf_r+0x8d6>
   10012:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
   10016:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   1001a:	e6a8      	b.n	fd6e <_svfprintf_r+0x95a>
   1001c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1001e:	1e5c      	subs	r4, r3, #1
   10020:	2c00      	cmp	r4, #0
   10022:	f77f aea4 	ble.w	fd6e <_svfprintf_r+0x95a>
   10026:	2c10      	cmp	r4, #16
   10028:	4d4e      	ldr	r5, [pc, #312]	; (10164 <_svfprintf_r+0xd50>)
   1002a:	f340 834c 	ble.w	106c6 <_svfprintf_r+0x12b2>
   1002e:	4632      	mov	r2, r6
   10030:	2310      	movs	r3, #16
   10032:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   10034:	e005      	b.n	10042 <_svfprintf_r+0xc2e>
   10036:	f109 0908 	add.w	r9, r9, #8
   1003a:	3c10      	subs	r4, #16
   1003c:	2c10      	cmp	r4, #16
   1003e:	f340 8341 	ble.w	106c4 <_svfprintf_r+0x12b0>
   10042:	3701      	adds	r7, #1
   10044:	3210      	adds	r2, #16
   10046:	2f07      	cmp	r7, #7
   10048:	e9c9 5300 	strd	r5, r3, [r9]
   1004c:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
   10050:	ddf1      	ble.n	10036 <_svfprintf_r+0xc22>
   10052:	aa2c      	add	r2, sp, #176	; 0xb0
   10054:	4631      	mov	r1, r6
   10056:	4650      	mov	r0, sl
   10058:	f002 fa06 	bl	12468 <__ssprint_r>
   1005c:	2800      	cmp	r0, #0
   1005e:	f47f ae44 	bne.w	fcea <_svfprintf_r+0x8d6>
   10062:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
   10066:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   1006a:	2310      	movs	r3, #16
   1006c:	e7e5      	b.n	1003a <_svfprintf_r+0xc26>
   1006e:	990c      	ldr	r1, [sp, #48]	; 0x30
   10070:	aa2c      	add	r2, sp, #176	; 0xb0
   10072:	4650      	mov	r0, sl
   10074:	f002 f9f8 	bl	12468 <__ssprint_r>
   10078:	2800      	cmp	r0, #0
   1007a:	f47f ae36 	bne.w	fcea <_svfprintf_r+0x8d6>
   1007e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10080:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10084:	f7ff bb38 	b.w	f6f8 <_svfprintf_r+0x2e4>
   10088:	f015 0310 	ands.w	r3, r5, #16
   1008c:	d160      	bne.n	10150 <_svfprintf_r+0xd3c>
   1008e:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   10092:	f000 8373 	beq.w	1077c <_svfprintf_r+0x1368>
   10096:	980e      	ldr	r0, [sp, #56]	; 0x38
   10098:	f850 2b04 	ldr.w	r2, [r0], #4
   1009c:	900e      	str	r0, [sp, #56]	; 0x38
   1009e:	4619      	mov	r1, r3
   100a0:	b292      	uxth	r2, r2
   100a2:	2301      	movs	r3, #1
   100a4:	e45a      	b.n	f95c <_svfprintf_r+0x548>
   100a6:	f01b 0310 	ands.w	r3, fp, #16
   100aa:	d168      	bne.n	1017e <_svfprintf_r+0xd6a>
   100ac:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
   100b0:	f000 8356 	beq.w	10760 <_svfprintf_r+0x134c>
   100b4:	980e      	ldr	r0, [sp, #56]	; 0x38
   100b6:	f850 2b04 	ldr.w	r2, [r0], #4
   100ba:	900e      	str	r0, [sp, #56]	; 0x38
   100bc:	4619      	mov	r1, r3
   100be:	b292      	uxth	r2, r2
   100c0:	e4af      	b.n	fa22 <_svfprintf_r+0x60e>
   100c2:	4252      	negs	r2, r2
   100c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   100c8:	465d      	mov	r5, fp
   100ca:	202d      	movs	r0, #45	; 0x2d
   100cc:	2301      	movs	r3, #1
   100ce:	e446      	b.n	f95e <_svfprintf_r+0x54a>
   100d0:	990c      	ldr	r1, [sp, #48]	; 0x30
   100d2:	aa2c      	add	r2, sp, #176	; 0xb0
   100d4:	4650      	mov	r0, sl
   100d6:	f002 f9c7 	bl	12468 <__ssprint_r>
   100da:	2800      	cmp	r0, #0
   100dc:	f47f ae05 	bne.w	fcea <_svfprintf_r+0x8d6>
   100e0:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
   100e4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   100e8:	e61b      	b.n	fd22 <_svfprintf_r+0x90e>
   100ea:	990c      	ldr	r1, [sp, #48]	; 0x30
   100ec:	aa2c      	add	r2, sp, #176	; 0xb0
   100ee:	4650      	mov	r0, sl
   100f0:	f002 f9ba 	bl	12468 <__ssprint_r>
   100f4:	2800      	cmp	r0, #0
   100f6:	f47f adf8 	bne.w	fcea <_svfprintf_r+0x8d6>
   100fa:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
   100fe:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10102:	e61b      	b.n	fd3c <_svfprintf_r+0x928>
   10104:	f01b 0f01 	tst.w	fp, #1
   10108:	f43f ab09 	beq.w	f71e <_svfprintf_r+0x30a>
   1010c:	e538      	b.n	fb80 <_svfprintf_r+0x76c>
   1010e:	930e      	str	r3, [sp, #56]	; 0x38
   10110:	f898 3000 	ldrb.w	r3, [r8]
   10114:	f7ff b9d7 	b.w	f4c6 <_svfprintf_r+0xb2>
   10118:	ac58      	add	r4, sp, #352	; 0x160
   1011a:	e4e5      	b.n	fae8 <_svfprintf_r+0x6d4>
   1011c:	f41b 7f00 	tst.w	fp, #512	; 0x200
   10120:	f040 83bd 	bne.w	1089e <_svfprintf_r+0x148a>
   10124:	f853 2b04 	ldr.w	r2, [r3], #4
   10128:	930e      	str	r3, [sp, #56]	; 0x38
   1012a:	17d1      	asrs	r1, r2, #31
   1012c:	460b      	mov	r3, r1
   1012e:	f7ff bbc4 	b.w	f8ba <_svfprintf_r+0x4a6>
   10132:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10134:	2b00      	cmp	r3, #0
   10136:	f43f aa4b 	beq.w	f5d0 <_svfprintf_r+0x1bc>
   1013a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1013c:	781b      	ldrb	r3, [r3, #0]
   1013e:	2b00      	cmp	r3, #0
   10140:	f43f aa46 	beq.w	f5d0 <_svfprintf_r+0x1bc>
   10144:	f898 3000 	ldrb.w	r3, [r8]
   10148:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
   1014c:	f7ff b9bb 	b.w	f4c6 <_svfprintf_r+0xb2>
   10150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10152:	f853 2b04 	ldr.w	r2, [r3], #4
   10156:	930e      	str	r3, [sp, #56]	; 0x38
   10158:	2301      	movs	r3, #1
   1015a:	f7ff bbff 	b.w	f95c <_svfprintf_r+0x548>
   1015e:	bf00      	nop
   10160:	00015fd4 	.word	0x00015fd4
   10164:	00015fe4 	.word	0x00015fe4
   10168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1016a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1016c:	f853 1b04 	ldr.w	r1, [r3], #4
   10170:	930e      	str	r3, [sp, #56]	; 0x38
   10172:	17c2      	asrs	r2, r0, #31
   10174:	e9c1 0200 	strd	r0, r2, [r1]
   10178:	4644      	mov	r4, r8
   1017a:	f7ff b979 	b.w	f470 <_svfprintf_r+0x5c>
   1017e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10180:	f853 2b04 	ldr.w	r2, [r3], #4
   10184:	930e      	str	r3, [sp, #56]	; 0x38
   10186:	e44c      	b.n	fa22 <_svfprintf_r+0x60e>
   10188:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   1018c:	4602      	mov	r2, r0
   1018e:	460b      	mov	r3, r1
   10190:	f7fd f860 	bl	d254 <__aeabi_dcmpun>
   10194:	2800      	cmp	r0, #0
   10196:	f040 8675 	bne.w	10e84 <_svfprintf_r+0x1a70>
   1019a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1019c:	2b61      	cmp	r3, #97	; 0x61
   1019e:	f000 855b 	beq.w	10c58 <_svfprintf_r+0x1844>
   101a2:	2b41      	cmp	r3, #65	; 0x41
   101a4:	f000 85ac 	beq.w	10d00 <_svfprintf_r+0x18ec>
   101a8:	9b08      	ldr	r3, [sp, #32]
   101aa:	3301      	adds	r3, #1
   101ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   101ae:	f023 0320 	bic.w	r3, r3, #32
   101b2:	9307      	str	r3, [sp, #28]
   101b4:	f000 8463 	beq.w	10a7e <_svfprintf_r+0x166a>
   101b8:	2b47      	cmp	r3, #71	; 0x47
   101ba:	d104      	bne.n	101c6 <_svfprintf_r+0xdb2>
   101bc:	9b08      	ldr	r3, [sp, #32]
   101be:	2b00      	cmp	r3, #0
   101c0:	bf08      	it	eq
   101c2:	2301      	moveq	r3, #1
   101c4:	9308      	str	r3, [sp, #32]
   101c6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   101ca:	460a      	mov	r2, r1
   101cc:	2a00      	cmp	r2, #0
   101ce:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   101d2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   101d6:	f2c0 85e1 	blt.w	10d9c <_svfprintf_r+0x1988>
   101da:	469b      	mov	fp, r3
   101dc:	2300      	movs	r3, #0
   101de:	4616      	mov	r6, r2
   101e0:	931e      	str	r3, [sp, #120]	; 0x78
   101e2:	4607      	mov	r7, r0
   101e4:	930d      	str	r3, [sp, #52]	; 0x34
   101e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   101e8:	3b41      	subs	r3, #65	; 0x41
   101ea:	2b25      	cmp	r3, #37	; 0x25
   101ec:	f200 8367 	bhi.w	108be <_svfprintf_r+0x14aa>
   101f0:	e8df f013 	tbh	[pc, r3, lsl #1]
   101f4:	03650452 	.word	0x03650452
   101f8:	03650365 	.word	0x03650365
   101fc:	044e0449 	.word	0x044e0449
   10200:	03650365 	.word	0x03650365
   10204:	03650365 	.word	0x03650365
   10208:	03650365 	.word	0x03650365
   1020c:	03650365 	.word	0x03650365
   10210:	03650365 	.word	0x03650365
   10214:	03650365 	.word	0x03650365
   10218:	03650365 	.word	0x03650365
   1021c:	03650365 	.word	0x03650365
   10220:	03650365 	.word	0x03650365
   10224:	03650365 	.word	0x03650365
   10228:	03650365 	.word	0x03650365
   1022c:	03650365 	.word	0x03650365
   10230:	03650365 	.word	0x03650365
   10234:	03650365 	.word	0x03650365
   10238:	03650365 	.word	0x03650365
   1023c:	044e0449 	.word	0x044e0449
   10240:	9310      	str	r3, [sp, #64]	; 0x40
   10242:	465d      	mov	r5, fp
   10244:	f7ff bbf4 	b.w	fa30 <_svfprintf_r+0x61c>
   10248:	9310      	str	r3, [sp, #64]	; 0x40
   1024a:	4bb7      	ldr	r3, [pc, #732]	; (10528 <_svfprintf_r+0x1114>)
   1024c:	9318      	str	r3, [sp, #96]	; 0x60
   1024e:	f01b 0120 	ands.w	r1, fp, #32
   10252:	f000 80fc 	beq.w	1044e <_svfprintf_r+0x103a>
   10256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10258:	3307      	adds	r3, #7
   1025a:	f023 0307 	bic.w	r3, r3, #7
   1025e:	6859      	ldr	r1, [r3, #4]
   10260:	f853 2b08 	ldr.w	r2, [r3], #8
   10264:	930e      	str	r3, [sp, #56]	; 0x38
   10266:	f01b 0f01 	tst.w	fp, #1
   1026a:	d00a      	beq.n	10282 <_svfprintf_r+0xe6e>
   1026c:	ea52 0301 	orrs.w	r3, r2, r1
   10270:	d007      	beq.n	10282 <_svfprintf_r+0xe6e>
   10272:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10274:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   10278:	2330      	movs	r3, #48	; 0x30
   1027a:	f04b 0b02 	orr.w	fp, fp, #2
   1027e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   10282:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
   10286:	2302      	movs	r3, #2
   10288:	f7ff bb68 	b.w	f95c <_svfprintf_r+0x548>
   1028c:	9310      	str	r3, [sp, #64]	; 0x40
   1028e:	f7ff bbbc 	b.w	fa0a <_svfprintf_r+0x5f6>
   10292:	9310      	str	r3, [sp, #64]	; 0x40
   10294:	4ba5      	ldr	r3, [pc, #660]	; (1052c <_svfprintf_r+0x1118>)
   10296:	9318      	str	r3, [sp, #96]	; 0x60
   10298:	e7d9      	b.n	1024e <_svfprintf_r+0xe3a>
   1029a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1029c:	2101      	movs	r1, #1
   1029e:	f853 2b04 	ldr.w	r2, [r3], #4
   102a2:	9107      	str	r1, [sp, #28]
   102a4:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
   102a8:	930e      	str	r3, [sp, #56]	; 0x38
   102aa:	910a      	str	r1, [sp, #40]	; 0x28
   102ac:	ac3f      	add	r4, sp, #252	; 0xfc
   102ae:	f7ff babb 	b.w	f828 <_svfprintf_r+0x414>
   102b2:	990c      	ldr	r1, [sp, #48]	; 0x30
   102b4:	aa2c      	add	r2, sp, #176	; 0xb0
   102b6:	4650      	mov	r0, sl
   102b8:	f002 f8d6 	bl	12468 <__ssprint_r>
   102bc:	2800      	cmp	r0, #0
   102be:	f47f ad14 	bne.w	fcea <_svfprintf_r+0x8d6>
   102c2:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   102c4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   102c8:	e468      	b.n	fb9c <_svfprintf_r+0x788>
   102ca:	2140      	movs	r1, #64	; 0x40
   102cc:	4650      	mov	r0, sl
   102ce:	f7fd fb19 	bl	d904 <_malloc_r>
   102d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   102d4:	6018      	str	r0, [r3, #0]
   102d6:	6118      	str	r0, [r3, #16]
   102d8:	2800      	cmp	r0, #0
   102da:	f000 8660 	beq.w	10f9e <_svfprintf_r+0x1b8a>
   102de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   102e0:	2340      	movs	r3, #64	; 0x40
   102e2:	6153      	str	r3, [r2, #20]
   102e4:	f7ff b8b2 	b.w	f44c <_svfprintf_r+0x38>
   102e8:	9b08      	ldr	r3, [sp, #32]
   102ea:	940d      	str	r4, [sp, #52]	; 0x34
   102ec:	2b06      	cmp	r3, #6
   102ee:	4621      	mov	r1, r4
   102f0:	bf28      	it	cs
   102f2:	2306      	movcs	r3, #6
   102f4:	9408      	str	r4, [sp, #32]
   102f6:	4622      	mov	r2, r4
   102f8:	9307      	str	r3, [sp, #28]
   102fa:	4c8d      	ldr	r4, [pc, #564]	; (10530 <_svfprintf_r+0x111c>)
   102fc:	970e      	str	r7, [sp, #56]	; 0x38
   102fe:	930a      	str	r3, [sp, #40]	; 0x28
   10300:	9112      	str	r1, [sp, #72]	; 0x48
   10302:	9116      	str	r1, [sp, #88]	; 0x58
   10304:	9111      	str	r1, [sp, #68]	; 0x44
   10306:	f7ff ba69 	b.w	f7dc <_svfprintf_r+0x3c8>
   1030a:	2f10      	cmp	r7, #16
   1030c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1030e:	4d89      	ldr	r5, [pc, #548]	; (10534 <_svfprintf_r+0x1120>)
   10310:	f340 8245 	ble.w	1079e <_svfprintf_r+0x138a>
   10314:	4632      	mov	r2, r6
   10316:	4626      	mov	r6, r4
   10318:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1031a:	e005      	b.n	10328 <_svfprintf_r+0xf14>
   1031c:	f109 0908 	add.w	r9, r9, #8
   10320:	3f10      	subs	r7, #16
   10322:	2f10      	cmp	r7, #16
   10324:	f340 8239 	ble.w	1079a <_svfprintf_r+0x1386>
   10328:	3301      	adds	r3, #1
   1032a:	3210      	adds	r2, #16
   1032c:	2110      	movs	r1, #16
   1032e:	2b07      	cmp	r3, #7
   10330:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   10334:	f8c9 5000 	str.w	r5, [r9]
   10338:	f8c9 1004 	str.w	r1, [r9, #4]
   1033c:	ddee      	ble.n	1031c <_svfprintf_r+0xf08>
   1033e:	aa2c      	add	r2, sp, #176	; 0xb0
   10340:	4621      	mov	r1, r4
   10342:	4650      	mov	r0, sl
   10344:	f002 f890 	bl	12468 <__ssprint_r>
   10348:	2800      	cmp	r0, #0
   1034a:	f47f acce 	bne.w	fcea <_svfprintf_r+0x8d6>
   1034e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   10352:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10356:	e7e3      	b.n	10320 <_svfprintf_r+0xf0c>
   10358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1035a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1035c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   10360:	464a      	mov	r2, r9
   10362:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   10366:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   1036a:	18e3      	adds	r3, r4, r3
   1036c:	9308      	str	r3, [sp, #32]
   1036e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   10370:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   10374:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   10378:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1037a:	9410      	str	r4, [sp, #64]	; 0x40
   1037c:	4631      	mov	r1, r6
   1037e:	f1b9 0f00 	cmp.w	r9, #0
   10382:	d02e      	beq.n	103e2 <_svfprintf_r+0xfce>
   10384:	bb83      	cbnz	r3, 103e8 <_svfprintf_r+0xfd4>
   10386:	3f01      	subs	r7, #1
   10388:	f109 39ff 	add.w	r9, r9, #4294967295
   1038c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1038e:	e9c2 3b00 	strd	r3, fp, [r2]
   10392:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10394:	3301      	adds	r3, #1
   10396:	4459      	add	r1, fp
   10398:	2b07      	cmp	r3, #7
   1039a:	912e      	str	r1, [sp, #184]	; 0xb8
   1039c:	932d      	str	r3, [sp, #180]	; 0xb4
   1039e:	dc5f      	bgt.n	10460 <_svfprintf_r+0x104c>
   103a0:	3208      	adds	r2, #8
   103a2:	9b08      	ldr	r3, [sp, #32]
   103a4:	7838      	ldrb	r0, [r7, #0]
   103a6:	1b5b      	subs	r3, r3, r5
   103a8:	4283      	cmp	r3, r0
   103aa:	bfa8      	it	ge
   103ac:	4603      	movge	r3, r0
   103ae:	2b00      	cmp	r3, #0
   103b0:	461e      	mov	r6, r3
   103b2:	dd0b      	ble.n	103cc <_svfprintf_r+0xfb8>
   103b4:	982d      	ldr	r0, [sp, #180]	; 0xb4
   103b6:	3001      	adds	r0, #1
   103b8:	4419      	add	r1, r3
   103ba:	2807      	cmp	r0, #7
   103bc:	e9c2 5300 	strd	r5, r3, [r2]
   103c0:	912e      	str	r1, [sp, #184]	; 0xb8
   103c2:	902d      	str	r0, [sp, #180]	; 0xb4
   103c4:	f300 8156 	bgt.w	10674 <_svfprintf_r+0x1260>
   103c8:	7838      	ldrb	r0, [r7, #0]
   103ca:	3208      	adds	r2, #8
   103cc:	2e00      	cmp	r6, #0
   103ce:	bfac      	ite	ge
   103d0:	1b84      	subge	r4, r0, r6
   103d2:	4604      	movlt	r4, r0
   103d4:	2c00      	cmp	r4, #0
   103d6:	dc0b      	bgt.n	103f0 <_svfprintf_r+0xfdc>
   103d8:	4405      	add	r5, r0
   103da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   103dc:	f1b9 0f00 	cmp.w	r9, #0
   103e0:	d1d0      	bne.n	10384 <_svfprintf_r+0xf70>
   103e2:	2b00      	cmp	r3, #0
   103e4:	f000 83d4 	beq.w	10b90 <_svfprintf_r+0x177c>
   103e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   103ea:	3b01      	subs	r3, #1
   103ec:	9312      	str	r3, [sp, #72]	; 0x48
   103ee:	e7cd      	b.n	1038c <_svfprintf_r+0xf78>
   103f0:	2c10      	cmp	r4, #16
   103f2:	982d      	ldr	r0, [sp, #180]	; 0xb4
   103f4:	dd1d      	ble.n	10432 <_svfprintf_r+0x101e>
   103f6:	2610      	movs	r6, #16
   103f8:	e004      	b.n	10404 <_svfprintf_r+0xff0>
   103fa:	3c10      	subs	r4, #16
   103fc:	2c10      	cmp	r4, #16
   103fe:	f102 0208 	add.w	r2, r2, #8
   10402:	dd16      	ble.n	10432 <_svfprintf_r+0x101e>
   10404:	3001      	adds	r0, #1
   10406:	4b4b      	ldr	r3, [pc, #300]	; (10534 <_svfprintf_r+0x1120>)
   10408:	3110      	adds	r1, #16
   1040a:	2807      	cmp	r0, #7
   1040c:	e9c2 3600 	strd	r3, r6, [r2]
   10410:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
   10414:	ddf1      	ble.n	103fa <_svfprintf_r+0xfe6>
   10416:	aa2c      	add	r2, sp, #176	; 0xb0
   10418:	4641      	mov	r1, r8
   1041a:	4650      	mov	r0, sl
   1041c:	f002 f824 	bl	12468 <__ssprint_r>
   10420:	2800      	cmp	r0, #0
   10422:	f47f ac62 	bne.w	fcea <_svfprintf_r+0x8d6>
   10426:	3c10      	subs	r4, #16
   10428:	2c10      	cmp	r4, #16
   1042a:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
   1042e:	aa2f      	add	r2, sp, #188	; 0xbc
   10430:	dce8      	bgt.n	10404 <_svfprintf_r+0xff0>
   10432:	3001      	adds	r0, #1
   10434:	4b3f      	ldr	r3, [pc, #252]	; (10534 <_svfprintf_r+0x1120>)
   10436:	6054      	str	r4, [r2, #4]
   10438:	4421      	add	r1, r4
   1043a:	2807      	cmp	r0, #7
   1043c:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
   10440:	6013      	str	r3, [r2, #0]
   10442:	f300 83fb 	bgt.w	10c3c <_svfprintf_r+0x1828>
   10446:	7838      	ldrb	r0, [r7, #0]
   10448:	3208      	adds	r2, #8
   1044a:	4405      	add	r5, r0
   1044c:	e7c5      	b.n	103da <_svfprintf_r+0xfc6>
   1044e:	f01b 0310 	ands.w	r3, fp, #16
   10452:	f000 80bc 	beq.w	105ce <_svfprintf_r+0x11ba>
   10456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10458:	f853 2b04 	ldr.w	r2, [r3], #4
   1045c:	930e      	str	r3, [sp, #56]	; 0x38
   1045e:	e702      	b.n	10266 <_svfprintf_r+0xe52>
   10460:	aa2c      	add	r2, sp, #176	; 0xb0
   10462:	4641      	mov	r1, r8
   10464:	4650      	mov	r0, sl
   10466:	f001 ffff 	bl	12468 <__ssprint_r>
   1046a:	2800      	cmp	r0, #0
   1046c:	f47f ac3d 	bne.w	fcea <_svfprintf_r+0x8d6>
   10470:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10472:	aa2f      	add	r2, sp, #188	; 0xbc
   10474:	e795      	b.n	103a2 <_svfprintf_r+0xf8e>
   10476:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1047a:	4b2f      	ldr	r3, [pc, #188]	; (10538 <_svfprintf_r+0x1124>)
   1047c:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   10480:	f8cd 801c 	str.w	r8, [sp, #28]
   10484:	f405 6780 	and.w	r7, r5, #1024	; 0x400
   10488:	f04f 0c00 	mov.w	ip, #0
   1048c:	ac58      	add	r4, sp, #352	; 0x160
   1048e:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
   10492:	950a      	str	r5, [sp, #40]	; 0x28
   10494:	e005      	b.n	104a2 <_svfprintf_r+0x108e>
   10496:	2a0a      	cmp	r2, #10
   10498:	f171 0100 	sbcs.w	r1, r1, #0
   1049c:	d334      	bcc.n	10508 <_svfprintf_r+0x10f4>
   1049e:	4642      	mov	r2, r8
   104a0:	4631      	mov	r1, r6
   104a2:	1850      	adds	r0, r2, r1
   104a4:	f140 0000 	adc.w	r0, r0, #0
   104a8:	fba3 5600 	umull	r5, r6, r3, r0
   104ac:	f026 0503 	bic.w	r5, r6, #3
   104b0:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   104b4:	1b40      	subs	r0, r0, r5
   104b6:	1a15      	subs	r5, r2, r0
   104b8:	f161 0e00 	sbc.w	lr, r1, #0
   104bc:	fb0b f605 	mul.w	r6, fp, r5
   104c0:	fb03 660e 	mla	r6, r3, lr, r6
   104c4:	fba5 8503 	umull	r8, r5, r5, r3
   104c8:	442e      	add	r6, r5
   104ca:	f008 0e01 	and.w	lr, r8, #1
   104ce:	2505      	movs	r5, #5
   104d0:	fbae 5e05 	umull	r5, lr, lr, r5
   104d4:	182d      	adds	r5, r5, r0
   104d6:	ea4f 0858 	mov.w	r8, r8, lsr #1
   104da:	3530      	adds	r5, #48	; 0x30
   104dc:	f804 5c01 	strb.w	r5, [r4, #-1]
   104e0:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
   104e4:	f10c 0c01 	add.w	ip, ip, #1
   104e8:	3c01      	subs	r4, #1
   104ea:	0876      	lsrs	r6, r6, #1
   104ec:	2f00      	cmp	r7, #0
   104ee:	d0d2      	beq.n	10496 <_svfprintf_r+0x1082>
   104f0:	f899 0000 	ldrb.w	r0, [r9]
   104f4:	4584      	cmp	ip, r0
   104f6:	d1ce      	bne.n	10496 <_svfprintf_r+0x1082>
   104f8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   104fc:	d0cb      	beq.n	10496 <_svfprintf_r+0x1082>
   104fe:	2a0a      	cmp	r2, #10
   10500:	f171 0100 	sbcs.w	r1, r1, #0
   10504:	f080 8198 	bcs.w	10838 <_svfprintf_r+0x1424>
   10508:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1050a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   1050e:	ab58      	add	r3, sp, #352	; 0x160
   10510:	1b1b      	subs	r3, r3, r4
   10512:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10516:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1051a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   1051e:	46ab      	mov	fp, r5
   10520:	930a      	str	r3, [sp, #40]	; 0x28
   10522:	f7ff bae1 	b.w	fae8 <_svfprintf_r+0x6d4>
   10526:	bf00      	nop
   10528:	00015fa4 	.word	0x00015fa4
   1052c:	00015fb8 	.word	0x00015fb8
   10530:	00015fcc 	.word	0x00015fcc
   10534:	00015fe4 	.word	0x00015fe4
   10538:	cccccccd 	.word	0xcccccccd
   1053c:	2301      	movs	r3, #1
   1053e:	f8c9 3004 	str.w	r3, [r9, #4]
   10542:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10544:	4aba      	ldr	r2, [pc, #744]	; (10830 <_svfprintf_r+0x141c>)
   10546:	f8c9 2000 	str.w	r2, [r9]
   1054a:	3301      	adds	r3, #1
   1054c:	3601      	adds	r6, #1
   1054e:	2b07      	cmp	r3, #7
   10550:	962e      	str	r6, [sp, #184]	; 0xb8
   10552:	932d      	str	r3, [sp, #180]	; 0xb4
   10554:	f300 818c 	bgt.w	10870 <_svfprintf_r+0x145c>
   10558:	f109 0908 	add.w	r9, r9, #8
   1055c:	2900      	cmp	r1, #0
   1055e:	f040 80be 	bne.w	106de <_svfprintf_r+0x12ca>
   10562:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10564:	f00b 0301 	and.w	r3, fp, #1
   10568:	4313      	orrs	r3, r2
   1056a:	f43f a8d8 	beq.w	f71e <_svfprintf_r+0x30a>
   1056e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10570:	9919      	ldr	r1, [sp, #100]	; 0x64
   10572:	199a      	adds	r2, r3, r6
   10574:	e9c9 1300 	strd	r1, r3, [r9]
   10578:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   1057a:	922e      	str	r2, [sp, #184]	; 0xb8
   1057c:	3301      	adds	r3, #1
   1057e:	2b07      	cmp	r3, #7
   10580:	932d      	str	r3, [sp, #180]	; 0xb4
   10582:	f300 826e 	bgt.w	10a62 <_svfprintf_r+0x164e>
   10586:	f109 0908 	add.w	r9, r9, #8
   1058a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1058c:	f8c9 4000 	str.w	r4, [r9]
   10590:	3301      	adds	r3, #1
   10592:	188e      	adds	r6, r1, r2
   10594:	2b07      	cmp	r3, #7
   10596:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   1059a:	f8c9 1004 	str.w	r1, [r9, #4]
   1059e:	f77f a8bc 	ble.w	f71a <_svfprintf_r+0x306>
   105a2:	f7ff bbf1 	b.w	fd88 <_svfprintf_r+0x974>
   105a6:	990c      	ldr	r1, [sp, #48]	; 0x30
   105a8:	931e      	str	r3, [sp, #120]	; 0x78
   105aa:	aa2c      	add	r2, sp, #176	; 0xb0
   105ac:	4650      	mov	r0, sl
   105ae:	f001 ff5b 	bl	12468 <__ssprint_r>
   105b2:	2800      	cmp	r0, #0
   105b4:	f47f ab99 	bne.w	fcea <_svfprintf_r+0x8d6>
   105b8:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   105bc:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   105be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   105c0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   105c4:	f7ff b86a 	b.w	f69c <_svfprintf_r+0x288>
   105c8:	46c2      	mov	sl, r8
   105ca:	f7ff bb8e 	b.w	fcea <_svfprintf_r+0x8d6>
   105ce:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
   105d2:	f000 80b8 	beq.w	10746 <_svfprintf_r+0x1332>
   105d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   105d8:	f850 2b04 	ldr.w	r2, [r0], #4
   105dc:	900e      	str	r0, [sp, #56]	; 0x38
   105de:	4619      	mov	r1, r3
   105e0:	b292      	uxth	r2, r2
   105e2:	e640      	b.n	10266 <_svfprintf_r+0xe52>
   105e4:	990c      	ldr	r1, [sp, #48]	; 0x30
   105e6:	aa2c      	add	r2, sp, #176	; 0xb0
   105e8:	4650      	mov	r0, sl
   105ea:	f001 ff3d 	bl	12468 <__ssprint_r>
   105ee:	2800      	cmp	r0, #0
   105f0:	f47f ab7b 	bne.w	fcea <_svfprintf_r+0x8d6>
   105f4:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   105f6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   105fa:	f7ff babc 	b.w	fb76 <_svfprintf_r+0x762>
   105fe:	ae2a      	add	r6, sp, #168	; 0xa8
   10600:	2208      	movs	r2, #8
   10602:	2100      	movs	r1, #0
   10604:	4630      	mov	r0, r6
   10606:	9425      	str	r4, [sp, #148]	; 0x94
   10608:	f7fd fff0 	bl	e5ec <memset>
   1060c:	9b08      	ldr	r3, [sp, #32]
   1060e:	1c5a      	adds	r2, r3, #1
   10610:	f000 80d4 	beq.w	107bc <_svfprintf_r+0x13a8>
   10614:	2500      	movs	r5, #0
   10616:	f8cd 801c 	str.w	r8, [sp, #28]
   1061a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   1061e:	46a8      	mov	r8, r5
   10620:	469b      	mov	fp, r3
   10622:	e00c      	b.n	1063e <_svfprintf_r+0x122a>
   10624:	a93f      	add	r1, sp, #252	; 0xfc
   10626:	4650      	mov	r0, sl
   10628:	f001 fed6 	bl	123d8 <_wcrtomb_r>
   1062c:	1c43      	adds	r3, r0, #1
   1062e:	4440      	add	r0, r8
   10630:	f000 83b8 	beq.w	10da4 <_svfprintf_r+0x1990>
   10634:	4558      	cmp	r0, fp
   10636:	dc08      	bgt.n	1064a <_svfprintf_r+0x1236>
   10638:	f000 8435 	beq.w	10ea6 <_svfprintf_r+0x1a92>
   1063c:	4680      	mov	r8, r0
   1063e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   10640:	5952      	ldr	r2, [r2, r5]
   10642:	4633      	mov	r3, r6
   10644:	3504      	adds	r5, #4
   10646:	2a00      	cmp	r2, #0
   10648:	d1ec      	bne.n	10624 <_svfprintf_r+0x1210>
   1064a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1064e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   10652:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10656:	e0be      	b.n	107d6 <_svfprintf_r+0x13c2>
   10658:	4616      	mov	r6, r2
   1065a:	3301      	adds	r3, #1
   1065c:	4426      	add	r6, r4
   1065e:	2b07      	cmp	r3, #7
   10660:	f8c9 5000 	str.w	r5, [r9]
   10664:	f8c9 4004 	str.w	r4, [r9, #4]
   10668:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   1066c:	f77f a855 	ble.w	f71a <_svfprintf_r+0x306>
   10670:	f7ff bb8a 	b.w	fd88 <_svfprintf_r+0x974>
   10674:	aa2c      	add	r2, sp, #176	; 0xb0
   10676:	4641      	mov	r1, r8
   10678:	4650      	mov	r0, sl
   1067a:	f001 fef5 	bl	12468 <__ssprint_r>
   1067e:	2800      	cmp	r0, #0
   10680:	f47f ab33 	bne.w	fcea <_svfprintf_r+0x8d6>
   10684:	7838      	ldrb	r0, [r7, #0]
   10686:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10688:	aa2f      	add	r2, sp, #188	; 0xbc
   1068a:	e69f      	b.n	103cc <_svfprintf_r+0xfb8>
   1068c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1068e:	aa2c      	add	r2, sp, #176	; 0xb0
   10690:	4650      	mov	r0, sl
   10692:	f001 fee9 	bl	12468 <__ssprint_r>
   10696:	2800      	cmp	r0, #0
   10698:	f47f ab27 	bne.w	fcea <_svfprintf_r+0x8d6>
   1069c:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   1069e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   106a2:	f7ff b823 	b.w	f6ec <_svfprintf_r+0x2d8>
   106a6:	2b01      	cmp	r3, #1
   106a8:	465d      	mov	r5, fp
   106aa:	f47f aa09 	bne.w	fac0 <_svfprintf_r+0x6ac>
   106ae:	f7ff bbb9 	b.w	fe24 <_svfprintf_r+0xa10>
   106b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   106b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   106b6:	f853 2b04 	ldr.w	r2, [r3], #4
   106ba:	4644      	mov	r4, r8
   106bc:	6011      	str	r1, [r2, #0]
   106be:	930e      	str	r3, [sp, #56]	; 0x38
   106c0:	f7fe bed6 	b.w	f470 <_svfprintf_r+0x5c>
   106c4:	4616      	mov	r6, r2
   106c6:	3701      	adds	r7, #1
   106c8:	4426      	add	r6, r4
   106ca:	2f07      	cmp	r7, #7
   106cc:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
   106d0:	f8c9 5000 	str.w	r5, [r9]
   106d4:	f8c9 4004 	str.w	r4, [r9, #4]
   106d8:	f77f ab47 	ble.w	fd6a <_svfprintf_r+0x956>
   106dc:	e491      	b.n	10002 <_svfprintf_r+0xbee>
   106de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   106e0:	9819      	ldr	r0, [sp, #100]	; 0x64
   106e2:	199a      	adds	r2, r3, r6
   106e4:	e9c9 0300 	strd	r0, r3, [r9]
   106e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   106ea:	922e      	str	r2, [sp, #184]	; 0xb8
   106ec:	3301      	adds	r3, #1
   106ee:	2b07      	cmp	r3, #7
   106f0:	932d      	str	r3, [sp, #180]	; 0xb4
   106f2:	f300 81b6 	bgt.w	10a62 <_svfprintf_r+0x164e>
   106f6:	f109 0908 	add.w	r9, r9, #8
   106fa:	2900      	cmp	r1, #0
   106fc:	f6bf af45 	bge.w	1058a <_svfprintf_r+0x1176>
   10700:	424f      	negs	r7, r1
   10702:	3110      	adds	r1, #16
   10704:	4d4b      	ldr	r5, [pc, #300]	; (10834 <_svfprintf_r+0x1420>)
   10706:	f280 8388 	bge.w	10e1a <_svfprintf_r+0x1a06>
   1070a:	4649      	mov	r1, r9
   1070c:	2610      	movs	r6, #16
   1070e:	46a1      	mov	r9, r4
   10710:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   10712:	e004      	b.n	1071e <_svfprintf_r+0x130a>
   10714:	3108      	adds	r1, #8
   10716:	3f10      	subs	r7, #16
   10718:	2f10      	cmp	r7, #16
   1071a:	f340 837c 	ble.w	10e16 <_svfprintf_r+0x1a02>
   1071e:	3301      	adds	r3, #1
   10720:	3210      	adds	r2, #16
   10722:	2b07      	cmp	r3, #7
   10724:	e9c1 5600 	strd	r5, r6, [r1]
   10728:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   1072c:	ddf2      	ble.n	10714 <_svfprintf_r+0x1300>
   1072e:	aa2c      	add	r2, sp, #176	; 0xb0
   10730:	4621      	mov	r1, r4
   10732:	4650      	mov	r0, sl
   10734:	f001 fe98 	bl	12468 <__ssprint_r>
   10738:	2800      	cmp	r0, #0
   1073a:	f47f aad6 	bne.w	fcea <_svfprintf_r+0x8d6>
   1073e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   10742:	a92f      	add	r1, sp, #188	; 0xbc
   10744:	e7e7      	b.n	10716 <_svfprintf_r+0x1302>
   10746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10748:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   1074c:	bf1a      	itte	ne
   1074e:	4611      	movne	r1, r2
   10750:	f853 2b04 	ldrne.w	r2, [r3], #4
   10754:	f853 2b04 	ldreq.w	r2, [r3], #4
   10758:	930e      	str	r3, [sp, #56]	; 0x38
   1075a:	bf18      	it	ne
   1075c:	b2d2      	uxtbne	r2, r2
   1075e:	e582      	b.n	10266 <_svfprintf_r+0xe52>
   10760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10762:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   10766:	bf1a      	itte	ne
   10768:	4611      	movne	r1, r2
   1076a:	f853 2b04 	ldrne.w	r2, [r3], #4
   1076e:	f853 2b04 	ldreq.w	r2, [r3], #4
   10772:	930e      	str	r3, [sp, #56]	; 0x38
   10774:	bf18      	it	ne
   10776:	b2d2      	uxtbne	r2, r2
   10778:	f7ff b953 	b.w	fa22 <_svfprintf_r+0x60e>
   1077c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1077e:	f415 7100 	ands.w	r1, r5, #512	; 0x200
   10782:	bf1a      	itte	ne
   10784:	4611      	movne	r1, r2
   10786:	f853 2b04 	ldrne.w	r2, [r3], #4
   1078a:	f853 2b04 	ldreq.w	r2, [r3], #4
   1078e:	930e      	str	r3, [sp, #56]	; 0x38
   10790:	bf18      	it	ne
   10792:	b2d2      	uxtbne	r2, r2
   10794:	2301      	movs	r3, #1
   10796:	f7ff b8e1 	b.w	f95c <_svfprintf_r+0x548>
   1079a:	4634      	mov	r4, r6
   1079c:	4616      	mov	r6, r2
   1079e:	3301      	adds	r3, #1
   107a0:	443e      	add	r6, r7
   107a2:	2b07      	cmp	r3, #7
   107a4:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   107a8:	f8c9 5000 	str.w	r5, [r9]
   107ac:	f8c9 7004 	str.w	r7, [r9, #4]
   107b0:	f300 814a 	bgt.w	10a48 <_svfprintf_r+0x1634>
   107b4:	f109 0908 	add.w	r9, r9, #8
   107b8:	f7ff bbb3 	b.w	ff22 <_svfprintf_r+0xb0e>
   107bc:	2300      	movs	r3, #0
   107be:	4619      	mov	r1, r3
   107c0:	9600      	str	r6, [sp, #0]
   107c2:	aa25      	add	r2, sp, #148	; 0x94
   107c4:	4650      	mov	r0, sl
   107c6:	f001 fe2d 	bl	12424 <_wcsrtombs_r>
   107ca:	4603      	mov	r3, r0
   107cc:	3301      	adds	r3, #1
   107ce:	900a      	str	r0, [sp, #40]	; 0x28
   107d0:	f000 82e8 	beq.w	10da4 <_svfprintf_r+0x1990>
   107d4:	9425      	str	r4, [sp, #148]	; 0x94
   107d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   107d8:	2b00      	cmp	r3, #0
   107da:	d03d      	beq.n	10858 <_svfprintf_r+0x1444>
   107dc:	2b63      	cmp	r3, #99	; 0x63
   107de:	f300 8129 	bgt.w	10a34 <_svfprintf_r+0x1620>
   107e2:	2300      	movs	r3, #0
   107e4:	930d      	str	r3, [sp, #52]	; 0x34
   107e6:	ac3f      	add	r4, sp, #252	; 0xfc
   107e8:	2208      	movs	r2, #8
   107ea:	2100      	movs	r1, #0
   107ec:	4630      	mov	r0, r6
   107ee:	f7fd fefd 	bl	e5ec <memset>
   107f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   107f4:	9600      	str	r6, [sp, #0]
   107f6:	462b      	mov	r3, r5
   107f8:	aa25      	add	r2, sp, #148	; 0x94
   107fa:	4621      	mov	r1, r4
   107fc:	4650      	mov	r0, sl
   107fe:	f001 fe11 	bl	12424 <_wcsrtombs_r>
   10802:	4285      	cmp	r5, r0
   10804:	f040 83c4 	bne.w	10f90 <_svfprintf_r+0x1b7c>
   10808:	990a      	ldr	r1, [sp, #40]	; 0x28
   1080a:	970e      	str	r7, [sp, #56]	; 0x38
   1080c:	2300      	movs	r3, #0
   1080e:	5463      	strb	r3, [r4, r1]
   10810:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   10814:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10818:	9308      	str	r3, [sp, #32]
   1081a:	9107      	str	r1, [sp, #28]
   1081c:	9312      	str	r3, [sp, #72]	; 0x48
   1081e:	9316      	str	r3, [sp, #88]	; 0x58
   10820:	9311      	str	r3, [sp, #68]	; 0x44
   10822:	f7fe bfdb 	b.w	f7dc <_svfprintf_r+0x3c8>
   10826:	222d      	movs	r2, #45	; 0x2d
   10828:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   1082c:	f7fe bfc5 	b.w	f7ba <_svfprintf_r+0x3a6>
   10830:	00014860 	.word	0x00014860
   10834:	00015fe4 	.word	0x00015fe4
   10838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1083a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1083c:	1ae4      	subs	r4, r4, r3
   1083e:	461a      	mov	r2, r3
   10840:	4620      	mov	r0, r4
   10842:	f7fd ff25 	bl	e690 <strncpy>
   10846:	f899 2001 	ldrb.w	r2, [r9, #1]
   1084a:	4ba5      	ldr	r3, [pc, #660]	; (10ae0 <_svfprintf_r+0x16cc>)
   1084c:	b10a      	cbz	r2, 10852 <_svfprintf_r+0x143e>
   1084e:	f109 0901 	add.w	r9, r9, #1
   10852:	f04f 0c00 	mov.w	ip, #0
   10856:	e622      	b.n	1049e <_svfprintf_r+0x108a>
   10858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1085a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   1085e:	970e      	str	r7, [sp, #56]	; 0x38
   10860:	e9cd 3307 	strd	r3, r3, [sp, #28]
   10864:	9312      	str	r3, [sp, #72]	; 0x48
   10866:	9316      	str	r3, [sp, #88]	; 0x58
   10868:	9311      	str	r3, [sp, #68]	; 0x44
   1086a:	930d      	str	r3, [sp, #52]	; 0x34
   1086c:	f7fe bfb6 	b.w	f7dc <_svfprintf_r+0x3c8>
   10870:	990c      	ldr	r1, [sp, #48]	; 0x30
   10872:	aa2c      	add	r2, sp, #176	; 0xb0
   10874:	4650      	mov	r0, sl
   10876:	f001 fdf7 	bl	12468 <__ssprint_r>
   1087a:	2800      	cmp	r0, #0
   1087c:	f47f aa35 	bne.w	fcea <_svfprintf_r+0x8d6>
   10880:	9923      	ldr	r1, [sp, #140]	; 0x8c
   10882:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10884:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10888:	e668      	b.n	1055c <_svfprintf_r+0x1148>
   1088a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1088c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1088e:	18a5      	adds	r5, r4, r2
   10890:	1a6d      	subs	r5, r5, r1
   10892:	1ad4      	subs	r4, r2, r3
   10894:	42a5      	cmp	r5, r4
   10896:	bfa8      	it	ge
   10898:	4625      	movge	r5, r4
   1089a:	f7ff bb77 	b.w	ff8c <_svfprintf_r+0xb78>
   1089e:	f913 2b04 	ldrsb.w	r2, [r3], #4
   108a2:	930e      	str	r3, [sp, #56]	; 0x38
   108a4:	17d1      	asrs	r1, r2, #31
   108a6:	460b      	mov	r3, r1
   108a8:	f7ff b807 	b.w	f8ba <_svfprintf_r+0x4a6>
   108ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108ae:	9909      	ldr	r1, [sp, #36]	; 0x24
   108b0:	f853 2b04 	ldr.w	r2, [r3], #4
   108b4:	930e      	str	r3, [sp, #56]	; 0x38
   108b6:	8011      	strh	r1, [r2, #0]
   108b8:	4644      	mov	r4, r8
   108ba:	f7fe bdd9 	b.w	f470 <_svfprintf_r+0x5c>
   108be:	9b08      	ldr	r3, [sp, #32]
   108c0:	930a      	str	r3, [sp, #40]	; 0x28
   108c2:	2302      	movs	r3, #2
   108c4:	a92a      	add	r1, sp, #168	; 0xa8
   108c6:	9104      	str	r1, [sp, #16]
   108c8:	a925      	add	r1, sp, #148	; 0x94
   108ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   108cc:	9103      	str	r1, [sp, #12]
   108ce:	a923      	add	r1, sp, #140	; 0x8c
   108d0:	9300      	str	r3, [sp, #0]
   108d2:	463a      	mov	r2, r7
   108d4:	4633      	mov	r3, r6
   108d6:	9501      	str	r5, [sp, #4]
   108d8:	9102      	str	r1, [sp, #8]
   108da:	4650      	mov	r0, sl
   108dc:	f000 fe20 	bl	11520 <_dtoa_r>
   108e0:	9b07      	ldr	r3, [sp, #28]
   108e2:	2b47      	cmp	r3, #71	; 0x47
   108e4:	4604      	mov	r4, r0
   108e6:	f000 81a3 	beq.w	10c30 <_svfprintf_r+0x181c>
   108ea:	2b46      	cmp	r3, #70	; 0x46
   108ec:	4405      	add	r5, r0
   108ee:	d105      	bne.n	108fc <_svfprintf_r+0x14e8>
   108f0:	7803      	ldrb	r3, [r0, #0]
   108f2:	2b30      	cmp	r3, #48	; 0x30
   108f4:	f000 82b8 	beq.w	10e68 <_svfprintf_r+0x1a54>
   108f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   108fa:	441d      	add	r5, r3
   108fc:	4638      	mov	r0, r7
   108fe:	4631      	mov	r1, r6
   10900:	2200      	movs	r2, #0
   10902:	2300      	movs	r3, #0
   10904:	f7fc fc74 	bl	d1f0 <__aeabi_dcmpeq>
   10908:	2800      	cmp	r0, #0
   1090a:	f000 8166 	beq.w	10bda <_svfprintf_r+0x17c6>
   1090e:	462b      	mov	r3, r5
   10910:	1b1b      	subs	r3, r3, r4
   10912:	9313      	str	r3, [sp, #76]	; 0x4c
   10914:	9b07      	ldr	r3, [sp, #28]
   10916:	2b47      	cmp	r3, #71	; 0x47
   10918:	f000 814a 	beq.w	10bb0 <_svfprintf_r+0x179c>
   1091c:	9b07      	ldr	r3, [sp, #28]
   1091e:	2b46      	cmp	r3, #70	; 0x46
   10920:	f000 8200 	beq.w	10d24 <_svfprintf_r+0x1910>
   10924:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10926:	9311      	str	r3, [sp, #68]	; 0x44
   10928:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1092a:	9a07      	ldr	r2, [sp, #28]
   1092c:	3b01      	subs	r3, #1
   1092e:	2a41      	cmp	r2, #65	; 0x41
   10930:	9323      	str	r3, [sp, #140]	; 0x8c
   10932:	f000 8223 	beq.w	10d7c <_svfprintf_r+0x1968>
   10936:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1093a:	2100      	movs	r1, #0
   1093c:	2b00      	cmp	r3, #0
   1093e:	bfb8      	it	lt
   10940:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
   10942:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   10946:	bfba      	itte	lt
   10948:	f1c3 0301 	rsblt	r3, r3, #1
   1094c:	222d      	movlt	r2, #45	; 0x2d
   1094e:	222b      	movge	r2, #43	; 0x2b
   10950:	2b09      	cmp	r3, #9
   10952:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   10956:	f340 824f 	ble.w	10df8 <_svfprintf_r+0x19e4>
   1095a:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
   1095e:	4e61      	ldr	r6, [pc, #388]	; (10ae4 <_svfprintf_r+0x16d0>)
   10960:	462a      	mov	r2, r5
   10962:	4610      	mov	r0, r2
   10964:	fb86 2103 	smull	r2, r1, r6, r3
   10968:	17da      	asrs	r2, r3, #31
   1096a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   1096e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   10972:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   10976:	3130      	adds	r1, #48	; 0x30
   10978:	f800 1c01 	strb.w	r1, [r0, #-1]
   1097c:	4619      	mov	r1, r3
   1097e:	2963      	cmp	r1, #99	; 0x63
   10980:	4613      	mov	r3, r2
   10982:	f100 32ff 	add.w	r2, r0, #4294967295
   10986:	dcec      	bgt.n	10962 <_svfprintf_r+0x154e>
   10988:	3330      	adds	r3, #48	; 0x30
   1098a:	b2d9      	uxtb	r1, r3
   1098c:	1e83      	subs	r3, r0, #2
   1098e:	429d      	cmp	r5, r3
   10990:	f802 1c01 	strb.w	r1, [r2, #-1]
   10994:	f240 82e9 	bls.w	10f6a <_svfprintf_r+0x1b56>
   10998:	4613      	mov	r3, r2
   1099a:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   1099e:	e001      	b.n	109a4 <_svfprintf_r+0x1590>
   109a0:	f813 1b01 	ldrb.w	r1, [r3], #1
   109a4:	f802 1b01 	strb.w	r1, [r2], #1
   109a8:	429d      	cmp	r5, r3
   109aa:	d1f9      	bne.n	109a0 <_svfprintf_r+0x158c>
   109ac:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
   109b0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   109b4:	1a1b      	subs	r3, r3, r0
   109b6:	4413      	add	r3, r2
   109b8:	aa26      	add	r2, sp, #152	; 0x98
   109ba:	1a9b      	subs	r3, r3, r2
   109bc:	931b      	str	r3, [sp, #108]	; 0x6c
   109be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   109c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   109c2:	2b01      	cmp	r3, #1
   109c4:	441a      	add	r2, r3
   109c6:	920a      	str	r2, [sp, #40]	; 0x28
   109c8:	f340 8249 	ble.w	10e5e <_svfprintf_r+0x1a4a>
   109cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   109ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   109d0:	4413      	add	r3, r2
   109d2:	930a      	str	r3, [sp, #40]	; 0x28
   109d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   109d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   109d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   109dc:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
   109e0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   109e4:	2300      	movs	r3, #0
   109e6:	9312      	str	r3, [sp, #72]	; 0x48
   109e8:	9207      	str	r2, [sp, #28]
   109ea:	9316      	str	r3, [sp, #88]	; 0x58
   109ec:	9311      	str	r3, [sp, #68]	; 0x44
   109ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   109f0:	2b00      	cmp	r3, #0
   109f2:	f040 80eb 	bne.w	10bcc <_svfprintf_r+0x17b8>
   109f6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   109fa:	9308      	str	r3, [sp, #32]
   109fc:	f7fe beee 	b.w	f7dc <_svfprintf_r+0x3c8>
   10a00:	4620      	mov	r0, r4
   10a02:	970e      	str	r7, [sp, #56]	; 0x38
   10a04:	f7fd ff1c 	bl	e840 <strlen>
   10a08:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10a0a:	9308      	str	r3, [sp, #32]
   10a0c:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   10a10:	9312      	str	r3, [sp, #72]	; 0x48
   10a12:	9316      	str	r3, [sp, #88]	; 0x58
   10a14:	930d      	str	r3, [sp, #52]	; 0x34
   10a16:	2373      	movs	r3, #115	; 0x73
   10a18:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10a1c:	900a      	str	r0, [sp, #40]	; 0x28
   10a1e:	9107      	str	r1, [sp, #28]
   10a20:	9310      	str	r3, [sp, #64]	; 0x40
   10a22:	f7fe bedb 	b.w	f7dc <_svfprintf_r+0x3c8>
   10a26:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a28:	aa2c      	add	r2, sp, #176	; 0xb0
   10a2a:	4650      	mov	r0, sl
   10a2c:	f001 fd1c 	bl	12468 <__ssprint_r>
   10a30:	f7fe bdf8 	b.w	f624 <_svfprintf_r+0x210>
   10a34:	1c59      	adds	r1, r3, #1
   10a36:	4650      	mov	r0, sl
   10a38:	f7fc ff64 	bl	d904 <_malloc_r>
   10a3c:	4604      	mov	r4, r0
   10a3e:	2800      	cmp	r0, #0
   10a40:	f000 81b0 	beq.w	10da4 <_svfprintf_r+0x1990>
   10a44:	900d      	str	r0, [sp, #52]	; 0x34
   10a46:	e6cf      	b.n	107e8 <_svfprintf_r+0x13d4>
   10a48:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a4a:	aa2c      	add	r2, sp, #176	; 0xb0
   10a4c:	4650      	mov	r0, sl
   10a4e:	f001 fd0b 	bl	12468 <__ssprint_r>
   10a52:	2800      	cmp	r0, #0
   10a54:	f47f a949 	bne.w	fcea <_svfprintf_r+0x8d6>
   10a58:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10a5a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10a5e:	f7ff ba60 	b.w	ff22 <_svfprintf_r+0xb0e>
   10a62:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a64:	aa2c      	add	r2, sp, #176	; 0xb0
   10a66:	4650      	mov	r0, sl
   10a68:	f001 fcfe 	bl	12468 <__ssprint_r>
   10a6c:	2800      	cmp	r0, #0
   10a6e:	f47f a93c 	bne.w	fcea <_svfprintf_r+0x8d6>
   10a72:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   10a76:	9923      	ldr	r1, [sp, #140]	; 0x8c
   10a78:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10a7c:	e63d      	b.n	106fa <_svfprintf_r+0x12e6>
   10a7e:	2306      	movs	r3, #6
   10a80:	9308      	str	r3, [sp, #32]
   10a82:	f7ff bba0 	b.w	101c6 <_svfprintf_r+0xdb2>
   10a86:	9b08      	ldr	r3, [sp, #32]
   10a88:	3301      	adds	r3, #1
   10a8a:	930a      	str	r3, [sp, #40]	; 0x28
   10a8c:	2302      	movs	r3, #2
   10a8e:	e719      	b.n	108c4 <_svfprintf_r+0x14b0>
   10a90:	9b08      	ldr	r3, [sp, #32]
   10a92:	930a      	str	r3, [sp, #40]	; 0x28
   10a94:	2303      	movs	r3, #3
   10a96:	e715      	b.n	108c4 <_svfprintf_r+0x14b0>
   10a98:	4638      	mov	r0, r7
   10a9a:	4631      	mov	r1, r6
   10a9c:	aa23      	add	r2, sp, #140	; 0x8c
   10a9e:	f000 fc17 	bl	112d0 <frexp>
   10aa2:	2200      	movs	r2, #0
   10aa4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   10aa8:	f003 f97a 	bl	13da0 <__aeabi_dmul>
   10aac:	2200      	movs	r2, #0
   10aae:	2300      	movs	r3, #0
   10ab0:	4606      	mov	r6, r0
   10ab2:	460f      	mov	r7, r1
   10ab4:	f7fc fb9c 	bl	d1f0 <__aeabi_dcmpeq>
   10ab8:	b108      	cbz	r0, 10abe <_svfprintf_r+0x16aa>
   10aba:	2301      	movs	r3, #1
   10abc:	9323      	str	r3, [sp, #140]	; 0x8c
   10abe:	4b0a      	ldr	r3, [pc, #40]	; (10ae8 <_svfprintf_r+0x16d4>)
   10ac0:	930a      	str	r3, [sp, #40]	; 0x28
   10ac2:	9b08      	ldr	r3, [sp, #32]
   10ac4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   10ac8:	3b01      	subs	r3, #1
   10aca:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
   10ace:	4625      	mov	r5, r4
   10ad0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10ad4:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
   10ad8:	4698      	mov	r8, r3
   10ada:	941f      	str	r4, [sp, #124]	; 0x7c
   10adc:	e00d      	b.n	10afa <_svfprintf_r+0x16e6>
   10ade:	bf00      	nop
   10ae0:	cccccccd 	.word	0xcccccccd
   10ae4:	66666667 	.word	0x66666667
   10ae8:	00015fb8 	.word	0x00015fb8
   10aec:	2200      	movs	r2, #0
   10aee:	2300      	movs	r3, #0
   10af0:	f108 38ff 	add.w	r8, r8, #4294967295
   10af4:	f7fc fb7c 	bl	d1f0 <__aeabi_dcmpeq>
   10af8:	b9e8      	cbnz	r0, 10b36 <_svfprintf_r+0x1722>
   10afa:	4bae      	ldr	r3, [pc, #696]	; (10db4 <_svfprintf_r+0x19a0>)
   10afc:	2200      	movs	r2, #0
   10afe:	4630      	mov	r0, r6
   10b00:	4639      	mov	r1, r7
   10b02:	f003 f94d 	bl	13da0 <__aeabi_dmul>
   10b06:	460f      	mov	r7, r1
   10b08:	4606      	mov	r6, r0
   10b0a:	f003 fb5b 	bl	141c4 <__aeabi_d2iz>
   10b0e:	4604      	mov	r4, r0
   10b10:	f7fc faae 	bl	d070 <__aeabi_i2d>
   10b14:	460b      	mov	r3, r1
   10b16:	4602      	mov	r2, r0
   10b18:	4639      	mov	r1, r7
   10b1a:	4630      	mov	r0, r6
   10b1c:	f7fc f95a 	bl	cdd4 <__aeabi_dsub>
   10b20:	f81b 3004 	ldrb.w	r3, [fp, r4]
   10b24:	f1b8 3fff 	cmp.w	r8, #4294967295
   10b28:	46aa      	mov	sl, r5
   10b2a:	46c1      	mov	r9, r8
   10b2c:	f805 3b01 	strb.w	r3, [r5], #1
   10b30:	4606      	mov	r6, r0
   10b32:	460f      	mov	r7, r1
   10b34:	d1da      	bne.n	10aec <_svfprintf_r+0x16d8>
   10b36:	4ba0      	ldr	r3, [pc, #640]	; (10db8 <_svfprintf_r+0x19a4>)
   10b38:	2200      	movs	r2, #0
   10b3a:	4630      	mov	r0, r6
   10b3c:	4639      	mov	r1, r7
   10b3e:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
   10b42:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   10b46:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   10b4a:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
   10b4e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   10b52:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   10b54:	f7fc fb74 	bl	d240 <__aeabi_dcmpgt>
   10b58:	2800      	cmp	r0, #0
   10b5a:	f040 8131 	bne.w	10dc0 <_svfprintf_r+0x19ac>
   10b5e:	4b96      	ldr	r3, [pc, #600]	; (10db8 <_svfprintf_r+0x19a4>)
   10b60:	4630      	mov	r0, r6
   10b62:	4639      	mov	r1, r7
   10b64:	2200      	movs	r2, #0
   10b66:	f7fc fb43 	bl	d1f0 <__aeabi_dcmpeq>
   10b6a:	b118      	cbz	r0, 10b74 <_svfprintf_r+0x1760>
   10b6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10b6e:	07de      	lsls	r6, r3, #31
   10b70:	f100 8126 	bmi.w	10dc0 <_svfprintf_r+0x19ac>
   10b74:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10b76:	2b00      	cmp	r3, #0
   10b78:	db07      	blt.n	10b8a <_svfprintf_r+0x1776>
   10b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10b7c:	3301      	adds	r3, #1
   10b7e:	442b      	add	r3, r5
   10b80:	2230      	movs	r2, #48	; 0x30
   10b82:	f805 2b01 	strb.w	r2, [r5], #1
   10b86:	42ab      	cmp	r3, r5
   10b88:	d1fb      	bne.n	10b82 <_svfprintf_r+0x176e>
   10b8a:	1b2b      	subs	r3, r5, r4
   10b8c:	9313      	str	r3, [sp, #76]	; 0x4c
   10b8e:	e6c1      	b.n	10914 <_svfprintf_r+0x1500>
   10b90:	9c10      	ldr	r4, [sp, #64]	; 0x40
   10b92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10b94:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10b98:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   10b9c:	971a      	str	r7, [sp, #104]	; 0x68
   10b9e:	18e3      	adds	r3, r4, r3
   10ba0:	429d      	cmp	r5, r3
   10ba2:	bf28      	it	cs
   10ba4:	461d      	movcs	r5, r3
   10ba6:	4691      	mov	r9, r2
   10ba8:	460e      	mov	r6, r1
   10baa:	950a      	str	r5, [sp, #40]	; 0x28
   10bac:	f7ff b9c0 	b.w	ff30 <_svfprintf_r+0xb1c>
   10bb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10bb2:	9311      	str	r3, [sp, #68]	; 0x44
   10bb4:	1cdd      	adds	r5, r3, #3
   10bb6:	db02      	blt.n	10bbe <_svfprintf_r+0x17aa>
   10bb8:	9a08      	ldr	r2, [sp, #32]
   10bba:	4293      	cmp	r3, r2
   10bbc:	dd19      	ble.n	10bf2 <_svfprintf_r+0x17de>
   10bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10bc0:	3b02      	subs	r3, #2
   10bc2:	9310      	str	r3, [sp, #64]	; 0x40
   10bc4:	f023 0320 	bic.w	r3, r3, #32
   10bc8:	9307      	str	r3, [sp, #28]
   10bca:	e6ad      	b.n	10928 <_svfprintf_r+0x1514>
   10bcc:	222d      	movs	r2, #45	; 0x2d
   10bce:	2300      	movs	r3, #0
   10bd0:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   10bd4:	9308      	str	r3, [sp, #32]
   10bd6:	f7fe be04 	b.w	f7e2 <_svfprintf_r+0x3ce>
   10bda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10bdc:	42ab      	cmp	r3, r5
   10bde:	f4bf ae97 	bcs.w	10910 <_svfprintf_r+0x14fc>
   10be2:	2130      	movs	r1, #48	; 0x30
   10be4:	1c5a      	adds	r2, r3, #1
   10be6:	922a      	str	r2, [sp, #168]	; 0xa8
   10be8:	7019      	strb	r1, [r3, #0]
   10bea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10bec:	429d      	cmp	r5, r3
   10bee:	d8f9      	bhi.n	10be4 <_svfprintf_r+0x17d0>
   10bf0:	e68e      	b.n	10910 <_svfprintf_r+0x14fc>
   10bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10bf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10bf6:	4293      	cmp	r3, r2
   10bf8:	f2c0 80c5 	blt.w	10d86 <_svfprintf_r+0x1972>
   10bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10bfe:	f013 0f01 	tst.w	r3, #1
   10c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10c04:	f000 814d 	beq.w	10ea2 <_svfprintf_r+0x1a8e>
   10c08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10c0a:	4413      	add	r3, r2
   10c0c:	930a      	str	r3, [sp, #40]	; 0x28
   10c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10c10:	0559      	lsls	r1, r3, #21
   10c12:	d503      	bpl.n	10c1c <_svfprintf_r+0x1808>
   10c14:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10c16:	2b00      	cmp	r3, #0
   10c18:	f300 8156 	bgt.w	10ec8 <_svfprintf_r+0x1ab4>
   10c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10c1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10c22:	9307      	str	r3, [sp, #28]
   10c24:	2367      	movs	r3, #103	; 0x67
   10c26:	9310      	str	r3, [sp, #64]	; 0x40
   10c28:	2300      	movs	r3, #0
   10c2a:	9312      	str	r3, [sp, #72]	; 0x48
   10c2c:	9316      	str	r3, [sp, #88]	; 0x58
   10c2e:	e6de      	b.n	109ee <_svfprintf_r+0x15da>
   10c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10c32:	07db      	lsls	r3, r3, #31
   10c34:	f100 809f 	bmi.w	10d76 <_svfprintf_r+0x1962>
   10c38:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10c3a:	e669      	b.n	10910 <_svfprintf_r+0x14fc>
   10c3c:	aa2c      	add	r2, sp, #176	; 0xb0
   10c3e:	4641      	mov	r1, r8
   10c40:	4650      	mov	r0, sl
   10c42:	f001 fc11 	bl	12468 <__ssprint_r>
   10c46:	2800      	cmp	r0, #0
   10c48:	f47f a84f 	bne.w	fcea <_svfprintf_r+0x8d6>
   10c4c:	7838      	ldrb	r0, [r7, #0]
   10c4e:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10c50:	aa2f      	add	r2, sp, #188	; 0xbc
   10c52:	4405      	add	r5, r0
   10c54:	f7ff bbc1 	b.w	103da <_svfprintf_r+0xfc6>
   10c58:	2378      	movs	r3, #120	; 0x78
   10c5a:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   10c5e:	2330      	movs	r3, #48	; 0x30
   10c60:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   10c64:	f04b 0302 	orr.w	r3, fp, #2
   10c68:	930f      	str	r3, [sp, #60]	; 0x3c
   10c6a:	9b08      	ldr	r3, [sp, #32]
   10c6c:	2b63      	cmp	r3, #99	; 0x63
   10c6e:	f300 80ed 	bgt.w	10e4c <_svfprintf_r+0x1a38>
   10c72:	2300      	movs	r3, #0
   10c74:	930d      	str	r3, [sp, #52]	; 0x34
   10c76:	ac3f      	add	r4, sp, #252	; 0xfc
   10c78:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   10c7c:	4613      	mov	r3, r2
   10c7e:	2b00      	cmp	r3, #0
   10c80:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
   10c84:	db67      	blt.n	10d56 <_svfprintf_r+0x1942>
   10c86:	461e      	mov	r6, r3
   10c88:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10c8a:	f023 0320 	bic.w	r3, r3, #32
   10c8e:	9307      	str	r3, [sp, #28]
   10c90:	2300      	movs	r3, #0
   10c92:	460f      	mov	r7, r1
   10c94:	931e      	str	r3, [sp, #120]	; 0x78
   10c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10c98:	2b61      	cmp	r3, #97	; 0x61
   10c9a:	f47f aaa4 	bne.w	101e6 <_svfprintf_r+0xdd2>
   10c9e:	4638      	mov	r0, r7
   10ca0:	4631      	mov	r1, r6
   10ca2:	aa23      	add	r2, sp, #140	; 0x8c
   10ca4:	f000 fb14 	bl	112d0 <frexp>
   10ca8:	2200      	movs	r2, #0
   10caa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   10cae:	f003 f877 	bl	13da0 <__aeabi_dmul>
   10cb2:	2200      	movs	r2, #0
   10cb4:	2300      	movs	r3, #0
   10cb6:	4606      	mov	r6, r0
   10cb8:	460f      	mov	r7, r1
   10cba:	f7fc fa99 	bl	d1f0 <__aeabi_dcmpeq>
   10cbe:	b108      	cbz	r0, 10cc4 <_svfprintf_r+0x18b0>
   10cc0:	2301      	movs	r3, #1
   10cc2:	9323      	str	r3, [sp, #140]	; 0x8c
   10cc4:	4b3d      	ldr	r3, [pc, #244]	; (10dbc <_svfprintf_r+0x19a8>)
   10cc6:	930a      	str	r3, [sp, #40]	; 0x28
   10cc8:	e6fb      	b.n	10ac2 <_svfprintf_r+0x16ae>
   10cca:	990c      	ldr	r1, [sp, #48]	; 0x30
   10ccc:	aa2c      	add	r2, sp, #176	; 0xb0
   10cce:	4650      	mov	r0, sl
   10cd0:	f001 fbca 	bl	12468 <__ssprint_r>
   10cd4:	2800      	cmp	r0, #0
   10cd6:	f47f a808 	bne.w	fcea <_svfprintf_r+0x8d6>
   10cda:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10cdc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10ce0:	f7ff b918 	b.w	ff14 <_svfprintf_r+0xb00>
   10ce4:	990c      	ldr	r1, [sp, #48]	; 0x30
   10ce6:	aa2c      	add	r2, sp, #176	; 0xb0
   10ce8:	4650      	mov	r0, sl
   10cea:	f001 fbbd 	bl	12468 <__ssprint_r>
   10cee:	2800      	cmp	r0, #0
   10cf0:	f47e affb 	bne.w	fcea <_svfprintf_r+0x8d6>
   10cf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10cf6:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10cf8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10cfc:	f7ff b92e 	b.w	ff5c <_svfprintf_r+0xb48>
   10d00:	2358      	movs	r3, #88	; 0x58
   10d02:	e7aa      	b.n	10c5a <_svfprintf_r+0x1846>
   10d04:	990c      	ldr	r1, [sp, #48]	; 0x30
   10d06:	aa2c      	add	r2, sp, #176	; 0xb0
   10d08:	4650      	mov	r0, sl
   10d0a:	f001 fbad 	bl	12468 <__ssprint_r>
   10d0e:	2800      	cmp	r0, #0
   10d10:	f47e afeb 	bne.w	fcea <_svfprintf_r+0x8d6>
   10d14:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   10d16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10d18:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10d1a:	1b1c      	subs	r4, r3, r4
   10d1c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10d20:	f7ff b934 	b.w	ff8c <_svfprintf_r+0xb78>
   10d24:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   10d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10d28:	9211      	str	r2, [sp, #68]	; 0x44
   10d2a:	2a00      	cmp	r2, #0
   10d2c:	f003 0301 	and.w	r3, r3, #1
   10d30:	f340 8108 	ble.w	10f44 <_svfprintf_r+0x1b30>
   10d34:	9908      	ldr	r1, [sp, #32]
   10d36:	430b      	orrs	r3, r1
   10d38:	f040 80fd 	bne.w	10f36 <_svfprintf_r+0x1b22>
   10d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10d3e:	930a      	str	r3, [sp, #40]	; 0x28
   10d40:	2366      	movs	r3, #102	; 0x66
   10d42:	9310      	str	r3, [sp, #64]	; 0x40
   10d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10d46:	055a      	lsls	r2, r3, #21
   10d48:	f100 80c0 	bmi.w	10ecc <_svfprintf_r+0x1ab8>
   10d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10d52:	9307      	str	r3, [sp, #28]
   10d54:	e768      	b.n	10c28 <_svfprintf_r+0x1814>
   10d56:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10d58:	f023 0320 	bic.w	r3, r3, #32
   10d5c:	9307      	str	r3, [sp, #28]
   10d5e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   10d62:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
   10d66:	232d      	movs	r3, #45	; 0x2d
   10d68:	4617      	mov	r7, r2
   10d6a:	931e      	str	r3, [sp, #120]	; 0x78
   10d6c:	e793      	b.n	10c96 <_svfprintf_r+0x1882>
   10d6e:	2200      	movs	r2, #0
   10d70:	9208      	str	r2, [sp, #32]
   10d72:	f7fe bbaa 	b.w	f4ca <_svfprintf_r+0xb6>
   10d76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10d78:	4425      	add	r5, r4
   10d7a:	e5bf      	b.n	108fc <_svfprintf_r+0x14e8>
   10d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10d7e:	320f      	adds	r2, #15
   10d80:	b2d2      	uxtb	r2, r2
   10d82:	2101      	movs	r1, #1
   10d84:	e5da      	b.n	1093c <_svfprintf_r+0x1528>
   10d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10d88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10d8a:	189a      	adds	r2, r3, r2
   10d8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10d8e:	920a      	str	r2, [sp, #40]	; 0x28
   10d90:	2b00      	cmp	r3, #0
   10d92:	f340 808f 	ble.w	10eb4 <_svfprintf_r+0x1aa0>
   10d96:	2367      	movs	r3, #103	; 0x67
   10d98:	9310      	str	r3, [sp, #64]	; 0x40
   10d9a:	e7d3      	b.n	10d44 <_svfprintf_r+0x1930>
   10d9c:	469b      	mov	fp, r3
   10d9e:	2300      	movs	r3, #0
   10da0:	930d      	str	r3, [sp, #52]	; 0x34
   10da2:	e7dc      	b.n	10d5e <_svfprintf_r+0x194a>
   10da4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10da6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dae:	8193      	strh	r3, [r2, #12]
   10db0:	f7fe bc3b 	b.w	f62a <_svfprintf_r+0x216>
   10db4:	40300000 	.word	0x40300000
   10db8:	3fe00000 	.word	0x3fe00000
   10dbc:	00015fa4 	.word	0x00015fa4
   10dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10dc4:	932a      	str	r3, [sp, #168]	; 0xa8
   10dc6:	7bd1      	ldrb	r1, [r2, #15]
   10dc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10dcc:	428b      	cmp	r3, r1
   10dce:	462a      	mov	r2, r5
   10dd0:	d109      	bne.n	10de6 <_svfprintf_r+0x19d2>
   10dd2:	2030      	movs	r0, #48	; 0x30
   10dd4:	f802 0c01 	strb.w	r0, [r2, #-1]
   10dd8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   10dda:	1e53      	subs	r3, r2, #1
   10ddc:	932a      	str	r3, [sp, #168]	; 0xa8
   10dde:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   10de2:	4299      	cmp	r1, r3
   10de4:	d0f6      	beq.n	10dd4 <_svfprintf_r+0x19c0>
   10de6:	2b39      	cmp	r3, #57	; 0x39
   10de8:	bf0b      	itete	eq
   10dea:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   10dec:	3301      	addne	r3, #1
   10dee:	7a9b      	ldrbeq	r3, [r3, #10]
   10df0:	b2db      	uxtbne	r3, r3
   10df2:	f802 3c01 	strb.w	r3, [r2, #-1]
   10df6:	e6c8      	b.n	10b8a <_svfprintf_r+0x1776>
   10df8:	2900      	cmp	r1, #0
   10dfa:	f040 808c 	bne.w	10f16 <_svfprintf_r+0x1b02>
   10dfe:	2230      	movs	r2, #48	; 0x30
   10e00:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   10e04:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   10e08:	3330      	adds	r3, #48	; 0x30
   10e0a:	f802 3b01 	strb.w	r3, [r2], #1
   10e0e:	ab26      	add	r3, sp, #152	; 0x98
   10e10:	1ad3      	subs	r3, r2, r3
   10e12:	931b      	str	r3, [sp, #108]	; 0x6c
   10e14:	e5d3      	b.n	109be <_svfprintf_r+0x15aa>
   10e16:	464c      	mov	r4, r9
   10e18:	4689      	mov	r9, r1
   10e1a:	3301      	adds	r3, #1
   10e1c:	443a      	add	r2, r7
   10e1e:	2b07      	cmp	r3, #7
   10e20:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   10e24:	f8c9 5000 	str.w	r5, [r9]
   10e28:	f8c9 7004 	str.w	r7, [r9, #4]
   10e2c:	f77f abab 	ble.w	10586 <_svfprintf_r+0x1172>
   10e30:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e32:	aa2c      	add	r2, sp, #176	; 0xb0
   10e34:	4650      	mov	r0, sl
   10e36:	f001 fb17 	bl	12468 <__ssprint_r>
   10e3a:	2800      	cmp	r0, #0
   10e3c:	f47e af55 	bne.w	fcea <_svfprintf_r+0x8d6>
   10e40:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   10e44:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10e48:	f7ff bb9f 	b.w	1058a <_svfprintf_r+0x1176>
   10e4c:	1c59      	adds	r1, r3, #1
   10e4e:	4650      	mov	r0, sl
   10e50:	f7fc fd58 	bl	d904 <_malloc_r>
   10e54:	4604      	mov	r4, r0
   10e56:	2800      	cmp	r0, #0
   10e58:	d0a4      	beq.n	10da4 <_svfprintf_r+0x1990>
   10e5a:	900d      	str	r0, [sp, #52]	; 0x34
   10e5c:	e70c      	b.n	10c78 <_svfprintf_r+0x1864>
   10e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10e60:	07d8      	lsls	r0, r3, #31
   10e62:	f57f adb7 	bpl.w	109d4 <_svfprintf_r+0x15c0>
   10e66:	e5b1      	b.n	109cc <_svfprintf_r+0x15b8>
   10e68:	4638      	mov	r0, r7
   10e6a:	4631      	mov	r1, r6
   10e6c:	2200      	movs	r2, #0
   10e6e:	2300      	movs	r3, #0
   10e70:	f7fc f9be 	bl	d1f0 <__aeabi_dcmpeq>
   10e74:	2800      	cmp	r0, #0
   10e76:	f47f ad3f 	bne.w	108f8 <_svfprintf_r+0x14e4>
   10e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e7c:	f1c3 0301 	rsb	r3, r3, #1
   10e80:	9323      	str	r3, [sp, #140]	; 0x8c
   10e82:	e53a      	b.n	108fa <_svfprintf_r+0x14e6>
   10e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10e86:	4c4a      	ldr	r4, [pc, #296]	; (10fb0 <_svfprintf_r+0x1b9c>)
   10e88:	2b00      	cmp	r3, #0
   10e8a:	bfb4      	ite	lt
   10e8c:	222d      	movlt	r2, #45	; 0x2d
   10e8e:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
   10e92:	4b48      	ldr	r3, [pc, #288]	; (10fb4 <_svfprintf_r+0x1ba0>)
   10e94:	bfb8      	it	lt
   10e96:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
   10e9a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10e9e:	f7fe bc90 	b.w	f7c2 <_svfprintf_r+0x3ae>
   10ea2:	930a      	str	r3, [sp, #40]	; 0x28
   10ea4:	e6b3      	b.n	10c0e <_svfprintf_r+0x17fa>
   10ea6:	9b08      	ldr	r3, [sp, #32]
   10ea8:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10eac:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   10eb0:	930a      	str	r3, [sp, #40]	; 0x28
   10eb2:	e490      	b.n	107d6 <_svfprintf_r+0x13c2>
   10eb4:	f1c3 0301 	rsb	r3, r3, #1
   10eb8:	441a      	add	r2, r3
   10eba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10ebe:	9307      	str	r3, [sp, #28]
   10ec0:	2367      	movs	r3, #103	; 0x67
   10ec2:	920a      	str	r2, [sp, #40]	; 0x28
   10ec4:	9310      	str	r3, [sp, #64]	; 0x40
   10ec6:	e6af      	b.n	10c28 <_svfprintf_r+0x1814>
   10ec8:	2367      	movs	r3, #103	; 0x67
   10eca:	9310      	str	r3, [sp, #64]	; 0x40
   10ecc:	991a      	ldr	r1, [sp, #104]	; 0x68
   10ece:	780b      	ldrb	r3, [r1, #0]
   10ed0:	2bff      	cmp	r3, #255	; 0xff
   10ed2:	d059      	beq.n	10f88 <_svfprintf_r+0x1b74>
   10ed4:	2500      	movs	r5, #0
   10ed6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10ed8:	4628      	mov	r0, r5
   10eda:	e003      	b.n	10ee4 <_svfprintf_r+0x1ad0>
   10edc:	3001      	adds	r0, #1
   10ede:	3101      	adds	r1, #1
   10ee0:	2bff      	cmp	r3, #255	; 0xff
   10ee2:	d008      	beq.n	10ef6 <_svfprintf_r+0x1ae2>
   10ee4:	4293      	cmp	r3, r2
   10ee6:	da06      	bge.n	10ef6 <_svfprintf_r+0x1ae2>
   10ee8:	1ad2      	subs	r2, r2, r3
   10eea:	784b      	ldrb	r3, [r1, #1]
   10eec:	2b00      	cmp	r3, #0
   10eee:	d1f5      	bne.n	10edc <_svfprintf_r+0x1ac8>
   10ef0:	780b      	ldrb	r3, [r1, #0]
   10ef2:	3501      	adds	r5, #1
   10ef4:	e7f4      	b.n	10ee0 <_svfprintf_r+0x1acc>
   10ef6:	9211      	str	r2, [sp, #68]	; 0x44
   10ef8:	911a      	str	r1, [sp, #104]	; 0x68
   10efa:	9016      	str	r0, [sp, #88]	; 0x58
   10efc:	9512      	str	r5, [sp, #72]	; 0x48
   10efe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10f00:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10f02:	991d      	ldr	r1, [sp, #116]	; 0x74
   10f04:	4413      	add	r3, r2
   10f06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10f08:	fb01 2303 	mla	r3, r1, r3, r2
   10f0c:	930a      	str	r3, [sp, #40]	; 0x28
   10f0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10f12:	9307      	str	r3, [sp, #28]
   10f14:	e56b      	b.n	109ee <_svfprintf_r+0x15da>
   10f16:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10f1a:	e775      	b.n	10e08 <_svfprintf_r+0x19f4>
   10f1c:	9b08      	ldr	r3, [sp, #32]
   10f1e:	9307      	str	r3, [sp, #28]
   10f20:	930a      	str	r3, [sp, #40]	; 0x28
   10f22:	2373      	movs	r3, #115	; 0x73
   10f24:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10f28:	970e      	str	r7, [sp, #56]	; 0x38
   10f2a:	9008      	str	r0, [sp, #32]
   10f2c:	9012      	str	r0, [sp, #72]	; 0x48
   10f2e:	9016      	str	r0, [sp, #88]	; 0x58
   10f30:	9310      	str	r3, [sp, #64]	; 0x40
   10f32:	f7fe bc53 	b.w	f7dc <_svfprintf_r+0x3c8>
   10f36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10f38:	18d5      	adds	r5, r2, r3
   10f3a:	4429      	add	r1, r5
   10f3c:	2366      	movs	r3, #102	; 0x66
   10f3e:	910a      	str	r1, [sp, #40]	; 0x28
   10f40:	9310      	str	r3, [sp, #64]	; 0x40
   10f42:	e6ff      	b.n	10d44 <_svfprintf_r+0x1930>
   10f44:	9a08      	ldr	r2, [sp, #32]
   10f46:	4313      	orrs	r3, r2
   10f48:	d105      	bne.n	10f56 <_svfprintf_r+0x1b42>
   10f4a:	2301      	movs	r3, #1
   10f4c:	2266      	movs	r2, #102	; 0x66
   10f4e:	9307      	str	r3, [sp, #28]
   10f50:	9210      	str	r2, [sp, #64]	; 0x40
   10f52:	930a      	str	r3, [sp, #40]	; 0x28
   10f54:	e668      	b.n	10c28 <_svfprintf_r+0x1814>
   10f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10f58:	1c5d      	adds	r5, r3, #1
   10f5a:	442a      	add	r2, r5
   10f5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10f60:	9307      	str	r3, [sp, #28]
   10f62:	2366      	movs	r3, #102	; 0x66
   10f64:	920a      	str	r2, [sp, #40]	; 0x28
   10f66:	9310      	str	r3, [sp, #64]	; 0x40
   10f68:	e65e      	b.n	10c28 <_svfprintf_r+0x1814>
   10f6a:	2302      	movs	r3, #2
   10f6c:	931b      	str	r3, [sp, #108]	; 0x6c
   10f6e:	e526      	b.n	109be <_svfprintf_r+0x15aa>
   10f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10f72:	f898 3001 	ldrb.w	r3, [r8, #1]
   10f76:	4688      	mov	r8, r1
   10f78:	f852 1b04 	ldr.w	r1, [r2], #4
   10f7c:	920e      	str	r2, [sp, #56]	; 0x38
   10f7e:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   10f82:	9108      	str	r1, [sp, #32]
   10f84:	f7fe ba9f 	b.w	f4c6 <_svfprintf_r+0xb2>
   10f88:	2300      	movs	r3, #0
   10f8a:	9312      	str	r3, [sp, #72]	; 0x48
   10f8c:	9316      	str	r3, [sp, #88]	; 0x58
   10f8e:	e7b6      	b.n	10efe <_svfprintf_r+0x1aea>
   10f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10f92:	8993      	ldrh	r3, [r2, #12]
   10f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10f98:	8193      	strh	r3, [r2, #12]
   10f9a:	f7fe bea6 	b.w	fcea <_svfprintf_r+0x8d6>
   10f9e:	230c      	movs	r3, #12
   10fa0:	f8ca 3000 	str.w	r3, [sl]
   10fa4:	f04f 33ff 	mov.w	r3, #4294967295
   10fa8:	9309      	str	r3, [sp, #36]	; 0x24
   10faa:	f7fe bb45 	b.w	f638 <_svfprintf_r+0x224>
   10fae:	bf00      	nop
   10fb0:	00015fa0 	.word	0x00015fa0
   10fb4:	00015b24 	.word	0x00015b24

00010fb8 <_fclose_r>:
   10fb8:	b570      	push	{r4, r5, r6, lr}
   10fba:	2900      	cmp	r1, #0
   10fbc:	d04b      	beq.n	11056 <_fclose_r+0x9e>
   10fbe:	4606      	mov	r6, r0
   10fc0:	460c      	mov	r4, r1
   10fc2:	b110      	cbz	r0, 10fca <_fclose_r+0x12>
   10fc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10fc6:	2b00      	cmp	r3, #0
   10fc8:	d048      	beq.n	1105c <_fclose_r+0xa4>
   10fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10fcc:	07d8      	lsls	r0, r3, #31
   10fce:	d534      	bpl.n	1103a <_fclose_r+0x82>
   10fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	d03e      	beq.n	11056 <_fclose_r+0x9e>
   10fd8:	4621      	mov	r1, r4
   10fda:	4630      	mov	r0, r6
   10fdc:	f000 f850 	bl	11080 <__sflush_r>
   10fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10fe2:	4605      	mov	r5, r0
   10fe4:	b133      	cbz	r3, 10ff4 <_fclose_r+0x3c>
   10fe6:	69e1      	ldr	r1, [r4, #28]
   10fe8:	4630      	mov	r0, r6
   10fea:	4798      	blx	r3
   10fec:	2800      	cmp	r0, #0
   10fee:	bfb8      	it	lt
   10ff0:	f04f 35ff 	movlt.w	r5, #4294967295
   10ff4:	89a3      	ldrh	r3, [r4, #12]
   10ff6:	061a      	lsls	r2, r3, #24
   10ff8:	d43c      	bmi.n	11074 <_fclose_r+0xbc>
   10ffa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10ffc:	b141      	cbz	r1, 11010 <_fclose_r+0x58>
   10ffe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11002:	4299      	cmp	r1, r3
   11004:	d002      	beq.n	1100c <_fclose_r+0x54>
   11006:	4630      	mov	r0, r6
   11008:	f7fd fd2c 	bl	ea64 <_free_r>
   1100c:	2300      	movs	r3, #0
   1100e:	6323      	str	r3, [r4, #48]	; 0x30
   11010:	6c61      	ldr	r1, [r4, #68]	; 0x44
   11012:	b121      	cbz	r1, 1101e <_fclose_r+0x66>
   11014:	4630      	mov	r0, r6
   11016:	f7fd fd25 	bl	ea64 <_free_r>
   1101a:	2300      	movs	r3, #0
   1101c:	6463      	str	r3, [r4, #68]	; 0x44
   1101e:	f7fd f9d3 	bl	e3c8 <__sfp_lock_acquire>
   11022:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11024:	2200      	movs	r2, #0
   11026:	07db      	lsls	r3, r3, #31
   11028:	81a2      	strh	r2, [r4, #12]
   1102a:	d51f      	bpl.n	1106c <_fclose_r+0xb4>
   1102c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1102e:	f7fd fbf9 	bl	e824 <__retarget_lock_close_recursive>
   11032:	f7fd f9cf 	bl	e3d4 <__sfp_lock_release>
   11036:	4628      	mov	r0, r5
   11038:	bd70      	pop	{r4, r5, r6, pc}
   1103a:	89a3      	ldrh	r3, [r4, #12]
   1103c:	0599      	lsls	r1, r3, #22
   1103e:	d4cb      	bmi.n	10fd8 <_fclose_r+0x20>
   11040:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11042:	f7fd fbf1 	bl	e828 <__retarget_lock_acquire_recursive>
   11046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1104a:	2b00      	cmp	r3, #0
   1104c:	d1c4      	bne.n	10fd8 <_fclose_r+0x20>
   1104e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   11050:	f015 0501 	ands.w	r5, r5, #1
   11054:	d005      	beq.n	11062 <_fclose_r+0xaa>
   11056:	2500      	movs	r5, #0
   11058:	4628      	mov	r0, r5
   1105a:	bd70      	pop	{r4, r5, r6, pc}
   1105c:	f7fd f996 	bl	e38c <__sinit>
   11060:	e7b3      	b.n	10fca <_fclose_r+0x12>
   11062:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11064:	f7fd fbe2 	bl	e82c <__retarget_lock_release_recursive>
   11068:	4628      	mov	r0, r5
   1106a:	bd70      	pop	{r4, r5, r6, pc}
   1106c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1106e:	f7fd fbdd 	bl	e82c <__retarget_lock_release_recursive>
   11072:	e7db      	b.n	1102c <_fclose_r+0x74>
   11074:	6921      	ldr	r1, [r4, #16]
   11076:	4630      	mov	r0, r6
   11078:	f7fd fcf4 	bl	ea64 <_free_r>
   1107c:	e7bd      	b.n	10ffa <_fclose_r+0x42>
   1107e:	bf00      	nop

00011080 <__sflush_r>:
   11080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   11084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11086:	460c      	mov	r4, r1
   11088:	0711      	lsls	r1, r2, #28
   1108a:	4607      	mov	r7, r0
   1108c:	d442      	bmi.n	11114 <__sflush_r+0x94>
   1108e:	6863      	ldr	r3, [r4, #4]
   11090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   11094:	2b00      	cmp	r3, #0
   11096:	81a2      	strh	r2, [r4, #12]
   11098:	dd59      	ble.n	1114e <__sflush_r+0xce>
   1109a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1109c:	2d00      	cmp	r5, #0
   1109e:	d054      	beq.n	1114a <__sflush_r+0xca>
   110a0:	2300      	movs	r3, #0
   110a2:	683e      	ldr	r6, [r7, #0]
   110a4:	603b      	str	r3, [r7, #0]
   110a6:	b293      	uxth	r3, r2
   110a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   110ac:	d153      	bne.n	11156 <__sflush_r+0xd6>
   110ae:	69e1      	ldr	r1, [r4, #28]
   110b0:	2301      	movs	r3, #1
   110b2:	4638      	mov	r0, r7
   110b4:	47a8      	blx	r5
   110b6:	1c42      	adds	r2, r0, #1
   110b8:	d063      	beq.n	11182 <__sflush_r+0x102>
   110ba:	89a3      	ldrh	r3, [r4, #12]
   110bc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   110be:	075b      	lsls	r3, r3, #29
   110c0:	d505      	bpl.n	110ce <__sflush_r+0x4e>
   110c2:	6863      	ldr	r3, [r4, #4]
   110c4:	1ac0      	subs	r0, r0, r3
   110c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   110c8:	b10b      	cbz	r3, 110ce <__sflush_r+0x4e>
   110ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   110cc:	1ac0      	subs	r0, r0, r3
   110ce:	69e1      	ldr	r1, [r4, #28]
   110d0:	4602      	mov	r2, r0
   110d2:	2300      	movs	r3, #0
   110d4:	4638      	mov	r0, r7
   110d6:	47a8      	blx	r5
   110d8:	1c41      	adds	r1, r0, #1
   110da:	d13e      	bne.n	1115a <__sflush_r+0xda>
   110dc:	683b      	ldr	r3, [r7, #0]
   110de:	2b00      	cmp	r3, #0
   110e0:	d03b      	beq.n	1115a <__sflush_r+0xda>
   110e2:	2b1d      	cmp	r3, #29
   110e4:	d001      	beq.n	110ea <__sflush_r+0x6a>
   110e6:	2b16      	cmp	r3, #22
   110e8:	d152      	bne.n	11190 <__sflush_r+0x110>
   110ea:	89a3      	ldrh	r3, [r4, #12]
   110ec:	6922      	ldr	r2, [r4, #16]
   110ee:	6022      	str	r2, [r4, #0]
   110f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   110f4:	2100      	movs	r1, #0
   110f6:	6061      	str	r1, [r4, #4]
   110f8:	81a3      	strh	r3, [r4, #12]
   110fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   110fc:	603e      	str	r6, [r7, #0]
   110fe:	b321      	cbz	r1, 1114a <__sflush_r+0xca>
   11100:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11104:	4299      	cmp	r1, r3
   11106:	d002      	beq.n	1110e <__sflush_r+0x8e>
   11108:	4638      	mov	r0, r7
   1110a:	f7fd fcab 	bl	ea64 <_free_r>
   1110e:	2000      	movs	r0, #0
   11110:	6320      	str	r0, [r4, #48]	; 0x30
   11112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11114:	6926      	ldr	r6, [r4, #16]
   11116:	b1c6      	cbz	r6, 1114a <__sflush_r+0xca>
   11118:	b293      	uxth	r3, r2
   1111a:	6825      	ldr	r5, [r4, #0]
   1111c:	6026      	str	r6, [r4, #0]
   1111e:	079a      	lsls	r2, r3, #30
   11120:	bf0c      	ite	eq
   11122:	6963      	ldreq	r3, [r4, #20]
   11124:	2300      	movne	r3, #0
   11126:	1bad      	subs	r5, r5, r6
   11128:	60a3      	str	r3, [r4, #8]
   1112a:	e00c      	b.n	11146 <__sflush_r+0xc6>
   1112c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   11130:	69e1      	ldr	r1, [r4, #28]
   11132:	462b      	mov	r3, r5
   11134:	4632      	mov	r2, r6
   11136:	4638      	mov	r0, r7
   11138:	47e0      	blx	ip
   1113a:	f1b0 0c00 	subs.w	ip, r0, #0
   1113e:	eba5 050c 	sub.w	r5, r5, ip
   11142:	4466      	add	r6, ip
   11144:	dd16      	ble.n	11174 <__sflush_r+0xf4>
   11146:	2d00      	cmp	r5, #0
   11148:	dcf0      	bgt.n	1112c <__sflush_r+0xac>
   1114a:	2000      	movs	r0, #0
   1114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1114e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11150:	2b00      	cmp	r3, #0
   11152:	dca2      	bgt.n	1109a <__sflush_r+0x1a>
   11154:	e7f9      	b.n	1114a <__sflush_r+0xca>
   11156:	6d20      	ldr	r0, [r4, #80]	; 0x50
   11158:	e7b1      	b.n	110be <__sflush_r+0x3e>
   1115a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1115e:	6922      	ldr	r2, [r4, #16]
   11160:	6022      	str	r2, [r4, #0]
   11162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11166:	81a3      	strh	r3, [r4, #12]
   11168:	2200      	movs	r2, #0
   1116a:	04db      	lsls	r3, r3, #19
   1116c:	6062      	str	r2, [r4, #4]
   1116e:	d5c4      	bpl.n	110fa <__sflush_r+0x7a>
   11170:	6520      	str	r0, [r4, #80]	; 0x50
   11172:	e7c2      	b.n	110fa <__sflush_r+0x7a>
   11174:	89a3      	ldrh	r3, [r4, #12]
   11176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1117a:	f04f 30ff 	mov.w	r0, #4294967295
   1117e:	81a3      	strh	r3, [r4, #12]
   11180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11182:	683b      	ldr	r3, [r7, #0]
   11184:	2b00      	cmp	r3, #0
   11186:	d098      	beq.n	110ba <__sflush_r+0x3a>
   11188:	2b1d      	cmp	r3, #29
   1118a:	d006      	beq.n	1119a <__sflush_r+0x11a>
   1118c:	2b16      	cmp	r3, #22
   1118e:	d004      	beq.n	1119a <__sflush_r+0x11a>
   11190:	89a3      	ldrh	r3, [r4, #12]
   11192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11196:	81a3      	strh	r3, [r4, #12]
   11198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1119a:	603e      	str	r6, [r7, #0]
   1119c:	e7d5      	b.n	1114a <__sflush_r+0xca>
   1119e:	bf00      	nop

000111a0 <_fflush_r>:
   111a0:	b538      	push	{r3, r4, r5, lr}
   111a2:	460c      	mov	r4, r1
   111a4:	4605      	mov	r5, r0
   111a6:	b108      	cbz	r0, 111ac <_fflush_r+0xc>
   111a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   111aa:	b303      	cbz	r3, 111ee <_fflush_r+0x4e>
   111ac:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   111b0:	b188      	cbz	r0, 111d6 <_fflush_r+0x36>
   111b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   111b4:	07db      	lsls	r3, r3, #31
   111b6:	d401      	bmi.n	111bc <_fflush_r+0x1c>
   111b8:	0581      	lsls	r1, r0, #22
   111ba:	d50f      	bpl.n	111dc <_fflush_r+0x3c>
   111bc:	4628      	mov	r0, r5
   111be:	4621      	mov	r1, r4
   111c0:	f7ff ff5e 	bl	11080 <__sflush_r>
   111c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   111c6:	07da      	lsls	r2, r3, #31
   111c8:	4605      	mov	r5, r0
   111ca:	d402      	bmi.n	111d2 <_fflush_r+0x32>
   111cc:	89a3      	ldrh	r3, [r4, #12]
   111ce:	059b      	lsls	r3, r3, #22
   111d0:	d508      	bpl.n	111e4 <_fflush_r+0x44>
   111d2:	4628      	mov	r0, r5
   111d4:	bd38      	pop	{r3, r4, r5, pc}
   111d6:	4605      	mov	r5, r0
   111d8:	4628      	mov	r0, r5
   111da:	bd38      	pop	{r3, r4, r5, pc}
   111dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   111de:	f7fd fb23 	bl	e828 <__retarget_lock_acquire_recursive>
   111e2:	e7eb      	b.n	111bc <_fflush_r+0x1c>
   111e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   111e6:	f7fd fb21 	bl	e82c <__retarget_lock_release_recursive>
   111ea:	4628      	mov	r0, r5
   111ec:	bd38      	pop	{r3, r4, r5, pc}
   111ee:	f7fd f8cd 	bl	e38c <__sinit>
   111f2:	e7db      	b.n	111ac <_fflush_r+0xc>

000111f4 <_localeconv_r>:
   111f4:	4800      	ldr	r0, [pc, #0]	; (111f8 <_localeconv_r+0x4>)
   111f6:	4770      	bx	lr
   111f8:	1fff8dec 	.word	0x1fff8dec

000111fc <__libc_fini_array>:
   111fc:	b538      	push	{r3, r4, r5, lr}
   111fe:	4d07      	ldr	r5, [pc, #28]	; (1121c <__libc_fini_array+0x20>)
   11200:	4c07      	ldr	r4, [pc, #28]	; (11220 <__libc_fini_array+0x24>)
   11202:	1b2c      	subs	r4, r5, r4
   11204:	10a4      	asrs	r4, r4, #2
   11206:	d005      	beq.n	11214 <__libc_fini_array+0x18>
   11208:	3c01      	subs	r4, #1
   1120a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   1120e:	4798      	blx	r3
   11210:	2c00      	cmp	r4, #0
   11212:	d1f9      	bne.n	11208 <__libc_fini_array+0xc>
   11214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11218:	f004 bf62 	b.w	160e0 <__init_array_end>
	...
   11224:	ffffffff 	.word	0xffffffff
   11228:	ffffffff 	.word	0xffffffff
   1122c:	ffffffff 	.word	0xffffffff

00011230 <memchr>:
   11230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11234:	2a10      	cmp	r2, #16
   11236:	db2b      	blt.n	11290 <memchr+0x60>
   11238:	f010 0f07 	tst.w	r0, #7
   1123c:	d008      	beq.n	11250 <memchr+0x20>
   1123e:	f810 3b01 	ldrb.w	r3, [r0], #1
   11242:	3a01      	subs	r2, #1
   11244:	428b      	cmp	r3, r1
   11246:	d02d      	beq.n	112a4 <memchr+0x74>
   11248:	f010 0f07 	tst.w	r0, #7
   1124c:	b342      	cbz	r2, 112a0 <memchr+0x70>
   1124e:	d1f6      	bne.n	1123e <memchr+0xe>
   11250:	b4f0      	push	{r4, r5, r6, r7}
   11252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1125a:	f022 0407 	bic.w	r4, r2, #7
   1125e:	f07f 0700 	mvns.w	r7, #0
   11262:	2300      	movs	r3, #0
   11264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   11268:	3c08      	subs	r4, #8
   1126a:	ea85 0501 	eor.w	r5, r5, r1
   1126e:	ea86 0601 	eor.w	r6, r6, r1
   11272:	fa85 f547 	uadd8	r5, r5, r7
   11276:	faa3 f587 	sel	r5, r3, r7
   1127a:	fa86 f647 	uadd8	r6, r6, r7
   1127e:	faa5 f687 	sel	r6, r5, r7
   11282:	b98e      	cbnz	r6, 112a8 <memchr+0x78>
   11284:	d1ee      	bne.n	11264 <memchr+0x34>
   11286:	bcf0      	pop	{r4, r5, r6, r7}
   11288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1128c:	f002 0207 	and.w	r2, r2, #7
   11290:	b132      	cbz	r2, 112a0 <memchr+0x70>
   11292:	f810 3b01 	ldrb.w	r3, [r0], #1
   11296:	3a01      	subs	r2, #1
   11298:	ea83 0301 	eor.w	r3, r3, r1
   1129c:	b113      	cbz	r3, 112a4 <memchr+0x74>
   1129e:	d1f8      	bne.n	11292 <memchr+0x62>
   112a0:	2000      	movs	r0, #0
   112a2:	4770      	bx	lr
   112a4:	3801      	subs	r0, #1
   112a6:	4770      	bx	lr
   112a8:	2d00      	cmp	r5, #0
   112aa:	bf06      	itte	eq
   112ac:	4635      	moveq	r5, r6
   112ae:	3803      	subeq	r0, #3
   112b0:	3807      	subne	r0, #7
   112b2:	f015 0f01 	tst.w	r5, #1
   112b6:	d107      	bne.n	112c8 <memchr+0x98>
   112b8:	3001      	adds	r0, #1
   112ba:	f415 7f80 	tst.w	r5, #256	; 0x100
   112be:	bf02      	ittt	eq
   112c0:	3001      	addeq	r0, #1
   112c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   112c6:	3001      	addeq	r0, #1
   112c8:	bcf0      	pop	{r4, r5, r6, r7}
   112ca:	3801      	subs	r0, #1
   112cc:	4770      	bx	lr
   112ce:	bf00      	nop

000112d0 <frexp>:
   112d0:	f8df c060 	ldr.w	ip, [pc, #96]	; 11334 <frexp+0x64>
   112d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   112da:	2700      	movs	r7, #0
   112dc:	4563      	cmp	r3, ip
   112de:	4604      	mov	r4, r0
   112e0:	460d      	mov	r5, r1
   112e2:	4616      	mov	r6, r2
   112e4:	6017      	str	r7, [r2, #0]
   112e6:	dc22      	bgt.n	1132e <frexp+0x5e>
   112e8:	4684      	mov	ip, r0
   112ea:	ea53 0c0c 	orrs.w	ip, r3, ip
   112ee:	d01e      	beq.n	1132e <frexp+0x5e>
   112f0:	f8df c044 	ldr.w	ip, [pc, #68]	; 11338 <frexp+0x68>
   112f4:	ea01 0c0c 	and.w	ip, r1, ip
   112f8:	460a      	mov	r2, r1
   112fa:	f1bc 0f00 	cmp.w	ip, #0
   112fe:	d109      	bne.n	11314 <frexp+0x44>
   11300:	4b0e      	ldr	r3, [pc, #56]	; (1133c <frexp+0x6c>)
   11302:	2200      	movs	r2, #0
   11304:	f002 fd4c 	bl	13da0 <__aeabi_dmul>
   11308:	f06f 0735 	mvn.w	r7, #53	; 0x35
   1130c:	4604      	mov	r4, r0
   1130e:	460a      	mov	r2, r1
   11310:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   11314:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   11318:	151b      	asrs	r3, r3, #20
   1131a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   1131e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   11322:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   11326:	443b      	add	r3, r7
   11328:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   1132c:	6033      	str	r3, [r6, #0]
   1132e:	4620      	mov	r0, r4
   11330:	4629      	mov	r1, r5
   11332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11334:	7fefffff 	.word	0x7fefffff
   11338:	7ff00000 	.word	0x7ff00000
   1133c:	43500000 	.word	0x43500000

00011340 <__assert_func>:
   11340:	b500      	push	{lr}
   11342:	4c0b      	ldr	r4, [pc, #44]	; (11370 <__assert_func+0x30>)
   11344:	6825      	ldr	r5, [r4, #0]
   11346:	4614      	mov	r4, r2
   11348:	68ee      	ldr	r6, [r5, #12]
   1134a:	461a      	mov	r2, r3
   1134c:	b085      	sub	sp, #20
   1134e:	4603      	mov	r3, r0
   11350:	460d      	mov	r5, r1
   11352:	b14c      	cbz	r4, 11368 <__assert_func+0x28>
   11354:	4907      	ldr	r1, [pc, #28]	; (11374 <__assert_func+0x34>)
   11356:	9500      	str	r5, [sp, #0]
   11358:	e9cd 1401 	strd	r1, r4, [sp, #4]
   1135c:	4630      	mov	r0, r6
   1135e:	4906      	ldr	r1, [pc, #24]	; (11378 <__assert_func+0x38>)
   11360:	f001 f86e 	bl	12440 <fiprintf>
   11364:	f7f9 f910 	bl	a588 <abort>
   11368:	4904      	ldr	r1, [pc, #16]	; (1137c <__assert_func+0x3c>)
   1136a:	460c      	mov	r4, r1
   1136c:	e7f3      	b.n	11356 <__assert_func+0x16>
   1136e:	bf00      	nop
   11370:	1fff8f88 	.word	0x1fff8f88
   11374:	00015ff4 	.word	0x00015ff4
   11378:	00016004 	.word	0x00016004
   1137c:	000148f4 	.word	0x000148f4

00011380 <_calloc_r>:
   11380:	b538      	push	{r3, r4, r5, lr}
   11382:	fba1 1402 	umull	r1, r4, r1, r2
   11386:	bb8c      	cbnz	r4, 113ec <_calloc_r+0x6c>
   11388:	f7fc fabc 	bl	d904 <_malloc_r>
   1138c:	4605      	mov	r5, r0
   1138e:	b1e0      	cbz	r0, 113ca <_calloc_r+0x4a>
   11390:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11394:	f022 0203 	bic.w	r2, r2, #3
   11398:	3a04      	subs	r2, #4
   1139a:	2a24      	cmp	r2, #36	; 0x24
   1139c:	d817      	bhi.n	113ce <_calloc_r+0x4e>
   1139e:	2a13      	cmp	r2, #19
   113a0:	d91a      	bls.n	113d8 <_calloc_r+0x58>
   113a2:	2a1b      	cmp	r2, #27
   113a4:	e9c0 4400 	strd	r4, r4, [r0]
   113a8:	d91d      	bls.n	113e6 <_calloc_r+0x66>
   113aa:	2a24      	cmp	r2, #36	; 0x24
   113ac:	bf14      	ite	ne
   113ae:	f100 0210 	addne.w	r2, r0, #16
   113b2:	f100 0218 	addeq.w	r2, r0, #24
   113b6:	f04f 0300 	mov.w	r3, #0
   113ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
   113be:	bf04      	itt	eq
   113c0:	6104      	streq	r4, [r0, #16]
   113c2:	6144      	streq	r4, [r0, #20]
   113c4:	e9c2 3300 	strd	r3, r3, [r2]
   113c8:	6093      	str	r3, [r2, #8]
   113ca:	4628      	mov	r0, r5
   113cc:	bd38      	pop	{r3, r4, r5, pc}
   113ce:	4621      	mov	r1, r4
   113d0:	f7fd f90c 	bl	e5ec <memset>
   113d4:	4628      	mov	r0, r5
   113d6:	bd38      	pop	{r3, r4, r5, pc}
   113d8:	4602      	mov	r2, r0
   113da:	2300      	movs	r3, #0
   113dc:	e9c2 3300 	strd	r3, r3, [r2]
   113e0:	6093      	str	r3, [r2, #8]
   113e2:	4628      	mov	r0, r5
   113e4:	bd38      	pop	{r3, r4, r5, pc}
   113e6:	f100 0208 	add.w	r2, r0, #8
   113ea:	e7f6      	b.n	113da <_calloc_r+0x5a>
   113ec:	f7fd f9ee 	bl	e7cc <__errno>
   113f0:	230c      	movs	r3, #12
   113f2:	2500      	movs	r5, #0
   113f4:	6003      	str	r3, [r0, #0]
   113f6:	e7e8      	b.n	113ca <_calloc_r+0x4a>

000113f8 <quorem>:
   113f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113fc:	6903      	ldr	r3, [r0, #16]
   113fe:	690c      	ldr	r4, [r1, #16]
   11400:	42a3      	cmp	r3, r4
   11402:	b083      	sub	sp, #12
   11404:	f2c0 8088 	blt.w	11518 <quorem+0x120>
   11408:	3c01      	subs	r4, #1
   1140a:	f101 0514 	add.w	r5, r1, #20
   1140e:	00a3      	lsls	r3, r4, #2
   11410:	f100 0814 	add.w	r8, r0, #20
   11414:	9300      	str	r3, [sp, #0]
   11416:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1141a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1141e:	3301      	adds	r3, #1
   11420:	468a      	mov	sl, r1
   11422:	429a      	cmp	r2, r3
   11424:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   11428:	4681      	mov	r9, r0
   1142a:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1142e:	9101      	str	r1, [sp, #4]
   11430:	fbb2 f6f3 	udiv	r6, r2, r3
   11434:	d33a      	bcc.n	114ac <quorem+0xb4>
   11436:	f04f 0c00 	mov.w	ip, #0
   1143a:	46ae      	mov	lr, r5
   1143c:	4640      	mov	r0, r8
   1143e:	4662      	mov	r2, ip
   11440:	4663      	mov	r3, ip
   11442:	f85e bb04 	ldr.w	fp, [lr], #4
   11446:	6801      	ldr	r1, [r0, #0]
   11448:	fa1f fc8b 	uxth.w	ip, fp
   1144c:	fb06 330c 	mla	r3, r6, ip, r3
   11450:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11454:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   11458:	fb06 cc0b 	mla	ip, r6, fp, ip
   1145c:	b29b      	uxth	r3, r3
   1145e:	1ad3      	subs	r3, r2, r3
   11460:	fa1f f28c 	uxth.w	r2, ip
   11464:	fa13 f381 	uxtah	r3, r3, r1
   11468:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
   1146c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   11470:	b29b      	uxth	r3, r3
   11472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11476:	4577      	cmp	r7, lr
   11478:	f840 3b04 	str.w	r3, [r0], #4
   1147c:	ea4f 4222 	mov.w	r2, r2, asr #16
   11480:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11484:	d2dd      	bcs.n	11442 <quorem+0x4a>
   11486:	9b00      	ldr	r3, [sp, #0]
   11488:	f858 3003 	ldr.w	r3, [r8, r3]
   1148c:	b973      	cbnz	r3, 114ac <quorem+0xb4>
   1148e:	9b01      	ldr	r3, [sp, #4]
   11490:	3b04      	subs	r3, #4
   11492:	4598      	cmp	r8, r3
   11494:	d304      	bcc.n	114a0 <quorem+0xa8>
   11496:	e007      	b.n	114a8 <quorem+0xb0>
   11498:	4598      	cmp	r8, r3
   1149a:	f104 34ff 	add.w	r4, r4, #4294967295
   1149e:	d203      	bcs.n	114a8 <quorem+0xb0>
   114a0:	f853 2904 	ldr.w	r2, [r3], #-4
   114a4:	2a00      	cmp	r2, #0
   114a6:	d0f7      	beq.n	11498 <quorem+0xa0>
   114a8:	f8c9 4010 	str.w	r4, [r9, #16]
   114ac:	4651      	mov	r1, sl
   114ae:	4648      	mov	r0, r9
   114b0:	f7fd fe78 	bl	f1a4 <__mcmp>
   114b4:	2800      	cmp	r0, #0
   114b6:	db2b      	blt.n	11510 <quorem+0x118>
   114b8:	3601      	adds	r6, #1
   114ba:	4641      	mov	r1, r8
   114bc:	2300      	movs	r3, #0
   114be:	f855 0b04 	ldr.w	r0, [r5], #4
   114c2:	f8d1 c000 	ldr.w	ip, [r1]
   114c6:	b282      	uxth	r2, r0
   114c8:	1a9a      	subs	r2, r3, r2
   114ca:	0c03      	lsrs	r3, r0, #16
   114cc:	fa12 f28c 	uxtah	r2, r2, ip
   114d0:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   114d4:	eb03 4322 	add.w	r3, r3, r2, asr #16
   114d8:	b292      	uxth	r2, r2
   114da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   114de:	42af      	cmp	r7, r5
   114e0:	f841 2b04 	str.w	r2, [r1], #4
   114e4:	ea4f 4323 	mov.w	r3, r3, asr #16
   114e8:	d2e9      	bcs.n	114be <quorem+0xc6>
   114ea:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   114ee:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   114f2:	b96a      	cbnz	r2, 11510 <quorem+0x118>
   114f4:	3b04      	subs	r3, #4
   114f6:	4598      	cmp	r8, r3
   114f8:	d304      	bcc.n	11504 <quorem+0x10c>
   114fa:	e007      	b.n	1150c <quorem+0x114>
   114fc:	4598      	cmp	r8, r3
   114fe:	f104 34ff 	add.w	r4, r4, #4294967295
   11502:	d203      	bcs.n	1150c <quorem+0x114>
   11504:	f853 2904 	ldr.w	r2, [r3], #-4
   11508:	2a00      	cmp	r2, #0
   1150a:	d0f7      	beq.n	114fc <quorem+0x104>
   1150c:	f8c9 4010 	str.w	r4, [r9, #16]
   11510:	4630      	mov	r0, r6
   11512:	b003      	add	sp, #12
   11514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11518:	2000      	movs	r0, #0
   1151a:	b003      	add	sp, #12
   1151c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011520 <_dtoa_r>:
   11520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11524:	6b81      	ldr	r1, [r0, #56]	; 0x38
   11526:	b099      	sub	sp, #100	; 0x64
   11528:	4690      	mov	r8, r2
   1152a:	4699      	mov	r9, r3
   1152c:	e9cd 8904 	strd	r8, r9, [sp, #16]
   11530:	9d25      	ldr	r5, [sp, #148]	; 0x94
   11532:	4604      	mov	r4, r0
   11534:	b141      	cbz	r1, 11548 <_dtoa_r+0x28>
   11536:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   11538:	604a      	str	r2, [r1, #4]
   1153a:	2301      	movs	r3, #1
   1153c:	4093      	lsls	r3, r2
   1153e:	608b      	str	r3, [r1, #8]
   11540:	f7fd fbd2 	bl	ece8 <_Bfree>
   11544:	2300      	movs	r3, #0
   11546:	63a3      	str	r3, [r4, #56]	; 0x38
   11548:	f1b9 0a00 	subs.w	sl, r9, #0
   1154c:	bfb4      	ite	lt
   1154e:	2301      	movlt	r3, #1
   11550:	2300      	movge	r3, #0
   11552:	602b      	str	r3, [r5, #0]
   11554:	4b76      	ldr	r3, [pc, #472]	; (11730 <_dtoa_r+0x210>)
   11556:	bfbc      	itt	lt
   11558:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   1155c:	f8cd a014 	strlt.w	sl, [sp, #20]
   11560:	ea33 030a 	bics.w	r3, r3, sl
   11564:	f000 80ab 	beq.w	116be <_dtoa_r+0x19e>
   11568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1156c:	4610      	mov	r0, r2
   1156e:	4619      	mov	r1, r3
   11570:	2200      	movs	r2, #0
   11572:	2300      	movs	r3, #0
   11574:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   11578:	f7fb fe3a 	bl	d1f0 <__aeabi_dcmpeq>
   1157c:	4607      	mov	r7, r0
   1157e:	b178      	cbz	r0, 115a0 <_dtoa_r+0x80>
   11580:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11582:	2301      	movs	r3, #1
   11584:	6013      	str	r3, [r2, #0]
   11586:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11588:	2b00      	cmp	r3, #0
   1158a:	f000 83ae 	beq.w	11cea <_dtoa_r+0x7ca>
   1158e:	4b69      	ldr	r3, [pc, #420]	; (11734 <_dtoa_r+0x214>)
   11590:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11592:	6013      	str	r3, [r2, #0]
   11594:	3b01      	subs	r3, #1
   11596:	9303      	str	r3, [sp, #12]
   11598:	9803      	ldr	r0, [sp, #12]
   1159a:	b019      	add	sp, #100	; 0x64
   1159c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115a0:	ab16      	add	r3, sp, #88	; 0x58
   115a2:	9301      	str	r3, [sp, #4]
   115a4:	ab17      	add	r3, sp, #92	; 0x5c
   115a6:	9300      	str	r3, [sp, #0]
   115a8:	4620      	mov	r0, r4
   115aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   115ae:	f7fd fec3 	bl	f338 <__d2b>
   115b2:	ea5f 561a 	movs.w	r6, sl, lsr #20
   115b6:	4605      	mov	r5, r0
   115b8:	f040 8097 	bne.w	116ea <_dtoa_r+0x1ca>
   115bc:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   115c0:	443e      	add	r6, r7
   115c2:	f206 4332 	addw	r3, r6, #1074	; 0x432
   115c6:	2b20      	cmp	r3, #32
   115c8:	f340 83a6 	ble.w	11d18 <_dtoa_r+0x7f8>
   115cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   115d0:	fa0a fa03 	lsl.w	sl, sl, r3
   115d4:	f206 4312 	addw	r3, r6, #1042	; 0x412
   115d8:	fa28 f003 	lsr.w	r0, r8, r3
   115dc:	ea4a 0000 	orr.w	r0, sl, r0
   115e0:	f7fb fd36 	bl	d050 <__aeabi_ui2d>
   115e4:	2301      	movs	r3, #1
   115e6:	3e01      	subs	r6, #1
   115e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   115ec:	930f      	str	r3, [sp, #60]	; 0x3c
   115ee:	4b52      	ldr	r3, [pc, #328]	; (11738 <_dtoa_r+0x218>)
   115f0:	2200      	movs	r2, #0
   115f2:	f7fb fbef 	bl	cdd4 <__aeabi_dsub>
   115f6:	a348      	add	r3, pc, #288	; (adr r3, 11718 <_dtoa_r+0x1f8>)
   115f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   115fc:	f002 fbd0 	bl	13da0 <__aeabi_dmul>
   11600:	a347      	add	r3, pc, #284	; (adr r3, 11720 <_dtoa_r+0x200>)
   11602:	e9d3 2300 	ldrd	r2, r3, [r3]
   11606:	f7fb fbe7 	bl	cdd8 <__adddf3>
   1160a:	4680      	mov	r8, r0
   1160c:	4630      	mov	r0, r6
   1160e:	4689      	mov	r9, r1
   11610:	f7fb fd2e 	bl	d070 <__aeabi_i2d>
   11614:	a344      	add	r3, pc, #272	; (adr r3, 11728 <_dtoa_r+0x208>)
   11616:	e9d3 2300 	ldrd	r2, r3, [r3]
   1161a:	f002 fbc1 	bl	13da0 <__aeabi_dmul>
   1161e:	4602      	mov	r2, r0
   11620:	460b      	mov	r3, r1
   11622:	4640      	mov	r0, r8
   11624:	4649      	mov	r1, r9
   11626:	f7fb fbd7 	bl	cdd8 <__adddf3>
   1162a:	4680      	mov	r8, r0
   1162c:	4689      	mov	r9, r1
   1162e:	f002 fdc9 	bl	141c4 <__aeabi_d2iz>
   11632:	2200      	movs	r2, #0
   11634:	4683      	mov	fp, r0
   11636:	2300      	movs	r3, #0
   11638:	4640      	mov	r0, r8
   1163a:	4649      	mov	r1, r9
   1163c:	f7fb fde2 	bl	d204 <__aeabi_dcmplt>
   11640:	2800      	cmp	r0, #0
   11642:	f040 8345 	bne.w	11cd0 <_dtoa_r+0x7b0>
   11646:	f1bb 0f16 	cmp.w	fp, #22
   1164a:	f200 8334 	bhi.w	11cb6 <_dtoa_r+0x796>
   1164e:	4b3b      	ldr	r3, [pc, #236]	; (1173c <_dtoa_r+0x21c>)
   11650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   11654:	e9d3 2300 	ldrd	r2, r3, [r3]
   11658:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1165c:	f7fb fdd2 	bl	d204 <__aeabi_dcmplt>
   11660:	2800      	cmp	r0, #0
   11662:	d071      	beq.n	11748 <_dtoa_r+0x228>
   11664:	2300      	movs	r3, #0
   11666:	1bbf      	subs	r7, r7, r6
   11668:	930e      	str	r3, [sp, #56]	; 0x38
   1166a:	1e7b      	subs	r3, r7, #1
   1166c:	f10b 3bff 	add.w	fp, fp, #4294967295
   11670:	9306      	str	r3, [sp, #24]
   11672:	f100 8327 	bmi.w	11cc4 <_dtoa_r+0x7a4>
   11676:	2300      	movs	r3, #0
   11678:	9309      	str	r3, [sp, #36]	; 0x24
   1167a:	f1bb 0f00 	cmp.w	fp, #0
   1167e:	da6a      	bge.n	11756 <_dtoa_r+0x236>
   11680:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11682:	f8cd b01c 	str.w	fp, [sp, #28]
   11686:	eba3 030b 	sub.w	r3, r3, fp
   1168a:	9309      	str	r3, [sp, #36]	; 0x24
   1168c:	f1cb 0300 	rsb	r3, fp, #0
   11690:	930d      	str	r3, [sp, #52]	; 0x34
   11692:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11694:	2b09      	cmp	r3, #9
   11696:	f04f 0b00 	mov.w	fp, #0
   1169a:	d865      	bhi.n	11768 <_dtoa_r+0x248>
   1169c:	2b05      	cmp	r3, #5
   1169e:	f340 8339 	ble.w	11d14 <_dtoa_r+0x7f4>
   116a2:	3b04      	subs	r3, #4
   116a4:	9322      	str	r3, [sp, #136]	; 0x88
   116a6:	2600      	movs	r6, #0
   116a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   116aa:	3b02      	subs	r3, #2
   116ac:	2b03      	cmp	r3, #3
   116ae:	f200 8667 	bhi.w	12380 <_dtoa_r+0xe60>
   116b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   116b6:	044e      	.short	0x044e
   116b8:	0442044b 	.word	0x0442044b
   116bc:	0425      	.short	0x0425
   116be:	9a24      	ldr	r2, [sp, #144]	; 0x90
   116c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   116c4:	f242 730f 	movw	r3, #9999	; 0x270f
   116c8:	ea5a 0a08 	orrs.w	sl, sl, r8
   116cc:	6013      	str	r3, [r2, #0]
   116ce:	d11a      	bne.n	11706 <_dtoa_r+0x1e6>
   116d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   116d2:	2b00      	cmp	r3, #0
   116d4:	f000 8663 	beq.w	1239e <_dtoa_r+0xe7e>
   116d8:	4b19      	ldr	r3, [pc, #100]	; (11740 <_dtoa_r+0x220>)
   116da:	9303      	str	r3, [sp, #12]
   116dc:	3308      	adds	r3, #8
   116de:	9a26      	ldr	r2, [sp, #152]	; 0x98
   116e0:	9803      	ldr	r0, [sp, #12]
   116e2:	6013      	str	r3, [r2, #0]
   116e4:	b019      	add	sp, #100	; 0x64
   116e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116ea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   116ee:	f3c2 0313 	ubfx	r3, r2, #0, #20
   116f2:	4608      	mov	r0, r1
   116f4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   116f8:	970f      	str	r7, [sp, #60]	; 0x3c
   116fa:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   116fe:	9f16      	ldr	r7, [sp, #88]	; 0x58
   11700:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   11704:	e773      	b.n	115ee <_dtoa_r+0xce>
   11706:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11708:	2b00      	cmp	r3, #0
   1170a:	f040 83db 	bne.w	11ec4 <_dtoa_r+0x9a4>
   1170e:	4b0d      	ldr	r3, [pc, #52]	; (11744 <_dtoa_r+0x224>)
   11710:	9303      	str	r3, [sp, #12]
   11712:	e741      	b.n	11598 <_dtoa_r+0x78>
   11714:	f3af 8000 	nop.w
   11718:	636f4361 	.word	0x636f4361
   1171c:	3fd287a7 	.word	0x3fd287a7
   11720:	8b60c8b3 	.word	0x8b60c8b3
   11724:	3fc68a28 	.word	0x3fc68a28
   11728:	509f79fb 	.word	0x509f79fb
   1172c:	3fd34413 	.word	0x3fd34413
   11730:	7ff00000 	.word	0x7ff00000
   11734:	00014861 	.word	0x00014861
   11738:	3ff80000 	.word	0x3ff80000
   1173c:	00015ec8 	.word	0x00015ec8
   11740:	00016034 	.word	0x00016034
   11744:	00016040 	.word	0x00016040
   11748:	1bbf      	subs	r7, r7, r6
   1174a:	1e7b      	subs	r3, r7, #1
   1174c:	9306      	str	r3, [sp, #24]
   1174e:	f100 847e 	bmi.w	1204e <_dtoa_r+0xb2e>
   11752:	900e      	str	r0, [sp, #56]	; 0x38
   11754:	9009      	str	r0, [sp, #36]	; 0x24
   11756:	9b06      	ldr	r3, [sp, #24]
   11758:	445b      	add	r3, fp
   1175a:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   1175e:	2300      	movs	r3, #0
   11760:	930d      	str	r3, [sp, #52]	; 0x34
   11762:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11764:	2b09      	cmp	r3, #9
   11766:	d999      	bls.n	1169c <_dtoa_r+0x17c>
   11768:	2300      	movs	r3, #0
   1176a:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
   1176e:	2601      	movs	r6, #1
   11770:	f04f 33ff 	mov.w	r3, #4294967295
   11774:	960c      	str	r6, [sp, #48]	; 0x30
   11776:	9308      	str	r3, [sp, #32]
   11778:	9b08      	ldr	r3, [sp, #32]
   1177a:	9312      	str	r3, [sp, #72]	; 0x48
   1177c:	2100      	movs	r1, #0
   1177e:	63e1      	str	r1, [r4, #60]	; 0x3c
   11780:	4620      	mov	r0, r4
   11782:	f7fd fa8b 	bl	ec9c <_Balloc>
   11786:	9003      	str	r0, [sp, #12]
   11788:	2800      	cmp	r0, #0
   1178a:	f000 8601 	beq.w	12390 <_dtoa_r+0xe70>
   1178e:	9b03      	ldr	r3, [sp, #12]
   11790:	63a3      	str	r3, [r4, #56]	; 0x38
   11792:	9b08      	ldr	r3, [sp, #32]
   11794:	2b0e      	cmp	r3, #14
   11796:	f200 8113 	bhi.w	119c0 <_dtoa_r+0x4a0>
   1179a:	2e00      	cmp	r6, #0
   1179c:	f000 8110 	beq.w	119c0 <_dtoa_r+0x4a0>
   117a0:	9907      	ldr	r1, [sp, #28]
   117a2:	2900      	cmp	r1, #0
   117a4:	f340 8455 	ble.w	12052 <_dtoa_r+0xb32>
   117a8:	4bae      	ldr	r3, [pc, #696]	; (11a64 <_dtoa_r+0x544>)
   117aa:	f001 020f 	and.w	r2, r1, #15
   117ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   117b2:	ea4f 1821 	mov.w	r8, r1, asr #4
   117b6:	05c9      	lsls	r1, r1, #23
   117b8:	e9d3 6700 	ldrd	r6, r7, [r3]
   117bc:	f140 8411 	bpl.w	11fe2 <_dtoa_r+0xac2>
   117c0:	4ba9      	ldr	r3, [pc, #676]	; (11a68 <_dtoa_r+0x548>)
   117c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   117c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   117ca:	f002 fc13 	bl	13ff4 <__aeabi_ddiv>
   117ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   117d2:	f008 080f 	and.w	r8, r8, #15
   117d6:	f04f 0a03 	mov.w	sl, #3
   117da:	f1b8 0f00 	cmp.w	r8, #0
   117de:	d013      	beq.n	11808 <_dtoa_r+0x2e8>
   117e0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 11a68 <_dtoa_r+0x548>
   117e4:	f018 0f01 	tst.w	r8, #1
   117e8:	d009      	beq.n	117fe <_dtoa_r+0x2de>
   117ea:	4630      	mov	r0, r6
   117ec:	4639      	mov	r1, r7
   117ee:	e9d9 2300 	ldrd	r2, r3, [r9]
   117f2:	f002 fad5 	bl	13da0 <__aeabi_dmul>
   117f6:	f10a 0a01 	add.w	sl, sl, #1
   117fa:	4606      	mov	r6, r0
   117fc:	460f      	mov	r7, r1
   117fe:	ea5f 0868 	movs.w	r8, r8, asr #1
   11802:	f109 0908 	add.w	r9, r9, #8
   11806:	d1ed      	bne.n	117e4 <_dtoa_r+0x2c4>
   11808:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1180c:	4632      	mov	r2, r6
   1180e:	463b      	mov	r3, r7
   11810:	f002 fbf0 	bl	13ff4 <__aeabi_ddiv>
   11814:	4680      	mov	r8, r0
   11816:	4689      	mov	r9, r1
   11818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1181a:	b143      	cbz	r3, 1182e <_dtoa_r+0x30e>
   1181c:	4b93      	ldr	r3, [pc, #588]	; (11a6c <_dtoa_r+0x54c>)
   1181e:	2200      	movs	r2, #0
   11820:	4640      	mov	r0, r8
   11822:	4649      	mov	r1, r9
   11824:	f7fb fcee 	bl	d204 <__aeabi_dcmplt>
   11828:	2800      	cmp	r0, #0
   1182a:	f040 852a 	bne.w	12282 <_dtoa_r+0xd62>
   1182e:	4650      	mov	r0, sl
   11830:	f7fb fc1e 	bl	d070 <__aeabi_i2d>
   11834:	4642      	mov	r2, r8
   11836:	464b      	mov	r3, r9
   11838:	f002 fab2 	bl	13da0 <__aeabi_dmul>
   1183c:	4b8c      	ldr	r3, [pc, #560]	; (11a70 <_dtoa_r+0x550>)
   1183e:	2200      	movs	r2, #0
   11840:	f7fb faca 	bl	cdd8 <__adddf3>
   11844:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   11848:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1184c:	9311      	str	r3, [sp, #68]	; 0x44
   1184e:	9b08      	ldr	r3, [sp, #32]
   11850:	2b00      	cmp	r3, #0
   11852:	f000 8099 	beq.w	11988 <_dtoa_r+0x468>
   11856:	9b07      	ldr	r3, [sp, #28]
   11858:	9314      	str	r3, [sp, #80]	; 0x50
   1185a:	9b08      	ldr	r3, [sp, #32]
   1185c:	9313      	str	r3, [sp, #76]	; 0x4c
   1185e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11860:	2b00      	cmp	r3, #0
   11862:	f000 84a5 	beq.w	121b0 <_dtoa_r+0xc90>
   11866:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11868:	4b7e      	ldr	r3, [pc, #504]	; (11a64 <_dtoa_r+0x544>)
   1186a:	4982      	ldr	r1, [pc, #520]	; (11a74 <_dtoa_r+0x554>)
   1186c:	9e03      	ldr	r6, [sp, #12]
   1186e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   11876:	2000      	movs	r0, #0
   11878:	f002 fbbc 	bl	13ff4 <__aeabi_ddiv>
   1187c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11880:	f7fb faa8 	bl	cdd4 <__aeabi_dsub>
   11884:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11888:	4649      	mov	r1, r9
   1188a:	4640      	mov	r0, r8
   1188c:	f002 fc9a 	bl	141c4 <__aeabi_d2iz>
   11890:	4607      	mov	r7, r0
   11892:	f7fb fbed 	bl	d070 <__aeabi_i2d>
   11896:	4602      	mov	r2, r0
   11898:	460b      	mov	r3, r1
   1189a:	4640      	mov	r0, r8
   1189c:	4649      	mov	r1, r9
   1189e:	f7fb fa99 	bl	cdd4 <__aeabi_dsub>
   118a2:	3730      	adds	r7, #48	; 0x30
   118a4:	4680      	mov	r8, r0
   118a6:	4689      	mov	r9, r1
   118a8:	4602      	mov	r2, r0
   118aa:	460b      	mov	r3, r1
   118ac:	f806 7b01 	strb.w	r7, [r6], #1
   118b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   118b4:	f7fb fcc4 	bl	d240 <__aeabi_dcmpgt>
   118b8:	2800      	cmp	r0, #0
   118ba:	f040 8527 	bne.w	1230c <_dtoa_r+0xdec>
   118be:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   118c2:	2700      	movs	r7, #0
   118c4:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   118c8:	9510      	str	r5, [sp, #64]	; 0x40
   118ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   118cc:	9413      	str	r4, [sp, #76]	; 0x4c
   118ce:	e02a      	b.n	11926 <_dtoa_r+0x406>
   118d0:	3701      	adds	r7, #1
   118d2:	42af      	cmp	r7, r5
   118d4:	f280 852a 	bge.w	1232c <_dtoa_r+0xe0c>
   118d8:	4b67      	ldr	r3, [pc, #412]	; (11a78 <_dtoa_r+0x558>)
   118da:	4650      	mov	r0, sl
   118dc:	4659      	mov	r1, fp
   118de:	2200      	movs	r2, #0
   118e0:	f002 fa5e 	bl	13da0 <__aeabi_dmul>
   118e4:	4b64      	ldr	r3, [pc, #400]	; (11a78 <_dtoa_r+0x558>)
   118e6:	2200      	movs	r2, #0
   118e8:	4682      	mov	sl, r0
   118ea:	468b      	mov	fp, r1
   118ec:	4640      	mov	r0, r8
   118ee:	4649      	mov	r1, r9
   118f0:	f002 fa56 	bl	13da0 <__aeabi_dmul>
   118f4:	4689      	mov	r9, r1
   118f6:	4680      	mov	r8, r0
   118f8:	f002 fc64 	bl	141c4 <__aeabi_d2iz>
   118fc:	4604      	mov	r4, r0
   118fe:	f7fb fbb7 	bl	d070 <__aeabi_i2d>
   11902:	4602      	mov	r2, r0
   11904:	460b      	mov	r3, r1
   11906:	4640      	mov	r0, r8
   11908:	4649      	mov	r1, r9
   1190a:	f7fb fa63 	bl	cdd4 <__aeabi_dsub>
   1190e:	3430      	adds	r4, #48	; 0x30
   11910:	f806 4b01 	strb.w	r4, [r6], #1
   11914:	4652      	mov	r2, sl
   11916:	465b      	mov	r3, fp
   11918:	4680      	mov	r8, r0
   1191a:	4689      	mov	r9, r1
   1191c:	f7fb fc72 	bl	d204 <__aeabi_dcmplt>
   11920:	2800      	cmp	r0, #0
   11922:	f040 84f1 	bne.w	12308 <_dtoa_r+0xde8>
   11926:	4642      	mov	r2, r8
   11928:	464b      	mov	r3, r9
   1192a:	4950      	ldr	r1, [pc, #320]	; (11a6c <_dtoa_r+0x54c>)
   1192c:	2000      	movs	r0, #0
   1192e:	f7fb fa51 	bl	cdd4 <__aeabi_dsub>
   11932:	4652      	mov	r2, sl
   11934:	465b      	mov	r3, fp
   11936:	f7fb fc65 	bl	d204 <__aeabi_dcmplt>
   1193a:	2800      	cmp	r0, #0
   1193c:	d0c8      	beq.n	118d0 <_dtoa_r+0x3b0>
   1193e:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   11942:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11944:	9a03      	ldr	r2, [sp, #12]
   11946:	9307      	str	r3, [sp, #28]
   11948:	e002      	b.n	11950 <_dtoa_r+0x430>
   1194a:	42b2      	cmp	r2, r6
   1194c:	f000 84c6 	beq.w	122dc <_dtoa_r+0xdbc>
   11950:	46b1      	mov	r9, r6
   11952:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   11956:	2b39      	cmp	r3, #57	; 0x39
   11958:	d0f7      	beq.n	1194a <_dtoa_r+0x42a>
   1195a:	3301      	adds	r3, #1
   1195c:	b2db      	uxtb	r3, r3
   1195e:	7033      	strb	r3, [r6, #0]
   11960:	9b07      	ldr	r3, [sp, #28]
   11962:	3301      	adds	r3, #1
   11964:	9307      	str	r3, [sp, #28]
   11966:	e192      	b.n	11c8e <_dtoa_r+0x76e>
   11968:	4650      	mov	r0, sl
   1196a:	f7fb fb81 	bl	d070 <__aeabi_i2d>
   1196e:	4642      	mov	r2, r8
   11970:	464b      	mov	r3, r9
   11972:	f002 fa15 	bl	13da0 <__aeabi_dmul>
   11976:	4b3e      	ldr	r3, [pc, #248]	; (11a70 <_dtoa_r+0x550>)
   11978:	2200      	movs	r2, #0
   1197a:	f7fb fa2d 	bl	cdd8 <__adddf3>
   1197e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   11982:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11986:	9311      	str	r3, [sp, #68]	; 0x44
   11988:	4b3c      	ldr	r3, [pc, #240]	; (11a7c <_dtoa_r+0x55c>)
   1198a:	4640      	mov	r0, r8
   1198c:	4649      	mov	r1, r9
   1198e:	2200      	movs	r2, #0
   11990:	f7fb fa20 	bl	cdd4 <__aeabi_dsub>
   11994:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   11998:	4642      	mov	r2, r8
   1199a:	464b      	mov	r3, r9
   1199c:	4606      	mov	r6, r0
   1199e:	460f      	mov	r7, r1
   119a0:	f7fb fc4e 	bl	d240 <__aeabi_dcmpgt>
   119a4:	4682      	mov	sl, r0
   119a6:	2800      	cmp	r0, #0
   119a8:	f040 84a8 	bne.w	122fc <_dtoa_r+0xddc>
   119ac:	4642      	mov	r2, r8
   119ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   119b2:	4630      	mov	r0, r6
   119b4:	4639      	mov	r1, r7
   119b6:	f7fb fc25 	bl	d204 <__aeabi_dcmplt>
   119ba:	2800      	cmp	r0, #0
   119bc:	f040 8345 	bne.w	1204a <_dtoa_r+0xb2a>
   119c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   119c2:	2b00      	cmp	r3, #0
   119c4:	f2c0 808c 	blt.w	11ae0 <_dtoa_r+0x5c0>
   119c8:	9a07      	ldr	r2, [sp, #28]
   119ca:	2a0e      	cmp	r2, #14
   119cc:	f300 8088 	bgt.w	11ae0 <_dtoa_r+0x5c0>
   119d0:	4b24      	ldr	r3, [pc, #144]	; (11a64 <_dtoa_r+0x544>)
   119d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   119d6:	e9d3 ab00 	ldrd	sl, fp, [r3]
   119da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   119dc:	2b00      	cmp	r3, #0
   119de:	da1b      	bge.n	11a18 <_dtoa_r+0x4f8>
   119e0:	9b08      	ldr	r3, [sp, #32]
   119e2:	2b00      	cmp	r3, #0
   119e4:	dc18      	bgt.n	11a18 <_dtoa_r+0x4f8>
   119e6:	f040 832e 	bne.w	12046 <_dtoa_r+0xb26>
   119ea:	4b24      	ldr	r3, [pc, #144]	; (11a7c <_dtoa_r+0x55c>)
   119ec:	4650      	mov	r0, sl
   119ee:	2200      	movs	r2, #0
   119f0:	4659      	mov	r1, fp
   119f2:	f002 f9d5 	bl	13da0 <__aeabi_dmul>
   119f6:	4602      	mov	r2, r0
   119f8:	460b      	mov	r3, r1
   119fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   119fe:	f7fb fc0b 	bl	d218 <__aeabi_dcmple>
   11a02:	f8dd a020 	ldr.w	sl, [sp, #32]
   11a06:	4656      	mov	r6, sl
   11a08:	2800      	cmp	r0, #0
   11a0a:	f000 82b9 	beq.w	11f80 <_dtoa_r+0xa60>
   11a0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11a10:	f8dd 800c 	ldr.w	r8, [sp, #12]
   11a14:	43df      	mvns	r7, r3
   11a16:	e2bb      	b.n	11f90 <_dtoa_r+0xa70>
   11a18:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   11a1c:	4652      	mov	r2, sl
   11a1e:	465b      	mov	r3, fp
   11a20:	4638      	mov	r0, r7
   11a22:	4641      	mov	r1, r8
   11a24:	f002 fae6 	bl	13ff4 <__aeabi_ddiv>
   11a28:	f002 fbcc 	bl	141c4 <__aeabi_d2iz>
   11a2c:	4681      	mov	r9, r0
   11a2e:	9009      	str	r0, [sp, #36]	; 0x24
   11a30:	f7fb fb1e 	bl	d070 <__aeabi_i2d>
   11a34:	4652      	mov	r2, sl
   11a36:	465b      	mov	r3, fp
   11a38:	f002 f9b2 	bl	13da0 <__aeabi_dmul>
   11a3c:	9e03      	ldr	r6, [sp, #12]
   11a3e:	460b      	mov	r3, r1
   11a40:	4602      	mov	r2, r0
   11a42:	4641      	mov	r1, r8
   11a44:	4638      	mov	r0, r7
   11a46:	f7fb f9c5 	bl	cdd4 <__aeabi_dsub>
   11a4a:	f109 0330 	add.w	r3, r9, #48	; 0x30
   11a4e:	f806 3b01 	strb.w	r3, [r6], #1
   11a52:	9b08      	ldr	r3, [sp, #32]
   11a54:	2b01      	cmp	r3, #1
   11a56:	f000 835c 	beq.w	12112 <_dtoa_r+0xbf2>
   11a5a:	9406      	str	r4, [sp, #24]
   11a5c:	2701      	movs	r7, #1
   11a5e:	9504      	str	r5, [sp, #16]
   11a60:	461c      	mov	r4, r3
   11a62:	e02a      	b.n	11aba <_dtoa_r+0x59a>
   11a64:	00015ec8 	.word	0x00015ec8
   11a68:	00015ea0 	.word	0x00015ea0
   11a6c:	3ff00000 	.word	0x3ff00000
   11a70:	401c0000 	.word	0x401c0000
   11a74:	3fe00000 	.word	0x3fe00000
   11a78:	40240000 	.word	0x40240000
   11a7c:	40140000 	.word	0x40140000
   11a80:	4652      	mov	r2, sl
   11a82:	465b      	mov	r3, fp
   11a84:	4640      	mov	r0, r8
   11a86:	4649      	mov	r1, r9
   11a88:	f002 fab4 	bl	13ff4 <__aeabi_ddiv>
   11a8c:	f002 fb9a 	bl	141c4 <__aeabi_d2iz>
   11a90:	4605      	mov	r5, r0
   11a92:	f7fb faed 	bl	d070 <__aeabi_i2d>
   11a96:	4652      	mov	r2, sl
   11a98:	465b      	mov	r3, fp
   11a9a:	f002 f981 	bl	13da0 <__aeabi_dmul>
   11a9e:	3701      	adds	r7, #1
   11aa0:	460b      	mov	r3, r1
   11aa2:	4602      	mov	r2, r0
   11aa4:	4649      	mov	r1, r9
   11aa6:	4640      	mov	r0, r8
   11aa8:	f7fb f994 	bl	cdd4 <__aeabi_dsub>
   11aac:	f105 0330 	add.w	r3, r5, #48	; 0x30
   11ab0:	42a7      	cmp	r7, r4
   11ab2:	f806 3b01 	strb.w	r3, [r6], #1
   11ab6:	f000 8329 	beq.w	1210c <_dtoa_r+0xbec>
   11aba:	4ba5      	ldr	r3, [pc, #660]	; (11d50 <_dtoa_r+0x830>)
   11abc:	2200      	movs	r2, #0
   11abe:	f002 f96f 	bl	13da0 <__aeabi_dmul>
   11ac2:	2200      	movs	r2, #0
   11ac4:	2300      	movs	r3, #0
   11ac6:	4680      	mov	r8, r0
   11ac8:	4689      	mov	r9, r1
   11aca:	f7fb fb91 	bl	d1f0 <__aeabi_dcmpeq>
   11ace:	2800      	cmp	r0, #0
   11ad0:	d0d6      	beq.n	11a80 <_dtoa_r+0x560>
   11ad2:	9d04      	ldr	r5, [sp, #16]
   11ad4:	9c06      	ldr	r4, [sp, #24]
   11ad6:	9b07      	ldr	r3, [sp, #28]
   11ad8:	3301      	adds	r3, #1
   11ada:	9307      	str	r3, [sp, #28]
   11adc:	46b1      	mov	r9, r6
   11ade:	e0d6      	b.n	11c8e <_dtoa_r+0x76e>
   11ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11ae2:	2a00      	cmp	r2, #0
   11ae4:	f000 8107 	beq.w	11cf6 <_dtoa_r+0x7d6>
   11ae8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11aea:	2a01      	cmp	r2, #1
   11aec:	f340 8294 	ble.w	12018 <_dtoa_r+0xaf8>
   11af0:	9b08      	ldr	r3, [sp, #32]
   11af2:	f103 38ff 	add.w	r8, r3, #4294967295
   11af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11af8:	4543      	cmp	r3, r8
   11afa:	f280 825e 	bge.w	11fba <_dtoa_r+0xa9a>
   11afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11b00:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   11b04:	eba8 0303 	sub.w	r3, r8, r3
   11b08:	449b      	add	fp, r3
   11b0a:	f04f 0800 	mov.w	r8, #0
   11b0e:	9b08      	ldr	r3, [sp, #32]
   11b10:	2b00      	cmp	r3, #0
   11b12:	f2c0 832f 	blt.w	12174 <_dtoa_r+0xc54>
   11b16:	9a06      	ldr	r2, [sp, #24]
   11b18:	441a      	add	r2, r3
   11b1a:	9206      	str	r2, [sp, #24]
   11b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11b1e:	4617      	mov	r7, r2
   11b20:	441a      	add	r2, r3
   11b22:	9209      	str	r2, [sp, #36]	; 0x24
   11b24:	2101      	movs	r1, #1
   11b26:	4620      	mov	r0, r4
   11b28:	f7fd f988 	bl	ee3c <__i2b>
   11b2c:	4606      	mov	r6, r0
   11b2e:	b167      	cbz	r7, 11b4a <_dtoa_r+0x62a>
   11b30:	9906      	ldr	r1, [sp, #24]
   11b32:	2900      	cmp	r1, #0
   11b34:	460b      	mov	r3, r1
   11b36:	dd08      	ble.n	11b4a <_dtoa_r+0x62a>
   11b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11b3a:	42b9      	cmp	r1, r7
   11b3c:	bfa8      	it	ge
   11b3e:	463b      	movge	r3, r7
   11b40:	1ad2      	subs	r2, r2, r3
   11b42:	1aff      	subs	r7, r7, r3
   11b44:	1acb      	subs	r3, r1, r3
   11b46:	9209      	str	r2, [sp, #36]	; 0x24
   11b48:	9306      	str	r3, [sp, #24]
   11b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11b4c:	b163      	cbz	r3, 11b68 <_dtoa_r+0x648>
   11b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11b50:	2b00      	cmp	r3, #0
   11b52:	f000 82b6 	beq.w	120c2 <_dtoa_r+0xba2>
   11b56:	f1b8 0f00 	cmp.w	r8, #0
   11b5a:	f300 8231 	bgt.w	11fc0 <_dtoa_r+0xaa0>
   11b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11b60:	ebb3 0208 	subs.w	r2, r3, r8
   11b64:	f040 8316 	bne.w	12194 <_dtoa_r+0xc74>
   11b68:	2101      	movs	r1, #1
   11b6a:	4620      	mov	r0, r4
   11b6c:	f7fd f966 	bl	ee3c <__i2b>
   11b70:	f1bb 0f00 	cmp.w	fp, #0
   11b74:	4682      	mov	sl, r0
   11b76:	f300 80d4 	bgt.w	11d22 <_dtoa_r+0x802>
   11b7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11b7c:	2b01      	cmp	r3, #1
   11b7e:	f340 81a7 	ble.w	11ed0 <_dtoa_r+0x9b0>
   11b82:	f04f 0900 	mov.w	r9, #0
   11b86:	2001      	movs	r0, #1
   11b88:	f1bb 0f00 	cmp.w	fp, #0
   11b8c:	f040 80d5 	bne.w	11d3a <_dtoa_r+0x81a>
   11b90:	9b06      	ldr	r3, [sp, #24]
   11b92:	4418      	add	r0, r3
   11b94:	f010 001f 	ands.w	r0, r0, #31
   11b98:	f000 8198 	beq.w	11ecc <_dtoa_r+0x9ac>
   11b9c:	f1c0 0320 	rsb	r3, r0, #32
   11ba0:	2b04      	cmp	r3, #4
   11ba2:	f300 80ad 	bgt.w	11d00 <_dtoa_r+0x7e0>
   11ba6:	f040 8224 	bne.w	11ff2 <_dtoa_r+0xad2>
   11baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11bac:	2b00      	cmp	r3, #0
   11bae:	dd05      	ble.n	11bbc <_dtoa_r+0x69c>
   11bb0:	4629      	mov	r1, r5
   11bb2:	461a      	mov	r2, r3
   11bb4:	4620      	mov	r0, r4
   11bb6:	f7fd fa7d 	bl	f0b4 <__lshift>
   11bba:	4605      	mov	r5, r0
   11bbc:	9b06      	ldr	r3, [sp, #24]
   11bbe:	2b00      	cmp	r3, #0
   11bc0:	dd05      	ble.n	11bce <_dtoa_r+0x6ae>
   11bc2:	4651      	mov	r1, sl
   11bc4:	461a      	mov	r2, r3
   11bc6:	4620      	mov	r0, r4
   11bc8:	f7fd fa74 	bl	f0b4 <__lshift>
   11bcc:	4682      	mov	sl, r0
   11bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11bd0:	2b00      	cmp	r3, #0
   11bd2:	f040 815c 	bne.w	11e8e <_dtoa_r+0x96e>
   11bd6:	9b08      	ldr	r3, [sp, #32]
   11bd8:	2b00      	cmp	r3, #0
   11bda:	f340 8143 	ble.w	11e64 <_dtoa_r+0x944>
   11bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11be0:	2b00      	cmp	r3, #0
   11be2:	f040 80c6 	bne.w	11d72 <_dtoa_r+0x852>
   11be6:	9b07      	ldr	r3, [sp, #28]
   11be8:	3301      	adds	r3, #1
   11bea:	9307      	str	r3, [sp, #28]
   11bec:	f8dd 800c 	ldr.w	r8, [sp, #12]
   11bf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
   11bf4:	2701      	movs	r7, #1
   11bf6:	e007      	b.n	11c08 <_dtoa_r+0x6e8>
   11bf8:	4629      	mov	r1, r5
   11bfa:	2300      	movs	r3, #0
   11bfc:	220a      	movs	r2, #10
   11bfe:	4620      	mov	r0, r4
   11c00:	f7fd f87c 	bl	ecfc <__multadd>
   11c04:	3701      	adds	r7, #1
   11c06:	4605      	mov	r5, r0
   11c08:	4651      	mov	r1, sl
   11c0a:	4628      	mov	r0, r5
   11c0c:	f7ff fbf4 	bl	113f8 <quorem>
   11c10:	45b9      	cmp	r9, r7
   11c12:	f100 0330 	add.w	r3, r0, #48	; 0x30
   11c16:	f808 3b01 	strb.w	r3, [r8], #1
   11c1a:	dced      	bgt.n	11bf8 <_dtoa_r+0x6d8>
   11c1c:	9a08      	ldr	r2, [sp, #32]
   11c1e:	2a00      	cmp	r2, #0
   11c20:	bfc8      	it	gt
   11c22:	4693      	movgt	fp, r2
   11c24:	9a03      	ldr	r2, [sp, #12]
   11c26:	bfd8      	it	le
   11c28:	f04f 0b01 	movle.w	fp, #1
   11c2c:	4493      	add	fp, r2
   11c2e:	2700      	movs	r7, #0
   11c30:	4629      	mov	r1, r5
   11c32:	2201      	movs	r2, #1
   11c34:	4620      	mov	r0, r4
   11c36:	9304      	str	r3, [sp, #16]
   11c38:	f7fd fa3c 	bl	f0b4 <__lshift>
   11c3c:	4651      	mov	r1, sl
   11c3e:	4605      	mov	r5, r0
   11c40:	f7fd fab0 	bl	f1a4 <__mcmp>
   11c44:	2800      	cmp	r0, #0
   11c46:	f340 81dc 	ble.w	12002 <_dtoa_r+0xae2>
   11c4a:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   11c4e:	9a03      	ldr	r2, [sp, #12]
   11c50:	f10b 3bff 	add.w	fp, fp, #4294967295
   11c54:	e004      	b.n	11c60 <_dtoa_r+0x740>
   11c56:	455a      	cmp	r2, fp
   11c58:	f000 81ee 	beq.w	12038 <_dtoa_r+0xb18>
   11c5c:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11c60:	2b39      	cmp	r3, #57	; 0x39
   11c62:	f10b 0901 	add.w	r9, fp, #1
   11c66:	d0f6      	beq.n	11c56 <_dtoa_r+0x736>
   11c68:	3301      	adds	r3, #1
   11c6a:	f88b 3000 	strb.w	r3, [fp]
   11c6e:	4651      	mov	r1, sl
   11c70:	4620      	mov	r0, r4
   11c72:	f7fd f839 	bl	ece8 <_Bfree>
   11c76:	b156      	cbz	r6, 11c8e <_dtoa_r+0x76e>
   11c78:	b12f      	cbz	r7, 11c86 <_dtoa_r+0x766>
   11c7a:	42b7      	cmp	r7, r6
   11c7c:	d003      	beq.n	11c86 <_dtoa_r+0x766>
   11c7e:	4639      	mov	r1, r7
   11c80:	4620      	mov	r0, r4
   11c82:	f7fd f831 	bl	ece8 <_Bfree>
   11c86:	4631      	mov	r1, r6
   11c88:	4620      	mov	r0, r4
   11c8a:	f7fd f82d 	bl	ece8 <_Bfree>
   11c8e:	4629      	mov	r1, r5
   11c90:	4620      	mov	r0, r4
   11c92:	f7fd f829 	bl	ece8 <_Bfree>
   11c96:	2300      	movs	r3, #0
   11c98:	f889 3000 	strb.w	r3, [r9]
   11c9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11c9e:	9a07      	ldr	r2, [sp, #28]
   11ca0:	601a      	str	r2, [r3, #0]
   11ca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11ca4:	2b00      	cmp	r3, #0
   11ca6:	f43f ac77 	beq.w	11598 <_dtoa_r+0x78>
   11caa:	9803      	ldr	r0, [sp, #12]
   11cac:	f8c3 9000 	str.w	r9, [r3]
   11cb0:	b019      	add	sp, #100	; 0x64
   11cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cb6:	2301      	movs	r3, #1
   11cb8:	1bbf      	subs	r7, r7, r6
   11cba:	930e      	str	r3, [sp, #56]	; 0x38
   11cbc:	1e7b      	subs	r3, r7, #1
   11cbe:	9306      	str	r3, [sp, #24]
   11cc0:	f57f acd9 	bpl.w	11676 <_dtoa_r+0x156>
   11cc4:	f1c7 0301 	rsb	r3, r7, #1
   11cc8:	9309      	str	r3, [sp, #36]	; 0x24
   11cca:	2300      	movs	r3, #0
   11ccc:	9306      	str	r3, [sp, #24]
   11cce:	e4d4      	b.n	1167a <_dtoa_r+0x15a>
   11cd0:	4658      	mov	r0, fp
   11cd2:	f7fb f9cd 	bl	d070 <__aeabi_i2d>
   11cd6:	4642      	mov	r2, r8
   11cd8:	464b      	mov	r3, r9
   11cda:	f7fb fa89 	bl	d1f0 <__aeabi_dcmpeq>
   11cde:	2800      	cmp	r0, #0
   11ce0:	f47f acb1 	bne.w	11646 <_dtoa_r+0x126>
   11ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
   11ce8:	e4ad      	b.n	11646 <_dtoa_r+0x126>
   11cea:	4b1a      	ldr	r3, [pc, #104]	; (11d54 <_dtoa_r+0x834>)
   11cec:	9303      	str	r3, [sp, #12]
   11cee:	9803      	ldr	r0, [sp, #12]
   11cf0:	b019      	add	sp, #100	; 0x64
   11cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cf6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11cfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
   11cfc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11cfe:	e716      	b.n	11b2e <_dtoa_r+0x60e>
   11d00:	f1c0 001c 	rsb	r0, r0, #28
   11d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11d06:	4403      	add	r3, r0
   11d08:	9309      	str	r3, [sp, #36]	; 0x24
   11d0a:	9b06      	ldr	r3, [sp, #24]
   11d0c:	4403      	add	r3, r0
   11d0e:	4407      	add	r7, r0
   11d10:	9306      	str	r3, [sp, #24]
   11d12:	e74a      	b.n	11baa <_dtoa_r+0x68a>
   11d14:	2601      	movs	r6, #1
   11d16:	e4c7      	b.n	116a8 <_dtoa_r+0x188>
   11d18:	f1c3 0320 	rsb	r3, r3, #32
   11d1c:	fa08 f003 	lsl.w	r0, r8, r3
   11d20:	e45e      	b.n	115e0 <_dtoa_r+0xc0>
   11d22:	4601      	mov	r1, r0
   11d24:	465a      	mov	r2, fp
   11d26:	4620      	mov	r0, r4
   11d28:	f7fd f964 	bl	eff4 <__pow5mult>
   11d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11d2e:	2b01      	cmp	r3, #1
   11d30:	4682      	mov	sl, r0
   11d32:	f340 81ba 	ble.w	120aa <_dtoa_r+0xb8a>
   11d36:	f04f 0900 	mov.w	r9, #0
   11d3a:	f8da 3010 	ldr.w	r3, [sl, #16]
   11d3e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   11d42:	6918      	ldr	r0, [r3, #16]
   11d44:	f7fd f82a 	bl	ed9c <__hi0bits>
   11d48:	f1c0 0020 	rsb	r0, r0, #32
   11d4c:	e720      	b.n	11b90 <_dtoa_r+0x670>
   11d4e:	bf00      	nop
   11d50:	40240000 	.word	0x40240000
   11d54:	00014860 	.word	0x00014860
   11d58:	4631      	mov	r1, r6
   11d5a:	2300      	movs	r3, #0
   11d5c:	220a      	movs	r2, #10
   11d5e:	4620      	mov	r0, r4
   11d60:	f7fc ffcc 	bl	ecfc <__multadd>
   11d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11d66:	2b00      	cmp	r3, #0
   11d68:	4606      	mov	r6, r0
   11d6a:	f340 82f3 	ble.w	12354 <_dtoa_r+0xe34>
   11d6e:	e9cd 8307 	strd	r8, r3, [sp, #28]
   11d72:	2f00      	cmp	r7, #0
   11d74:	f300 811a 	bgt.w	11fac <_dtoa_r+0xa8c>
   11d78:	f1b9 0f00 	cmp.w	r9, #0
   11d7c:	f040 81e3 	bne.w	12146 <_dtoa_r+0xc26>
   11d80:	46b0      	mov	r8, r6
   11d82:	9b04      	ldr	r3, [sp, #16]
   11d84:	9f03      	ldr	r7, [sp, #12]
   11d86:	9908      	ldr	r1, [sp, #32]
   11d88:	f003 0201 	and.w	r2, r3, #1
   11d8c:	1e7b      	subs	r3, r7, #1
   11d8e:	4419      	add	r1, r3
   11d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11d92:	920c      	str	r2, [sp, #48]	; 0x30
   11d94:	4313      	orrs	r3, r2
   11d96:	9109      	str	r1, [sp, #36]	; 0x24
   11d98:	930a      	str	r3, [sp, #40]	; 0x28
   11d9a:	4651      	mov	r1, sl
   11d9c:	4628      	mov	r0, r5
   11d9e:	f7ff fb2b 	bl	113f8 <quorem>
   11da2:	4631      	mov	r1, r6
   11da4:	4683      	mov	fp, r0
   11da6:	4628      	mov	r0, r5
   11da8:	f7fd f9fc 	bl	f1a4 <__mcmp>
   11dac:	4642      	mov	r2, r8
   11dae:	4651      	mov	r1, sl
   11db0:	4681      	mov	r9, r0
   11db2:	4620      	mov	r0, r4
   11db4:	f7fd fa16 	bl	f1e4 <__mdiff>
   11db8:	68c2      	ldr	r2, [r0, #12]
   11dba:	4601      	mov	r1, r0
   11dbc:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   11dc0:	2a00      	cmp	r2, #0
   11dc2:	d142      	bne.n	11e4a <_dtoa_r+0x92a>
   11dc4:	9006      	str	r0, [sp, #24]
   11dc6:	4628      	mov	r0, r5
   11dc8:	9308      	str	r3, [sp, #32]
   11dca:	f7fd f9eb 	bl	f1a4 <__mcmp>
   11dce:	9906      	ldr	r1, [sp, #24]
   11dd0:	9004      	str	r0, [sp, #16]
   11dd2:	4620      	mov	r0, r4
   11dd4:	f7fc ff88 	bl	ece8 <_Bfree>
   11dd8:	9a04      	ldr	r2, [sp, #16]
   11dda:	9b08      	ldr	r3, [sp, #32]
   11ddc:	b91a      	cbnz	r2, 11de6 <_dtoa_r+0x8c6>
   11dde:	990a      	ldr	r1, [sp, #40]	; 0x28
   11de0:	2900      	cmp	r1, #0
   11de2:	f000 82a9 	beq.w	12338 <_dtoa_r+0xe18>
   11de6:	f1b9 0f00 	cmp.w	r9, #0
   11dea:	f2c0 8171 	blt.w	120d0 <_dtoa_r+0xbb0>
   11dee:	9922      	ldr	r1, [sp, #136]	; 0x88
   11df0:	ea49 0901 	orr.w	r9, r9, r1
   11df4:	990c      	ldr	r1, [sp, #48]	; 0x30
   11df6:	ea51 0909 	orrs.w	r9, r1, r9
   11dfa:	f000 8169 	beq.w	120d0 <_dtoa_r+0xbb0>
   11dfe:	2a00      	cmp	r2, #0
   11e00:	f300 81bc 	bgt.w	1217c <_dtoa_r+0xc5c>
   11e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11e06:	703b      	strb	r3, [r7, #0]
   11e08:	f107 0901 	add.w	r9, r7, #1
   11e0c:	4297      	cmp	r7, r2
   11e0e:	46cb      	mov	fp, r9
   11e10:	f000 81ba 	beq.w	12188 <_dtoa_r+0xc68>
   11e14:	4629      	mov	r1, r5
   11e16:	2300      	movs	r3, #0
   11e18:	220a      	movs	r2, #10
   11e1a:	4620      	mov	r0, r4
   11e1c:	f7fc ff6e 	bl	ecfc <__multadd>
   11e20:	4546      	cmp	r6, r8
   11e22:	4605      	mov	r5, r0
   11e24:	4631      	mov	r1, r6
   11e26:	f04f 0300 	mov.w	r3, #0
   11e2a:	f04f 020a 	mov.w	r2, #10
   11e2e:	4620      	mov	r0, r4
   11e30:	d012      	beq.n	11e58 <_dtoa_r+0x938>
   11e32:	f7fc ff63 	bl	ecfc <__multadd>
   11e36:	4641      	mov	r1, r8
   11e38:	4606      	mov	r6, r0
   11e3a:	2300      	movs	r3, #0
   11e3c:	220a      	movs	r2, #10
   11e3e:	4620      	mov	r0, r4
   11e40:	f7fc ff5c 	bl	ecfc <__multadd>
   11e44:	464f      	mov	r7, r9
   11e46:	4680      	mov	r8, r0
   11e48:	e7a7      	b.n	11d9a <_dtoa_r+0x87a>
   11e4a:	4620      	mov	r0, r4
   11e4c:	9304      	str	r3, [sp, #16]
   11e4e:	f7fc ff4b 	bl	ece8 <_Bfree>
   11e52:	9b04      	ldr	r3, [sp, #16]
   11e54:	2201      	movs	r2, #1
   11e56:	e7c6      	b.n	11de6 <_dtoa_r+0x8c6>
   11e58:	f7fc ff50 	bl	ecfc <__multadd>
   11e5c:	464f      	mov	r7, r9
   11e5e:	4606      	mov	r6, r0
   11e60:	4680      	mov	r8, r0
   11e62:	e79a      	b.n	11d9a <_dtoa_r+0x87a>
   11e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11e66:	2b02      	cmp	r3, #2
   11e68:	dc79      	bgt.n	11f5e <_dtoa_r+0xa3e>
   11e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11e6c:	2b00      	cmp	r3, #0
   11e6e:	d180      	bne.n	11d72 <_dtoa_r+0x852>
   11e70:	9b07      	ldr	r3, [sp, #28]
   11e72:	4651      	mov	r1, sl
   11e74:	3301      	adds	r3, #1
   11e76:	4628      	mov	r0, r5
   11e78:	9307      	str	r3, [sp, #28]
   11e7a:	f7ff fabd 	bl	113f8 <quorem>
   11e7e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   11e82:	f100 0330 	add.w	r3, r0, #48	; 0x30
   11e86:	f80b 3b01 	strb.w	r3, [fp], #1
   11e8a:	2700      	movs	r7, #0
   11e8c:	e6d0      	b.n	11c30 <_dtoa_r+0x710>
   11e8e:	4651      	mov	r1, sl
   11e90:	4628      	mov	r0, r5
   11e92:	f7fd f987 	bl	f1a4 <__mcmp>
   11e96:	2800      	cmp	r0, #0
   11e98:	f6bf ae9d 	bge.w	11bd6 <_dtoa_r+0x6b6>
   11e9c:	4629      	mov	r1, r5
   11e9e:	2300      	movs	r3, #0
   11ea0:	220a      	movs	r2, #10
   11ea2:	4620      	mov	r0, r4
   11ea4:	f7fc ff2a 	bl	ecfc <__multadd>
   11ea8:	9b07      	ldr	r3, [sp, #28]
   11eaa:	f103 38ff 	add.w	r8, r3, #4294967295
   11eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11eb0:	4605      	mov	r5, r0
   11eb2:	2b00      	cmp	r3, #0
   11eb4:	f47f af50 	bne.w	11d58 <_dtoa_r+0x838>
   11eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11eba:	2b00      	cmp	r3, #0
   11ebc:	f340 8243 	ble.w	12346 <_dtoa_r+0xe26>
   11ec0:	9308      	str	r3, [sp, #32]
   11ec2:	e693      	b.n	11bec <_dtoa_r+0x6cc>
   11ec4:	4bb6      	ldr	r3, [pc, #728]	; (121a0 <_dtoa_r+0xc80>)
   11ec6:	9303      	str	r3, [sp, #12]
   11ec8:	3303      	adds	r3, #3
   11eca:	e408      	b.n	116de <_dtoa_r+0x1be>
   11ecc:	201c      	movs	r0, #28
   11ece:	e719      	b.n	11d04 <_dtoa_r+0x7e4>
   11ed0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11ed4:	2900      	cmp	r1, #0
   11ed6:	f47f ae54 	bne.w	11b82 <_dtoa_r+0x662>
   11eda:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11ede:	2b00      	cmp	r3, #0
   11ee0:	f47f ae4f 	bne.w	11b82 <_dtoa_r+0x662>
   11ee4:	4baf      	ldr	r3, [pc, #700]	; (121a4 <_dtoa_r+0xc84>)
   11ee6:	4013      	ands	r3, r2
   11ee8:	2b00      	cmp	r3, #0
   11eea:	f000 820b 	beq.w	12304 <_dtoa_r+0xde4>
   11eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ef0:	3301      	adds	r3, #1
   11ef2:	9309      	str	r3, [sp, #36]	; 0x24
   11ef4:	9b06      	ldr	r3, [sp, #24]
   11ef6:	3301      	adds	r3, #1
   11ef8:	9306      	str	r3, [sp, #24]
   11efa:	f04f 0901 	mov.w	r9, #1
   11efe:	e642      	b.n	11b86 <_dtoa_r+0x666>
   11f00:	2301      	movs	r3, #1
   11f02:	930c      	str	r3, [sp, #48]	; 0x30
   11f04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11f06:	9a07      	ldr	r2, [sp, #28]
   11f08:	4413      	add	r3, r2
   11f0a:	9312      	str	r3, [sp, #72]	; 0x48
   11f0c:	3301      	adds	r3, #1
   11f0e:	2b01      	cmp	r3, #1
   11f10:	461f      	mov	r7, r3
   11f12:	9308      	str	r3, [sp, #32]
   11f14:	bfb8      	it	lt
   11f16:	2701      	movlt	r7, #1
   11f18:	2100      	movs	r1, #0
   11f1a:	2f17      	cmp	r7, #23
   11f1c:	63e1      	str	r1, [r4, #60]	; 0x3c
   11f1e:	f77f ac2f 	ble.w	11780 <_dtoa_r+0x260>
   11f22:	2201      	movs	r2, #1
   11f24:	2304      	movs	r3, #4
   11f26:	005b      	lsls	r3, r3, #1
   11f28:	f103 0014 	add.w	r0, r3, #20
   11f2c:	42b8      	cmp	r0, r7
   11f2e:	4611      	mov	r1, r2
   11f30:	f102 0201 	add.w	r2, r2, #1
   11f34:	d9f7      	bls.n	11f26 <_dtoa_r+0xa06>
   11f36:	63e1      	str	r1, [r4, #60]	; 0x3c
   11f38:	e422      	b.n	11780 <_dtoa_r+0x260>
   11f3a:	2301      	movs	r3, #1
   11f3c:	930c      	str	r3, [sp, #48]	; 0x30
   11f3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11f40:	2b00      	cmp	r3, #0
   11f42:	dd59      	ble.n	11ff8 <_dtoa_r+0xad8>
   11f44:	9312      	str	r3, [sp, #72]	; 0x48
   11f46:	9308      	str	r3, [sp, #32]
   11f48:	461f      	mov	r7, r3
   11f4a:	e7e5      	b.n	11f18 <_dtoa_r+0x9f8>
   11f4c:	2300      	movs	r3, #0
   11f4e:	930c      	str	r3, [sp, #48]	; 0x30
   11f50:	e7d8      	b.n	11f04 <_dtoa_r+0x9e4>
   11f52:	2300      	movs	r3, #0
   11f54:	930c      	str	r3, [sp, #48]	; 0x30
   11f56:	e7f2      	b.n	11f3e <_dtoa_r+0xa1e>
   11f58:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11f5a:	e9cd 8307 	strd	r8, r3, [sp, #28]
   11f5e:	9b08      	ldr	r3, [sp, #32]
   11f60:	2b00      	cmp	r3, #0
   11f62:	f47f ad54 	bne.w	11a0e <_dtoa_r+0x4ee>
   11f66:	4651      	mov	r1, sl
   11f68:	2205      	movs	r2, #5
   11f6a:	4620      	mov	r0, r4
   11f6c:	f7fc fec6 	bl	ecfc <__multadd>
   11f70:	4601      	mov	r1, r0
   11f72:	4682      	mov	sl, r0
   11f74:	4628      	mov	r0, r5
   11f76:	f7fd f915 	bl	f1a4 <__mcmp>
   11f7a:	2800      	cmp	r0, #0
   11f7c:	f77f ad47 	ble.w	11a0e <_dtoa_r+0x4ee>
   11f80:	9b03      	ldr	r3, [sp, #12]
   11f82:	9f07      	ldr	r7, [sp, #28]
   11f84:	2231      	movs	r2, #49	; 0x31
   11f86:	4698      	mov	r8, r3
   11f88:	f803 2b01 	strb.w	r2, [r3], #1
   11f8c:	3701      	adds	r7, #1
   11f8e:	9303      	str	r3, [sp, #12]
   11f90:	4651      	mov	r1, sl
   11f92:	4620      	mov	r0, r4
   11f94:	f7fc fea8 	bl	ece8 <_Bfree>
   11f98:	1c7b      	adds	r3, r7, #1
   11f9a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11f9e:	9307      	str	r3, [sp, #28]
   11fa0:	f8cd 800c 	str.w	r8, [sp, #12]
   11fa4:	2e00      	cmp	r6, #0
   11fa6:	f47f ae6e 	bne.w	11c86 <_dtoa_r+0x766>
   11faa:	e670      	b.n	11c8e <_dtoa_r+0x76e>
   11fac:	4631      	mov	r1, r6
   11fae:	463a      	mov	r2, r7
   11fb0:	4620      	mov	r0, r4
   11fb2:	f7fd f87f 	bl	f0b4 <__lshift>
   11fb6:	4606      	mov	r6, r0
   11fb8:	e6de      	b.n	11d78 <_dtoa_r+0x858>
   11fba:	eba3 0808 	sub.w	r8, r3, r8
   11fbe:	e5a6      	b.n	11b0e <_dtoa_r+0x5ee>
   11fc0:	4631      	mov	r1, r6
   11fc2:	4642      	mov	r2, r8
   11fc4:	4620      	mov	r0, r4
   11fc6:	f7fd f815 	bl	eff4 <__pow5mult>
   11fca:	462a      	mov	r2, r5
   11fcc:	4601      	mov	r1, r0
   11fce:	4606      	mov	r6, r0
   11fd0:	4620      	mov	r0, r4
   11fd2:	f7fc ff61 	bl	ee98 <__multiply>
   11fd6:	4629      	mov	r1, r5
   11fd8:	4605      	mov	r5, r0
   11fda:	4620      	mov	r0, r4
   11fdc:	f7fc fe84 	bl	ece8 <_Bfree>
   11fe0:	e5bd      	b.n	11b5e <_dtoa_r+0x63e>
   11fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11fe6:	f04f 0a02 	mov.w	sl, #2
   11fea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11fee:	f7ff bbf4 	b.w	117da <_dtoa_r+0x2ba>
   11ff2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11ff6:	e685      	b.n	11d04 <_dtoa_r+0x7e4>
   11ff8:	2301      	movs	r3, #1
   11ffa:	9323      	str	r3, [sp, #140]	; 0x8c
   11ffc:	9308      	str	r3, [sp, #32]
   11ffe:	f7ff bbbb 	b.w	11778 <_dtoa_r+0x258>
   12002:	d103      	bne.n	1200c <_dtoa_r+0xaec>
   12004:	9b04      	ldr	r3, [sp, #16]
   12006:	07db      	lsls	r3, r3, #31
   12008:	f53f ae1f 	bmi.w	11c4a <_dtoa_r+0x72a>
   1200c:	46d9      	mov	r9, fp
   1200e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   12012:	2b30      	cmp	r3, #48	; 0x30
   12014:	d0fa      	beq.n	1200c <_dtoa_r+0xaec>
   12016:	e62a      	b.n	11c6e <_dtoa_r+0x74e>
   12018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1201a:	2a00      	cmp	r2, #0
   1201c:	f000 812d 	beq.w	1227a <_dtoa_r+0xd5a>
   12020:	f203 4333 	addw	r3, r3, #1075	; 0x433
   12024:	9a06      	ldr	r2, [sp, #24]
   12026:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   1202a:	441a      	add	r2, r3
   1202c:	9206      	str	r2, [sp, #24]
   1202e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12030:	4617      	mov	r7, r2
   12032:	441a      	add	r2, r3
   12034:	9209      	str	r2, [sp, #36]	; 0x24
   12036:	e575      	b.n	11b24 <_dtoa_r+0x604>
   12038:	9b07      	ldr	r3, [sp, #28]
   1203a:	9a03      	ldr	r2, [sp, #12]
   1203c:	3301      	adds	r3, #1
   1203e:	9307      	str	r3, [sp, #28]
   12040:	2331      	movs	r3, #49	; 0x31
   12042:	7013      	strb	r3, [r2, #0]
   12044:	e613      	b.n	11c6e <_dtoa_r+0x74e>
   12046:	f04f 0a00 	mov.w	sl, #0
   1204a:	4656      	mov	r6, sl
   1204c:	e4df      	b.n	11a0e <_dtoa_r+0x4ee>
   1204e:	900e      	str	r0, [sp, #56]	; 0x38
   12050:	e638      	b.n	11cc4 <_dtoa_r+0x7a4>
   12052:	f000 813d 	beq.w	122d0 <_dtoa_r+0xdb0>
   12056:	9a07      	ldr	r2, [sp, #28]
   12058:	4b53      	ldr	r3, [pc, #332]	; (121a8 <_dtoa_r+0xc88>)
   1205a:	4256      	negs	r6, r2
   1205c:	f006 020f 	and.w	r2, r6, #15
   12060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12064:	e9d3 2300 	ldrd	r2, r3, [r3]
   12068:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1206c:	f001 fe98 	bl	13da0 <__aeabi_dmul>
   12070:	1136      	asrs	r6, r6, #4
   12072:	4680      	mov	r8, r0
   12074:	4689      	mov	r9, r1
   12076:	f000 8178 	beq.w	1236a <_dtoa_r+0xe4a>
   1207a:	4f4c      	ldr	r7, [pc, #304]	; (121ac <_dtoa_r+0xc8c>)
   1207c:	2300      	movs	r3, #0
   1207e:	f04f 0a02 	mov.w	sl, #2
   12082:	07f2      	lsls	r2, r6, #31
   12084:	d506      	bpl.n	12094 <_dtoa_r+0xb74>
   12086:	e9d7 2300 	ldrd	r2, r3, [r7]
   1208a:	f001 fe89 	bl	13da0 <__aeabi_dmul>
   1208e:	f10a 0a01 	add.w	sl, sl, #1
   12092:	2301      	movs	r3, #1
   12094:	1076      	asrs	r6, r6, #1
   12096:	f107 0708 	add.w	r7, r7, #8
   1209a:	d1f2      	bne.n	12082 <_dtoa_r+0xb62>
   1209c:	2b00      	cmp	r3, #0
   1209e:	f43f abbb 	beq.w	11818 <_dtoa_r+0x2f8>
   120a2:	4680      	mov	r8, r0
   120a4:	4689      	mov	r9, r1
   120a6:	f7ff bbb7 	b.w	11818 <_dtoa_r+0x2f8>
   120aa:	9b04      	ldr	r3, [sp, #16]
   120ac:	2b00      	cmp	r3, #0
   120ae:	f47f ae42 	bne.w	11d36 <_dtoa_r+0x816>
   120b2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   120b6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   120ba:	2b00      	cmp	r3, #0
   120bc:	f43f af12 	beq.w	11ee4 <_dtoa_r+0x9c4>
   120c0:	e639      	b.n	11d36 <_dtoa_r+0x816>
   120c2:	4629      	mov	r1, r5
   120c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   120c6:	4620      	mov	r0, r4
   120c8:	f7fc ff94 	bl	eff4 <__pow5mult>
   120cc:	4605      	mov	r5, r0
   120ce:	e54b      	b.n	11b68 <_dtoa_r+0x648>
   120d0:	2a00      	cmp	r2, #0
   120d2:	dd12      	ble.n	120fa <_dtoa_r+0xbda>
   120d4:	4629      	mov	r1, r5
   120d6:	2201      	movs	r2, #1
   120d8:	4620      	mov	r0, r4
   120da:	9304      	str	r3, [sp, #16]
   120dc:	f7fc ffea 	bl	f0b4 <__lshift>
   120e0:	4651      	mov	r1, sl
   120e2:	4605      	mov	r5, r0
   120e4:	f7fd f85e 	bl	f1a4 <__mcmp>
   120e8:	2800      	cmp	r0, #0
   120ea:	9b04      	ldr	r3, [sp, #16]
   120ec:	f340 8118 	ble.w	12320 <_dtoa_r+0xe00>
   120f0:	2b39      	cmp	r3, #57	; 0x39
   120f2:	f000 80f9 	beq.w	122e8 <_dtoa_r+0xdc8>
   120f6:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   120fa:	46b9      	mov	r9, r7
   120fc:	f809 3b01 	strb.w	r3, [r9], #1
   12100:	9b07      	ldr	r3, [sp, #28]
   12102:	3301      	adds	r3, #1
   12104:	4637      	mov	r7, r6
   12106:	9307      	str	r3, [sp, #28]
   12108:	4646      	mov	r6, r8
   1210a:	e5b0      	b.n	11c6e <_dtoa_r+0x74e>
   1210c:	9509      	str	r5, [sp, #36]	; 0x24
   1210e:	9c06      	ldr	r4, [sp, #24]
   12110:	9d04      	ldr	r5, [sp, #16]
   12112:	4602      	mov	r2, r0
   12114:	460b      	mov	r3, r1
   12116:	f7fa fe5f 	bl	cdd8 <__adddf3>
   1211a:	4652      	mov	r2, sl
   1211c:	465b      	mov	r3, fp
   1211e:	4680      	mov	r8, r0
   12120:	4689      	mov	r9, r1
   12122:	f7fb f88d 	bl	d240 <__aeabi_dcmpgt>
   12126:	b960      	cbnz	r0, 12142 <_dtoa_r+0xc22>
   12128:	4652      	mov	r2, sl
   1212a:	465b      	mov	r3, fp
   1212c:	4640      	mov	r0, r8
   1212e:	4649      	mov	r1, r9
   12130:	f7fb f85e 	bl	d1f0 <__aeabi_dcmpeq>
   12134:	2800      	cmp	r0, #0
   12136:	f43f acce 	beq.w	11ad6 <_dtoa_r+0x5b6>
   1213a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1213c:	07d9      	lsls	r1, r3, #31
   1213e:	f57f acca 	bpl.w	11ad6 <_dtoa_r+0x5b6>
   12142:	9a03      	ldr	r2, [sp, #12]
   12144:	e404      	b.n	11950 <_dtoa_r+0x430>
   12146:	6871      	ldr	r1, [r6, #4]
   12148:	4620      	mov	r0, r4
   1214a:	f7fc fda7 	bl	ec9c <_Balloc>
   1214e:	4607      	mov	r7, r0
   12150:	2800      	cmp	r0, #0
   12152:	f000 810e 	beq.w	12372 <_dtoa_r+0xe52>
   12156:	6933      	ldr	r3, [r6, #16]
   12158:	3302      	adds	r3, #2
   1215a:	009a      	lsls	r2, r3, #2
   1215c:	f106 010c 	add.w	r1, r6, #12
   12160:	300c      	adds	r0, #12
   12162:	f7f8 f8e7 	bl	a334 <memcpy>
   12166:	4639      	mov	r1, r7
   12168:	2201      	movs	r2, #1
   1216a:	4620      	mov	r0, r4
   1216c:	f7fc ffa2 	bl	f0b4 <__lshift>
   12170:	4680      	mov	r8, r0
   12172:	e606      	b.n	11d82 <_dtoa_r+0x862>
   12174:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   12178:	1a9f      	subs	r7, r3, r2
   1217a:	e4d3      	b.n	11b24 <_dtoa_r+0x604>
   1217c:	2b39      	cmp	r3, #57	; 0x39
   1217e:	f000 80b3 	beq.w	122e8 <_dtoa_r+0xdc8>
   12182:	46b9      	mov	r9, r7
   12184:	3301      	adds	r3, #1
   12186:	e7b9      	b.n	120fc <_dtoa_r+0xbdc>
   12188:	9a07      	ldr	r2, [sp, #28]
   1218a:	3201      	adds	r2, #1
   1218c:	4637      	mov	r7, r6
   1218e:	9207      	str	r2, [sp, #28]
   12190:	4646      	mov	r6, r8
   12192:	e54d      	b.n	11c30 <_dtoa_r+0x710>
   12194:	4629      	mov	r1, r5
   12196:	4620      	mov	r0, r4
   12198:	f7fc ff2c 	bl	eff4 <__pow5mult>
   1219c:	4605      	mov	r5, r0
   1219e:	e4e3      	b.n	11b68 <_dtoa_r+0x648>
   121a0:	00016040 	.word	0x00016040
   121a4:	7ff00000 	.word	0x7ff00000
   121a8:	00015ec8 	.word	0x00015ec8
   121ac:	00015ea0 	.word	0x00015ea0
   121b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   121b4:	4981      	ldr	r1, [pc, #516]	; (123bc <_dtoa_r+0xe9c>)
   121b6:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   121ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   121be:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   121c2:	f001 fded 	bl	13da0 <__aeabi_dmul>
   121c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   121ca:	4649      	mov	r1, r9
   121cc:	4640      	mov	r0, r8
   121ce:	f001 fff9 	bl	141c4 <__aeabi_d2iz>
   121d2:	4606      	mov	r6, r0
   121d4:	f7fa ff4c 	bl	d070 <__aeabi_i2d>
   121d8:	460b      	mov	r3, r1
   121da:	4602      	mov	r2, r0
   121dc:	4649      	mov	r1, r9
   121de:	4640      	mov	r0, r8
   121e0:	f7fa fdf8 	bl	cdd4 <__aeabi_dsub>
   121e4:	9f03      	ldr	r7, [sp, #12]
   121e6:	4653      	mov	r3, sl
   121e8:	3630      	adds	r6, #48	; 0x30
   121ea:	2b01      	cmp	r3, #1
   121ec:	f807 6b01 	strb.w	r6, [r7], #1
   121f0:	4680      	mov	r8, r0
   121f2:	4689      	mov	r9, r1
   121f4:	f000 80b7 	beq.w	12366 <_dtoa_r+0xe46>
   121f8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   121fa:	9b03      	ldr	r3, [sp, #12]
   121fc:	441e      	add	r6, r3
   121fe:	4b70      	ldr	r3, [pc, #448]	; (123c0 <_dtoa_r+0xea0>)
   12200:	2200      	movs	r2, #0
   12202:	4640      	mov	r0, r8
   12204:	4649      	mov	r1, r9
   12206:	f001 fdcb 	bl	13da0 <__aeabi_dmul>
   1220a:	4689      	mov	r9, r1
   1220c:	4680      	mov	r8, r0
   1220e:	f001 ffd9 	bl	141c4 <__aeabi_d2iz>
   12212:	4682      	mov	sl, r0
   12214:	f7fa ff2c 	bl	d070 <__aeabi_i2d>
   12218:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   1221c:	4602      	mov	r2, r0
   1221e:	460b      	mov	r3, r1
   12220:	4640      	mov	r0, r8
   12222:	4649      	mov	r1, r9
   12224:	f7fa fdd6 	bl	cdd4 <__aeabi_dsub>
   12228:	f807 ab01 	strb.w	sl, [r7], #1
   1222c:	42be      	cmp	r6, r7
   1222e:	4680      	mov	r8, r0
   12230:	4689      	mov	r9, r1
   12232:	d1e4      	bne.n	121fe <_dtoa_r+0xcde>
   12234:	4b63      	ldr	r3, [pc, #396]	; (123c4 <_dtoa_r+0xea4>)
   12236:	2200      	movs	r2, #0
   12238:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1223c:	f7fa fdcc 	bl	cdd8 <__adddf3>
   12240:	4642      	mov	r2, r8
   12242:	464b      	mov	r3, r9
   12244:	f7fa ffde 	bl	d204 <__aeabi_dcmplt>
   12248:	2800      	cmp	r0, #0
   1224a:	d164      	bne.n	12316 <_dtoa_r+0xdf6>
   1224c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   12250:	495c      	ldr	r1, [pc, #368]	; (123c4 <_dtoa_r+0xea4>)
   12252:	2000      	movs	r0, #0
   12254:	f7fa fdbe 	bl	cdd4 <__aeabi_dsub>
   12258:	4642      	mov	r2, r8
   1225a:	464b      	mov	r3, r9
   1225c:	f7fa fff0 	bl	d240 <__aeabi_dcmpgt>
   12260:	2800      	cmp	r0, #0
   12262:	f43f abad 	beq.w	119c0 <_dtoa_r+0x4a0>
   12266:	46b1      	mov	r9, r6
   12268:	3e01      	subs	r6, #1
   1226a:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   1226e:	2b30      	cmp	r3, #48	; 0x30
   12270:	d0f9      	beq.n	12266 <_dtoa_r+0xd46>
   12272:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12274:	3301      	adds	r3, #1
   12276:	9307      	str	r3, [sp, #28]
   12278:	e509      	b.n	11c8e <_dtoa_r+0x76e>
   1227a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1227c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   12280:	e6d0      	b.n	12024 <_dtoa_r+0xb04>
   12282:	9b08      	ldr	r3, [sp, #32]
   12284:	2b00      	cmp	r3, #0
   12286:	f43f ab6f 	beq.w	11968 <_dtoa_r+0x448>
   1228a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1228c:	2b00      	cmp	r3, #0
   1228e:	f77f ab97 	ble.w	119c0 <_dtoa_r+0x4a0>
   12292:	9a07      	ldr	r2, [sp, #28]
   12294:	3a01      	subs	r2, #1
   12296:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   1229a:	4640      	mov	r0, r8
   1229c:	4b48      	ldr	r3, [pc, #288]	; (123c0 <_dtoa_r+0xea0>)
   1229e:	2200      	movs	r2, #0
   122a0:	4649      	mov	r1, r9
   122a2:	f001 fd7d 	bl	13da0 <__aeabi_dmul>
   122a6:	4680      	mov	r8, r0
   122a8:	4689      	mov	r9, r1
   122aa:	f10a 0001 	add.w	r0, sl, #1
   122ae:	f7fa fedf 	bl	d070 <__aeabi_i2d>
   122b2:	4642      	mov	r2, r8
   122b4:	464b      	mov	r3, r9
   122b6:	f001 fd73 	bl	13da0 <__aeabi_dmul>
   122ba:	4b43      	ldr	r3, [pc, #268]	; (123c8 <_dtoa_r+0xea8>)
   122bc:	2200      	movs	r2, #0
   122be:	f7fa fd8b 	bl	cdd8 <__adddf3>
   122c2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   122c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   122ca:	9311      	str	r3, [sp, #68]	; 0x44
   122cc:	f7ff bac7 	b.w	1185e <_dtoa_r+0x33e>
   122d0:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   122d4:	f04f 0a02 	mov.w	sl, #2
   122d8:	f7ff ba9e 	b.w	11818 <_dtoa_r+0x2f8>
   122dc:	9b07      	ldr	r3, [sp, #28]
   122de:	3301      	adds	r3, #1
   122e0:	9307      	str	r3, [sp, #28]
   122e2:	2331      	movs	r3, #49	; 0x31
   122e4:	f7ff bb3b 	b.w	1195e <_dtoa_r+0x43e>
   122e8:	9b07      	ldr	r3, [sp, #28]
   122ea:	46bb      	mov	fp, r7
   122ec:	3301      	adds	r3, #1
   122ee:	9307      	str	r3, [sp, #28]
   122f0:	2339      	movs	r3, #57	; 0x39
   122f2:	4637      	mov	r7, r6
   122f4:	f80b 3b01 	strb.w	r3, [fp], #1
   122f8:	4646      	mov	r6, r8
   122fa:	e4a8      	b.n	11c4e <_dtoa_r+0x72e>
   122fc:	f04f 0a00 	mov.w	sl, #0
   12300:	4656      	mov	r6, sl
   12302:	e63d      	b.n	11f80 <_dtoa_r+0xa60>
   12304:	4699      	mov	r9, r3
   12306:	e43e      	b.n	11b86 <_dtoa_r+0x666>
   12308:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1230a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1230c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1230e:	3301      	adds	r3, #1
   12310:	9307      	str	r3, [sp, #28]
   12312:	46b1      	mov	r9, r6
   12314:	e4bb      	b.n	11c8e <_dtoa_r+0x76e>
   12316:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12318:	9a03      	ldr	r2, [sp, #12]
   1231a:	9307      	str	r3, [sp, #28]
   1231c:	f7ff bb18 	b.w	11950 <_dtoa_r+0x430>
   12320:	f47f aeeb 	bne.w	120fa <_dtoa_r+0xbda>
   12324:	07da      	lsls	r2, r3, #31
   12326:	f57f aee8 	bpl.w	120fa <_dtoa_r+0xbda>
   1232a:	e6e1      	b.n	120f0 <_dtoa_r+0xbd0>
   1232c:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   12330:	9d10      	ldr	r5, [sp, #64]	; 0x40
   12332:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   12334:	f7ff bb44 	b.w	119c0 <_dtoa_r+0x4a0>
   12338:	2b39      	cmp	r3, #57	; 0x39
   1233a:	d0d5      	beq.n	122e8 <_dtoa_r+0xdc8>
   1233c:	f1b9 0f00 	cmp.w	r9, #0
   12340:	f73f aed9 	bgt.w	120f6 <_dtoa_r+0xbd6>
   12344:	e6d9      	b.n	120fa <_dtoa_r+0xbda>
   12346:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12348:	2b02      	cmp	r3, #2
   1234a:	f73f ae05 	bgt.w	11f58 <_dtoa_r+0xa38>
   1234e:	f8cd 801c 	str.w	r8, [sp, #28]
   12352:	e58d      	b.n	11e70 <_dtoa_r+0x950>
   12354:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12356:	2b02      	cmp	r3, #2
   12358:	f73f adfe 	bgt.w	11f58 <_dtoa_r+0xa38>
   1235c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1235e:	f8cd 801c 	str.w	r8, [sp, #28]
   12362:	9308      	str	r3, [sp, #32]
   12364:	e505      	b.n	11d72 <_dtoa_r+0x852>
   12366:	463e      	mov	r6, r7
   12368:	e764      	b.n	12234 <_dtoa_r+0xd14>
   1236a:	f04f 0a02 	mov.w	sl, #2
   1236e:	f7ff ba53 	b.w	11818 <_dtoa_r+0x2f8>
   12372:	4b16      	ldr	r3, [pc, #88]	; (123cc <_dtoa_r+0xeac>)
   12374:	4816      	ldr	r0, [pc, #88]	; (123d0 <_dtoa_r+0xeb0>)
   12376:	463a      	mov	r2, r7
   12378:	f240 21ef 	movw	r1, #751	; 0x2ef
   1237c:	f7fe ffe0 	bl	11340 <__assert_func>
   12380:	2600      	movs	r6, #0
   12382:	63e6      	str	r6, [r4, #60]	; 0x3c
   12384:	4631      	mov	r1, r6
   12386:	4620      	mov	r0, r4
   12388:	f7fc fc88 	bl	ec9c <_Balloc>
   1238c:	9003      	str	r0, [sp, #12]
   1238e:	b950      	cbnz	r0, 123a6 <_dtoa_r+0xe86>
   12390:	4b0e      	ldr	r3, [pc, #56]	; (123cc <_dtoa_r+0xeac>)
   12392:	480f      	ldr	r0, [pc, #60]	; (123d0 <_dtoa_r+0xeb0>)
   12394:	2200      	movs	r2, #0
   12396:	f240 11af 	movw	r1, #431	; 0x1af
   1239a:	f7fe ffd1 	bl	11340 <__assert_func>
   1239e:	4b0d      	ldr	r3, [pc, #52]	; (123d4 <_dtoa_r+0xeb4>)
   123a0:	9303      	str	r3, [sp, #12]
   123a2:	f7ff b8f9 	b.w	11598 <_dtoa_r+0x78>
   123a6:	9b03      	ldr	r3, [sp, #12]
   123a8:	63a3      	str	r3, [r4, #56]	; 0x38
   123aa:	f04f 33ff 	mov.w	r3, #4294967295
   123ae:	9312      	str	r3, [sp, #72]	; 0x48
   123b0:	9308      	str	r3, [sp, #32]
   123b2:	2301      	movs	r3, #1
   123b4:	9623      	str	r6, [sp, #140]	; 0x8c
   123b6:	930c      	str	r3, [sp, #48]	; 0x30
   123b8:	f7ff bb02 	b.w	119c0 <_dtoa_r+0x4a0>
   123bc:	00015ec8 	.word	0x00015ec8
   123c0:	40240000 	.word	0x40240000
   123c4:	3fe00000 	.word	0x3fe00000
   123c8:	401c0000 	.word	0x401c0000
   123cc:	00015e30 	.word	0x00015e30
   123d0:	00016044 	.word	0x00016044
   123d4:	00016034 	.word	0x00016034

000123d8 <_wcrtomb_r>:
   123d8:	b570      	push	{r4, r5, r6, lr}
   123da:	4605      	mov	r5, r0
   123dc:	b084      	sub	sp, #16
   123de:	b15b      	cbz	r3, 123f8 <_wcrtomb_r+0x20>
   123e0:	461c      	mov	r4, r3
   123e2:	b169      	cbz	r1, 12400 <_wcrtomb_r+0x28>
   123e4:	4b0e      	ldr	r3, [pc, #56]	; (12420 <_wcrtomb_r+0x48>)
   123e6:	4628      	mov	r0, r5
   123e8:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   123ec:	4623      	mov	r3, r4
   123ee:	47b0      	blx	r6
   123f0:	1c43      	adds	r3, r0, #1
   123f2:	d00f      	beq.n	12414 <_wcrtomb_r+0x3c>
   123f4:	b004      	add	sp, #16
   123f6:	bd70      	pop	{r4, r5, r6, pc}
   123f8:	f500 7482 	add.w	r4, r0, #260	; 0x104
   123fc:	2900      	cmp	r1, #0
   123fe:	d1f1      	bne.n	123e4 <_wcrtomb_r+0xc>
   12400:	4a07      	ldr	r2, [pc, #28]	; (12420 <_wcrtomb_r+0x48>)
   12402:	4623      	mov	r3, r4
   12404:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   12408:	4628      	mov	r0, r5
   1240a:	460a      	mov	r2, r1
   1240c:	a901      	add	r1, sp, #4
   1240e:	47b0      	blx	r6
   12410:	1c43      	adds	r3, r0, #1
   12412:	d1ef      	bne.n	123f4 <_wcrtomb_r+0x1c>
   12414:	2200      	movs	r2, #0
   12416:	238a      	movs	r3, #138	; 0x8a
   12418:	6022      	str	r2, [r4, #0]
   1241a:	602b      	str	r3, [r5, #0]
   1241c:	b004      	add	sp, #16
   1241e:	bd70      	pop	{r4, r5, r6, pc}
   12420:	1fff8cfc 	.word	0x1fff8cfc

00012424 <_wcsrtombs_r>:
   12424:	b500      	push	{lr}
   12426:	b083      	sub	sp, #12
   12428:	f8dd c010 	ldr.w	ip, [sp, #16]
   1242c:	e9cd 3c00 	strd	r3, ip, [sp]
   12430:	f04f 33ff 	mov.w	r3, #4294967295
   12434:	f001 fbb6 	bl	13ba4 <_wcsnrtombs_r>
   12438:	b003      	add	sp, #12
   1243a:	f85d fb04 	ldr.w	pc, [sp], #4
   1243e:	bf00      	nop

00012440 <fiprintf>:
   12440:	b40e      	push	{r1, r2, r3}
   12442:	b510      	push	{r4, lr}
   12444:	b083      	sub	sp, #12
   12446:	ab05      	add	r3, sp, #20
   12448:	4c06      	ldr	r4, [pc, #24]	; (12464 <fiprintf+0x24>)
   1244a:	f853 2b04 	ldr.w	r2, [r3], #4
   1244e:	9301      	str	r3, [sp, #4]
   12450:	4601      	mov	r1, r0
   12452:	6820      	ldr	r0, [r4, #0]
   12454:	f000 f8c4 	bl	125e0 <_vfiprintf_r>
   12458:	b003      	add	sp, #12
   1245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1245e:	b003      	add	sp, #12
   12460:	4770      	bx	lr
   12462:	bf00      	nop
   12464:	1fff8f88 	.word	0x1fff8f88

00012468 <__ssprint_r>:
   12468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1246c:	6893      	ldr	r3, [r2, #8]
   1246e:	6817      	ldr	r7, [r2, #0]
   12470:	b083      	sub	sp, #12
   12472:	4692      	mov	sl, r2
   12474:	2b00      	cmp	r3, #0
   12476:	d070      	beq.n	1255a <__ssprint_r+0xf2>
   12478:	4681      	mov	r9, r0
   1247a:	688a      	ldr	r2, [r1, #8]
   1247c:	6808      	ldr	r0, [r1, #0]
   1247e:	460c      	mov	r4, r1
   12480:	3708      	adds	r7, #8
   12482:	e043      	b.n	1250c <__ssprint_r+0xa4>
   12484:	89a3      	ldrh	r3, [r4, #12]
   12486:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1248a:	d02e      	beq.n	124ea <__ssprint_r+0x82>
   1248c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   12490:	eba0 0801 	sub.w	r8, r0, r1
   12494:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   12498:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1249c:	f108 0001 	add.w	r0, r8, #1
   124a0:	1076      	asrs	r6, r6, #1
   124a2:	4428      	add	r0, r5
   124a4:	42b0      	cmp	r0, r6
   124a6:	4632      	mov	r2, r6
   124a8:	bf84      	itt	hi
   124aa:	4606      	movhi	r6, r0
   124ac:	4632      	movhi	r2, r6
   124ae:	055b      	lsls	r3, r3, #21
   124b0:	d537      	bpl.n	12522 <__ssprint_r+0xba>
   124b2:	4611      	mov	r1, r2
   124b4:	4648      	mov	r0, r9
   124b6:	f7fb fa25 	bl	d904 <_malloc_r>
   124ba:	9001      	str	r0, [sp, #4]
   124bc:	2800      	cmp	r0, #0
   124be:	d03a      	beq.n	12536 <__ssprint_r+0xce>
   124c0:	4642      	mov	r2, r8
   124c2:	6921      	ldr	r1, [r4, #16]
   124c4:	f7f7 ff36 	bl	a334 <memcpy>
   124c8:	89a2      	ldrh	r2, [r4, #12]
   124ca:	9b01      	ldr	r3, [sp, #4]
   124cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   124d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   124d4:	81a2      	strh	r2, [r4, #12]
   124d6:	eba6 0208 	sub.w	r2, r6, r8
   124da:	eb03 0008 	add.w	r0, r3, r8
   124de:	6166      	str	r6, [r4, #20]
   124e0:	60a2      	str	r2, [r4, #8]
   124e2:	6123      	str	r3, [r4, #16]
   124e4:	6020      	str	r0, [r4, #0]
   124e6:	462e      	mov	r6, r5
   124e8:	46a8      	mov	r8, r5
   124ea:	4642      	mov	r2, r8
   124ec:	4659      	mov	r1, fp
   124ee:	f7fc f801 	bl	e4f4 <memmove>
   124f2:	f8da 3008 	ldr.w	r3, [sl, #8]
   124f6:	68a2      	ldr	r2, [r4, #8]
   124f8:	6820      	ldr	r0, [r4, #0]
   124fa:	1b92      	subs	r2, r2, r6
   124fc:	4440      	add	r0, r8
   124fe:	1b5b      	subs	r3, r3, r5
   12500:	60a2      	str	r2, [r4, #8]
   12502:	6020      	str	r0, [r4, #0]
   12504:	f8ca 3008 	str.w	r3, [sl, #8]
   12508:	b33b      	cbz	r3, 1255a <__ssprint_r+0xf2>
   1250a:	3708      	adds	r7, #8
   1250c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   12510:	2d00      	cmp	r5, #0
   12512:	d0fa      	beq.n	1250a <__ssprint_r+0xa2>
   12514:	42aa      	cmp	r2, r5
   12516:	4616      	mov	r6, r2
   12518:	4690      	mov	r8, r2
   1251a:	d9b3      	bls.n	12484 <__ssprint_r+0x1c>
   1251c:	462e      	mov	r6, r5
   1251e:	46a8      	mov	r8, r5
   12520:	e7e3      	b.n	124ea <__ssprint_r+0x82>
   12522:	4648      	mov	r0, r9
   12524:	f7fb fcaa 	bl	de7c <_realloc_r>
   12528:	4603      	mov	r3, r0
   1252a:	2800      	cmp	r0, #0
   1252c:	d1d3      	bne.n	124d6 <__ssprint_r+0x6e>
   1252e:	6921      	ldr	r1, [r4, #16]
   12530:	4648      	mov	r0, r9
   12532:	f7fc fa97 	bl	ea64 <_free_r>
   12536:	89a3      	ldrh	r3, [r4, #12]
   12538:	220c      	movs	r2, #12
   1253a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1253e:	f8c9 2000 	str.w	r2, [r9]
   12542:	f04f 30ff 	mov.w	r0, #4294967295
   12546:	81a3      	strh	r3, [r4, #12]
   12548:	2200      	movs	r2, #0
   1254a:	2300      	movs	r3, #0
   1254c:	f8ca 2008 	str.w	r2, [sl, #8]
   12550:	f8ca 3004 	str.w	r3, [sl, #4]
   12554:	b003      	add	sp, #12
   12556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1255a:	2000      	movs	r0, #0
   1255c:	2300      	movs	r3, #0
   1255e:	f8ca 3004 	str.w	r3, [sl, #4]
   12562:	b003      	add	sp, #12
   12564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012568 <__sprint_r.part.0>:
   12568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1256c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1256e:	049c      	lsls	r4, r3, #18
   12570:	4690      	mov	r8, r2
   12572:	d52d      	bpl.n	125d0 <__sprint_r.part.0+0x68>
   12574:	6893      	ldr	r3, [r2, #8]
   12576:	6812      	ldr	r2, [r2, #0]
   12578:	b343      	cbz	r3, 125cc <__sprint_r.part.0+0x64>
   1257a:	468b      	mov	fp, r1
   1257c:	4606      	mov	r6, r0
   1257e:	f102 0908 	add.w	r9, r2, #8
   12582:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12586:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1258a:	d015      	beq.n	125b8 <__sprint_r.part.0+0x50>
   1258c:	3d04      	subs	r5, #4
   1258e:	2400      	movs	r4, #0
   12590:	e001      	b.n	12596 <__sprint_r.part.0+0x2e>
   12592:	42a7      	cmp	r7, r4
   12594:	d00e      	beq.n	125b4 <__sprint_r.part.0+0x4c>
   12596:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1259a:	465a      	mov	r2, fp
   1259c:	4630      	mov	r0, r6
   1259e:	f001 fa51 	bl	13a44 <_fputwc_r>
   125a2:	1c43      	adds	r3, r0, #1
   125a4:	f104 0401 	add.w	r4, r4, #1
   125a8:	d1f3      	bne.n	12592 <__sprint_r.part.0+0x2a>
   125aa:	2300      	movs	r3, #0
   125ac:	e9c8 3301 	strd	r3, r3, [r8, #4]
   125b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   125b8:	f02a 0a03 	bic.w	sl, sl, #3
   125bc:	eba3 030a 	sub.w	r3, r3, sl
   125c0:	f8c8 3008 	str.w	r3, [r8, #8]
   125c4:	f109 0908 	add.w	r9, r9, #8
   125c8:	2b00      	cmp	r3, #0
   125ca:	d1da      	bne.n	12582 <__sprint_r.part.0+0x1a>
   125cc:	2000      	movs	r0, #0
   125ce:	e7ec      	b.n	125aa <__sprint_r.part.0+0x42>
   125d0:	f001 f808 	bl	135e4 <__sfvwrite_r>
   125d4:	2300      	movs	r3, #0
   125d6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   125da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125de:	bf00      	nop

000125e0 <_vfiprintf_r>:
   125e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e4:	b0c5      	sub	sp, #276	; 0x114
   125e6:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   125ea:	4683      	mov	fp, r0
   125ec:	9103      	str	r1, [sp, #12]
   125ee:	4616      	mov	r6, r2
   125f0:	2100      	movs	r1, #0
   125f2:	2208      	movs	r2, #8
   125f4:	4650      	mov	r0, sl
   125f6:	461c      	mov	r4, r3
   125f8:	9307      	str	r3, [sp, #28]
   125fa:	f7fb fff7 	bl	e5ec <memset>
   125fe:	f1bb 0f00 	cmp.w	fp, #0
   12602:	d004      	beq.n	1260e <_vfiprintf_r+0x2e>
   12604:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   12608:	2b00      	cmp	r3, #0
   1260a:	f000 86a1 	beq.w	13350 <_vfiprintf_r+0xd70>
   1260e:	9a03      	ldr	r2, [sp, #12]
   12610:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12612:	07db      	lsls	r3, r3, #31
   12614:	f140 851c 	bpl.w	13050 <_vfiprintf_r+0xa70>
   12618:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1261c:	b28a      	uxth	r2, r1
   1261e:	0495      	lsls	r5, r2, #18
   12620:	d409      	bmi.n	12636 <_vfiprintf_r+0x56>
   12622:	9b03      	ldr	r3, [sp, #12]
   12624:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12628:	8199      	strh	r1, [r3, #12]
   1262a:	b28a      	uxth	r2, r1
   1262c:	4619      	mov	r1, r3
   1262e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12634:	664b      	str	r3, [r1, #100]	; 0x64
   12636:	0710      	lsls	r0, r2, #28
   12638:	f140 8104 	bpl.w	12844 <_vfiprintf_r+0x264>
   1263c:	9b03      	ldr	r3, [sp, #12]
   1263e:	691b      	ldr	r3, [r3, #16]
   12640:	2b00      	cmp	r3, #0
   12642:	f000 80ff 	beq.w	12844 <_vfiprintf_r+0x264>
   12646:	f002 031a 	and.w	r3, r2, #26
   1264a:	2b0a      	cmp	r3, #10
   1264c:	f000 8108 	beq.w	12860 <_vfiprintf_r+0x280>
   12650:	2300      	movs	r3, #0
   12652:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12656:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   1265a:	aa1b      	add	r2, sp, #108	; 0x6c
   1265c:	930b      	str	r3, [sp, #44]	; 0x2c
   1265e:	9218      	str	r2, [sp, #96]	; 0x60
   12660:	4691      	mov	r9, r2
   12662:	930c      	str	r3, [sp, #48]	; 0x30
   12664:	9305      	str	r3, [sp, #20]
   12666:	46b0      	mov	r8, r6
   12668:	4644      	mov	r4, r8
   1266a:	4ba6      	ldr	r3, [pc, #664]	; (12904 <_vfiprintf_r+0x324>)
   1266c:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   12670:	f7fc f840 	bl	e6f4 <__locale_mb_cur_max>
   12674:	4622      	mov	r2, r4
   12676:	4603      	mov	r3, r0
   12678:	a912      	add	r1, sp, #72	; 0x48
   1267a:	f8cd a000 	str.w	sl, [sp]
   1267e:	4658      	mov	r0, fp
   12680:	47a8      	blx	r5
   12682:	2800      	cmp	r0, #0
   12684:	f000 8140 	beq.w	12908 <_vfiprintf_r+0x328>
   12688:	f2c0 8133 	blt.w	128f2 <_vfiprintf_r+0x312>
   1268c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1268e:	2a25      	cmp	r2, #37	; 0x25
   12690:	4603      	mov	r3, r0
   12692:	d001      	beq.n	12698 <_vfiprintf_r+0xb8>
   12694:	441c      	add	r4, r3
   12696:	e7e8      	b.n	1266a <_vfiprintf_r+0x8a>
   12698:	ebb4 0608 	subs.w	r6, r4, r8
   1269c:	4605      	mov	r5, r0
   1269e:	f040 8137 	bne.w	12910 <_vfiprintf_r+0x330>
   126a2:	2300      	movs	r3, #0
   126a4:	7861      	ldrb	r1, [r4, #1]
   126a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   126aa:	f104 0801 	add.w	r8, r4, #1
   126ae:	9306      	str	r3, [sp, #24]
   126b0:	f04f 37ff 	mov.w	r7, #4294967295
   126b4:	461e      	mov	r6, r3
   126b6:	242b      	movs	r4, #43	; 0x2b
   126b8:	f108 0801 	add.w	r8, r8, #1
   126bc:	f1a1 0320 	sub.w	r3, r1, #32
   126c0:	2b5a      	cmp	r3, #90	; 0x5a
   126c2:	f200 8165 	bhi.w	12990 <_vfiprintf_r+0x3b0>
   126c6:	e8df f013 	tbh	[pc, r3, lsl #1]
   126ca:	029f      	.short	0x029f
   126cc:	01630163 	.word	0x01630163
   126d0:	0163029a 	.word	0x0163029a
   126d4:	01630163 	.word	0x01630163
   126d8:	0163006a 	.word	0x0163006a
   126dc:	02670163 	.word	0x02670163
   126e0:	01630277 	.word	0x01630277
   126e4:	02810272 	.word	0x02810272
   126e8:	027c0163 	.word	0x027c0163
   126ec:	005b005b 	.word	0x005b005b
   126f0:	005b005b 	.word	0x005b005b
   126f4:	005b005b 	.word	0x005b005b
   126f8:	005b005b 	.word	0x005b005b
   126fc:	0163005b 	.word	0x0163005b
   12700:	01630163 	.word	0x01630163
   12704:	01630163 	.word	0x01630163
   12708:	01630163 	.word	0x01630163
   1270c:	01630163 	.word	0x01630163
   12710:	00840246 	.word	0x00840246
   12714:	01630163 	.word	0x01630163
   12718:	01630163 	.word	0x01630163
   1271c:	01630163 	.word	0x01630163
   12720:	01630163 	.word	0x01630163
   12724:	01630163 	.word	0x01630163
   12728:	016300e2 	.word	0x016300e2
   1272c:	01630163 	.word	0x01630163
   12730:	0163021d 	.word	0x0163021d
   12734:	016302c4 	.word	0x016302c4
   12738:	05940163 	.word	0x05940163
   1273c:	01630163 	.word	0x01630163
   12740:	01630163 	.word	0x01630163
   12744:	01630163 	.word	0x01630163
   12748:	01630163 	.word	0x01630163
   1274c:	01630163 	.word	0x01630163
   12750:	00860246 	.word	0x00860246
   12754:	01630163 	.word	0x01630163
   12758:	02b70163 	.word	0x02b70163
   1275c:	007f0086 	.word	0x007f0086
   12760:	02aa0163 	.word	0x02aa0163
   12764:	02e70163 	.word	0x02e70163
   12768:	02d700e4 	.word	0x02d700e4
   1276c:	0163007f 	.word	0x0163007f
   12770:	007c021d 	.word	0x007c021d
   12774:	01630572 	.word	0x01630572
   12778:	05740163 	.word	0x05740163
   1277c:	007c0163 	.word	0x007c0163
   12780:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12784:	2200      	movs	r2, #0
   12786:	f818 1b01 	ldrb.w	r1, [r8], #1
   1278a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1278e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12792:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12796:	2b09      	cmp	r3, #9
   12798:	d9f5      	bls.n	12786 <_vfiprintf_r+0x1a6>
   1279a:	9206      	str	r2, [sp, #24]
   1279c:	e78e      	b.n	126bc <_vfiprintf_r+0xdc>
   1279e:	4658      	mov	r0, fp
   127a0:	f7fe fd28 	bl	111f4 <_localeconv_r>
   127a4:	6843      	ldr	r3, [r0, #4]
   127a6:	930d      	str	r3, [sp, #52]	; 0x34
   127a8:	4618      	mov	r0, r3
   127aa:	f7fc f849 	bl	e840 <strlen>
   127ae:	900e      	str	r0, [sp, #56]	; 0x38
   127b0:	4605      	mov	r5, r0
   127b2:	4658      	mov	r0, fp
   127b4:	f7fe fd1e 	bl	111f4 <_localeconv_r>
   127b8:	6883      	ldr	r3, [r0, #8]
   127ba:	930c      	str	r3, [sp, #48]	; 0x30
   127bc:	2d00      	cmp	r5, #0
   127be:	f040 84df 	bne.w	13180 <_vfiprintf_r+0xba0>
   127c2:	f898 1000 	ldrb.w	r1, [r8]
   127c6:	e777      	b.n	126b8 <_vfiprintf_r+0xd8>
   127c8:	f898 1000 	ldrb.w	r1, [r8]
   127cc:	f046 0620 	orr.w	r6, r6, #32
   127d0:	e772      	b.n	126b8 <_vfiprintf_r+0xd8>
   127d2:	f046 0610 	orr.w	r6, r6, #16
   127d6:	06b4      	lsls	r4, r6, #26
   127d8:	f140 8178 	bpl.w	12acc <_vfiprintf_r+0x4ec>
   127dc:	9b07      	ldr	r3, [sp, #28]
   127de:	3307      	adds	r3, #7
   127e0:	f023 0307 	bic.w	r3, r3, #7
   127e4:	461a      	mov	r2, r3
   127e6:	6859      	ldr	r1, [r3, #4]
   127e8:	f852 3b08 	ldr.w	r3, [r2], #8
   127ec:	9207      	str	r2, [sp, #28]
   127ee:	460a      	mov	r2, r1
   127f0:	2900      	cmp	r1, #0
   127f2:	f2c0 847a 	blt.w	130ea <_vfiprintf_r+0xb0a>
   127f6:	1c79      	adds	r1, r7, #1
   127f8:	f000 85a7 	beq.w	1334a <_vfiprintf_r+0xd6a>
   127fc:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12800:	9102      	str	r1, [sp, #8]
   12802:	ea53 0102 	orrs.w	r1, r3, r2
   12806:	f000 8448 	beq.w	1309a <_vfiprintf_r+0xaba>
   1280a:	2b0a      	cmp	r3, #10
   1280c:	f172 0100 	sbcs.w	r1, r2, #0
   12810:	f080 8549 	bcs.w	132a6 <_vfiprintf_r+0xcc6>
   12814:	3330      	adds	r3, #48	; 0x30
   12816:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   1281a:	9e02      	ldr	r6, [sp, #8]
   1281c:	2301      	movs	r3, #1
   1281e:	9304      	str	r3, [sp, #16]
   12820:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12824:	9b04      	ldr	r3, [sp, #16]
   12826:	42bb      	cmp	r3, r7
   12828:	bfb8      	it	lt
   1282a:	463b      	movlt	r3, r7
   1282c:	9302      	str	r3, [sp, #8]
   1282e:	2300      	movs	r3, #0
   12830:	9308      	str	r3, [sp, #32]
   12832:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12836:	2b00      	cmp	r3, #0
   12838:	f000 80b8 	beq.w	129ac <_vfiprintf_r+0x3cc>
   1283c:	9b02      	ldr	r3, [sp, #8]
   1283e:	3301      	adds	r3, #1
   12840:	9302      	str	r3, [sp, #8]
   12842:	e0b3      	b.n	129ac <_vfiprintf_r+0x3cc>
   12844:	9d03      	ldr	r5, [sp, #12]
   12846:	4658      	mov	r0, fp
   12848:	4629      	mov	r1, r5
   1284a:	f001 f83f 	bl	138cc <__swsetup_r>
   1284e:	2800      	cmp	r0, #0
   12850:	f040 8656 	bne.w	13500 <_vfiprintf_r+0xf20>
   12854:	89aa      	ldrh	r2, [r5, #12]
   12856:	f002 031a 	and.w	r3, r2, #26
   1285a:	2b0a      	cmp	r3, #10
   1285c:	f47f aef8 	bne.w	12650 <_vfiprintf_r+0x70>
   12860:	9903      	ldr	r1, [sp, #12]
   12862:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12866:	2b00      	cmp	r3, #0
   12868:	f6ff aef2 	blt.w	12650 <_vfiprintf_r+0x70>
   1286c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1286e:	07db      	lsls	r3, r3, #31
   12870:	d402      	bmi.n	12878 <_vfiprintf_r+0x298>
   12872:	0597      	lsls	r7, r2, #22
   12874:	f140 8618 	bpl.w	134a8 <_vfiprintf_r+0xec8>
   12878:	9903      	ldr	r1, [sp, #12]
   1287a:	4623      	mov	r3, r4
   1287c:	4632      	mov	r2, r6
   1287e:	4658      	mov	r0, fp
   12880:	f000 fe70 	bl	13564 <__sbprintf>
   12884:	9005      	str	r0, [sp, #20]
   12886:	9805      	ldr	r0, [sp, #20]
   12888:	b045      	add	sp, #276	; 0x114
   1288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1288e:	f046 0610 	orr.w	r6, r6, #16
   12892:	f016 0220 	ands.w	r2, r6, #32
   12896:	f000 8126 	beq.w	12ae6 <_vfiprintf_r+0x506>
   1289a:	9b07      	ldr	r3, [sp, #28]
   1289c:	3307      	adds	r3, #7
   1289e:	f023 0307 	bic.w	r3, r3, #7
   128a2:	4619      	mov	r1, r3
   128a4:	685a      	ldr	r2, [r3, #4]
   128a6:	f851 3b08 	ldr.w	r3, [r1], #8
   128aa:	9107      	str	r1, [sp, #28]
   128ac:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   128b0:	9102      	str	r1, [sp, #8]
   128b2:	2100      	movs	r1, #0
   128b4:	2000      	movs	r0, #0
   128b6:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   128ba:	1c78      	adds	r0, r7, #1
   128bc:	f000 8200 	beq.w	12cc0 <_vfiprintf_r+0x6e0>
   128c0:	9802      	ldr	r0, [sp, #8]
   128c2:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   128c6:	ea53 0002 	orrs.w	r0, r3, r2
   128ca:	f040 81f8 	bne.w	12cbe <_vfiprintf_r+0x6de>
   128ce:	2f00      	cmp	r7, #0
   128d0:	f040 8543 	bne.w	1335a <_vfiprintf_r+0xd7a>
   128d4:	2900      	cmp	r1, #0
   128d6:	f040 83e4 	bne.w	130a2 <_vfiprintf_r+0xac2>
   128da:	9b02      	ldr	r3, [sp, #8]
   128dc:	f013 0301 	ands.w	r3, r3, #1
   128e0:	9304      	str	r3, [sp, #16]
   128e2:	f000 8420 	beq.w	13126 <_vfiprintf_r+0xb46>
   128e6:	2330      	movs	r3, #48	; 0x30
   128e8:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   128ec:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   128f0:	e798      	b.n	12824 <_vfiprintf_r+0x244>
   128f2:	2208      	movs	r2, #8
   128f4:	2100      	movs	r1, #0
   128f6:	4650      	mov	r0, sl
   128f8:	f7fb fe78 	bl	e5ec <memset>
   128fc:	2301      	movs	r3, #1
   128fe:	441c      	add	r4, r3
   12900:	e6b3      	b.n	1266a <_vfiprintf_r+0x8a>
   12902:	bf00      	nop
   12904:	1fff8cfc 	.word	0x1fff8cfc
   12908:	ebb4 0608 	subs.w	r6, r4, r8
   1290c:	4605      	mov	r5, r0
   1290e:	d01a      	beq.n	12946 <_vfiprintf_r+0x366>
   12910:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12912:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12914:	3301      	adds	r3, #1
   12916:	4432      	add	r2, r6
   12918:	2b07      	cmp	r3, #7
   1291a:	e9c9 8600 	strd	r8, r6, [r9]
   1291e:	921a      	str	r2, [sp, #104]	; 0x68
   12920:	9319      	str	r3, [sp, #100]	; 0x64
   12922:	dd1a      	ble.n	1295a <_vfiprintf_r+0x37a>
   12924:	2a00      	cmp	r2, #0
   12926:	f000 83b4 	beq.w	13092 <_vfiprintf_r+0xab2>
   1292a:	9903      	ldr	r1, [sp, #12]
   1292c:	aa18      	add	r2, sp, #96	; 0x60
   1292e:	4658      	mov	r0, fp
   12930:	f7ff fe1a 	bl	12568 <__sprint_r.part.0>
   12934:	b9d8      	cbnz	r0, 1296e <_vfiprintf_r+0x38e>
   12936:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1293a:	9b05      	ldr	r3, [sp, #20]
   1293c:	4433      	add	r3, r6
   1293e:	9305      	str	r3, [sp, #20]
   12940:	2d00      	cmp	r5, #0
   12942:	f47f aeae 	bne.w	126a2 <_vfiprintf_r+0xc2>
   12946:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12948:	2b00      	cmp	r3, #0
   1294a:	f040 85ca 	bne.w	134e2 <_vfiprintf_r+0xf02>
   1294e:	9b03      	ldr	r3, [sp, #12]
   12950:	2200      	movs	r2, #0
   12952:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12956:	9219      	str	r2, [sp, #100]	; 0x64
   12958:	e00c      	b.n	12974 <_vfiprintf_r+0x394>
   1295a:	f109 0908 	add.w	r9, r9, #8
   1295e:	e7ec      	b.n	1293a <_vfiprintf_r+0x35a>
   12960:	46b3      	mov	fp, r6
   12962:	9b08      	ldr	r3, [sp, #32]
   12964:	b11b      	cbz	r3, 1296e <_vfiprintf_r+0x38e>
   12966:	9908      	ldr	r1, [sp, #32]
   12968:	4658      	mov	r0, fp
   1296a:	f7fc f87b 	bl	ea64 <_free_r>
   1296e:	9b03      	ldr	r3, [sp, #12]
   12970:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12974:	9a03      	ldr	r2, [sp, #12]
   12976:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12978:	f012 0f01 	tst.w	r2, #1
   1297c:	b29a      	uxth	r2, r3
   1297e:	f000 809c 	beq.w	12aba <_vfiprintf_r+0x4da>
   12982:	0650      	lsls	r0, r2, #25
   12984:	f100 85c8 	bmi.w	13518 <_vfiprintf_r+0xf38>
   12988:	9805      	ldr	r0, [sp, #20]
   1298a:	b045      	add	sp, #276	; 0x114
   1298c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12990:	2900      	cmp	r1, #0
   12992:	d0d8      	beq.n	12946 <_vfiprintf_r+0x366>
   12994:	2300      	movs	r3, #0
   12996:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1299a:	2301      	movs	r3, #1
   1299c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   129a0:	9302      	str	r3, [sp, #8]
   129a2:	9304      	str	r3, [sp, #16]
   129a4:	ac2b      	add	r4, sp, #172	; 0xac
   129a6:	2300      	movs	r3, #0
   129a8:	9308      	str	r3, [sp, #32]
   129aa:	461f      	mov	r7, r3
   129ac:	f016 0302 	ands.w	r3, r6, #2
   129b0:	9309      	str	r3, [sp, #36]	; 0x24
   129b2:	d002      	beq.n	129ba <_vfiprintf_r+0x3da>
   129b4:	9b02      	ldr	r3, [sp, #8]
   129b6:	3302      	adds	r3, #2
   129b8:	9302      	str	r3, [sp, #8]
   129ba:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   129be:	930a      	str	r3, [sp, #40]	; 0x28
   129c0:	d105      	bne.n	129ce <_vfiprintf_r+0x3ee>
   129c2:	9b06      	ldr	r3, [sp, #24]
   129c4:	9a02      	ldr	r2, [sp, #8]
   129c6:	1a9d      	subs	r5, r3, r2
   129c8:	2d00      	cmp	r5, #0
   129ca:	f300 8294 	bgt.w	12ef6 <_vfiprintf_r+0x916>
   129ce:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   129d2:	1c41      	adds	r1, r0, #1
   129d4:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   129d8:	b182      	cbz	r2, 129fc <_vfiprintf_r+0x41c>
   129da:	2201      	movs	r2, #1
   129dc:	3301      	adds	r3, #1
   129de:	f8c9 2004 	str.w	r2, [r9, #4]
   129e2:	2907      	cmp	r1, #7
   129e4:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   129e8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   129ec:	f8c9 2000 	str.w	r2, [r9]
   129f0:	f300 8264 	bgt.w	12ebc <_vfiprintf_r+0x8dc>
   129f4:	4608      	mov	r0, r1
   129f6:	f109 0908 	add.w	r9, r9, #8
   129fa:	3101      	adds	r1, #1
   129fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   129fe:	b1da      	cbz	r2, 12a38 <_vfiprintf_r+0x458>
   12a00:	aa11      	add	r2, sp, #68	; 0x44
   12a02:	3302      	adds	r3, #2
   12a04:	f8c9 2000 	str.w	r2, [r9]
   12a08:	2907      	cmp	r1, #7
   12a0a:	f04f 0202 	mov.w	r2, #2
   12a0e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12a12:	f8c9 2004 	str.w	r2, [r9, #4]
   12a16:	f340 8269 	ble.w	12eec <_vfiprintf_r+0x90c>
   12a1a:	2b00      	cmp	r3, #0
   12a1c:	f000 8358 	beq.w	130d0 <_vfiprintf_r+0xaf0>
   12a20:	9903      	ldr	r1, [sp, #12]
   12a22:	aa18      	add	r2, sp, #96	; 0x60
   12a24:	4658      	mov	r0, fp
   12a26:	f7ff fd9f 	bl	12568 <__sprint_r.part.0>
   12a2a:	2800      	cmp	r0, #0
   12a2c:	d199      	bne.n	12962 <_vfiprintf_r+0x382>
   12a2e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12a32:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a36:	1c41      	adds	r1, r0, #1
   12a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12a3a:	2a80      	cmp	r2, #128	; 0x80
   12a3c:	f000 8182 	beq.w	12d44 <_vfiprintf_r+0x764>
   12a40:	9a04      	ldr	r2, [sp, #16]
   12a42:	1abd      	subs	r5, r7, r2
   12a44:	2d00      	cmp	r5, #0
   12a46:	f300 81e0 	bgt.w	12e0a <_vfiprintf_r+0x82a>
   12a4a:	9a04      	ldr	r2, [sp, #16]
   12a4c:	f8c9 4000 	str.w	r4, [r9]
   12a50:	4413      	add	r3, r2
   12a52:	2907      	cmp	r1, #7
   12a54:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12a58:	f8c9 2004 	str.w	r2, [r9, #4]
   12a5c:	f340 816c 	ble.w	12d38 <_vfiprintf_r+0x758>
   12a60:	2b00      	cmp	r3, #0
   12a62:	f000 829e 	beq.w	12fa2 <_vfiprintf_r+0x9c2>
   12a66:	9903      	ldr	r1, [sp, #12]
   12a68:	aa18      	add	r2, sp, #96	; 0x60
   12a6a:	4658      	mov	r0, fp
   12a6c:	f7ff fd7c 	bl	12568 <__sprint_r.part.0>
   12a70:	2800      	cmp	r0, #0
   12a72:	f47f af76 	bne.w	12962 <_vfiprintf_r+0x382>
   12a76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12a78:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a7c:	0775      	lsls	r5, r6, #29
   12a7e:	d505      	bpl.n	12a8c <_vfiprintf_r+0x4ac>
   12a80:	9a06      	ldr	r2, [sp, #24]
   12a82:	9902      	ldr	r1, [sp, #8]
   12a84:	1a54      	subs	r4, r2, r1
   12a86:	2c00      	cmp	r4, #0
   12a88:	f300 8295 	bgt.w	12fb6 <_vfiprintf_r+0x9d6>
   12a8c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12a90:	9802      	ldr	r0, [sp, #8]
   12a92:	4281      	cmp	r1, r0
   12a94:	bfac      	ite	ge
   12a96:	1852      	addge	r2, r2, r1
   12a98:	1812      	addlt	r2, r2, r0
   12a9a:	9205      	str	r2, [sp, #20]
   12a9c:	2b00      	cmp	r3, #0
   12a9e:	f040 81fe 	bne.w	12e9e <_vfiprintf_r+0x8be>
   12aa2:	9908      	ldr	r1, [sp, #32]
   12aa4:	2300      	movs	r3, #0
   12aa6:	9319      	str	r3, [sp, #100]	; 0x64
   12aa8:	2900      	cmp	r1, #0
   12aaa:	f000 8148 	beq.w	12d3e <_vfiprintf_r+0x75e>
   12aae:	4658      	mov	r0, fp
   12ab0:	f7fb ffd8 	bl	ea64 <_free_r>
   12ab4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ab8:	e5d6      	b.n	12668 <_vfiprintf_r+0x88>
   12aba:	059c      	lsls	r4, r3, #22
   12abc:	f53f af61 	bmi.w	12982 <_vfiprintf_r+0x3a2>
   12ac0:	9c03      	ldr	r4, [sp, #12]
   12ac2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12ac4:	f7fb feb2 	bl	e82c <__retarget_lock_release_recursive>
   12ac8:	89a2      	ldrh	r2, [r4, #12]
   12aca:	e75a      	b.n	12982 <_vfiprintf_r+0x3a2>
   12acc:	06f0      	lsls	r0, r6, #27
   12ace:	9a07      	ldr	r2, [sp, #28]
   12ad0:	f100 833e 	bmi.w	13150 <_vfiprintf_r+0xb70>
   12ad4:	0671      	lsls	r1, r6, #25
   12ad6:	f140 8338 	bpl.w	1314a <_vfiprintf_r+0xb6a>
   12ada:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12ade:	9207      	str	r2, [sp, #28]
   12ae0:	17da      	asrs	r2, r3, #31
   12ae2:	4611      	mov	r1, r2
   12ae4:	e684      	b.n	127f0 <_vfiprintf_r+0x210>
   12ae6:	f016 0310 	ands.w	r3, r6, #16
   12aea:	9907      	ldr	r1, [sp, #28]
   12aec:	f040 8328 	bne.w	13140 <_vfiprintf_r+0xb60>
   12af0:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12af4:	f000 8320 	beq.w	13138 <_vfiprintf_r+0xb58>
   12af8:	461a      	mov	r2, r3
   12afa:	f851 3b04 	ldr.w	r3, [r1], #4
   12afe:	9107      	str	r1, [sp, #28]
   12b00:	b29b      	uxth	r3, r3
   12b02:	e6d3      	b.n	128ac <_vfiprintf_r+0x2cc>
   12b04:	9b07      	ldr	r3, [sp, #28]
   12b06:	461a      	mov	r2, r3
   12b08:	2300      	movs	r3, #0
   12b0a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12b0e:	4613      	mov	r3, r2
   12b10:	f853 4b04 	ldr.w	r4, [r3], #4
   12b14:	9302      	str	r3, [sp, #8]
   12b16:	2c00      	cmp	r4, #0
   12b18:	f000 842d 	beq.w	13376 <_vfiprintf_r+0xd96>
   12b1c:	2953      	cmp	r1, #83	; 0x53
   12b1e:	f000 838a 	beq.w	13236 <_vfiprintf_r+0xc56>
   12b22:	f016 0510 	ands.w	r5, r6, #16
   12b26:	f040 8386 	bne.w	13236 <_vfiprintf_r+0xc56>
   12b2a:	1c7b      	adds	r3, r7, #1
   12b2c:	f000 84cc 	beq.w	134c8 <_vfiprintf_r+0xee8>
   12b30:	463a      	mov	r2, r7
   12b32:	4629      	mov	r1, r5
   12b34:	4620      	mov	r0, r4
   12b36:	f7fe fb7b 	bl	11230 <memchr>
   12b3a:	9008      	str	r0, [sp, #32]
   12b3c:	2800      	cmp	r0, #0
   12b3e:	f000 84b8 	beq.w	134b2 <_vfiprintf_r+0xed2>
   12b42:	1b03      	subs	r3, r0, r4
   12b44:	9a02      	ldr	r2, [sp, #8]
   12b46:	9304      	str	r3, [sp, #16]
   12b48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12b4c:	462f      	mov	r7, r5
   12b4e:	9207      	str	r2, [sp, #28]
   12b50:	9302      	str	r3, [sp, #8]
   12b52:	9508      	str	r5, [sp, #32]
   12b54:	e66d      	b.n	12832 <_vfiprintf_r+0x252>
   12b56:	2943      	cmp	r1, #67	; 0x43
   12b58:	d002      	beq.n	12b60 <_vfiprintf_r+0x580>
   12b5a:	06f5      	lsls	r5, r6, #27
   12b5c:	f140 8352 	bpl.w	13204 <_vfiprintf_r+0xc24>
   12b60:	9d07      	ldr	r5, [sp, #28]
   12b62:	2208      	movs	r2, #8
   12b64:	2100      	movs	r1, #0
   12b66:	a816      	add	r0, sp, #88	; 0x58
   12b68:	ac2b      	add	r4, sp, #172	; 0xac
   12b6a:	f7fb fd3f 	bl	e5ec <memset>
   12b6e:	ab16      	add	r3, sp, #88	; 0x58
   12b70:	f855 2b04 	ldr.w	r2, [r5], #4
   12b74:	4621      	mov	r1, r4
   12b76:	4658      	mov	r0, fp
   12b78:	f7ff fc2e 	bl	123d8 <_wcrtomb_r>
   12b7c:	4603      	mov	r3, r0
   12b7e:	3301      	adds	r3, #1
   12b80:	9004      	str	r0, [sp, #16]
   12b82:	f000 84ce 	beq.w	13522 <_vfiprintf_r+0xf42>
   12b86:	9b04      	ldr	r3, [sp, #16]
   12b88:	9507      	str	r5, [sp, #28]
   12b8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12b8e:	9302      	str	r3, [sp, #8]
   12b90:	2300      	movs	r3, #0
   12b92:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12b96:	e706      	b.n	129a6 <_vfiprintf_r+0x3c6>
   12b98:	9b07      	ldr	r3, [sp, #28]
   12b9a:	f853 2b04 	ldr.w	r2, [r3], #4
   12b9e:	9206      	str	r2, [sp, #24]
   12ba0:	2a00      	cmp	r2, #0
   12ba2:	f280 82bb 	bge.w	1311c <_vfiprintf_r+0xb3c>
   12ba6:	9a06      	ldr	r2, [sp, #24]
   12ba8:	4252      	negs	r2, r2
   12baa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12bae:	f898 1000 	ldrb.w	r1, [r8]
   12bb2:	f046 0604 	orr.w	r6, r6, #4
   12bb6:	e57f      	b.n	126b8 <_vfiprintf_r+0xd8>
   12bb8:	f898 1000 	ldrb.w	r1, [r8]
   12bbc:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12bc0:	e57a      	b.n	126b8 <_vfiprintf_r+0xd8>
   12bc2:	f898 1000 	ldrb.w	r1, [r8]
   12bc6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12bca:	e575      	b.n	126b8 <_vfiprintf_r+0xd8>
   12bcc:	4642      	mov	r2, r8
   12bce:	f812 1b01 	ldrb.w	r1, [r2], #1
   12bd2:	292a      	cmp	r1, #42	; 0x2a
   12bd4:	f000 84b0 	beq.w	13538 <_vfiprintf_r+0xf58>
   12bd8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12bdc:	2b09      	cmp	r3, #9
   12bde:	4690      	mov	r8, r2
   12be0:	f04f 0700 	mov.w	r7, #0
   12be4:	f63f ad6a 	bhi.w	126bc <_vfiprintf_r+0xdc>
   12be8:	f818 1b01 	ldrb.w	r1, [r8], #1
   12bec:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12bf0:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12bf4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12bf8:	2b09      	cmp	r3, #9
   12bfa:	d9f5      	bls.n	12be8 <_vfiprintf_r+0x608>
   12bfc:	e55e      	b.n	126bc <_vfiprintf_r+0xdc>
   12bfe:	f898 1000 	ldrb.w	r1, [r8]
   12c02:	f046 0601 	orr.w	r6, r6, #1
   12c06:	e557      	b.n	126b8 <_vfiprintf_r+0xd8>
   12c08:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12c0c:	2b00      	cmp	r3, #0
   12c0e:	f47f add8 	bne.w	127c2 <_vfiprintf_r+0x1e2>
   12c12:	2320      	movs	r3, #32
   12c14:	f898 1000 	ldrb.w	r1, [r8]
   12c18:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12c1c:	e54c      	b.n	126b8 <_vfiprintf_r+0xd8>
   12c1e:	f898 1000 	ldrb.w	r1, [r8]
   12c22:	296c      	cmp	r1, #108	; 0x6c
   12c24:	bf03      	ittte	eq
   12c26:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12c2a:	f046 0620 	orreq.w	r6, r6, #32
   12c2e:	f108 0801 	addeq.w	r8, r8, #1
   12c32:	f046 0610 	orrne.w	r6, r6, #16
   12c36:	e53f      	b.n	126b8 <_vfiprintf_r+0xd8>
   12c38:	f898 1000 	ldrb.w	r1, [r8]
   12c3c:	2968      	cmp	r1, #104	; 0x68
   12c3e:	bf03      	ittte	eq
   12c40:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12c44:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12c48:	f108 0801 	addeq.w	r8, r8, #1
   12c4c:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12c50:	e532      	b.n	126b8 <_vfiprintf_r+0xd8>
   12c52:	f046 0310 	orr.w	r3, r6, #16
   12c56:	9302      	str	r3, [sp, #8]
   12c58:	9b02      	ldr	r3, [sp, #8]
   12c5a:	f013 0220 	ands.w	r2, r3, #32
   12c5e:	f000 8225 	beq.w	130ac <_vfiprintf_r+0xacc>
   12c62:	9b07      	ldr	r3, [sp, #28]
   12c64:	3307      	adds	r3, #7
   12c66:	f023 0307 	bic.w	r3, r3, #7
   12c6a:	4619      	mov	r1, r3
   12c6c:	685a      	ldr	r2, [r3, #4]
   12c6e:	f851 3b08 	ldr.w	r3, [r1], #8
   12c72:	9107      	str	r1, [sp, #28]
   12c74:	2101      	movs	r1, #1
   12c76:	e61d      	b.n	128b4 <_vfiprintf_r+0x2d4>
   12c78:	9a07      	ldr	r2, [sp, #28]
   12c7a:	f046 0302 	orr.w	r3, r6, #2
   12c7e:	9302      	str	r3, [sp, #8]
   12c80:	f852 3b04 	ldr.w	r3, [r2], #4
   12c84:	9207      	str	r2, [sp, #28]
   12c86:	f647 0230 	movw	r2, #30768	; 0x7830
   12c8a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12c8e:	4aa1      	ldr	r2, [pc, #644]	; (12f14 <_vfiprintf_r+0x934>)
   12c90:	920b      	str	r2, [sp, #44]	; 0x2c
   12c92:	2102      	movs	r1, #2
   12c94:	2200      	movs	r2, #0
   12c96:	e60d      	b.n	128b4 <_vfiprintf_r+0x2d4>
   12c98:	06b7      	lsls	r7, r6, #26
   12c9a:	f100 8267 	bmi.w	1316c <_vfiprintf_r+0xb8c>
   12c9e:	06f5      	lsls	r5, r6, #27
   12ca0:	f100 8361 	bmi.w	13366 <_vfiprintf_r+0xd86>
   12ca4:	0674      	lsls	r4, r6, #25
   12ca6:	f100 83ee 	bmi.w	13486 <_vfiprintf_r+0xea6>
   12caa:	05b0      	lsls	r0, r6, #22
   12cac:	f140 835b 	bpl.w	13366 <_vfiprintf_r+0xd86>
   12cb0:	9b07      	ldr	r3, [sp, #28]
   12cb2:	9905      	ldr	r1, [sp, #20]
   12cb4:	f853 2b04 	ldr.w	r2, [r3], #4
   12cb8:	9307      	str	r3, [sp, #28]
   12cba:	7011      	strb	r1, [r2, #0]
   12cbc:	e4d4      	b.n	12668 <_vfiprintf_r+0x88>
   12cbe:	9602      	str	r6, [sp, #8]
   12cc0:	2901      	cmp	r1, #1
   12cc2:	f43f ada2 	beq.w	1280a <_vfiprintf_r+0x22a>
   12cc6:	2902      	cmp	r1, #2
   12cc8:	ac44      	add	r4, sp, #272	; 0x110
   12cca:	d111      	bne.n	12cf0 <_vfiprintf_r+0x710>
   12ccc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12cce:	f003 010f 	and.w	r1, r3, #15
   12cd2:	091b      	lsrs	r3, r3, #4
   12cd4:	5c41      	ldrb	r1, [r0, r1]
   12cd6:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12cda:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12cde:	0912      	lsrs	r2, r2, #4
   12ce0:	ea53 0102 	orrs.w	r1, r3, r2
   12ce4:	d1f3      	bne.n	12cce <_vfiprintf_r+0x6ee>
   12ce6:	9e02      	ldr	r6, [sp, #8]
   12ce8:	ab44      	add	r3, sp, #272	; 0x110
   12cea:	1b1b      	subs	r3, r3, r4
   12cec:	9304      	str	r3, [sp, #16]
   12cee:	e599      	b.n	12824 <_vfiprintf_r+0x244>
   12cf0:	f003 0107 	and.w	r1, r3, #7
   12cf4:	08db      	lsrs	r3, r3, #3
   12cf6:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12cfa:	08d2      	lsrs	r2, r2, #3
   12cfc:	3130      	adds	r1, #48	; 0x30
   12cfe:	ea53 0502 	orrs.w	r5, r3, r2
   12d02:	4620      	mov	r0, r4
   12d04:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12d08:	d1f2      	bne.n	12cf0 <_vfiprintf_r+0x710>
   12d0a:	9e02      	ldr	r6, [sp, #8]
   12d0c:	07f3      	lsls	r3, r6, #31
   12d0e:	d5eb      	bpl.n	12ce8 <_vfiprintf_r+0x708>
   12d10:	2930      	cmp	r1, #48	; 0x30
   12d12:	d0e8      	beq.n	12ce6 <_vfiprintf_r+0x706>
   12d14:	2330      	movs	r3, #48	; 0x30
   12d16:	3802      	subs	r0, #2
   12d18:	f804 3c01 	strb.w	r3, [r4, #-1]
   12d1c:	ab44      	add	r3, sp, #272	; 0x110
   12d1e:	1a1b      	subs	r3, r3, r0
   12d20:	9e02      	ldr	r6, [sp, #8]
   12d22:	9304      	str	r3, [sp, #16]
   12d24:	4604      	mov	r4, r0
   12d26:	e57d      	b.n	12824 <_vfiprintf_r+0x244>
   12d28:	9b04      	ldr	r3, [sp, #16]
   12d2a:	941b      	str	r4, [sp, #108]	; 0x6c
   12d2c:	2201      	movs	r2, #1
   12d2e:	931c      	str	r3, [sp, #112]	; 0x70
   12d30:	931a      	str	r3, [sp, #104]	; 0x68
   12d32:	9219      	str	r2, [sp, #100]	; 0x64
   12d34:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d38:	f109 0908 	add.w	r9, r9, #8
   12d3c:	e69e      	b.n	12a7c <_vfiprintf_r+0x49c>
   12d3e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d42:	e491      	b.n	12668 <_vfiprintf_r+0x88>
   12d44:	9a06      	ldr	r2, [sp, #24]
   12d46:	9d02      	ldr	r5, [sp, #8]
   12d48:	1b55      	subs	r5, r2, r5
   12d4a:	2d00      	cmp	r5, #0
   12d4c:	f77f ae78 	ble.w	12a40 <_vfiprintf_r+0x460>
   12d50:	2d10      	cmp	r5, #16
   12d52:	f340 83d3 	ble.w	134fc <_vfiprintf_r+0xf1c>
   12d56:	4619      	mov	r1, r3
   12d58:	4643      	mov	r3, r8
   12d5a:	9409      	str	r4, [sp, #36]	; 0x24
   12d5c:	46b8      	mov	r8, r7
   12d5e:	9c03      	ldr	r4, [sp, #12]
   12d60:	4637      	mov	r7, r6
   12d62:	465e      	mov	r6, fp
   12d64:	469b      	mov	fp, r3
   12d66:	e007      	b.n	12d78 <_vfiprintf_r+0x798>
   12d68:	f100 0c02 	add.w	ip, r0, #2
   12d6c:	f109 0908 	add.w	r9, r9, #8
   12d70:	4610      	mov	r0, r2
   12d72:	3d10      	subs	r5, #16
   12d74:	2d10      	cmp	r5, #16
   12d76:	dd1f      	ble.n	12db8 <_vfiprintf_r+0x7d8>
   12d78:	4b67      	ldr	r3, [pc, #412]	; (12f18 <_vfiprintf_r+0x938>)
   12d7a:	f8c9 3000 	str.w	r3, [r9]
   12d7e:	1c42      	adds	r2, r0, #1
   12d80:	3110      	adds	r1, #16
   12d82:	2310      	movs	r3, #16
   12d84:	2a07      	cmp	r2, #7
   12d86:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   12d8a:	f8c9 3004 	str.w	r3, [r9, #4]
   12d8e:	ddeb      	ble.n	12d68 <_vfiprintf_r+0x788>
   12d90:	aa18      	add	r2, sp, #96	; 0x60
   12d92:	2900      	cmp	r1, #0
   12d94:	f000 808c 	beq.w	12eb0 <_vfiprintf_r+0x8d0>
   12d98:	4621      	mov	r1, r4
   12d9a:	4630      	mov	r0, r6
   12d9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12da0:	f7ff fbe2 	bl	12568 <__sprint_r.part.0>
   12da4:	2800      	cmp	r0, #0
   12da6:	f47f addb 	bne.w	12960 <_vfiprintf_r+0x380>
   12daa:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   12dae:	3d10      	subs	r5, #16
   12db0:	2d10      	cmp	r5, #16
   12db2:	f100 0c01 	add.w	ip, r0, #1
   12db6:	dcdf      	bgt.n	12d78 <_vfiprintf_r+0x798>
   12db8:	465a      	mov	r2, fp
   12dba:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12dbc:	46b3      	mov	fp, r6
   12dbe:	460b      	mov	r3, r1
   12dc0:	463e      	mov	r6, r7
   12dc2:	4647      	mov	r7, r8
   12dc4:	4690      	mov	r8, r2
   12dc6:	4a54      	ldr	r2, [pc, #336]	; (12f18 <_vfiprintf_r+0x938>)
   12dc8:	f8c9 5004 	str.w	r5, [r9, #4]
   12dcc:	442b      	add	r3, r5
   12dce:	f1bc 0f07 	cmp.w	ip, #7
   12dd2:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   12dd6:	f8c9 2000 	str.w	r2, [r9]
   12dda:	f340 81a7 	ble.w	1312c <_vfiprintf_r+0xb4c>
   12dde:	2b00      	cmp	r3, #0
   12de0:	f000 832c 	beq.w	1343c <_vfiprintf_r+0xe5c>
   12de4:	9903      	ldr	r1, [sp, #12]
   12de6:	aa18      	add	r2, sp, #96	; 0x60
   12de8:	4658      	mov	r0, fp
   12dea:	f7ff fbbd 	bl	12568 <__sprint_r.part.0>
   12dee:	2800      	cmp	r0, #0
   12df0:	f47f adb7 	bne.w	12962 <_vfiprintf_r+0x382>
   12df4:	9a04      	ldr	r2, [sp, #16]
   12df6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12dfa:	1abd      	subs	r5, r7, r2
   12dfc:	2d00      	cmp	r5, #0
   12dfe:	f100 0101 	add.w	r1, r0, #1
   12e02:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e06:	f77f ae20 	ble.w	12a4a <_vfiprintf_r+0x46a>
   12e0a:	2d10      	cmp	r5, #16
   12e0c:	dd32      	ble.n	12e74 <_vfiprintf_r+0x894>
   12e0e:	4619      	mov	r1, r3
   12e10:	4643      	mov	r3, r8
   12e12:	9409      	str	r4, [sp, #36]	; 0x24
   12e14:	46b0      	mov	r8, r6
   12e16:	9c03      	ldr	r4, [sp, #12]
   12e18:	465e      	mov	r6, fp
   12e1a:	2710      	movs	r7, #16
   12e1c:	469b      	mov	fp, r3
   12e1e:	e007      	b.n	12e30 <_vfiprintf_r+0x850>
   12e20:	f100 0c02 	add.w	ip, r0, #2
   12e24:	f109 0908 	add.w	r9, r9, #8
   12e28:	4610      	mov	r0, r2
   12e2a:	3d10      	subs	r5, #16
   12e2c:	2d10      	cmp	r5, #16
   12e2e:	dd1a      	ble.n	12e66 <_vfiprintf_r+0x886>
   12e30:	1c42      	adds	r2, r0, #1
   12e32:	4b39      	ldr	r3, [pc, #228]	; (12f18 <_vfiprintf_r+0x938>)
   12e34:	3110      	adds	r1, #16
   12e36:	2a07      	cmp	r2, #7
   12e38:	e9c9 3700 	strd	r3, r7, [r9]
   12e3c:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   12e40:	ddee      	ble.n	12e20 <_vfiprintf_r+0x840>
   12e42:	aa18      	add	r2, sp, #96	; 0x60
   12e44:	b329      	cbz	r1, 12e92 <_vfiprintf_r+0x8b2>
   12e46:	4621      	mov	r1, r4
   12e48:	4630      	mov	r0, r6
   12e4a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e4e:	f7ff fb8b 	bl	12568 <__sprint_r.part.0>
   12e52:	2800      	cmp	r0, #0
   12e54:	f47f ad84 	bne.w	12960 <_vfiprintf_r+0x380>
   12e58:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   12e5c:	3d10      	subs	r5, #16
   12e5e:	2d10      	cmp	r5, #16
   12e60:	f100 0c01 	add.w	ip, r0, #1
   12e64:	dce4      	bgt.n	12e30 <_vfiprintf_r+0x850>
   12e66:	465a      	mov	r2, fp
   12e68:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12e6a:	460b      	mov	r3, r1
   12e6c:	46b3      	mov	fp, r6
   12e6e:	4661      	mov	r1, ip
   12e70:	4646      	mov	r6, r8
   12e72:	4690      	mov	r8, r2
   12e74:	4a28      	ldr	r2, [pc, #160]	; (12f18 <_vfiprintf_r+0x938>)
   12e76:	f8c9 5004 	str.w	r5, [r9, #4]
   12e7a:	442b      	add	r3, r5
   12e7c:	2907      	cmp	r1, #7
   12e7e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12e82:	f8c9 2000 	str.w	r2, [r9]
   12e86:	f300 80f3 	bgt.w	13070 <_vfiprintf_r+0xa90>
   12e8a:	f109 0908 	add.w	r9, r9, #8
   12e8e:	3101      	adds	r1, #1
   12e90:	e5db      	b.n	12a4a <_vfiprintf_r+0x46a>
   12e92:	f04f 0c01 	mov.w	ip, #1
   12e96:	4608      	mov	r0, r1
   12e98:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e9c:	e7c5      	b.n	12e2a <_vfiprintf_r+0x84a>
   12e9e:	9903      	ldr	r1, [sp, #12]
   12ea0:	aa18      	add	r2, sp, #96	; 0x60
   12ea2:	4658      	mov	r0, fp
   12ea4:	f7ff fb60 	bl	12568 <__sprint_r.part.0>
   12ea8:	2800      	cmp	r0, #0
   12eaa:	f43f adfa 	beq.w	12aa2 <_vfiprintf_r+0x4c2>
   12eae:	e558      	b.n	12962 <_vfiprintf_r+0x382>
   12eb0:	f04f 0c01 	mov.w	ip, #1
   12eb4:	4608      	mov	r0, r1
   12eb6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12eba:	e75a      	b.n	12d72 <_vfiprintf_r+0x792>
   12ebc:	2b00      	cmp	r3, #0
   12ebe:	f000 810c 	beq.w	130da <_vfiprintf_r+0xafa>
   12ec2:	9903      	ldr	r1, [sp, #12]
   12ec4:	aa18      	add	r2, sp, #96	; 0x60
   12ec6:	4658      	mov	r0, fp
   12ec8:	f7ff fb4e 	bl	12568 <__sprint_r.part.0>
   12ecc:	2800      	cmp	r0, #0
   12ece:	f47f ad48 	bne.w	12962 <_vfiprintf_r+0x382>
   12ed2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12ed6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12eda:	1c41      	adds	r1, r0, #1
   12edc:	e58e      	b.n	129fc <_vfiprintf_r+0x41c>
   12ede:	2302      	movs	r3, #2
   12ee0:	aa11      	add	r2, sp, #68	; 0x44
   12ee2:	931c      	str	r3, [sp, #112]	; 0x70
   12ee4:	921b      	str	r2, [sp, #108]	; 0x6c
   12ee6:	2101      	movs	r1, #1
   12ee8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12eec:	4608      	mov	r0, r1
   12eee:	f109 0908 	add.w	r9, r9, #8
   12ef2:	1c41      	adds	r1, r0, #1
   12ef4:	e5a0      	b.n	12a38 <_vfiprintf_r+0x458>
   12ef6:	2d10      	cmp	r5, #16
   12ef8:	f340 82e2 	ble.w	134c0 <_vfiprintf_r+0xee0>
   12efc:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12f00:	4618      	mov	r0, r3
   12f02:	4643      	mov	r3, r8
   12f04:	940f      	str	r4, [sp, #60]	; 0x3c
   12f06:	46b8      	mov	r8, r7
   12f08:	9c03      	ldr	r4, [sp, #12]
   12f0a:	4637      	mov	r7, r6
   12f0c:	465e      	mov	r6, fp
   12f0e:	469b      	mov	fp, r3
   12f10:	e00c      	b.n	12f2c <_vfiprintf_r+0x94c>
   12f12:	bf00      	nop
   12f14:	00015fa4 	.word	0x00015fa4
   12f18:	000160b0 	.word	0x000160b0
   12f1c:	f101 0c02 	add.w	ip, r1, #2
   12f20:	f109 0908 	add.w	r9, r9, #8
   12f24:	4611      	mov	r1, r2
   12f26:	3d10      	subs	r5, #16
   12f28:	2d10      	cmp	r5, #16
   12f2a:	dd1d      	ble.n	12f68 <_vfiprintf_r+0x988>
   12f2c:	4bb2      	ldr	r3, [pc, #712]	; (131f8 <_vfiprintf_r+0xc18>)
   12f2e:	f8c9 3000 	str.w	r3, [r9]
   12f32:	1c4a      	adds	r2, r1, #1
   12f34:	3010      	adds	r0, #16
   12f36:	2310      	movs	r3, #16
   12f38:	2a07      	cmp	r2, #7
   12f3a:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   12f3e:	f8c9 3004 	str.w	r3, [r9, #4]
   12f42:	ddeb      	ble.n	12f1c <_vfiprintf_r+0x93c>
   12f44:	aa18      	add	r2, sp, #96	; 0x60
   12f46:	b330      	cbz	r0, 12f96 <_vfiprintf_r+0x9b6>
   12f48:	4621      	mov	r1, r4
   12f4a:	4630      	mov	r0, r6
   12f4c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f50:	f7ff fb0a 	bl	12568 <__sprint_r.part.0>
   12f54:	2800      	cmp	r0, #0
   12f56:	f47f ad03 	bne.w	12960 <_vfiprintf_r+0x380>
   12f5a:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   12f5e:	3d10      	subs	r5, #16
   12f60:	2d10      	cmp	r5, #16
   12f62:	f101 0c01 	add.w	ip, r1, #1
   12f66:	dce1      	bgt.n	12f2c <_vfiprintf_r+0x94c>
   12f68:	465a      	mov	r2, fp
   12f6a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   12f6c:	4603      	mov	r3, r0
   12f6e:	46b3      	mov	fp, r6
   12f70:	4660      	mov	r0, ip
   12f72:	463e      	mov	r6, r7
   12f74:	4647      	mov	r7, r8
   12f76:	4690      	mov	r8, r2
   12f78:	4a9f      	ldr	r2, [pc, #636]	; (131f8 <_vfiprintf_r+0xc18>)
   12f7a:	f8c9 5004 	str.w	r5, [r9, #4]
   12f7e:	442b      	add	r3, r5
   12f80:	2807      	cmp	r0, #7
   12f82:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12f86:	f8c9 2000 	str.w	r2, [r9]
   12f8a:	f300 80b6 	bgt.w	130fa <_vfiprintf_r+0xb1a>
   12f8e:	f109 0908 	add.w	r9, r9, #8
   12f92:	1c41      	adds	r1, r0, #1
   12f94:	e51e      	b.n	129d4 <_vfiprintf_r+0x3f4>
   12f96:	4601      	mov	r1, r0
   12f98:	f04f 0c01 	mov.w	ip, #1
   12f9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fa0:	e7c1      	b.n	12f26 <_vfiprintf_r+0x946>
   12fa2:	0776      	lsls	r6, r6, #29
   12fa4:	9319      	str	r3, [sp, #100]	; 0x64
   12fa6:	d54a      	bpl.n	1303e <_vfiprintf_r+0xa5e>
   12fa8:	9a06      	ldr	r2, [sp, #24]
   12faa:	9902      	ldr	r1, [sp, #8]
   12fac:	1a54      	subs	r4, r2, r1
   12fae:	2c00      	cmp	r4, #0
   12fb0:	dd45      	ble.n	1303e <_vfiprintf_r+0xa5e>
   12fb2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fb6:	2c10      	cmp	r4, #16
   12fb8:	f340 829d 	ble.w	134f6 <_vfiprintf_r+0xf16>
   12fbc:	9919      	ldr	r1, [sp, #100]	; 0x64
   12fbe:	9e03      	ldr	r6, [sp, #12]
   12fc0:	2510      	movs	r5, #16
   12fc2:	e006      	b.n	12fd2 <_vfiprintf_r+0x9f2>
   12fc4:	1c88      	adds	r0, r1, #2
   12fc6:	f109 0908 	add.w	r9, r9, #8
   12fca:	4611      	mov	r1, r2
   12fcc:	3c10      	subs	r4, #16
   12fce:	2c10      	cmp	r4, #16
   12fd0:	dd1a      	ble.n	13008 <_vfiprintf_r+0xa28>
   12fd2:	1c4a      	adds	r2, r1, #1
   12fd4:	4888      	ldr	r0, [pc, #544]	; (131f8 <_vfiprintf_r+0xc18>)
   12fd6:	3310      	adds	r3, #16
   12fd8:	2a07      	cmp	r2, #7
   12fda:	e9c9 0500 	strd	r0, r5, [r9]
   12fde:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12fe2:	ddef      	ble.n	12fc4 <_vfiprintf_r+0x9e4>
   12fe4:	aa18      	add	r2, sp, #96	; 0x60
   12fe6:	b32b      	cbz	r3, 13034 <_vfiprintf_r+0xa54>
   12fe8:	4631      	mov	r1, r6
   12fea:	4658      	mov	r0, fp
   12fec:	f7ff fabc 	bl	12568 <__sprint_r.part.0>
   12ff0:	2800      	cmp	r0, #0
   12ff2:	f47f acb6 	bne.w	12962 <_vfiprintf_r+0x382>
   12ff6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12ffa:	3c10      	subs	r4, #16
   12ffc:	2c10      	cmp	r4, #16
   12ffe:	f101 0001 	add.w	r0, r1, #1
   13002:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13006:	dce4      	bgt.n	12fd2 <_vfiprintf_r+0x9f2>
   13008:	4a7b      	ldr	r2, [pc, #492]	; (131f8 <_vfiprintf_r+0xc18>)
   1300a:	f8c9 4004 	str.w	r4, [r9, #4]
   1300e:	4423      	add	r3, r4
   13010:	2807      	cmp	r0, #7
   13012:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   13016:	f8c9 2000 	str.w	r2, [r9]
   1301a:	f77f ad37 	ble.w	12a8c <_vfiprintf_r+0x4ac>
   1301e:	b173      	cbz	r3, 1303e <_vfiprintf_r+0xa5e>
   13020:	9903      	ldr	r1, [sp, #12]
   13022:	aa18      	add	r2, sp, #96	; 0x60
   13024:	4658      	mov	r0, fp
   13026:	f7ff fa9f 	bl	12568 <__sprint_r.part.0>
   1302a:	2800      	cmp	r0, #0
   1302c:	f47f ac99 	bne.w	12962 <_vfiprintf_r+0x382>
   13030:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13032:	e52b      	b.n	12a8c <_vfiprintf_r+0x4ac>
   13034:	2001      	movs	r0, #1
   13036:	4619      	mov	r1, r3
   13038:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1303c:	e7c6      	b.n	12fcc <_vfiprintf_r+0x9ec>
   1303e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13042:	9902      	ldr	r1, [sp, #8]
   13044:	428a      	cmp	r2, r1
   13046:	bfac      	ite	ge
   13048:	189b      	addge	r3, r3, r2
   1304a:	185b      	addlt	r3, r3, r1
   1304c:	9305      	str	r3, [sp, #20]
   1304e:	e528      	b.n	12aa2 <_vfiprintf_r+0x4c2>
   13050:	9b03      	ldr	r3, [sp, #12]
   13052:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   13056:	058f      	lsls	r7, r1, #22
   13058:	b28a      	uxth	r2, r1
   1305a:	f53f aae0 	bmi.w	1261e <_vfiprintf_r+0x3e>
   1305e:	461d      	mov	r5, r3
   13060:	6d98      	ldr	r0, [r3, #88]	; 0x58
   13062:	f7fb fbe1 	bl	e828 <__retarget_lock_acquire_recursive>
   13066:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   1306a:	b28a      	uxth	r2, r1
   1306c:	f7ff bad7 	b.w	1261e <_vfiprintf_r+0x3e>
   13070:	2b00      	cmp	r3, #0
   13072:	f43f ae59 	beq.w	12d28 <_vfiprintf_r+0x748>
   13076:	9903      	ldr	r1, [sp, #12]
   13078:	aa18      	add	r2, sp, #96	; 0x60
   1307a:	4658      	mov	r0, fp
   1307c:	f7ff fa74 	bl	12568 <__sprint_r.part.0>
   13080:	2800      	cmp	r0, #0
   13082:	f47f ac6e 	bne.w	12962 <_vfiprintf_r+0x382>
   13086:	9919      	ldr	r1, [sp, #100]	; 0x64
   13088:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1308a:	3101      	adds	r1, #1
   1308c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13090:	e4db      	b.n	12a4a <_vfiprintf_r+0x46a>
   13092:	9219      	str	r2, [sp, #100]	; 0x64
   13094:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13098:	e44f      	b.n	1293a <_vfiprintf_r+0x35a>
   1309a:	2f00      	cmp	r7, #0
   1309c:	f47f abba 	bne.w	12814 <_vfiprintf_r+0x234>
   130a0:	9e02      	ldr	r6, [sp, #8]
   130a2:	2700      	movs	r7, #0
   130a4:	9704      	str	r7, [sp, #16]
   130a6:	ac44      	add	r4, sp, #272	; 0x110
   130a8:	f7ff bbbc 	b.w	12824 <_vfiprintf_r+0x244>
   130ac:	9b02      	ldr	r3, [sp, #8]
   130ae:	f013 0310 	ands.w	r3, r3, #16
   130b2:	d154      	bne.n	1315e <_vfiprintf_r+0xb7e>
   130b4:	9a02      	ldr	r2, [sp, #8]
   130b6:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   130ba:	f000 8167 	beq.w	1338c <_vfiprintf_r+0xdac>
   130be:	9907      	ldr	r1, [sp, #28]
   130c0:	461a      	mov	r2, r3
   130c2:	f851 3b04 	ldr.w	r3, [r1], #4
   130c6:	9107      	str	r1, [sp, #28]
   130c8:	b29b      	uxth	r3, r3
   130ca:	2101      	movs	r1, #1
   130cc:	f7ff bbf2 	b.w	128b4 <_vfiprintf_r+0x2d4>
   130d0:	2101      	movs	r1, #1
   130d2:	4618      	mov	r0, r3
   130d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130d8:	e4ae      	b.n	12a38 <_vfiprintf_r+0x458>
   130da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   130dc:	2a00      	cmp	r2, #0
   130de:	d15e      	bne.n	1319e <_vfiprintf_r+0xbbe>
   130e0:	4618      	mov	r0, r3
   130e2:	2101      	movs	r1, #1
   130e4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130e8:	e4a6      	b.n	12a38 <_vfiprintf_r+0x458>
   130ea:	425b      	negs	r3, r3
   130ec:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   130f0:	9602      	str	r6, [sp, #8]
   130f2:	202d      	movs	r0, #45	; 0x2d
   130f4:	2101      	movs	r1, #1
   130f6:	f7ff bbde 	b.w	128b6 <_vfiprintf_r+0x2d6>
   130fa:	2b00      	cmp	r3, #0
   130fc:	f000 808d 	beq.w	1321a <_vfiprintf_r+0xc3a>
   13100:	9903      	ldr	r1, [sp, #12]
   13102:	aa18      	add	r2, sp, #96	; 0x60
   13104:	4658      	mov	r0, fp
   13106:	f7ff fa2f 	bl	12568 <__sprint_r.part.0>
   1310a:	2800      	cmp	r0, #0
   1310c:	f47f ac29 	bne.w	12962 <_vfiprintf_r+0x382>
   13110:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13114:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13118:	1c41      	adds	r1, r0, #1
   1311a:	e45b      	b.n	129d4 <_vfiprintf_r+0x3f4>
   1311c:	f898 1000 	ldrb.w	r1, [r8]
   13120:	9307      	str	r3, [sp, #28]
   13122:	f7ff bac9 	b.w	126b8 <_vfiprintf_r+0xd8>
   13126:	ac44      	add	r4, sp, #272	; 0x110
   13128:	f7ff bb7c 	b.w	12824 <_vfiprintf_r+0x244>
   1312c:	f109 0908 	add.w	r9, r9, #8
   13130:	f10c 0101 	add.w	r1, ip, #1
   13134:	4660      	mov	r0, ip
   13136:	e483      	b.n	12a40 <_vfiprintf_r+0x460>
   13138:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1313c:	f040 8191 	bne.w	13462 <_vfiprintf_r+0xe82>
   13140:	f851 3b04 	ldr.w	r3, [r1], #4
   13144:	9107      	str	r1, [sp, #28]
   13146:	f7ff bbb1 	b.w	128ac <_vfiprintf_r+0x2cc>
   1314a:	05b3      	lsls	r3, r6, #22
   1314c:	f100 8182 	bmi.w	13454 <_vfiprintf_r+0xe74>
   13150:	f852 3b04 	ldr.w	r3, [r2], #4
   13154:	9207      	str	r2, [sp, #28]
   13156:	17da      	asrs	r2, r3, #31
   13158:	4611      	mov	r1, r2
   1315a:	f7ff bb49 	b.w	127f0 <_vfiprintf_r+0x210>
   1315e:	9907      	ldr	r1, [sp, #28]
   13160:	f851 3b04 	ldr.w	r3, [r1], #4
   13164:	9107      	str	r1, [sp, #28]
   13166:	2101      	movs	r1, #1
   13168:	f7ff bba4 	b.w	128b4 <_vfiprintf_r+0x2d4>
   1316c:	9b07      	ldr	r3, [sp, #28]
   1316e:	9805      	ldr	r0, [sp, #20]
   13170:	f853 1b04 	ldr.w	r1, [r3], #4
   13174:	9307      	str	r3, [sp, #28]
   13176:	17c2      	asrs	r2, r0, #31
   13178:	e9c1 0200 	strd	r0, r2, [r1]
   1317c:	f7ff ba74 	b.w	12668 <_vfiprintf_r+0x88>
   13180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13182:	2b00      	cmp	r3, #0
   13184:	f43f ab1d 	beq.w	127c2 <_vfiprintf_r+0x1e2>
   13188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1318a:	781b      	ldrb	r3, [r3, #0]
   1318c:	2b00      	cmp	r3, #0
   1318e:	f43f ab18 	beq.w	127c2 <_vfiprintf_r+0x1e2>
   13192:	f898 1000 	ldrb.w	r1, [r8]
   13196:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   1319a:	f7ff ba8d 	b.w	126b8 <_vfiprintf_r+0xd8>
   1319e:	2302      	movs	r3, #2
   131a0:	aa11      	add	r2, sp, #68	; 0x44
   131a2:	931c      	str	r3, [sp, #112]	; 0x70
   131a4:	921b      	str	r2, [sp, #108]	; 0x6c
   131a6:	2001      	movs	r0, #1
   131a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131ac:	e69f      	b.n	12eee <_vfiprintf_r+0x90e>
   131ae:	9602      	str	r6, [sp, #8]
   131b0:	e552      	b.n	12c58 <_vfiprintf_r+0x678>
   131b2:	4b12      	ldr	r3, [pc, #72]	; (131fc <_vfiprintf_r+0xc1c>)
   131b4:	930b      	str	r3, [sp, #44]	; 0x2c
   131b6:	f016 0220 	ands.w	r2, r6, #32
   131ba:	d05f      	beq.n	1327c <_vfiprintf_r+0xc9c>
   131bc:	9b07      	ldr	r3, [sp, #28]
   131be:	3307      	adds	r3, #7
   131c0:	f023 0307 	bic.w	r3, r3, #7
   131c4:	4618      	mov	r0, r3
   131c6:	685a      	ldr	r2, [r3, #4]
   131c8:	f850 3b08 	ldr.w	r3, [r0], #8
   131cc:	9007      	str	r0, [sp, #28]
   131ce:	07f4      	lsls	r4, r6, #31
   131d0:	d509      	bpl.n	131e6 <_vfiprintf_r+0xc06>
   131d2:	ea53 0002 	orrs.w	r0, r3, r2
   131d6:	d006      	beq.n	131e6 <_vfiprintf_r+0xc06>
   131d8:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   131dc:	2130      	movs	r1, #48	; 0x30
   131de:	f046 0602 	orr.w	r6, r6, #2
   131e2:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   131e6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   131ea:	9102      	str	r1, [sp, #8]
   131ec:	2102      	movs	r1, #2
   131ee:	f7ff bb61 	b.w	128b4 <_vfiprintf_r+0x2d4>
   131f2:	4b03      	ldr	r3, [pc, #12]	; (13200 <_vfiprintf_r+0xc20>)
   131f4:	930b      	str	r3, [sp, #44]	; 0x2c
   131f6:	e7de      	b.n	131b6 <_vfiprintf_r+0xbd6>
   131f8:	000160a0 	.word	0x000160a0
   131fc:	00015fa4 	.word	0x00015fa4
   13200:	00015fb8 	.word	0x00015fb8
   13204:	9b07      	ldr	r3, [sp, #28]
   13206:	2101      	movs	r1, #1
   13208:	f853 2b04 	ldr.w	r2, [r3], #4
   1320c:	9102      	str	r1, [sp, #8]
   1320e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   13212:	9307      	str	r3, [sp, #28]
   13214:	9104      	str	r1, [sp, #16]
   13216:	ac2b      	add	r4, sp, #172	; 0xac
   13218:	e4ba      	b.n	12b90 <_vfiprintf_r+0x5b0>
   1321a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1321e:	2a00      	cmp	r2, #0
   13220:	f040 8126 	bne.w	13470 <_vfiprintf_r+0xe90>
   13224:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13226:	2a00      	cmp	r2, #0
   13228:	f47f ae59 	bne.w	12ede <_vfiprintf_r+0x8fe>
   1322c:	4618      	mov	r0, r3
   1322e:	2101      	movs	r1, #1
   13230:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13234:	e404      	b.n	12a40 <_vfiprintf_r+0x460>
   13236:	2100      	movs	r1, #0
   13238:	2208      	movs	r2, #8
   1323a:	a816      	add	r0, sp, #88	; 0x58
   1323c:	9413      	str	r4, [sp, #76]	; 0x4c
   1323e:	f7fb f9d5 	bl	e5ec <memset>
   13242:	1c79      	adds	r1, r7, #1
   13244:	f000 80b2 	beq.w	133ac <_vfiprintf_r+0xdcc>
   13248:	2500      	movs	r5, #0
   1324a:	9407      	str	r4, [sp, #28]
   1324c:	462c      	mov	r4, r5
   1324e:	e00c      	b.n	1326a <_vfiprintf_r+0xc8a>
   13250:	a92b      	add	r1, sp, #172	; 0xac
   13252:	4658      	mov	r0, fp
   13254:	f7ff f8c0 	bl	123d8 <_wcrtomb_r>
   13258:	1c42      	adds	r2, r0, #1
   1325a:	4420      	add	r0, r4
   1325c:	f000 8161 	beq.w	13522 <_vfiprintf_r+0xf42>
   13260:	42b8      	cmp	r0, r7
   13262:	dc08      	bgt.n	13276 <_vfiprintf_r+0xc96>
   13264:	f000 8165 	beq.w	13532 <_vfiprintf_r+0xf52>
   13268:	4604      	mov	r4, r0
   1326a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1326c:	5952      	ldr	r2, [r2, r5]
   1326e:	ab16      	add	r3, sp, #88	; 0x58
   13270:	3504      	adds	r5, #4
   13272:	2a00      	cmp	r2, #0
   13274:	d1ec      	bne.n	13250 <_vfiprintf_r+0xc70>
   13276:	9404      	str	r4, [sp, #16]
   13278:	9c07      	ldr	r4, [sp, #28]
   1327a:	e0a5      	b.n	133c8 <_vfiprintf_r+0xde8>
   1327c:	f016 0310 	ands.w	r3, r6, #16
   13280:	9807      	ldr	r0, [sp, #28]
   13282:	d10c      	bne.n	1329e <_vfiprintf_r+0xcbe>
   13284:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13288:	d005      	beq.n	13296 <_vfiprintf_r+0xcb6>
   1328a:	461a      	mov	r2, r3
   1328c:	f850 3b04 	ldr.w	r3, [r0], #4
   13290:	9007      	str	r0, [sp, #28]
   13292:	b29b      	uxth	r3, r3
   13294:	e79b      	b.n	131ce <_vfiprintf_r+0xbee>
   13296:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1329a:	f040 80d5 	bne.w	13448 <_vfiprintf_r+0xe68>
   1329e:	f850 3b04 	ldr.w	r3, [r0], #4
   132a2:	9007      	str	r0, [sp, #28]
   132a4:	e793      	b.n	131ce <_vfiprintf_r+0xbee>
   132a6:	9902      	ldr	r1, [sp, #8]
   132a8:	f8cd 8020 	str.w	r8, [sp, #32]
   132ac:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   132b0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   132b4:	9704      	str	r7, [sp, #16]
   132b6:	f04f 0c00 	mov.w	ip, #0
   132ba:	ac44      	add	r4, sp, #272	; 0x110
   132bc:	e005      	b.n	132ca <_vfiprintf_r+0xcea>
   132be:	2b0a      	cmp	r3, #10
   132c0:	f172 0200 	sbcs.w	r2, r2, #0
   132c4:	d336      	bcc.n	13334 <_vfiprintf_r+0xd54>
   132c6:	463b      	mov	r3, r7
   132c8:	462a      	mov	r2, r5
   132ca:	f8df e290 	ldr.w	lr, [pc, #656]	; 1355c <_vfiprintf_r+0xf7c>
   132ce:	1899      	adds	r1, r3, r2
   132d0:	f141 0100 	adc.w	r1, r1, #0
   132d4:	fbae 0501 	umull	r0, r5, lr, r1
   132d8:	f025 0003 	bic.w	r0, r5, #3
   132dc:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   132e0:	1a09      	subs	r1, r1, r0
   132e2:	1a58      	subs	r0, r3, r1
   132e4:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   132e8:	f162 0700 	sbc.w	r7, r2, #0
   132ec:	fb05 f500 	mul.w	r5, r5, r0
   132f0:	fb0e 5507 	mla	r5, lr, r7, r5
   132f4:	fba0 700e 	umull	r7, r0, r0, lr
   132f8:	4405      	add	r5, r0
   132fa:	f007 0e01 	and.w	lr, r7, #1
   132fe:	2005      	movs	r0, #5
   13300:	fbae 0e00 	umull	r0, lr, lr, r0
   13304:	1840      	adds	r0, r0, r1
   13306:	087f      	lsrs	r7, r7, #1
   13308:	3030      	adds	r0, #48	; 0x30
   1330a:	f804 0c01 	strb.w	r0, [r4, #-1]
   1330e:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   13312:	f10c 0c01 	add.w	ip, ip, #1
   13316:	3c01      	subs	r4, #1
   13318:	086d      	lsrs	r5, r5, #1
   1331a:	2e00      	cmp	r6, #0
   1331c:	d0cf      	beq.n	132be <_vfiprintf_r+0xcde>
   1331e:	f898 1000 	ldrb.w	r1, [r8]
   13322:	4561      	cmp	r1, ip
   13324:	d1cb      	bne.n	132be <_vfiprintf_r+0xcde>
   13326:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1332a:	d0c8      	beq.n	132be <_vfiprintf_r+0xcde>
   1332c:	2b0a      	cmp	r3, #10
   1332e:	f172 0200 	sbcs.w	r2, r2, #0
   13332:	d26c      	bcs.n	1340e <_vfiprintf_r+0xe2e>
   13334:	ab44      	add	r3, sp, #272	; 0x110
   13336:	1b1b      	subs	r3, r3, r4
   13338:	9f04      	ldr	r7, [sp, #16]
   1333a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1333e:	9e02      	ldr	r6, [sp, #8]
   13340:	f8dd 8020 	ldr.w	r8, [sp, #32]
   13344:	9304      	str	r3, [sp, #16]
   13346:	f7ff ba6d 	b.w	12824 <_vfiprintf_r+0x244>
   1334a:	9602      	str	r6, [sp, #8]
   1334c:	f7ff ba5d 	b.w	1280a <_vfiprintf_r+0x22a>
   13350:	4658      	mov	r0, fp
   13352:	f7fb f81b 	bl	e38c <__sinit>
   13356:	f7ff b95a 	b.w	1260e <_vfiprintf_r+0x2e>
   1335a:	2901      	cmp	r1, #1
   1335c:	9602      	str	r6, [sp, #8]
   1335e:	f47f acb2 	bne.w	12cc6 <_vfiprintf_r+0x6e6>
   13362:	f7ff ba57 	b.w	12814 <_vfiprintf_r+0x234>
   13366:	9b07      	ldr	r3, [sp, #28]
   13368:	9905      	ldr	r1, [sp, #20]
   1336a:	f853 2b04 	ldr.w	r2, [r3], #4
   1336e:	6011      	str	r1, [r2, #0]
   13370:	9307      	str	r3, [sp, #28]
   13372:	f7ff b979 	b.w	12668 <_vfiprintf_r+0x88>
   13376:	2f06      	cmp	r7, #6
   13378:	463b      	mov	r3, r7
   1337a:	9a02      	ldr	r2, [sp, #8]
   1337c:	4c78      	ldr	r4, [pc, #480]	; (13560 <_vfiprintf_r+0xf80>)
   1337e:	9207      	str	r2, [sp, #28]
   13380:	bf28      	it	cs
   13382:	2306      	movcs	r3, #6
   13384:	9304      	str	r3, [sp, #16]
   13386:	9302      	str	r3, [sp, #8]
   13388:	f7ff bb0d 	b.w	129a6 <_vfiprintf_r+0x3c6>
   1338c:	9b02      	ldr	r3, [sp, #8]
   1338e:	9907      	ldr	r1, [sp, #28]
   13390:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13394:	bf14      	ite	ne
   13396:	f851 3b04 	ldrne.w	r3, [r1], #4
   1339a:	f851 3b04 	ldreq.w	r3, [r1], #4
   1339e:	9107      	str	r1, [sp, #28]
   133a0:	bf1c      	itt	ne
   133a2:	4602      	movne	r2, r0
   133a4:	b2db      	uxtbne	r3, r3
   133a6:	2101      	movs	r1, #1
   133a8:	f7ff ba84 	b.w	128b4 <_vfiprintf_r+0x2d4>
   133ac:	ab16      	add	r3, sp, #88	; 0x58
   133ae:	9300      	str	r3, [sp, #0]
   133b0:	2300      	movs	r3, #0
   133b2:	4619      	mov	r1, r3
   133b4:	aa13      	add	r2, sp, #76	; 0x4c
   133b6:	4658      	mov	r0, fp
   133b8:	f7ff f834 	bl	12424 <_wcsrtombs_r>
   133bc:	4603      	mov	r3, r0
   133be:	3301      	adds	r3, #1
   133c0:	9004      	str	r0, [sp, #16]
   133c2:	f000 80ae 	beq.w	13522 <_vfiprintf_r+0xf42>
   133c6:	9413      	str	r4, [sp, #76]	; 0x4c
   133c8:	9b04      	ldr	r3, [sp, #16]
   133ca:	b37b      	cbz	r3, 1342c <_vfiprintf_r+0xe4c>
   133cc:	2b63      	cmp	r3, #99	; 0x63
   133ce:	dc62      	bgt.n	13496 <_vfiprintf_r+0xeb6>
   133d0:	2300      	movs	r3, #0
   133d2:	9308      	str	r3, [sp, #32]
   133d4:	ac2b      	add	r4, sp, #172	; 0xac
   133d6:	2208      	movs	r2, #8
   133d8:	2100      	movs	r1, #0
   133da:	a816      	add	r0, sp, #88	; 0x58
   133dc:	f7fb f906 	bl	e5ec <memset>
   133e0:	9d04      	ldr	r5, [sp, #16]
   133e2:	ab16      	add	r3, sp, #88	; 0x58
   133e4:	9300      	str	r3, [sp, #0]
   133e6:	aa13      	add	r2, sp, #76	; 0x4c
   133e8:	462b      	mov	r3, r5
   133ea:	4621      	mov	r1, r4
   133ec:	4658      	mov	r0, fp
   133ee:	f7ff f819 	bl	12424 <_wcsrtombs_r>
   133f2:	4285      	cmp	r5, r0
   133f4:	f040 80ab 	bne.w	1354e <_vfiprintf_r+0xf6e>
   133f8:	9b02      	ldr	r3, [sp, #8]
   133fa:	9a04      	ldr	r2, [sp, #16]
   133fc:	9307      	str	r3, [sp, #28]
   133fe:	2300      	movs	r3, #0
   13400:	54a3      	strb	r3, [r4, r2]
   13402:	461f      	mov	r7, r3
   13404:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   13408:	9302      	str	r3, [sp, #8]
   1340a:	f7ff ba12 	b.w	12832 <_vfiprintf_r+0x252>
   1340e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13410:	990d      	ldr	r1, [sp, #52]	; 0x34
   13412:	1ae4      	subs	r4, r4, r3
   13414:	461a      	mov	r2, r3
   13416:	4620      	mov	r0, r4
   13418:	f7fb f93a 	bl	e690 <strncpy>
   1341c:	f898 3001 	ldrb.w	r3, [r8, #1]
   13420:	b10b      	cbz	r3, 13426 <_vfiprintf_r+0xe46>
   13422:	f108 0801 	add.w	r8, r8, #1
   13426:	f04f 0c00 	mov.w	ip, #0
   1342a:	e74c      	b.n	132c6 <_vfiprintf_r+0xce6>
   1342c:	9b02      	ldr	r3, [sp, #8]
   1342e:	9307      	str	r3, [sp, #28]
   13430:	9b04      	ldr	r3, [sp, #16]
   13432:	9302      	str	r3, [sp, #8]
   13434:	461f      	mov	r7, r3
   13436:	9308      	str	r3, [sp, #32]
   13438:	f7ff b9fb 	b.w	12832 <_vfiprintf_r+0x252>
   1343c:	2101      	movs	r1, #1
   1343e:	4618      	mov	r0, r3
   13440:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13444:	f7ff bafc 	b.w	12a40 <_vfiprintf_r+0x460>
   13448:	f850 3b04 	ldr.w	r3, [r0], #4
   1344c:	9007      	str	r0, [sp, #28]
   1344e:	4622      	mov	r2, r4
   13450:	b2db      	uxtb	r3, r3
   13452:	e6bc      	b.n	131ce <_vfiprintf_r+0xbee>
   13454:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13458:	9207      	str	r2, [sp, #28]
   1345a:	17da      	asrs	r2, r3, #31
   1345c:	4611      	mov	r1, r2
   1345e:	f7ff b9c7 	b.w	127f0 <_vfiprintf_r+0x210>
   13462:	f851 3b04 	ldr.w	r3, [r1], #4
   13466:	9107      	str	r1, [sp, #28]
   13468:	4602      	mov	r2, r0
   1346a:	b2db      	uxtb	r3, r3
   1346c:	f7ff ba1e 	b.w	128ac <_vfiprintf_r+0x2cc>
   13470:	2301      	movs	r3, #1
   13472:	931c      	str	r3, [sp, #112]	; 0x70
   13474:	2101      	movs	r1, #1
   13476:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   1347a:	931b      	str	r3, [sp, #108]	; 0x6c
   1347c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13480:	460b      	mov	r3, r1
   13482:	f7ff bab7 	b.w	129f4 <_vfiprintf_r+0x414>
   13486:	9b07      	ldr	r3, [sp, #28]
   13488:	9905      	ldr	r1, [sp, #20]
   1348a:	f853 2b04 	ldr.w	r2, [r3], #4
   1348e:	9307      	str	r3, [sp, #28]
   13490:	8011      	strh	r1, [r2, #0]
   13492:	f7ff b8e9 	b.w	12668 <_vfiprintf_r+0x88>
   13496:	1c59      	adds	r1, r3, #1
   13498:	4658      	mov	r0, fp
   1349a:	f7fa fa33 	bl	d904 <_malloc_r>
   1349e:	4604      	mov	r4, r0
   134a0:	2800      	cmp	r0, #0
   134a2:	d03e      	beq.n	13522 <_vfiprintf_r+0xf42>
   134a4:	9008      	str	r0, [sp, #32]
   134a6:	e796      	b.n	133d6 <_vfiprintf_r+0xdf6>
   134a8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   134aa:	f7fb f9bf 	bl	e82c <__retarget_lock_release_recursive>
   134ae:	f7ff b9e3 	b.w	12878 <_vfiprintf_r+0x298>
   134b2:	9b02      	ldr	r3, [sp, #8]
   134b4:	9704      	str	r7, [sp, #16]
   134b6:	9702      	str	r7, [sp, #8]
   134b8:	9307      	str	r3, [sp, #28]
   134ba:	9f08      	ldr	r7, [sp, #32]
   134bc:	f7ff b9b9 	b.w	12832 <_vfiprintf_r+0x252>
   134c0:	9819      	ldr	r0, [sp, #100]	; 0x64
   134c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   134c4:	3001      	adds	r0, #1
   134c6:	e557      	b.n	12f78 <_vfiprintf_r+0x998>
   134c8:	9b02      	ldr	r3, [sp, #8]
   134ca:	9307      	str	r3, [sp, #28]
   134cc:	4620      	mov	r0, r4
   134ce:	f7fb f9b7 	bl	e840 <strlen>
   134d2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   134d6:	462f      	mov	r7, r5
   134d8:	9004      	str	r0, [sp, #16]
   134da:	9302      	str	r3, [sp, #8]
   134dc:	9508      	str	r5, [sp, #32]
   134de:	f7ff b9a8 	b.w	12832 <_vfiprintf_r+0x252>
   134e2:	9903      	ldr	r1, [sp, #12]
   134e4:	aa18      	add	r2, sp, #96	; 0x60
   134e6:	4658      	mov	r0, fp
   134e8:	f7ff f83e 	bl	12568 <__sprint_r.part.0>
   134ec:	2800      	cmp	r0, #0
   134ee:	f43f aa2e 	beq.w	1294e <_vfiprintf_r+0x36e>
   134f2:	f7ff ba3c 	b.w	1296e <_vfiprintf_r+0x38e>
   134f6:	9819      	ldr	r0, [sp, #100]	; 0x64
   134f8:	3001      	adds	r0, #1
   134fa:	e585      	b.n	13008 <_vfiprintf_r+0xa28>
   134fc:	468c      	mov	ip, r1
   134fe:	e462      	b.n	12dc6 <_vfiprintf_r+0x7e6>
   13500:	9b03      	ldr	r3, [sp, #12]
   13502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13504:	07d9      	lsls	r1, r3, #31
   13506:	d407      	bmi.n	13518 <_vfiprintf_r+0xf38>
   13508:	9b03      	ldr	r3, [sp, #12]
   1350a:	899b      	ldrh	r3, [r3, #12]
   1350c:	059a      	lsls	r2, r3, #22
   1350e:	d403      	bmi.n	13518 <_vfiprintf_r+0xf38>
   13510:	9b03      	ldr	r3, [sp, #12]
   13512:	6d98      	ldr	r0, [r3, #88]	; 0x58
   13514:	f7fb f98a 	bl	e82c <__retarget_lock_release_recursive>
   13518:	f04f 33ff 	mov.w	r3, #4294967295
   1351c:	9305      	str	r3, [sp, #20]
   1351e:	f7ff ba33 	b.w	12988 <_vfiprintf_r+0x3a8>
   13522:	9a03      	ldr	r2, [sp, #12]
   13524:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1352c:	8193      	strh	r3, [r2, #12]
   1352e:	f7ff ba21 	b.w	12974 <_vfiprintf_r+0x394>
   13532:	9c07      	ldr	r4, [sp, #28]
   13534:	9704      	str	r7, [sp, #16]
   13536:	e747      	b.n	133c8 <_vfiprintf_r+0xde8>
   13538:	9b07      	ldr	r3, [sp, #28]
   1353a:	f898 1001 	ldrb.w	r1, [r8, #1]
   1353e:	f853 7b04 	ldr.w	r7, [r3], #4
   13542:	9307      	str	r3, [sp, #28]
   13544:	4690      	mov	r8, r2
   13546:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   1354a:	f7ff b8b5 	b.w	126b8 <_vfiprintf_r+0xd8>
   1354e:	9a03      	ldr	r2, [sp, #12]
   13550:	8993      	ldrh	r3, [r2, #12]
   13552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13556:	8193      	strh	r3, [r2, #12]
   13558:	f7ff ba03 	b.w	12962 <_vfiprintf_r+0x382>
   1355c:	cccccccd 	.word	0xcccccccd
   13560:	00015fcc 	.word	0x00015fcc

00013564 <__sbprintf>:
   13564:	b5f0      	push	{r4, r5, r6, r7, lr}
   13566:	461f      	mov	r7, r3
   13568:	898b      	ldrh	r3, [r1, #12]
   1356a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   1356e:	f023 0302 	bic.w	r3, r3, #2
   13572:	f8ad 300c 	strh.w	r3, [sp, #12]
   13576:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13578:	9319      	str	r3, [sp, #100]	; 0x64
   1357a:	89cb      	ldrh	r3, [r1, #14]
   1357c:	f8ad 300e 	strh.w	r3, [sp, #14]
   13580:	69cb      	ldr	r3, [r1, #28]
   13582:	9307      	str	r3, [sp, #28]
   13584:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   13586:	9309      	str	r3, [sp, #36]	; 0x24
   13588:	ab1a      	add	r3, sp, #104	; 0x68
   1358a:	9300      	str	r3, [sp, #0]
   1358c:	9304      	str	r3, [sp, #16]
   1358e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13592:	4615      	mov	r5, r2
   13594:	4606      	mov	r6, r0
   13596:	9302      	str	r3, [sp, #8]
   13598:	9305      	str	r3, [sp, #20]
   1359a:	a816      	add	r0, sp, #88	; 0x58
   1359c:	2300      	movs	r3, #0
   1359e:	460c      	mov	r4, r1
   135a0:	9306      	str	r3, [sp, #24]
   135a2:	f7fb f93d 	bl	e820 <__retarget_lock_init_recursive>
   135a6:	462a      	mov	r2, r5
   135a8:	463b      	mov	r3, r7
   135aa:	4669      	mov	r1, sp
   135ac:	4630      	mov	r0, r6
   135ae:	f7ff f817 	bl	125e0 <_vfiprintf_r>
   135b2:	1e05      	subs	r5, r0, #0
   135b4:	db07      	blt.n	135c6 <__sbprintf+0x62>
   135b6:	4669      	mov	r1, sp
   135b8:	4630      	mov	r0, r6
   135ba:	f7fd fdf1 	bl	111a0 <_fflush_r>
   135be:	2800      	cmp	r0, #0
   135c0:	bf18      	it	ne
   135c2:	f04f 35ff 	movne.w	r5, #4294967295
   135c6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   135ca:	065b      	lsls	r3, r3, #25
   135cc:	d503      	bpl.n	135d6 <__sbprintf+0x72>
   135ce:	89a3      	ldrh	r3, [r4, #12]
   135d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   135d4:	81a3      	strh	r3, [r4, #12]
   135d6:	9816      	ldr	r0, [sp, #88]	; 0x58
   135d8:	f7fb f924 	bl	e824 <__retarget_lock_close_recursive>
   135dc:	4628      	mov	r0, r5
   135de:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   135e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000135e4 <__sfvwrite_r>:
   135e4:	6893      	ldr	r3, [r2, #8]
   135e6:	2b00      	cmp	r3, #0
   135e8:	f000 8081 	beq.w	136ee <__sfvwrite_r+0x10a>
   135ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135f0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   135f4:	460c      	mov	r4, r1
   135f6:	0719      	lsls	r1, r3, #28
   135f8:	4680      	mov	r8, r0
   135fa:	b083      	sub	sp, #12
   135fc:	4617      	mov	r7, r2
   135fe:	b298      	uxth	r0, r3
   13600:	d523      	bpl.n	1364a <__sfvwrite_r+0x66>
   13602:	6923      	ldr	r3, [r4, #16]
   13604:	b30b      	cbz	r3, 1364a <__sfvwrite_r+0x66>
   13606:	f010 0302 	ands.w	r3, r0, #2
   1360a:	683d      	ldr	r5, [r7, #0]
   1360c:	d02b      	beq.n	13666 <__sfvwrite_r+0x82>
   1360e:	f04f 0a00 	mov.w	sl, #0
   13612:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 138c8 <__sfvwrite_r+0x2e4>
   13616:	4656      	mov	r6, sl
   13618:	455e      	cmp	r6, fp
   1361a:	4633      	mov	r3, r6
   1361c:	4652      	mov	r2, sl
   1361e:	bf28      	it	cs
   13620:	465b      	movcs	r3, fp
   13622:	4640      	mov	r0, r8
   13624:	2e00      	cmp	r6, #0
   13626:	d04f      	beq.n	136c8 <__sfvwrite_r+0xe4>
   13628:	69e1      	ldr	r1, [r4, #28]
   1362a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   1362e:	47e0      	blx	ip
   13630:	2800      	cmp	r0, #0
   13632:	dd52      	ble.n	136da <__sfvwrite_r+0xf6>
   13634:	68bb      	ldr	r3, [r7, #8]
   13636:	1a1b      	subs	r3, r3, r0
   13638:	4482      	add	sl, r0
   1363a:	1a36      	subs	r6, r6, r0
   1363c:	60bb      	str	r3, [r7, #8]
   1363e:	2b00      	cmp	r3, #0
   13640:	d1ea      	bne.n	13618 <__sfvwrite_r+0x34>
   13642:	2000      	movs	r0, #0
   13644:	b003      	add	sp, #12
   13646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1364a:	4621      	mov	r1, r4
   1364c:	4640      	mov	r0, r8
   1364e:	f000 f93d 	bl	138cc <__swsetup_r>
   13652:	2800      	cmp	r0, #0
   13654:	f040 8134 	bne.w	138c0 <__sfvwrite_r+0x2dc>
   13658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1365c:	683d      	ldr	r5, [r7, #0]
   1365e:	b298      	uxth	r0, r3
   13660:	f010 0302 	ands.w	r3, r0, #2
   13664:	d1d3      	bne.n	1360e <__sfvwrite_r+0x2a>
   13666:	f010 0901 	ands.w	r9, r0, #1
   1366a:	d142      	bne.n	136f2 <__sfvwrite_r+0x10e>
   1366c:	464e      	mov	r6, r9
   1366e:	b33e      	cbz	r6, 136c0 <__sfvwrite_r+0xdc>
   13670:	0582      	lsls	r2, r0, #22
   13672:	f8d4 b008 	ldr.w	fp, [r4, #8]
   13676:	f140 8081 	bpl.w	1377c <__sfvwrite_r+0x198>
   1367a:	45b3      	cmp	fp, r6
   1367c:	465a      	mov	r2, fp
   1367e:	f200 80b1 	bhi.w	137e4 <__sfvwrite_r+0x200>
   13682:	f410 6f90 	tst.w	r0, #1152	; 0x480
   13686:	f040 80be 	bne.w	13806 <__sfvwrite_r+0x222>
   1368a:	6820      	ldr	r0, [r4, #0]
   1368c:	9201      	str	r2, [sp, #4]
   1368e:	4649      	mov	r1, r9
   13690:	f7fa ff30 	bl	e4f4 <memmove>
   13694:	68a3      	ldr	r3, [r4, #8]
   13696:	9a01      	ldr	r2, [sp, #4]
   13698:	eba3 010b 	sub.w	r1, r3, fp
   1369c:	6823      	ldr	r3, [r4, #0]
   1369e:	60a1      	str	r1, [r4, #8]
   136a0:	4413      	add	r3, r2
   136a2:	46b2      	mov	sl, r6
   136a4:	6023      	str	r3, [r4, #0]
   136a6:	2600      	movs	r6, #0
   136a8:	68bb      	ldr	r3, [r7, #8]
   136aa:	eba3 030a 	sub.w	r3, r3, sl
   136ae:	44d1      	add	r9, sl
   136b0:	60bb      	str	r3, [r7, #8]
   136b2:	2b00      	cmp	r3, #0
   136b4:	d0c5      	beq.n	13642 <__sfvwrite_r+0x5e>
   136b6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   136ba:	b280      	uxth	r0, r0
   136bc:	2e00      	cmp	r6, #0
   136be:	d1d7      	bne.n	13670 <__sfvwrite_r+0x8c>
   136c0:	e9d5 9600 	ldrd	r9, r6, [r5]
   136c4:	3508      	adds	r5, #8
   136c6:	e7d2      	b.n	1366e <__sfvwrite_r+0x8a>
   136c8:	e9d5 a600 	ldrd	sl, r6, [r5]
   136cc:	3508      	adds	r5, #8
   136ce:	e7a3      	b.n	13618 <__sfvwrite_r+0x34>
   136d0:	4621      	mov	r1, r4
   136d2:	4640      	mov	r0, r8
   136d4:	f7fd fd64 	bl	111a0 <_fflush_r>
   136d8:	b380      	cbz	r0, 1373c <__sfvwrite_r+0x158>
   136da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   136de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   136e2:	f04f 30ff 	mov.w	r0, #4294967295
   136e6:	81a3      	strh	r3, [r4, #12]
   136e8:	b003      	add	sp, #12
   136ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136ee:	2000      	movs	r0, #0
   136f0:	4770      	bx	lr
   136f2:	461e      	mov	r6, r3
   136f4:	46ba      	mov	sl, r7
   136f6:	4699      	mov	r9, r3
   136f8:	4618      	mov	r0, r3
   136fa:	461f      	mov	r7, r3
   136fc:	b366      	cbz	r6, 13758 <__sfvwrite_r+0x174>
   136fe:	b388      	cbz	r0, 13764 <__sfvwrite_r+0x180>
   13700:	464a      	mov	r2, r9
   13702:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   13706:	6820      	ldr	r0, [r4, #0]
   13708:	68a1      	ldr	r1, [r4, #8]
   1370a:	42b2      	cmp	r2, r6
   1370c:	bf28      	it	cs
   1370e:	4632      	movcs	r2, r6
   13710:	4560      	cmp	r0, ip
   13712:	d904      	bls.n	1371e <__sfvwrite_r+0x13a>
   13714:	eb01 0b03 	add.w	fp, r1, r3
   13718:	455a      	cmp	r2, fp
   1371a:	f300 80a7 	bgt.w	1386c <__sfvwrite_r+0x288>
   1371e:	4293      	cmp	r3, r2
   13720:	dc64      	bgt.n	137ec <__sfvwrite_r+0x208>
   13722:	69e1      	ldr	r1, [r4, #28]
   13724:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   13728:	463a      	mov	r2, r7
   1372a:	4640      	mov	r0, r8
   1372c:	47e0      	blx	ip
   1372e:	f1b0 0b00 	subs.w	fp, r0, #0
   13732:	ddd2      	ble.n	136da <__sfvwrite_r+0xf6>
   13734:	ebb9 090b 	subs.w	r9, r9, fp
   13738:	d0ca      	beq.n	136d0 <__sfvwrite_r+0xec>
   1373a:	2001      	movs	r0, #1
   1373c:	f8da 3008 	ldr.w	r3, [sl, #8]
   13740:	eba3 030b 	sub.w	r3, r3, fp
   13744:	445f      	add	r7, fp
   13746:	eba6 060b 	sub.w	r6, r6, fp
   1374a:	f8ca 3008 	str.w	r3, [sl, #8]
   1374e:	2b00      	cmp	r3, #0
   13750:	f43f af77 	beq.w	13642 <__sfvwrite_r+0x5e>
   13754:	2e00      	cmp	r6, #0
   13756:	d1d2      	bne.n	136fe <__sfvwrite_r+0x11a>
   13758:	686e      	ldr	r6, [r5, #4]
   1375a:	462b      	mov	r3, r5
   1375c:	3508      	adds	r5, #8
   1375e:	2e00      	cmp	r6, #0
   13760:	d0fa      	beq.n	13758 <__sfvwrite_r+0x174>
   13762:	681f      	ldr	r7, [r3, #0]
   13764:	4632      	mov	r2, r6
   13766:	210a      	movs	r1, #10
   13768:	4638      	mov	r0, r7
   1376a:	f7fd fd61 	bl	11230 <memchr>
   1376e:	2800      	cmp	r0, #0
   13770:	f000 809d 	beq.w	138ae <__sfvwrite_r+0x2ca>
   13774:	3001      	adds	r0, #1
   13776:	eba0 0907 	sub.w	r9, r0, r7
   1377a:	e7c1      	b.n	13700 <__sfvwrite_r+0x11c>
   1377c:	6820      	ldr	r0, [r4, #0]
   1377e:	6923      	ldr	r3, [r4, #16]
   13780:	4298      	cmp	r0, r3
   13782:	d817      	bhi.n	137b4 <__sfvwrite_r+0x1d0>
   13784:	6962      	ldr	r2, [r4, #20]
   13786:	42b2      	cmp	r2, r6
   13788:	d814      	bhi.n	137b4 <__sfvwrite_r+0x1d0>
   1378a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1378e:	42b3      	cmp	r3, r6
   13790:	bf28      	it	cs
   13792:	4633      	movcs	r3, r6
   13794:	69e1      	ldr	r1, [r4, #28]
   13796:	fb93 f3f2 	sdiv	r3, r3, r2
   1379a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   1379e:	fb02 f303 	mul.w	r3, r2, r3
   137a2:	4640      	mov	r0, r8
   137a4:	464a      	mov	r2, r9
   137a6:	47e0      	blx	ip
   137a8:	f1b0 0a00 	subs.w	sl, r0, #0
   137ac:	dd95      	ble.n	136da <__sfvwrite_r+0xf6>
   137ae:	eba6 060a 	sub.w	r6, r6, sl
   137b2:	e779      	b.n	136a8 <__sfvwrite_r+0xc4>
   137b4:	45b3      	cmp	fp, r6
   137b6:	46da      	mov	sl, fp
   137b8:	bf28      	it	cs
   137ba:	46b2      	movcs	sl, r6
   137bc:	4652      	mov	r2, sl
   137be:	4649      	mov	r1, r9
   137c0:	f7fa fe98 	bl	e4f4 <memmove>
   137c4:	68a3      	ldr	r3, [r4, #8]
   137c6:	6822      	ldr	r2, [r4, #0]
   137c8:	eba3 030a 	sub.w	r3, r3, sl
   137cc:	4452      	add	r2, sl
   137ce:	60a3      	str	r3, [r4, #8]
   137d0:	6022      	str	r2, [r4, #0]
   137d2:	2b00      	cmp	r3, #0
   137d4:	d1eb      	bne.n	137ae <__sfvwrite_r+0x1ca>
   137d6:	4621      	mov	r1, r4
   137d8:	4640      	mov	r0, r8
   137da:	f7fd fce1 	bl	111a0 <_fflush_r>
   137de:	2800      	cmp	r0, #0
   137e0:	d0e5      	beq.n	137ae <__sfvwrite_r+0x1ca>
   137e2:	e77a      	b.n	136da <__sfvwrite_r+0xf6>
   137e4:	6820      	ldr	r0, [r4, #0]
   137e6:	46b3      	mov	fp, r6
   137e8:	4632      	mov	r2, r6
   137ea:	e74f      	b.n	1368c <__sfvwrite_r+0xa8>
   137ec:	4639      	mov	r1, r7
   137ee:	9201      	str	r2, [sp, #4]
   137f0:	f7fa fe80 	bl	e4f4 <memmove>
   137f4:	9a01      	ldr	r2, [sp, #4]
   137f6:	68a3      	ldr	r3, [r4, #8]
   137f8:	1a9b      	subs	r3, r3, r2
   137fa:	60a3      	str	r3, [r4, #8]
   137fc:	6823      	ldr	r3, [r4, #0]
   137fe:	4413      	add	r3, r2
   13800:	6023      	str	r3, [r4, #0]
   13802:	4693      	mov	fp, r2
   13804:	e796      	b.n	13734 <__sfvwrite_r+0x150>
   13806:	6823      	ldr	r3, [r4, #0]
   13808:	6921      	ldr	r1, [r4, #16]
   1380a:	eba3 0b01 	sub.w	fp, r3, r1
   1380e:	6963      	ldr	r3, [r4, #20]
   13810:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   13814:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13818:	f10b 0301 	add.w	r3, fp, #1
   1381c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13820:	4433      	add	r3, r6
   13822:	4553      	cmp	r3, sl
   13824:	4652      	mov	r2, sl
   13826:	bf84      	itt	hi
   13828:	469a      	movhi	sl, r3
   1382a:	4652      	movhi	r2, sl
   1382c:	0543      	lsls	r3, r0, #21
   1382e:	d52c      	bpl.n	1388a <__sfvwrite_r+0x2a6>
   13830:	4611      	mov	r1, r2
   13832:	4640      	mov	r0, r8
   13834:	f7fa f866 	bl	d904 <_malloc_r>
   13838:	2800      	cmp	r0, #0
   1383a:	d03b      	beq.n	138b4 <__sfvwrite_r+0x2d0>
   1383c:	465a      	mov	r2, fp
   1383e:	6921      	ldr	r1, [r4, #16]
   13840:	9001      	str	r0, [sp, #4]
   13842:	f7f6 fd77 	bl	a334 <memcpy>
   13846:	89a2      	ldrh	r2, [r4, #12]
   13848:	9b01      	ldr	r3, [sp, #4]
   1384a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1384e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13852:	81a2      	strh	r2, [r4, #12]
   13854:	eb03 000b 	add.w	r0, r3, fp
   13858:	6123      	str	r3, [r4, #16]
   1385a:	ebaa 030b 	sub.w	r3, sl, fp
   1385e:	f8c4 a014 	str.w	sl, [r4, #20]
   13862:	60a3      	str	r3, [r4, #8]
   13864:	6020      	str	r0, [r4, #0]
   13866:	46b3      	mov	fp, r6
   13868:	4632      	mov	r2, r6
   1386a:	e70f      	b.n	1368c <__sfvwrite_r+0xa8>
   1386c:	4639      	mov	r1, r7
   1386e:	465a      	mov	r2, fp
   13870:	f7fa fe40 	bl	e4f4 <memmove>
   13874:	6823      	ldr	r3, [r4, #0]
   13876:	445b      	add	r3, fp
   13878:	6023      	str	r3, [r4, #0]
   1387a:	4621      	mov	r1, r4
   1387c:	4640      	mov	r0, r8
   1387e:	f7fd fc8f 	bl	111a0 <_fflush_r>
   13882:	2800      	cmp	r0, #0
   13884:	f43f af56 	beq.w	13734 <__sfvwrite_r+0x150>
   13888:	e727      	b.n	136da <__sfvwrite_r+0xf6>
   1388a:	4640      	mov	r0, r8
   1388c:	f7fa faf6 	bl	de7c <_realloc_r>
   13890:	4603      	mov	r3, r0
   13892:	2800      	cmp	r0, #0
   13894:	d1de      	bne.n	13854 <__sfvwrite_r+0x270>
   13896:	6921      	ldr	r1, [r4, #16]
   13898:	4640      	mov	r0, r8
   1389a:	f7fb f8e3 	bl	ea64 <_free_r>
   1389e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138a2:	220c      	movs	r2, #12
   138a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   138a8:	f8c8 2000 	str.w	r2, [r8]
   138ac:	e717      	b.n	136de <__sfvwrite_r+0xfa>
   138ae:	1c72      	adds	r2, r6, #1
   138b0:	4691      	mov	r9, r2
   138b2:	e726      	b.n	13702 <__sfvwrite_r+0x11e>
   138b4:	220c      	movs	r2, #12
   138b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138ba:	f8c8 2000 	str.w	r2, [r8]
   138be:	e70e      	b.n	136de <__sfvwrite_r+0xfa>
   138c0:	f04f 30ff 	mov.w	r0, #4294967295
   138c4:	e6be      	b.n	13644 <__sfvwrite_r+0x60>
   138c6:	bf00      	nop
   138c8:	7ffffc00 	.word	0x7ffffc00

000138cc <__swsetup_r>:
   138cc:	b538      	push	{r3, r4, r5, lr}
   138ce:	4b31      	ldr	r3, [pc, #196]	; (13994 <__swsetup_r+0xc8>)
   138d0:	681b      	ldr	r3, [r3, #0]
   138d2:	4605      	mov	r5, r0
   138d4:	460c      	mov	r4, r1
   138d6:	b113      	cbz	r3, 138de <__swsetup_r+0x12>
   138d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   138da:	2a00      	cmp	r2, #0
   138dc:	d04e      	beq.n	1397c <__swsetup_r+0xb0>
   138de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138e2:	0718      	lsls	r0, r3, #28
   138e4:	b29a      	uxth	r2, r3
   138e6:	d51c      	bpl.n	13922 <__swsetup_r+0x56>
   138e8:	6921      	ldr	r1, [r4, #16]
   138ea:	b329      	cbz	r1, 13938 <__swsetup_r+0x6c>
   138ec:	f012 0001 	ands.w	r0, r2, #1
   138f0:	d007      	beq.n	13902 <__swsetup_r+0x36>
   138f2:	2000      	movs	r0, #0
   138f4:	60a0      	str	r0, [r4, #8]
   138f6:	6960      	ldr	r0, [r4, #20]
   138f8:	4240      	negs	r0, r0
   138fa:	61a0      	str	r0, [r4, #24]
   138fc:	b139      	cbz	r1, 1390e <__swsetup_r+0x42>
   138fe:	2000      	movs	r0, #0
   13900:	bd38      	pop	{r3, r4, r5, pc}
   13902:	0795      	lsls	r5, r2, #30
   13904:	bf58      	it	pl
   13906:	6960      	ldrpl	r0, [r4, #20]
   13908:	60a0      	str	r0, [r4, #8]
   1390a:	2900      	cmp	r1, #0
   1390c:	d1f7      	bne.n	138fe <__swsetup_r+0x32>
   1390e:	0612      	lsls	r2, r2, #24
   13910:	bf58      	it	pl
   13912:	4608      	movpl	r0, r1
   13914:	d5f4      	bpl.n	13900 <__swsetup_r+0x34>
   13916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1391a:	81a3      	strh	r3, [r4, #12]
   1391c:	f04f 30ff 	mov.w	r0, #4294967295
   13920:	bd38      	pop	{r3, r4, r5, pc}
   13922:	06d1      	lsls	r1, r2, #27
   13924:	d52e      	bpl.n	13984 <__swsetup_r+0xb8>
   13926:	0752      	lsls	r2, r2, #29
   13928:	d414      	bmi.n	13954 <__swsetup_r+0x88>
   1392a:	6921      	ldr	r1, [r4, #16]
   1392c:	f043 0308 	orr.w	r3, r3, #8
   13930:	81a3      	strh	r3, [r4, #12]
   13932:	b29a      	uxth	r2, r3
   13934:	2900      	cmp	r1, #0
   13936:	d1d9      	bne.n	138ec <__swsetup_r+0x20>
   13938:	f402 7020 	and.w	r0, r2, #640	; 0x280
   1393c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13940:	d0d4      	beq.n	138ec <__swsetup_r+0x20>
   13942:	4621      	mov	r1, r4
   13944:	4628      	mov	r0, r5
   13946:	f000 f93f 	bl	13bc8 <__smakebuf_r>
   1394a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1394e:	6921      	ldr	r1, [r4, #16]
   13950:	b29a      	uxth	r2, r3
   13952:	e7cb      	b.n	138ec <__swsetup_r+0x20>
   13954:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13956:	b151      	cbz	r1, 1396e <__swsetup_r+0xa2>
   13958:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1395c:	4291      	cmp	r1, r2
   1395e:	d004      	beq.n	1396a <__swsetup_r+0x9e>
   13960:	4628      	mov	r0, r5
   13962:	f7fb f87f 	bl	ea64 <_free_r>
   13966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1396a:	2200      	movs	r2, #0
   1396c:	6322      	str	r2, [r4, #48]	; 0x30
   1396e:	6921      	ldr	r1, [r4, #16]
   13970:	2200      	movs	r2, #0
   13972:	e9c4 1200 	strd	r1, r2, [r4]
   13976:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1397a:	e7d7      	b.n	1392c <__swsetup_r+0x60>
   1397c:	4618      	mov	r0, r3
   1397e:	f7fa fd05 	bl	e38c <__sinit>
   13982:	e7ac      	b.n	138de <__swsetup_r+0x12>
   13984:	2209      	movs	r2, #9
   13986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1398a:	602a      	str	r2, [r5, #0]
   1398c:	f04f 30ff 	mov.w	r0, #4294967295
   13990:	81a3      	strh	r3, [r4, #12]
   13992:	bd38      	pop	{r3, r4, r5, pc}
   13994:	1fff8f88 	.word	0x1fff8f88

00013998 <__fputwc>:
   13998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1399c:	b083      	sub	sp, #12
   1399e:	4607      	mov	r7, r0
   139a0:	4688      	mov	r8, r1
   139a2:	4614      	mov	r4, r2
   139a4:	f7fa fea6 	bl	e6f4 <__locale_mb_cur_max>
   139a8:	2801      	cmp	r0, #1
   139aa:	d103      	bne.n	139b4 <__fputwc+0x1c>
   139ac:	f108 33ff 	add.w	r3, r8, #4294967295
   139b0:	2bfe      	cmp	r3, #254	; 0xfe
   139b2:	d937      	bls.n	13a24 <__fputwc+0x8c>
   139b4:	f10d 0904 	add.w	r9, sp, #4
   139b8:	4642      	mov	r2, r8
   139ba:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   139be:	4649      	mov	r1, r9
   139c0:	4638      	mov	r0, r7
   139c2:	f7fe fd09 	bl	123d8 <_wcrtomb_r>
   139c6:	1c42      	adds	r2, r0, #1
   139c8:	4606      	mov	r6, r0
   139ca:	d033      	beq.n	13a34 <__fputwc+0x9c>
   139cc:	b328      	cbz	r0, 13a1a <__fputwc+0x82>
   139ce:	f89d c004 	ldrb.w	ip, [sp, #4]
   139d2:	2500      	movs	r5, #0
   139d4:	e009      	b.n	139ea <__fputwc+0x52>
   139d6:	6823      	ldr	r3, [r4, #0]
   139d8:	1c5a      	adds	r2, r3, #1
   139da:	6022      	str	r2, [r4, #0]
   139dc:	f883 c000 	strb.w	ip, [r3]
   139e0:	3501      	adds	r5, #1
   139e2:	42b5      	cmp	r5, r6
   139e4:	d219      	bcs.n	13a1a <__fputwc+0x82>
   139e6:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   139ea:	68a3      	ldr	r3, [r4, #8]
   139ec:	3b01      	subs	r3, #1
   139ee:	2b00      	cmp	r3, #0
   139f0:	60a3      	str	r3, [r4, #8]
   139f2:	daf0      	bge.n	139d6 <__fputwc+0x3e>
   139f4:	f8d4 e018 	ldr.w	lr, [r4, #24]
   139f8:	4573      	cmp	r3, lr
   139fa:	4661      	mov	r1, ip
   139fc:	4622      	mov	r2, r4
   139fe:	4638      	mov	r0, r7
   13a00:	db02      	blt.n	13a08 <__fputwc+0x70>
   13a02:	f1bc 0f0a 	cmp.w	ip, #10
   13a06:	d1e6      	bne.n	139d6 <__fputwc+0x3e>
   13a08:	f000 f94a 	bl	13ca0 <__swbuf_r>
   13a0c:	1c43      	adds	r3, r0, #1
   13a0e:	d1e7      	bne.n	139e0 <__fputwc+0x48>
   13a10:	4606      	mov	r6, r0
   13a12:	4630      	mov	r0, r6
   13a14:	b003      	add	sp, #12
   13a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13a1a:	4646      	mov	r6, r8
   13a1c:	4630      	mov	r0, r6
   13a1e:	b003      	add	sp, #12
   13a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13a24:	fa5f fc88 	uxtb.w	ip, r8
   13a28:	f88d c004 	strb.w	ip, [sp, #4]
   13a2c:	4606      	mov	r6, r0
   13a2e:	f10d 0904 	add.w	r9, sp, #4
   13a32:	e7ce      	b.n	139d2 <__fputwc+0x3a>
   13a34:	89a3      	ldrh	r3, [r4, #12]
   13a36:	4630      	mov	r0, r6
   13a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13a3c:	81a3      	strh	r3, [r4, #12]
   13a3e:	b003      	add	sp, #12
   13a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00013a44 <_fputwc_r>:
   13a44:	b530      	push	{r4, r5, lr}
   13a46:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13a48:	f013 0f01 	tst.w	r3, #1
   13a4c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13a50:	4614      	mov	r4, r2
   13a52:	b083      	sub	sp, #12
   13a54:	4605      	mov	r5, r0
   13a56:	b29a      	uxth	r2, r3
   13a58:	d101      	bne.n	13a5e <_fputwc_r+0x1a>
   13a5a:	0598      	lsls	r0, r3, #22
   13a5c:	d51c      	bpl.n	13a98 <_fputwc_r+0x54>
   13a5e:	0490      	lsls	r0, r2, #18
   13a60:	d406      	bmi.n	13a70 <_fputwc_r+0x2c>
   13a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13a6c:	81a3      	strh	r3, [r4, #12]
   13a6e:	6662      	str	r2, [r4, #100]	; 0x64
   13a70:	4622      	mov	r2, r4
   13a72:	4628      	mov	r0, r5
   13a74:	f7ff ff90 	bl	13998 <__fputwc>
   13a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13a7a:	07da      	lsls	r2, r3, #31
   13a7c:	4605      	mov	r5, r0
   13a7e:	d402      	bmi.n	13a86 <_fputwc_r+0x42>
   13a80:	89a3      	ldrh	r3, [r4, #12]
   13a82:	059b      	lsls	r3, r3, #22
   13a84:	d502      	bpl.n	13a8c <_fputwc_r+0x48>
   13a86:	4628      	mov	r0, r5
   13a88:	b003      	add	sp, #12
   13a8a:	bd30      	pop	{r4, r5, pc}
   13a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a8e:	f7fa fecd 	bl	e82c <__retarget_lock_release_recursive>
   13a92:	4628      	mov	r0, r5
   13a94:	b003      	add	sp, #12
   13a96:	bd30      	pop	{r4, r5, pc}
   13a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a9a:	9101      	str	r1, [sp, #4]
   13a9c:	f7fa fec4 	bl	e828 <__retarget_lock_acquire_recursive>
   13aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13aa4:	9901      	ldr	r1, [sp, #4]
   13aa6:	b29a      	uxth	r2, r3
   13aa8:	e7d9      	b.n	13a5e <_fputwc_r+0x1a>
   13aaa:	bf00      	nop

00013aac <_wcsnrtombs_l>:
   13aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab0:	b089      	sub	sp, #36	; 0x24
   13ab2:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   13ab6:	9f12      	ldr	r7, [sp, #72]	; 0x48
   13ab8:	9101      	str	r1, [sp, #4]
   13aba:	4681      	mov	r9, r0
   13abc:	9203      	str	r2, [sp, #12]
   13abe:	461e      	mov	r6, r3
   13ac0:	f1b8 0f00 	cmp.w	r8, #0
   13ac4:	d055      	beq.n	13b72 <_wcsnrtombs_l+0xc6>
   13ac6:	9b01      	ldr	r3, [sp, #4]
   13ac8:	2b00      	cmp	r3, #0
   13aca:	d057      	beq.n	13b7c <_wcsnrtombs_l+0xd0>
   13acc:	9b03      	ldr	r3, [sp, #12]
   13ace:	681d      	ldr	r5, [r3, #0]
   13ad0:	2f00      	cmp	r7, #0
   13ad2:	d063      	beq.n	13b9c <_wcsnrtombs_l+0xf0>
   13ad4:	1e74      	subs	r4, r6, #1
   13ad6:	b32e      	cbz	r6, 13b24 <_wcsnrtombs_l+0x78>
   13ad8:	9b01      	ldr	r3, [sp, #4]
   13ada:	9302      	str	r3, [sp, #8]
   13adc:	3d04      	subs	r5, #4
   13ade:	2600      	movs	r6, #0
   13ae0:	e00a      	b.n	13af8 <_wcsnrtombs_l+0x4c>
   13ae2:	9b01      	ldr	r3, [sp, #4]
   13ae4:	bb13      	cbnz	r3, 13b2c <_wcsnrtombs_l+0x80>
   13ae6:	682a      	ldr	r2, [r5, #0]
   13ae8:	2a00      	cmp	r2, #0
   13aea:	d035      	beq.n	13b58 <_wcsnrtombs_l+0xac>
   13aec:	45bc      	cmp	ip, r7
   13aee:	d257      	bcs.n	13ba0 <_wcsnrtombs_l+0xf4>
   13af0:	3c01      	subs	r4, #1
   13af2:	1c63      	adds	r3, r4, #1
   13af4:	4666      	mov	r6, ip
   13af6:	d015      	beq.n	13b24 <_wcsnrtombs_l+0x78>
   13af8:	f8d8 3000 	ldr.w	r3, [r8]
   13afc:	f855 2f04 	ldr.w	r2, [r5, #4]!
   13b00:	9300      	str	r3, [sp, #0]
   13b02:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   13b06:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13b0a:	4643      	mov	r3, r8
   13b0c:	a905      	add	r1, sp, #20
   13b0e:	4648      	mov	r0, r9
   13b10:	47e0      	blx	ip
   13b12:	1c42      	adds	r2, r0, #1
   13b14:	d037      	beq.n	13b86 <_wcsnrtombs_l+0xda>
   13b16:	eb00 0c06 	add.w	ip, r0, r6
   13b1a:	45bc      	cmp	ip, r7
   13b1c:	d9e1      	bls.n	13ae2 <_wcsnrtombs_l+0x36>
   13b1e:	9b00      	ldr	r3, [sp, #0]
   13b20:	e9c8 3b00 	strd	r3, fp, [r8]
   13b24:	4630      	mov	r0, r6
   13b26:	b009      	add	sp, #36	; 0x24
   13b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b2c:	2800      	cmp	r0, #0
   13b2e:	dd0c      	ble.n	13b4a <_wcsnrtombs_l+0x9e>
   13b30:	9b02      	ldr	r3, [sp, #8]
   13b32:	4418      	add	r0, r3
   13b34:	1e5a      	subs	r2, r3, #1
   13b36:	a905      	add	r1, sp, #20
   13b38:	f100 3eff 	add.w	lr, r0, #4294967295
   13b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   13b40:	f802 3f01 	strb.w	r3, [r2, #1]!
   13b44:	4572      	cmp	r2, lr
   13b46:	d1f9      	bne.n	13b3c <_wcsnrtombs_l+0x90>
   13b48:	9002      	str	r0, [sp, #8]
   13b4a:	9b03      	ldr	r3, [sp, #12]
   13b4c:	681a      	ldr	r2, [r3, #0]
   13b4e:	3204      	adds	r2, #4
   13b50:	601a      	str	r2, [r3, #0]
   13b52:	682a      	ldr	r2, [r5, #0]
   13b54:	2a00      	cmp	r2, #0
   13b56:	d1c9      	bne.n	13aec <_wcsnrtombs_l+0x40>
   13b58:	9b01      	ldr	r3, [sp, #4]
   13b5a:	b10b      	cbz	r3, 13b60 <_wcsnrtombs_l+0xb4>
   13b5c:	9b03      	ldr	r3, [sp, #12]
   13b5e:	601a      	str	r2, [r3, #0]
   13b60:	f10c 36ff 	add.w	r6, ip, #4294967295
   13b64:	2200      	movs	r2, #0
   13b66:	4630      	mov	r0, r6
   13b68:	f8c8 2000 	str.w	r2, [r8]
   13b6c:	b009      	add	sp, #36	; 0x24
   13b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b72:	9b01      	ldr	r3, [sp, #4]
   13b74:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13b78:	2b00      	cmp	r3, #0
   13b7a:	d1a7      	bne.n	13acc <_wcsnrtombs_l+0x20>
   13b7c:	9b03      	ldr	r3, [sp, #12]
   13b7e:	f04f 37ff 	mov.w	r7, #4294967295
   13b82:	681d      	ldr	r5, [r3, #0]
   13b84:	e7a6      	b.n	13ad4 <_wcsnrtombs_l+0x28>
   13b86:	4606      	mov	r6, r0
   13b88:	218a      	movs	r1, #138	; 0x8a
   13b8a:	2200      	movs	r2, #0
   13b8c:	4630      	mov	r0, r6
   13b8e:	f8c9 1000 	str.w	r1, [r9]
   13b92:	f8c8 2000 	str.w	r2, [r8]
   13b96:	b009      	add	sp, #36	; 0x24
   13b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b9c:	463e      	mov	r6, r7
   13b9e:	e7c1      	b.n	13b24 <_wcsnrtombs_l+0x78>
   13ba0:	4666      	mov	r6, ip
   13ba2:	e7bf      	b.n	13b24 <_wcsnrtombs_l+0x78>

00013ba4 <_wcsnrtombs_r>:
   13ba4:	b510      	push	{r4, lr}
   13ba6:	b084      	sub	sp, #16
   13ba8:	4c05      	ldr	r4, [pc, #20]	; (13bc0 <_wcsnrtombs_r+0x1c>)
   13baa:	9806      	ldr	r0, [sp, #24]
   13bac:	9000      	str	r0, [sp, #0]
   13bae:	9807      	ldr	r0, [sp, #28]
   13bb0:	9001      	str	r0, [sp, #4]
   13bb2:	4804      	ldr	r0, [pc, #16]	; (13bc4 <_wcsnrtombs_r+0x20>)
   13bb4:	6800      	ldr	r0, [r0, #0]
   13bb6:	9402      	str	r4, [sp, #8]
   13bb8:	f7ff ff78 	bl	13aac <_wcsnrtombs_l>
   13bbc:	b004      	add	sp, #16
   13bbe:	bd10      	pop	{r4, pc}
   13bc0:	1fff8cfc 	.word	0x1fff8cfc
   13bc4:	1fff8f88 	.word	0x1fff8f88

00013bc8 <__smakebuf_r>:
   13bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13bcc:	898b      	ldrh	r3, [r1, #12]
   13bce:	460c      	mov	r4, r1
   13bd0:	0799      	lsls	r1, r3, #30
   13bd2:	b096      	sub	sp, #88	; 0x58
   13bd4:	d508      	bpl.n	13be8 <__smakebuf_r+0x20>
   13bd6:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13bda:	2201      	movs	r2, #1
   13bdc:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13be0:	6023      	str	r3, [r4, #0]
   13be2:	b016      	add	sp, #88	; 0x58
   13be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13bec:	2900      	cmp	r1, #0
   13bee:	4606      	mov	r6, r0
   13bf0:	db25      	blt.n	13c3e <__smakebuf_r+0x76>
   13bf2:	466a      	mov	r2, sp
   13bf4:	f000 f8ac 	bl	13d50 <_fstat_r>
   13bf8:	2800      	cmp	r0, #0
   13bfa:	db1f      	blt.n	13c3c <__smakebuf_r+0x74>
   13bfc:	9d01      	ldr	r5, [sp, #4]
   13bfe:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13c02:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13c06:	fab5 f585 	clz	r5, r5
   13c0a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13c0e:	096d      	lsrs	r5, r5, #5
   13c10:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13c14:	4641      	mov	r1, r8
   13c16:	4630      	mov	r0, r6
   13c18:	f7f9 fe74 	bl	d904 <_malloc_r>
   13c1c:	b1e0      	cbz	r0, 13c58 <__smakebuf_r+0x90>
   13c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c22:	f8c4 8014 	str.w	r8, [r4, #20]
   13c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13c2a:	6020      	str	r0, [r4, #0]
   13c2c:	6120      	str	r0, [r4, #16]
   13c2e:	81a3      	strh	r3, [r4, #12]
   13c30:	bb35      	cbnz	r5, 13c80 <__smakebuf_r+0xb8>
   13c32:	433b      	orrs	r3, r7
   13c34:	81a3      	strh	r3, [r4, #12]
   13c36:	b016      	add	sp, #88	; 0x58
   13c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c3c:	89a3      	ldrh	r3, [r4, #12]
   13c3e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13c42:	d019      	beq.n	13c78 <__smakebuf_r+0xb0>
   13c44:	f04f 0840 	mov.w	r8, #64	; 0x40
   13c48:	2500      	movs	r5, #0
   13c4a:	4641      	mov	r1, r8
   13c4c:	4630      	mov	r0, r6
   13c4e:	462f      	mov	r7, r5
   13c50:	f7f9 fe58 	bl	d904 <_malloc_r>
   13c54:	2800      	cmp	r0, #0
   13c56:	d1e2      	bne.n	13c1e <__smakebuf_r+0x56>
   13c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c5c:	059a      	lsls	r2, r3, #22
   13c5e:	d4c0      	bmi.n	13be2 <__smakebuf_r+0x1a>
   13c60:	f023 0303 	bic.w	r3, r3, #3
   13c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13c68:	f043 0302 	orr.w	r3, r3, #2
   13c6c:	2101      	movs	r1, #1
   13c6e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13c72:	81a3      	strh	r3, [r4, #12]
   13c74:	6022      	str	r2, [r4, #0]
   13c76:	e7b4      	b.n	13be2 <__smakebuf_r+0x1a>
   13c78:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13c7c:	462f      	mov	r7, r5
   13c7e:	e7c9      	b.n	13c14 <__smakebuf_r+0x4c>
   13c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13c84:	4630      	mov	r0, r6
   13c86:	f000 f879 	bl	13d7c <_isatty_r>
   13c8a:	b910      	cbnz	r0, 13c92 <__smakebuf_r+0xca>
   13c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c90:	e7cf      	b.n	13c32 <__smakebuf_r+0x6a>
   13c92:	89a3      	ldrh	r3, [r4, #12]
   13c94:	f023 0303 	bic.w	r3, r3, #3
   13c98:	f043 0301 	orr.w	r3, r3, #1
   13c9c:	b21b      	sxth	r3, r3
   13c9e:	e7c8      	b.n	13c32 <__smakebuf_r+0x6a>

00013ca0 <__swbuf_r>:
   13ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ca2:	460d      	mov	r5, r1
   13ca4:	4614      	mov	r4, r2
   13ca6:	4606      	mov	r6, r0
   13ca8:	b110      	cbz	r0, 13cb0 <__swbuf_r+0x10>
   13caa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13cac:	2b00      	cmp	r3, #0
   13cae:	d04c      	beq.n	13d4a <__swbuf_r+0xaa>
   13cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13cb4:	69a3      	ldr	r3, [r4, #24]
   13cb6:	60a3      	str	r3, [r4, #8]
   13cb8:	0717      	lsls	r7, r2, #28
   13cba:	b290      	uxth	r0, r2
   13cbc:	d51b      	bpl.n	13cf6 <__swbuf_r+0x56>
   13cbe:	6923      	ldr	r3, [r4, #16]
   13cc0:	b1cb      	cbz	r3, 13cf6 <__swbuf_r+0x56>
   13cc2:	b2ed      	uxtb	r5, r5
   13cc4:	0481      	lsls	r1, r0, #18
   13cc6:	462f      	mov	r7, r5
   13cc8:	d522      	bpl.n	13d10 <__swbuf_r+0x70>
   13cca:	6822      	ldr	r2, [r4, #0]
   13ccc:	6961      	ldr	r1, [r4, #20]
   13cce:	1ad3      	subs	r3, r2, r3
   13cd0:	4299      	cmp	r1, r3
   13cd2:	dd29      	ble.n	13d28 <__swbuf_r+0x88>
   13cd4:	3301      	adds	r3, #1
   13cd6:	68a1      	ldr	r1, [r4, #8]
   13cd8:	3901      	subs	r1, #1
   13cda:	60a1      	str	r1, [r4, #8]
   13cdc:	1c51      	adds	r1, r2, #1
   13cde:	6021      	str	r1, [r4, #0]
   13ce0:	7015      	strb	r5, [r2, #0]
   13ce2:	6962      	ldr	r2, [r4, #20]
   13ce4:	429a      	cmp	r2, r3
   13ce6:	d027      	beq.n	13d38 <__swbuf_r+0x98>
   13ce8:	89a3      	ldrh	r3, [r4, #12]
   13cea:	07db      	lsls	r3, r3, #31
   13cec:	d501      	bpl.n	13cf2 <__swbuf_r+0x52>
   13cee:	2d0a      	cmp	r5, #10
   13cf0:	d022      	beq.n	13d38 <__swbuf_r+0x98>
   13cf2:	4638      	mov	r0, r7
   13cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13cf6:	4621      	mov	r1, r4
   13cf8:	4630      	mov	r0, r6
   13cfa:	f7ff fde7 	bl	138cc <__swsetup_r>
   13cfe:	bb08      	cbnz	r0, 13d44 <__swbuf_r+0xa4>
   13d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13d04:	6923      	ldr	r3, [r4, #16]
   13d06:	b290      	uxth	r0, r2
   13d08:	b2ed      	uxtb	r5, r5
   13d0a:	0481      	lsls	r1, r0, #18
   13d0c:	462f      	mov	r7, r5
   13d0e:	d4dc      	bmi.n	13cca <__swbuf_r+0x2a>
   13d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13d14:	81a2      	strh	r2, [r4, #12]
   13d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13d18:	6961      	ldr	r1, [r4, #20]
   13d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13d1e:	6662      	str	r2, [r4, #100]	; 0x64
   13d20:	6822      	ldr	r2, [r4, #0]
   13d22:	1ad3      	subs	r3, r2, r3
   13d24:	4299      	cmp	r1, r3
   13d26:	dcd5      	bgt.n	13cd4 <__swbuf_r+0x34>
   13d28:	4621      	mov	r1, r4
   13d2a:	4630      	mov	r0, r6
   13d2c:	f7fd fa38 	bl	111a0 <_fflush_r>
   13d30:	b940      	cbnz	r0, 13d44 <__swbuf_r+0xa4>
   13d32:	6822      	ldr	r2, [r4, #0]
   13d34:	2301      	movs	r3, #1
   13d36:	e7ce      	b.n	13cd6 <__swbuf_r+0x36>
   13d38:	4621      	mov	r1, r4
   13d3a:	4630      	mov	r0, r6
   13d3c:	f7fd fa30 	bl	111a0 <_fflush_r>
   13d40:	2800      	cmp	r0, #0
   13d42:	d0d6      	beq.n	13cf2 <__swbuf_r+0x52>
   13d44:	f04f 37ff 	mov.w	r7, #4294967295
   13d48:	e7d3      	b.n	13cf2 <__swbuf_r+0x52>
   13d4a:	f7fa fb1f 	bl	e38c <__sinit>
   13d4e:	e7af      	b.n	13cb0 <__swbuf_r+0x10>

00013d50 <_fstat_r>:
   13d50:	b570      	push	{r4, r5, r6, lr}
   13d52:	460c      	mov	r4, r1
   13d54:	4d08      	ldr	r5, [pc, #32]	; (13d78 <_fstat_r+0x28>)
   13d56:	4603      	mov	r3, r0
   13d58:	2600      	movs	r6, #0
   13d5a:	4620      	mov	r0, r4
   13d5c:	4611      	mov	r1, r2
   13d5e:	461c      	mov	r4, r3
   13d60:	602e      	str	r6, [r5, #0]
   13d62:	f7f6 fc05 	bl	a570 <_fstat>
   13d66:	1c43      	adds	r3, r0, #1
   13d68:	d000      	beq.n	13d6c <_fstat_r+0x1c>
   13d6a:	bd70      	pop	{r4, r5, r6, pc}
   13d6c:	682b      	ldr	r3, [r5, #0]
   13d6e:	2b00      	cmp	r3, #0
   13d70:	d0fb      	beq.n	13d6a <_fstat_r+0x1a>
   13d72:	6023      	str	r3, [r4, #0]
   13d74:	bd70      	pop	{r4, r5, r6, pc}
   13d76:	bf00      	nop
   13d78:	1fffc75c 	.word	0x1fffc75c

00013d7c <_isatty_r>:
   13d7c:	b538      	push	{r3, r4, r5, lr}
   13d7e:	4d07      	ldr	r5, [pc, #28]	; (13d9c <_isatty_r+0x20>)
   13d80:	2200      	movs	r2, #0
   13d82:	4604      	mov	r4, r0
   13d84:	4608      	mov	r0, r1
   13d86:	602a      	str	r2, [r5, #0]
   13d88:	f7f6 fbf8 	bl	a57c <_isatty>
   13d8c:	1c43      	adds	r3, r0, #1
   13d8e:	d000      	beq.n	13d92 <_isatty_r+0x16>
   13d90:	bd38      	pop	{r3, r4, r5, pc}
   13d92:	682b      	ldr	r3, [r5, #0]
   13d94:	2b00      	cmp	r3, #0
   13d96:	d0fb      	beq.n	13d90 <_isatty_r+0x14>
   13d98:	6023      	str	r3, [r4, #0]
   13d9a:	bd38      	pop	{r3, r4, r5, pc}
   13d9c:	1fffc75c 	.word	0x1fffc75c

00013da0 <__aeabi_dmul>:
   13da0:	b570      	push	{r4, r5, r6, lr}
   13da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   13dae:	bf1d      	ittte	ne
   13db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13db4:	ea94 0f0c 	teqne	r4, ip
   13db8:	ea95 0f0c 	teqne	r5, ip
   13dbc:	f000 f8de 	bleq	13f7c <__aeabi_dmul+0x1dc>
   13dc0:	442c      	add	r4, r5
   13dc2:	ea81 0603 	eor.w	r6, r1, r3
   13dc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   13dca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   13dce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   13dd2:	bf18      	it	ne
   13dd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   13dd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13de0:	d038      	beq.n	13e54 <__aeabi_dmul+0xb4>
   13de2:	fba0 ce02 	umull	ip, lr, r0, r2
   13de6:	f04f 0500 	mov.w	r5, #0
   13dea:	fbe1 e502 	umlal	lr, r5, r1, r2
   13dee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   13df2:	fbe0 e503 	umlal	lr, r5, r0, r3
   13df6:	f04f 0600 	mov.w	r6, #0
   13dfa:	fbe1 5603 	umlal	r5, r6, r1, r3
   13dfe:	f09c 0f00 	teq	ip, #0
   13e02:	bf18      	it	ne
   13e04:	f04e 0e01 	orrne.w	lr, lr, #1
   13e08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   13e0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13e10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   13e14:	d204      	bcs.n	13e20 <__aeabi_dmul+0x80>
   13e16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   13e1a:	416d      	adcs	r5, r5
   13e1c:	eb46 0606 	adc.w	r6, r6, r6
   13e20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   13e24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   13e28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   13e2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   13e30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   13e34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   13e38:	bf88      	it	hi
   13e3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13e3e:	d81e      	bhi.n	13e7e <__aeabi_dmul+0xde>
   13e40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   13e44:	bf08      	it	eq
   13e46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   13e4a:	f150 0000 	adcs.w	r0, r0, #0
   13e4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13e52:	bd70      	pop	{r4, r5, r6, pc}
   13e54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   13e58:	ea46 0101 	orr.w	r1, r6, r1
   13e5c:	ea40 0002 	orr.w	r0, r0, r2
   13e60:	ea81 0103 	eor.w	r1, r1, r3
   13e64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   13e68:	bfc2      	ittt	gt
   13e6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   13e6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   13e72:	bd70      	popgt	{r4, r5, r6, pc}
   13e74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13e78:	f04f 0e00 	mov.w	lr, #0
   13e7c:	3c01      	subs	r4, #1
   13e7e:	f300 80ab 	bgt.w	13fd8 <__aeabi_dmul+0x238>
   13e82:	f114 0f36 	cmn.w	r4, #54	; 0x36
   13e86:	bfde      	ittt	le
   13e88:	2000      	movle	r0, #0
   13e8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   13e8e:	bd70      	pople	{r4, r5, r6, pc}
   13e90:	f1c4 0400 	rsb	r4, r4, #0
   13e94:	3c20      	subs	r4, #32
   13e96:	da35      	bge.n	13f04 <__aeabi_dmul+0x164>
   13e98:	340c      	adds	r4, #12
   13e9a:	dc1b      	bgt.n	13ed4 <__aeabi_dmul+0x134>
   13e9c:	f104 0414 	add.w	r4, r4, #20
   13ea0:	f1c4 0520 	rsb	r5, r4, #32
   13ea4:	fa00 f305 	lsl.w	r3, r0, r5
   13ea8:	fa20 f004 	lsr.w	r0, r0, r4
   13eac:	fa01 f205 	lsl.w	r2, r1, r5
   13eb0:	ea40 0002 	orr.w	r0, r0, r2
   13eb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   13eb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   13ebc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   13ec0:	fa21 f604 	lsr.w	r6, r1, r4
   13ec4:	eb42 0106 	adc.w	r1, r2, r6
   13ec8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13ecc:	bf08      	it	eq
   13ece:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13ed2:	bd70      	pop	{r4, r5, r6, pc}
   13ed4:	f1c4 040c 	rsb	r4, r4, #12
   13ed8:	f1c4 0520 	rsb	r5, r4, #32
   13edc:	fa00 f304 	lsl.w	r3, r0, r4
   13ee0:	fa20 f005 	lsr.w	r0, r0, r5
   13ee4:	fa01 f204 	lsl.w	r2, r1, r4
   13ee8:	ea40 0002 	orr.w	r0, r0, r2
   13eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13ef0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   13ef4:	f141 0100 	adc.w	r1, r1, #0
   13ef8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13efc:	bf08      	it	eq
   13efe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13f02:	bd70      	pop	{r4, r5, r6, pc}
   13f04:	f1c4 0520 	rsb	r5, r4, #32
   13f08:	fa00 f205 	lsl.w	r2, r0, r5
   13f0c:	ea4e 0e02 	orr.w	lr, lr, r2
   13f10:	fa20 f304 	lsr.w	r3, r0, r4
   13f14:	fa01 f205 	lsl.w	r2, r1, r5
   13f18:	ea43 0302 	orr.w	r3, r3, r2
   13f1c:	fa21 f004 	lsr.w	r0, r1, r4
   13f20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13f24:	fa21 f204 	lsr.w	r2, r1, r4
   13f28:	ea20 0002 	bic.w	r0, r0, r2
   13f2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   13f30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13f34:	bf08      	it	eq
   13f36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13f3a:	bd70      	pop	{r4, r5, r6, pc}
   13f3c:	f094 0f00 	teq	r4, #0
   13f40:	d10f      	bne.n	13f62 <__aeabi_dmul+0x1c2>
   13f42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   13f46:	0040      	lsls	r0, r0, #1
   13f48:	eb41 0101 	adc.w	r1, r1, r1
   13f4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13f50:	bf08      	it	eq
   13f52:	3c01      	subeq	r4, #1
   13f54:	d0f7      	beq.n	13f46 <__aeabi_dmul+0x1a6>
   13f56:	ea41 0106 	orr.w	r1, r1, r6
   13f5a:	f095 0f00 	teq	r5, #0
   13f5e:	bf18      	it	ne
   13f60:	4770      	bxne	lr
   13f62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   13f66:	0052      	lsls	r2, r2, #1
   13f68:	eb43 0303 	adc.w	r3, r3, r3
   13f6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   13f70:	bf08      	it	eq
   13f72:	3d01      	subeq	r5, #1
   13f74:	d0f7      	beq.n	13f66 <__aeabi_dmul+0x1c6>
   13f76:	ea43 0306 	orr.w	r3, r3, r6
   13f7a:	4770      	bx	lr
   13f7c:	ea94 0f0c 	teq	r4, ip
   13f80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13f84:	bf18      	it	ne
   13f86:	ea95 0f0c 	teqne	r5, ip
   13f8a:	d00c      	beq.n	13fa6 <__aeabi_dmul+0x206>
   13f8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13f90:	bf18      	it	ne
   13f92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13f96:	d1d1      	bne.n	13f3c <__aeabi_dmul+0x19c>
   13f98:	ea81 0103 	eor.w	r1, r1, r3
   13f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13fa0:	f04f 0000 	mov.w	r0, #0
   13fa4:	bd70      	pop	{r4, r5, r6, pc}
   13fa6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13faa:	bf06      	itte	eq
   13fac:	4610      	moveq	r0, r2
   13fae:	4619      	moveq	r1, r3
   13fb0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13fb4:	d019      	beq.n	13fea <__aeabi_dmul+0x24a>
   13fb6:	ea94 0f0c 	teq	r4, ip
   13fba:	d102      	bne.n	13fc2 <__aeabi_dmul+0x222>
   13fbc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   13fc0:	d113      	bne.n	13fea <__aeabi_dmul+0x24a>
   13fc2:	ea95 0f0c 	teq	r5, ip
   13fc6:	d105      	bne.n	13fd4 <__aeabi_dmul+0x234>
   13fc8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   13fcc:	bf1c      	itt	ne
   13fce:	4610      	movne	r0, r2
   13fd0:	4619      	movne	r1, r3
   13fd2:	d10a      	bne.n	13fea <__aeabi_dmul+0x24a>
   13fd4:	ea81 0103 	eor.w	r1, r1, r3
   13fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13fdc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13fe0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   13fe4:	f04f 0000 	mov.w	r0, #0
   13fe8:	bd70      	pop	{r4, r5, r6, pc}
   13fea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13fee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   13ff2:	bd70      	pop	{r4, r5, r6, pc}

00013ff4 <__aeabi_ddiv>:
   13ff4:	b570      	push	{r4, r5, r6, lr}
   13ff6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13ffa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13ffe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   14002:	bf1d      	ittte	ne
   14004:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   14008:	ea94 0f0c 	teqne	r4, ip
   1400c:	ea95 0f0c 	teqne	r5, ip
   14010:	f000 f8a7 	bleq	14162 <__aeabi_ddiv+0x16e>
   14014:	eba4 0405 	sub.w	r4, r4, r5
   14018:	ea81 0e03 	eor.w	lr, r1, r3
   1401c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   14020:	ea4f 3101 	mov.w	r1, r1, lsl #12
   14024:	f000 8088 	beq.w	14138 <__aeabi_ddiv+0x144>
   14028:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1402c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   14030:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   14034:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   14038:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1403c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   14040:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   14044:	ea4f 2600 	mov.w	r6, r0, lsl #8
   14048:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1404c:	429d      	cmp	r5, r3
   1404e:	bf08      	it	eq
   14050:	4296      	cmpeq	r6, r2
   14052:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   14056:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1405a:	d202      	bcs.n	14062 <__aeabi_ddiv+0x6e>
   1405c:	085b      	lsrs	r3, r3, #1
   1405e:	ea4f 0232 	mov.w	r2, r2, rrx
   14062:	1ab6      	subs	r6, r6, r2
   14064:	eb65 0503 	sbc.w	r5, r5, r3
   14068:	085b      	lsrs	r3, r3, #1
   1406a:	ea4f 0232 	mov.w	r2, r2, rrx
   1406e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   14072:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   14076:	ebb6 0e02 	subs.w	lr, r6, r2
   1407a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1407e:	bf22      	ittt	cs
   14080:	1ab6      	subcs	r6, r6, r2
   14082:	4675      	movcs	r5, lr
   14084:	ea40 000c 	orrcs.w	r0, r0, ip
   14088:	085b      	lsrs	r3, r3, #1
   1408a:	ea4f 0232 	mov.w	r2, r2, rrx
   1408e:	ebb6 0e02 	subs.w	lr, r6, r2
   14092:	eb75 0e03 	sbcs.w	lr, r5, r3
   14096:	bf22      	ittt	cs
   14098:	1ab6      	subcs	r6, r6, r2
   1409a:	4675      	movcs	r5, lr
   1409c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   140a0:	085b      	lsrs	r3, r3, #1
   140a2:	ea4f 0232 	mov.w	r2, r2, rrx
   140a6:	ebb6 0e02 	subs.w	lr, r6, r2
   140aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   140ae:	bf22      	ittt	cs
   140b0:	1ab6      	subcs	r6, r6, r2
   140b2:	4675      	movcs	r5, lr
   140b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   140b8:	085b      	lsrs	r3, r3, #1
   140ba:	ea4f 0232 	mov.w	r2, r2, rrx
   140be:	ebb6 0e02 	subs.w	lr, r6, r2
   140c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   140c6:	bf22      	ittt	cs
   140c8:	1ab6      	subcs	r6, r6, r2
   140ca:	4675      	movcs	r5, lr
   140cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   140d0:	ea55 0e06 	orrs.w	lr, r5, r6
   140d4:	d018      	beq.n	14108 <__aeabi_ddiv+0x114>
   140d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   140da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   140de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   140e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   140e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   140ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   140ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   140f2:	d1c0      	bne.n	14076 <__aeabi_ddiv+0x82>
   140f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   140f8:	d10b      	bne.n	14112 <__aeabi_ddiv+0x11e>
   140fa:	ea41 0100 	orr.w	r1, r1, r0
   140fe:	f04f 0000 	mov.w	r0, #0
   14102:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   14106:	e7b6      	b.n	14076 <__aeabi_ddiv+0x82>
   14108:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1410c:	bf04      	itt	eq
   1410e:	4301      	orreq	r1, r0
   14110:	2000      	moveq	r0, #0
   14112:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   14116:	bf88      	it	hi
   14118:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1411c:	f63f aeaf 	bhi.w	13e7e <__aeabi_dmul+0xde>
   14120:	ebb5 0c03 	subs.w	ip, r5, r3
   14124:	bf04      	itt	eq
   14126:	ebb6 0c02 	subseq.w	ip, r6, r2
   1412a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1412e:	f150 0000 	adcs.w	r0, r0, #0
   14132:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   14136:	bd70      	pop	{r4, r5, r6, pc}
   14138:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1413c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   14140:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   14144:	bfc2      	ittt	gt
   14146:	ebd4 050c 	rsbsgt	r5, r4, ip
   1414a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1414e:	bd70      	popgt	{r4, r5, r6, pc}
   14150:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   14154:	f04f 0e00 	mov.w	lr, #0
   14158:	3c01      	subs	r4, #1
   1415a:	e690      	b.n	13e7e <__aeabi_dmul+0xde>
   1415c:	ea45 0e06 	orr.w	lr, r5, r6
   14160:	e68d      	b.n	13e7e <__aeabi_dmul+0xde>
   14162:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   14166:	ea94 0f0c 	teq	r4, ip
   1416a:	bf08      	it	eq
   1416c:	ea95 0f0c 	teqeq	r5, ip
   14170:	f43f af3b 	beq.w	13fea <__aeabi_dmul+0x24a>
   14174:	ea94 0f0c 	teq	r4, ip
   14178:	d10a      	bne.n	14190 <__aeabi_ddiv+0x19c>
   1417a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1417e:	f47f af34 	bne.w	13fea <__aeabi_dmul+0x24a>
   14182:	ea95 0f0c 	teq	r5, ip
   14186:	f47f af25 	bne.w	13fd4 <__aeabi_dmul+0x234>
   1418a:	4610      	mov	r0, r2
   1418c:	4619      	mov	r1, r3
   1418e:	e72c      	b.n	13fea <__aeabi_dmul+0x24a>
   14190:	ea95 0f0c 	teq	r5, ip
   14194:	d106      	bne.n	141a4 <__aeabi_ddiv+0x1b0>
   14196:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1419a:	f43f aefd 	beq.w	13f98 <__aeabi_dmul+0x1f8>
   1419e:	4610      	mov	r0, r2
   141a0:	4619      	mov	r1, r3
   141a2:	e722      	b.n	13fea <__aeabi_dmul+0x24a>
   141a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   141a8:	bf18      	it	ne
   141aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   141ae:	f47f aec5 	bne.w	13f3c <__aeabi_dmul+0x19c>
   141b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   141b6:	f47f af0d 	bne.w	13fd4 <__aeabi_dmul+0x234>
   141ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   141be:	f47f aeeb 	bne.w	13f98 <__aeabi_dmul+0x1f8>
   141c2:	e712      	b.n	13fea <__aeabi_dmul+0x24a>

000141c4 <__aeabi_d2iz>:
   141c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   141c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   141cc:	d215      	bcs.n	141fa <__aeabi_d2iz+0x36>
   141ce:	d511      	bpl.n	141f4 <__aeabi_d2iz+0x30>
   141d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   141d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   141d8:	d912      	bls.n	14200 <__aeabi_d2iz+0x3c>
   141da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   141de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   141e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   141e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   141ea:	fa23 f002 	lsr.w	r0, r3, r2
   141ee:	bf18      	it	ne
   141f0:	4240      	negne	r0, r0
   141f2:	4770      	bx	lr
   141f4:	f04f 0000 	mov.w	r0, #0
   141f8:	4770      	bx	lr
   141fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   141fe:	d105      	bne.n	1420c <__aeabi_d2iz+0x48>
   14200:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   14204:	bf08      	it	eq
   14206:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1420a:	4770      	bx	lr
   1420c:	f04f 0000 	mov.w	r0, #0
   14210:	4770      	bx	lr
   14212:	bf00      	nop
   14214:	6f4d      	ldr	r5, [r1, #116]	; 0x74
   14216:	7564      	strb	r4, [r4, #21]
   14218:	656c      	str	r4, [r5, #84]	; 0x54
   1421a:	0000      	movs	r0, r0
   1421c:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1421e:	6e75      	ldr	r5, [r6, #100]	; 0x64
   14220:	6574      	str	r4, [r6, #84]	; 0x54
   14222:	2072      	movs	r0, #114	; 0x72
   14224:	6954      	ldr	r4, [r2, #20]
   14226:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   14228:	4320      	orrs	r0, r4
   1422a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1422c:	4520      	cmp	r0, r4
   1422e:	7272      	strb	r2, [r6, #9]
   14230:	726f      	strb	r7, [r5, #9]
   14232:	3a20      	subs	r2, #32
   14234:	0020      	movs	r0, r4
   14236:	ffff 6f4c 	vqrdmlsh.s<illegal width 64>	q11, <illegal reg q7.5>, d12[0]
   1423a:	676e      	.short	0x676e
   1423c:	20444920 	.word	0x20444920
   14240:	69636572 	.word	0x69636572
   14244:	64657665 	.word	0x64657665
   14248:	ff003a20 	.word	0xff003a20
   1424c:	75646f4d 	.word	0x75646f4d
   14250:	2520656c 	.word	0x2520656c
   14254:	78652069 	.word	0x78652069
   14258:	73747369 	.word	0x73747369
   1425c:	6552202e 	.word	0x6552202e
   14260:	6e696461 	.word	0x6e696461
   14264:	6f762067 	.word	0x6f762067
   14268:	6761746c 	.word	0x6761746c
   1426c:	6e612065 	.word	0x6e612065
   14270:	65742064 	.word	0x65742064
   14274:	7265706d 	.word	0x7265706d
   14278:	72757461 	.word	0x72757461
   1427c:	61762065 	.word	0x61762065
   14280:	7365756c 	.word	0x7365756c
   14284:	00000000 	.word	0x00000000
   14288:	75646f4d 	.word	0x75646f4d
   1428c:	7620656c 	.word	0x7620656c
   14290:	61746c6f 	.word	0x61746c6f
   14294:	203a6567 	.word	0x203a6567
   14298:	00006625 	.word	0x00006625
   1429c:	65776f4c 	.word	0x65776f4c
   142a0:	43207473 	.word	0x43207473
   142a4:	206c6c65 	.word	0x206c6c65
   142a8:	25203a56 	.word	0x25203a56
   142ac:	20202066 	.word	0x20202066
   142b0:	69482020 	.word	0x69482020
   142b4:	73656867 	.word	0x73656867
   142b8:	65432074 	.word	0x65432074
   142bc:	56206c6c 	.word	0x56206c6c
   142c0:	6625203a 	.word	0x6625203a
   142c4:	00000000 	.word	0x00000000
   142c8:	706d6554 	.word	0x706d6554
   142cc:	25203a31 	.word	0x25203a31
   142d0:	20202066 	.word	0x20202066
   142d4:	20202020 	.word	0x20202020
   142d8:	706d6554 	.word	0x706d6554
   142dc:	25203a32 	.word	0x25203a32
   142e0:	00000066 	.word	0x00000066
   142e4:	20656e4f 	.word	0x20656e4f
   142e8:	6d20726f 	.word	0x6d20726f
   142ec:	2065726f 	.word	0x2065726f
   142f0:	20534d42 	.word	0x20534d42
   142f4:	75646f6d 	.word	0x75646f6d
   142f8:	2073656c 	.word	0x2073656c
   142fc:	65766168 	.word	0x65766168
   14300:	746e6520 	.word	0x746e6520
   14304:	64657265 	.word	0x64657265
   14308:	65687420 	.word	0x65687420
   1430c:	75616620 	.word	0x75616620
   14310:	7320746c 	.word	0x7320746c
   14314:	65746174 	.word	0x65746174
   14318:	00000021 	.word	0x00000021
   1431c:	206c6c41 	.word	0x206c6c41
   14320:	75646f6d 	.word	0x75646f6d
   14324:	2073656c 	.word	0x2073656c
   14328:	65766168 	.word	0x65766168
   1432c:	69786520 	.word	0x69786520
   14330:	20646574 	.word	0x20646574
   14334:	61662061 	.word	0x61662061
   14338:	65746c75 	.word	0x65746c75
   1433c:	74732064 	.word	0x74732064
   14340:	00657461 	.word	0x00657461
   14344:	75646f4d 	.word	0x75646f4d
   14348:	3a73656c 	.word	0x3a73656c
   1434c:	20692520 	.word	0x20692520
   14350:	6c654320 	.word	0x6c654320
   14354:	203a736c 	.word	0x203a736c
   14358:	20206925 	.word	0x20206925
   1435c:	746c6f56 	.word	0x746c6f56
   14360:	3a656761 	.word	0x3a656761
   14364:	56662520 	.word	0x56662520
   14368:	41202020 	.word	0x41202020
   1436c:	43206776 	.word	0x43206776
   14370:	206c6c65 	.word	0x206c6c65
   14374:	746c6f56 	.word	0x746c6f56
   14378:	3a656761 	.word	0x3a656761
   1437c:	56662520 	.word	0x56662520
   14380:	20202020 	.word	0x20202020
   14384:	67764120 	.word	0x67764120
   14388:	6d655420 	.word	0x6d655420
   1438c:	25203a70 	.word	0x25203a70
   14390:	00204366 	.word	0x00204366
   14394:	20202020 	.word	0x20202020
   14398:	20202020 	.word	0x20202020
   1439c:	20202020 	.word	0x20202020
   143a0:	20202020 	.word	0x20202020
   143a4:	20202020 	.word	0x20202020
   143a8:	20202020 	.word	0x20202020
   143ac:	20202020 	.word	0x20202020
   143b0:	4d202020 	.word	0x4d202020
   143b4:	6c75646f 	.word	0x6c75646f
   143b8:	25232065 	.word	0x25232065
   143bc:	00000069 	.word	0x00000069
   143c0:	6f562020 	.word	0x6f562020
   143c4:	6761746c 	.word	0x6761746c
   143c8:	25203a65 	.word	0x25203a65
   143cc:	20205666 	.word	0x20205666
   143d0:	66252820 	.word	0x66252820
   143d4:	66252d56 	.word	0x66252d56
   143d8:	20202956 	.word	0x20202956
   143dc:	54202020 	.word	0x54202020
   143e0:	65706d65 	.word	0x65706d65
   143e4:	75746172 	.word	0x75746172
   143e8:	3a736572 	.word	0x3a736572
   143ec:	66252820 	.word	0x66252820
   143f0:	66252d43 	.word	0x66252d43
   143f4:	00002943 	.word	0x00002943
   143f8:	4f4d2020 	.word	0x4f4d2020
   143fc:	454c5544 	.word	0x454c5544
   14400:	20534920 	.word	0x20534920
   14404:	4c554146 	.word	0x4c554146
   14408:	3a444554 	.word	0x3a444554
   1440c:	00000000 	.word	0x00000000
   14410:	20202020 	.word	0x20202020
   14414:	7265764f 	.word	0x7265764f
   14418:	746c6f76 	.word	0x746c6f76
   1441c:	20656761 	.word	0x20656761
   14420:	6c6c6543 	.word	0x6c6c6543
   14424:	6d754e20 	.word	0x6d754e20
   14428:	73726562 	.word	0x73726562
   1442c:	2d312820 	.word	0x2d312820
   14430:	203a2936 	.word	0x203a2936
   14434:	00000000 	.word	0x00000000
   14438:	20202020 	.word	0x20202020
   1443c:	65646e55 	.word	0x65646e55
   14440:	6c6f7672 	.word	0x6c6f7672
   14444:	65676174 	.word	0x65676174
   14448:	6c654320 	.word	0x6c654320
   1444c:	754e206c 	.word	0x754e206c
   14450:	7265626d 	.word	0x7265626d
   14454:	31282073 	.word	0x31282073
   14458:	3a29362d 	.word	0x3a29362d
   1445c:	00000020 	.word	0x00000020
   14460:	20202020 	.word	0x20202020
   14464:	20435243 	.word	0x20435243
   14468:	6f727265 	.word	0x6f727265
   1446c:	6e692072 	.word	0x6e692072
   14470:	63657220 	.word	0x63657220
   14474:	65766965 	.word	0x65766965
   14478:	61702064 	.word	0x61702064
   1447c:	74656b63 	.word	0x74656b63
   14480:	00000000 	.word	0x00000000
   14484:	20202020 	.word	0x20202020
   14488:	65776f50 	.word	0x65776f50
   1448c:	6e6f2072 	.word	0x6e6f2072
   14490:	73657220 	.word	0x73657220
   14494:	68207465 	.word	0x68207465
   14498:	6f207361 	.word	0x6f207361
   1449c:	72756363 	.word	0x72756363
   144a0:	00646572 	.word	0x00646572
   144a4:	20202020 	.word	0x20202020
   144a8:	74736554 	.word	0x74736554
   144ac:	75616620 	.word	0x75616620
   144b0:	6120746c 	.word	0x6120746c
   144b4:	76697463 	.word	0x76697463
   144b8:	00000065 	.word	0x00000065
   144bc:	20202020 	.word	0x20202020
   144c0:	65746e49 	.word	0x65746e49
   144c4:	6c616e72 	.word	0x6c616e72
   144c8:	67657220 	.word	0x67657220
   144cc:	65747369 	.word	0x65747369
   144d0:	69207372 	.word	0x69207372
   144d4:	6e6f636e 	.word	0x6e6f636e
   144d8:	74736973 	.word	0x74736973
   144dc:	00746e65 	.word	0x00746e65
   144e0:	4f4d2020 	.word	0x4f4d2020
   144e4:	454c5544 	.word	0x454c5544
   144e8:	53414820 	.word	0x53414820
   144ec:	454c4120 	.word	0x454c4120
   144f0:	3a535452 	.word	0x3a535452
   144f4:	00000000 	.word	0x00000000
   144f8:	20202020 	.word	0x20202020
   144fc:	7265764f 	.word	0x7265764f
   14500:	6d657420 	.word	0x6d657420
   14504:	61726570 	.word	0x61726570
   14508:	65727574 	.word	0x65727574
   1450c:	206e6f20 	.word	0x206e6f20
   14510:	00315354 	.word	0x00315354
   14514:	20202020 	.word	0x20202020
   14518:	7265764f 	.word	0x7265764f
   1451c:	6d657420 	.word	0x6d657420
   14520:	61726570 	.word	0x61726570
   14524:	65727574 	.word	0x65727574
   14528:	206e6f20 	.word	0x206e6f20
   1452c:	00325354 	.word	0x00325354
   14530:	20202020 	.word	0x20202020
   14534:	65656c53 	.word	0x65656c53
   14538:	6f6d2070 	.word	0x6f6d2070
   1453c:	61206564 	.word	0x61206564
   14540:	76697463 	.word	0x76697463
   14544:	00000065 	.word	0x00000065
   14548:	20202020 	.word	0x20202020
   1454c:	72656854 	.word	0x72656854
   14550:	206c616d 	.word	0x206c616d
   14554:	74756873 	.word	0x74756873
   14558:	6e776f64 	.word	0x6e776f64
   1455c:	74636120 	.word	0x74636120
   14560:	00657669 	.word	0x00657669
   14564:	20202020 	.word	0x20202020
   14568:	74736554 	.word	0x74736554
   1456c:	656c4120 	.word	0x656c4120
   14570:	00007472 	.word	0x00007472
   14574:	20202020 	.word	0x20202020
   14578:	2050544f 	.word	0x2050544f
   1457c:	4f525045 	.word	0x4f525045
   14580:	6e55204d 	.word	0x6e55204d
   14584:	72726f63 	.word	0x72726f63
   14588:	61746365 	.word	0x61746365
   1458c:	20656c62 	.word	0x20656c62
   14590:	6f727245 	.word	0x6f727245
   14594:	00000072 	.word	0x00000072
   14598:	20202020 	.word	0x20202020
   1459c:	554f5247 	.word	0x554f5247
   145a0:	52203350 	.word	0x52203350
   145a4:	20736765 	.word	0x20736765
   145a8:	61766e49 	.word	0x61766e49
   145ac:	0064696c 	.word	0x0064696c
   145b0:	20202020 	.word	0x20202020
   145b4:	72646441 	.word	0x72646441
   145b8:	20737365 	.word	0x20737365
   145bc:	20746f6e 	.word	0x20746f6e
   145c0:	69676572 	.word	0x69676572
   145c4:	72657473 	.word	0x72657473
   145c8:	ff006465 	.word	0xff006465
   145cc:	75646f4d 	.word	0x75646f4d
   145d0:	3a73656c 	.word	0x3a73656c
   145d4:	20692520 	.word	0x20692520
   145d8:	6c6c6543 	.word	0x6c6c6543
   145dc:	25203a73 	.word	0x25203a73
   145e0:	74532069 	.word	0x74532069
   145e4:	676e6972 	.word	0x676e6972
   145e8:	25203a73 	.word	0x25203a73
   145ec:	56202069 	.word	0x56202069
   145f0:	61746c6f 	.word	0x61746c6f
   145f4:	203a6567 	.word	0x203a6567
   145f8:	20566625 	.word	0x20566625
   145fc:	76412020 	.word	0x76412020
   14600:	65432067 	.word	0x65432067
   14604:	56206c6c 	.word	0x56206c6c
   14608:	61746c6f 	.word	0x61746c6f
   1460c:	203a6567 	.word	0x203a6567
   14610:	20566625 	.word	0x20566625
   14614:	776f4c20 	.word	0x776f4c20
   14618:	6c654320 	.word	0x6c654320
   1461c:	6f56206c 	.word	0x6f56206c
   14620:	6761746c 	.word	0x6761746c
   14624:	25203a65 	.word	0x25203a65
   14628:	20205666 	.word	0x20205666
   1462c:	67694820 	.word	0x67694820
   14630:	65432068 	.word	0x65432068
   14634:	56206c6c 	.word	0x56206c6c
   14638:	61746c6f 	.word	0x61746c6f
   1463c:	203a6567 	.word	0x203a6567
   14640:	20566625 	.word	0x20566625
   14644:	746c6544 	.word	0x746c6544
   14648:	6f562061 	.word	0x6f562061
   1464c:	6761746c 	.word	0x6761746c
   14650:	25203a65 	.word	0x25203a65
   14654:	20566d7a 	.word	0x20566d7a
   14658:	76412020 	.word	0x76412020
   1465c:	65542067 	.word	0x65542067
   14660:	203a706d 	.word	0x203a706d
   14664:	20436625 	.word	0x20436625
   14668:	00000000 	.word	0x00000000
   1466c:	75646f4d 	.word	0x75646f4d
   14670:	2320656c 	.word	0x2320656c
   14674:	00000000 	.word	0x00000000
   14678:	00000056 	.word	0x00000056
   1467c:	65432020 	.word	0x65432020
   14680:	00006c6c 	.word	0x00006c6c
   14684:	00005820 	.word	0x00005820
   14688:	00002d20 	.word	0x00002d20
   1468c:	6d655420 	.word	0x6d655420
   14690:	3a312070 	.word	0x3a312070
   14694:	00000020 	.word	0x00000020
   14698:	65542043 	.word	0x65542043
   1469c:	3220706d 	.word	0x3220706d
   146a0:	0000203a 	.word	0x0000203a
   146a4:	65542043 	.word	0x65542043
   146a8:	3320706d 	.word	0x3320706d
   146ac:	0000203a 	.word	0x0000203a
   146b0:	42202043 	.word	0x42202043
   146b4:	53206c61 	.word	0x53206c61
   146b8:	3a746174 	.word	0x3a746174
   146bc:	00000020 	.word	0x00000020
   146c0:	ffff0043 	.word	0xffff0043
   146c4:	ffff002c 	.word	0xffff002c
   146c8:	00007830 	.word	0x00007830
   146cc:	00006230 	.word	0x00006230
   146d0:	00000054 	.word	0x00000054
   146d4:	00000046 	.word	0x00000046
   146d8:	45555254 	.word	0x45555254
   146dc:	00000000 	.word	0x00000000
   146e0:	534c4146 	.word	0x534c4146
   146e4:	ffff0045 	.word	0xffff0045
   146e8:	00202d20 	.word	0x00202d20
   146ec:	55424544 	.word	0x55424544
   146f0:	00000047 	.word	0x00000047
   146f4:	4f464e49 	.word	0x4f464e49
   146f8:	00000000 	.word	0x00000000
   146fc:	4e524157 	.word	0x4e524157
   14700:	00474e49 	.word	0x00474e49
   14704:	4f525245 	.word	0x4f525245
   14708:	ffff0052 	.word	0xffff0052
   1470c:	65736552 	.word	0x65736552
   14710:	6e697474 	.word	0x6e697474
   14714:	6f742067 	.word	0x6f742067
   14718:	63616620 	.word	0x63616620
   1471c:	79726f74 	.word	0x79726f74
   14720:	66656420 	.word	0x66656420
   14724:	746c7561 	.word	0x746c7561
   14728:	ffff0073 	.word	0xffff0073
   1472c:	20434f53 	.word	0x20434f53
   14730:	0000203a 	.word	0x0000203a
   14734:	75662020 	.word	0x75662020
   14738:	70206c65 	.word	0x70206c65
   1473c:	3a206d77 	.word	0x3a206d77
   14740:	ffff0020 	.word	0xffff0020
   14744:	20534d42 	.word	0x20534d42
   14748:	74617453 	.word	0x74617453
   1474c:	3a207375 	.word	0x3a207375
   14750:	00000020 	.word	0x00000020
   14754:	20535345 	.word	0x20535345
   14758:	65646f4d 	.word	0x65646f4d
   1475c:	00000020 	.word	0x00000020
   14760:	6e55203a 	.word	0x6e55203a
   14764:	56726564 	.word	0x56726564
   14768:	61746c6f 	.word	0x61746c6f
   1476c:	00206567 	.word	0x00206567
   14770:	764f203a 	.word	0x764f203a
   14774:	6f567265 	.word	0x6f567265
   14778:	6761746c 	.word	0x6761746c
   1477c:	00002065 	.word	0x00002065
   14780:	6543203a 	.word	0x6543203a
   14784:	49206c6c 	.word	0x49206c6c
   14788:	6c61626d 	.word	0x6c61626d
   1478c:	65636e61 	.word	0x65636e61
   14790:	00000020 	.word	0x00000020
   14794:	764f203a 	.word	0x764f203a
   14798:	54207265 	.word	0x54207265
   1479c:	20706d65 	.word	0x20706d65
   147a0:	00000000 	.word	0x00000000
   147a4:	6e55203a 	.word	0x6e55203a
   147a8:	20726564 	.word	0x20726564
   147ac:	706d6554 	.word	0x706d6554
   147b0:	00000020 	.word	0x00000020
   147b4:	764f203a 	.word	0x764f203a
   147b8:	6f567265 	.word	0x6f567265
   147bc:	6761746c 	.word	0x6761746c
   147c0:	74532065 	.word	0x74532065
   147c4:	6761726f 	.word	0x6761726f
   147c8:	00002065 	.word	0x00002065
   147cc:	4e55203a 	.word	0x4e55203a
   147d0:	70706168 	.word	0x70706168
   147d4:	00003a79 	.word	0x00003a79
   147d8:	6148203a 	.word	0x6148203a
   147dc:	20797070 	.word	0x20797070
   147e0:	00000000 	.word	0x00000000
   147e4:	6f6f4220 	.word	0x6f6f4220
   147e8:	00002074 	.word	0x00002074
   147ec:	61655220 	.word	0x61655220
   147f0:	00207964 	.word	0x00207964
   147f4:	65725020 	.word	0x65725020
   147f8:	72616863 	.word	0x72616863
   147fc:	00206567 	.word	0x00206567
   14800:	69724420 	.word	0x69724420
   14804:	00206576 	.word	0x00206576
   14808:	61684320 	.word	0x61684320
   1480c:	20656772 	.word	0x20656772
   14810:	00000000 	.word	0x00000000
   14814:	72724520 	.word	0x72724520
   14818:	0020726f 	.word	0x0020726f
   1481c:	4341207c 	.word	0x4341207c
   14820:	65725020 	.word	0x65725020
   14824:	746e6573 	.word	0x746e6573
   14828:	00007c20 	.word	0x00007c20
   1482c:	654b207c 	.word	0x654b207c
   14830:	4e4f2079 	.word	0x4e4f2079
   14834:	00007c20 	.word	0x00007c20
   14838:	6c61427c 	.word	0x6c61427c
   1483c:	69636e61 	.word	0x69636e61
   14840:	4120676e 	.word	0x4120676e
   14844:	76697463 	.word	0x76697463
   14848:	00000065 	.word	0x00000065
   1484c:	3a74754f 	.word	0x3a74754f
   14850:	00000000 	.word	0x00000000
   14854:	6e6f4320 	.word	0x6e6f4320
   14858:	00003a74 	.word	0x00003a74
   1485c:	00000031 	.word	0x00000031
   14860:	00000030 	.word	0x00000030
   14864:	3a6e4920 	.word	0x3a6e4920
   14868:	00000000 	.word	0x00000000
   1486c:	61684320 	.word	0x61684320
   14870:	20656772 	.word	0x20656772
   14874:	72727543 	.word	0x72727543
   14878:	20746e65 	.word	0x20746e65
   1487c:	696d694c 	.word	0x696d694c
   14880:	203a2074 	.word	0x203a2074
   14884:	00000000 	.word	0x00000000
   14888:	44204120 	.word	0x44204120
   1488c:	68437369 	.word	0x68437369
   14890:	65677261 	.word	0x65677261
   14894:	72754320 	.word	0x72754320
   14898:	746e6572 	.word	0x746e6572
   1489c:	6d694c20 	.word	0x6d694c20
   148a0:	3a207469 	.word	0x3a207469
   148a4:	00000020 	.word	0x00000020
   148a8:	ff004120 	.word	0xff004120
   148ac:	20776f4c 	.word	0x20776f4c
   148b0:	676e6152 	.word	0x676e6152
   148b4:	00203a65 	.word	0x00203a65
   148b8:	676e6953 	.word	0x676e6953
   148bc:	4920656c 	.word	0x4920656c
   148c0:	00203a6e 	.word	0x00203a6e
   148c4:	756c6156 	.word	0x756c6156
   148c8:	44412065 	.word	0x44412065
   148cc:	203a3043 	.word	0x203a3043
   148d0:	00000000 	.word	0x00000000
   148d4:	00416d20 	.word	0x00416d20
   148d8:	68676948 	.word	0x68676948
   148dc:	6e615220 	.word	0x6e615220
   148e0:	203a6567 	.word	0x203a6567
   148e4:	00000000 	.word	0x00000000
   148e8:	0000416d 	.word	0x0000416d
   148ec:	00207c20 	.word	0x00207c20
   148f0:	2020416d 	.word	0x2020416d
   148f4:	ffffff00 	.word	0xffffff00
   148f8:	2f2f2f2f 	.word	0x2f2f2f2f
   148fc:	2f2f2f2f 	.word	0x2f2f2f2f
   14900:	2f2f2f2f 	.word	0x2f2f2f2f
   14904:	2f2f2f2f 	.word	0x2f2f2f2f
   14908:	2f2f2f2f 	.word	0x2f2f2f2f
   1490c:	2f2f2f2f 	.word	0x2f2f2f2f
   14910:	2f2f2f2f 	.word	0x2f2f2f2f
   14914:	2f2f2f2f 	.word	0x2f2f2f2f
   14918:	2f2f2f2f 	.word	0x2f2f2f2f
   1491c:	2f2f2f2f 	.word	0x2f2f2f2f
   14920:	434f5320 	.word	0x434f5320
   14924:	54455320 	.word	0x54455320
   14928:	2f2f2f20 	.word	0x2f2f2f20
   1492c:	2f2f2f2f 	.word	0x2f2f2f2f
   14930:	2f2f2f2f 	.word	0x2f2f2f2f
   14934:	2f2f2f2f 	.word	0x2f2f2f2f
   14938:	2f2f2f2f 	.word	0x2f2f2f2f
   1493c:	2f2f2f2f 	.word	0x2f2f2f2f
   14940:	2f2f2f2f 	.word	0x2f2f2f2f
   14944:	2f2f2f2f 	.word	0x2f2f2f2f
   14948:	2f2f2f2f 	.word	0x2f2f2f2f
   1494c:	2f2f2f2f 	.word	0x2f2f2f2f
   14950:	0000002f 	.word	0x0000002f
   14954:	20776f4c 	.word	0x20776f4c
   14958:	676e6152 	.word	0x676e6152
   1495c:	00002065 	.word	0x00002065
   14960:	68676948 	.word	0x68676948
   14964:	6e615220 	.word	0x6e615220
   14968:	00006567 	.word	0x00006567
   1496c:	6c616e41 	.word	0x6c616e41
   14970:	6575676f 	.word	0x6575676f
   14974:	6e695320 	.word	0x6e695320
   14978:	20656c67 	.word	0x20656c67
   1497c:	00000000 	.word	0x00000000
   14980:	624e4143 	.word	0x624e4143
   14984:	00207375 	.word	0x00207375
   14988:	4f532025 	.word	0x4f532025
   1498c:	00002043 	.word	0x00002043
   14990:	0068416d 	.word	0x0068416d
   14994:	6c6c7570 	.word	0x6c6c7570
   14998:	206e6920 	.word	0x206e6920
   1499c:	3654554f 	.word	0x3654554f
   149a0:	00000000 	.word	0x00000000
   149a4:	6c6c7570 	.word	0x6c6c7570
   149a8:	206e6920 	.word	0x206e6920
   149ac:	3754554f 	.word	0x3754554f
   149b0:	ffffff00 	.word	0xffffff00
   149b4:	6c614320 	.word	0x6c614320
   149b8:	61726269 	.word	0x61726269
   149bc:	676e6974 	.word	0x676e6974
   149c0:	72754320 	.word	0x72754320
   149c4:	746e6572 	.word	0x746e6572
   149c8:	66664f20 	.word	0x66664f20
   149cc:	20746573 	.word	0x20746573
   149d0:	3a3a3a3a 	.word	0x3a3a3a3a
   149d4:	0000203a 	.word	0x0000203a
   149d8:	0000002e 	.word	0x0000002e
   149dc:	72756320 	.word	0x72756320
   149e0:	746e6572 	.word	0x746e6572
   149e4:	66666f20 	.word	0x66666f20
   149e8:	20746573 	.word	0x20746573
   149ec:	61632031 	.word	0x61632031
   149f0:	7262696c 	.word	0x7262696c
   149f4:	64657461 	.word	0x64657461
   149f8:	00000020 	.word	0x00000020
   149fc:	72756320 	.word	0x72756320
   14a00:	746e6572 	.word	0x746e6572
   14a04:	66666f20 	.word	0x66666f20
   14a08:	20746573 	.word	0x20746573
   14a0c:	61632032 	.word	0x61632032
   14a10:	7262696c 	.word	0x7262696c
   14a14:	64657461 	.word	0x64657461
   14a18:	ffff0020 	.word	0xffff0020
   14a1c:	ffff0050 	.word	0xffff0050
   14a20:	646f4320 	.word	0x646f4320
   14a24:	53206465 	.word	0x53206465
   14a28:	69747465 	.word	0x69747465
   14a2c:	2073676e 	.word	0x2073676e
   14a30:	64616f4c 	.word	0x64616f4c
   14a34:	00206465 	.word	0x00206465
   14a38:	68416d20 	.word	0x68416d20
   14a3c:	73655220 	.word	0x73655220
   14a40:	00207465 	.word	0x00207465
   14a44:	202d2031 	.word	0x202d2031
   14a48:	69726553 	.word	0x69726553
   14a4c:	45206c61 	.word	0x45206c61
   14a50:	6e617078 	.word	0x6e617078
   14a54:	6e6f6973 	.word	0x6e6f6973
   14a58:	00003a6e 	.word	0x00003a6e
   14a5c:	656e6f4e 	.word	0x656e6f4e
   14a60:	00000000 	.word	0x00000000
   14a64:	206e6143 	.word	0x206e6143
   14a68:	20737542 	.word	0x20737542
   14a6c:	61707845 	.word	0x61707845
   14a70:	6f69736e 	.word	0x6f69736e
   14a74:	0000006e 	.word	0x0000006e
   14a78:	202d2071 	.word	0x202d2071
   14a7c:	62206f47 	.word	0x62206f47
   14a80:	206b6361 	.word	0x206b6361
   14a84:	6d206f74 	.word	0x6d206f74
   14a88:	00756e65 	.word	0x00756e65
   14a8c:	202d2031 	.word	0x202d2031
   14a90:	706d6554 	.word	0x706d6554
   14a94:	6e655320 	.word	0x6e655320
   14a98:	20726f73 	.word	0x20726f73
   14a9c:	74746553 	.word	0x74746553
   14aa0:	3a676e69 	.word	0x3a676e69
   14aa4:	00000000 	.word	0x00000000
   14aa8:	202d2032 	.word	0x202d2032
   14aac:	746c6f56 	.word	0x746c6f56
   14ab0:	20656761 	.word	0x20656761
   14ab4:	65646e55 	.word	0x65646e55
   14ab8:	68572072 	.word	0x68572072
   14abc:	20686369 	.word	0x20686369
   14ac0:	49206f54 	.word	0x49206f54
   14ac4:	726f6e67 	.word	0x726f6e67
   14ac8:	65432065 	.word	0x65432065
   14acc:	3a736c6c 	.word	0x3a736c6c
   14ad0:	00000000 	.word	0x00000000
   14ad4:	0000566d 	.word	0x0000566d
   14ad8:	202d2033 	.word	0x202d2033
   14adc:	706d6554 	.word	0x706d6554
   14ae0:	61635320 	.word	0x61635320
   14ae4:	676e696c 	.word	0x676e696c
   14ae8:	74655320 	.word	0x74655320
   14aec:	676e6974 	.word	0x676e6974
   14af0:	0000003a 	.word	0x0000003a
   14af4:	202d2034 	.word	0x202d2034
   14af8:	706d6554 	.word	0x706d6554
   14afc:	66664f20 	.word	0x66664f20
   14b00:	20746573 	.word	0x20746573
   14b04:	74746553 	.word	0x74746553
   14b08:	3a676e69 	.word	0x3a676e69
   14b0c:	00000000 	.word	0x00000000
   14b10:	202d2031 	.word	0x202d2031
   14b14:	6c6c6543 	.word	0x6c6c6543
   14b18:	61684320 	.word	0x61684320
   14b1c:	20656772 	.word	0x20656772
   14b20:	746c6f56 	.word	0x746c6f56
   14b24:	20656761 	.word	0x20656761
   14b28:	696d694c 	.word	0x696d694c
   14b2c:	65532074 	.word	0x65532074
   14b30:	696f7074 	.word	0x696f7074
   14b34:	203a746e 	.word	0x203a746e
   14b38:	00000000 	.word	0x00000000
   14b3c:	202d2032 	.word	0x202d2032
   14b40:	72616843 	.word	0x72616843
   14b44:	48206567 	.word	0x48206567
   14b48:	65747379 	.word	0x65747379
   14b4c:	73697372 	.word	0x73697372
   14b50:	0000203a 	.word	0x0000203a
   14b54:	202d2033 	.word	0x202d2033
   14b58:	6b636150 	.word	0x6b636150
   14b5c:	78614d20 	.word	0x78614d20
   14b60:	61684320 	.word	0x61684320
   14b64:	20656772 	.word	0x20656772
   14b68:	72727543 	.word	0x72727543
   14b6c:	3a746e65 	.word	0x3a746e65
   14b70:	00000020 	.word	0x00000020
   14b74:	50202d34 	.word	0x50202d34
   14b78:	206b6361 	.word	0x206b6361
   14b7c:	20646e45 	.word	0x20646e45
   14b80:	4320666f 	.word	0x4320666f
   14b84:	67726168 	.word	0x67726168
   14b88:	75432065 	.word	0x75432065
   14b8c:	6e657272 	.word	0x6e657272
   14b90:	00203a74 	.word	0x00203a74
   14b94:	43202d35 	.word	0x43202d35
   14b98:	67726168 	.word	0x67726168
   14b9c:	54207265 	.word	0x54207265
   14ba0:	3a657079 	.word	0x3a657079
   14ba4:	00000020 	.word	0x00000020
   14ba8:	616c6552 	.word	0x616c6552
   14bac:	6f432079 	.word	0x6f432079
   14bb0:	6f72746e 	.word	0x6f72746e
   14bb4:	0000006c 	.word	0x0000006c
   14bb8:	73757242 	.word	0x73757242
   14bbc:	4c4e2061 	.word	0x4c4e2061
   14bc0:	78783547 	.word	0x78783547
   14bc4:	00000000 	.word	0x00000000
   14bc8:	746c6f56 	.word	0x746c6f56
   14bcc:	61684320 	.word	0x61684320
   14bd0:	72656772 	.word	0x72656772
   14bd4:	00000000 	.word	0x00000000
   14bd8:	65746c45 	.word	0x65746c45
   14bdc:	6843206b 	.word	0x6843206b
   14be0:	65677261 	.word	0x65677261
   14be4:	00000072 	.word	0x00000072
   14be8:	6f636c45 	.word	0x6f636c45
   14bec:	6843206e 	.word	0x6843206e
   14bf0:	65677261 	.word	0x65677261
   14bf4:	00000072 	.word	0x00000072
   14bf8:	74636956 	.word	0x74636956
   14bfc:	2f6e6f72 	.word	0x2f6e6f72
   14c00:	00414d53 	.word	0x00414d53
   14c04:	61646f43 	.word	0x61646f43
   14c08:	00000000 	.word	0x00000000
   14c0c:	65746c45 	.word	0x65746c45
   14c10:	4350206b 	.word	0x4350206b
   14c14:	61684320 	.word	0x61684320
   14c18:	72656772 	.word	0x72656772
   14c1c:	00000000 	.word	0x00000000
   14c20:	65707845 	.word	0x65707845
   14c24:	656d6972 	.word	0x656d6972
   14c28:	6c61746e 	.word	0x6c61746e
   14c2c:	44594220 	.word	0x44594220
   14c30:	00000000 	.word	0x00000000
   14c34:	6f6c7950 	.word	0x6f6c7950
   14c38:	6365546e 	.word	0x6365546e
   14c3c:	00000068 	.word	0x00000068
   14c40:	43202d36 	.word	0x43202d36
   14c44:	67726168 	.word	0x67726168
   14c48:	43207265 	.word	0x43207265
   14c4c:	4d206e61 	.word	0x4d206e61
   14c50:	53206773 	.word	0x53206773
   14c54:	203a6470 	.word	0x203a6470
   14c58:	00000000 	.word	0x00000000
   14c5c:	0000536d 	.word	0x0000536d
   14c60:	202d2037 	.word	0x202d2037
   14c64:	72616843 	.word	0x72616843
   14c68:	20726567 	.word	0x20726567
   14c6c:	43205648 	.word	0x43205648
   14c70:	656e6e6f 	.word	0x656e6e6f
   14c74:	6f697463 	.word	0x6f697463
   14c78:	00203a6e 	.word	0x00203a6e
   14c7c:	68654220 	.word	0x68654220
   14c80:	20646e69 	.word	0x20646e69
   14c84:	746e6f43 	.word	0x746e6f43
   14c88:	6f746361 	.word	0x6f746361
   14c8c:	00007372 	.word	0x00007372
   14c90:	65726944 	.word	0x65726944
   14c94:	54207463 	.word	0x54207463
   14c98:	6142206f 	.word	0x6142206f
   14c9c:	72657474 	.word	0x72657474
   14ca0:	56482079 	.word	0x56482079
   14ca4:	00000000 	.word	0x00000000
   14ca8:	202d2039 	.word	0x202d2039
   14cac:	72616843 	.word	0x72616843
   14cb0:	43206567 	.word	0x43206567
   14cb4:	65727275 	.word	0x65727275
   14cb8:	6420746e 	.word	0x6420746e
   14cbc:	74617265 	.word	0x74617265
   14cc0:	6f4c2065 	.word	0x6f4c2065
   14cc4:	00203a77 	.word	0x00203a77
   14cc8:	00004320 	.word	0x00004320
   14ccc:	202d2030 	.word	0x202d2030
   14cd0:	6b636150 	.word	0x6b636150
   14cd4:	6c6f4320 	.word	0x6c6f4320
   14cd8:	68432064 	.word	0x68432064
   14cdc:	65677261 	.word	0x65677261
   14ce0:	72754320 	.word	0x72754320
   14ce4:	746e6572 	.word	0x746e6572
   14ce8:	0000203a 	.word	0x0000203a
   14cec:	72616c41 	.word	0x72616c41
   14cf0:	6e61206d 	.word	0x6e61206d
   14cf4:	61572064 	.word	0x61572064
   14cf8:	6e696e72 	.word	0x6e696e72
   14cfc:	65532067 	.word	0x65532067
   14d00:	6e697474 	.word	0x6e697474
   14d04:	4d207367 	.word	0x4d207367
   14d08:	00756e65 	.word	0x00756e65
   14d0c:	202d2031 	.word	0x202d2031
   14d10:	746c6f56 	.word	0x746c6f56
   14d14:	20656761 	.word	0x20656761
   14d18:	6e726157 	.word	0x6e726157
   14d1c:	20676e69 	.word	0x20676e69
   14d20:	7366664f 	.word	0x7366664f
   14d24:	203a7465 	.word	0x203a7465
   14d28:	00000000 	.word	0x00000000
   14d2c:	202d2032 	.word	0x202d2032
   14d30:	6c6c6543 	.word	0x6c6c6543
   14d34:	6c6f5620 	.word	0x6c6f5620
   14d38:	65676174 	.word	0x65676174
   14d3c:	66694420 	.word	0x66694420
   14d40:	65726566 	.word	0x65726566
   14d44:	2065636e 	.word	0x2065636e
   14d48:	72616c41 	.word	0x72616c41
   14d4c:	00203a6d 	.word	0x00203a6d
   14d50:	202d2033 	.word	0x202d2033
   14d54:	706d6554 	.word	0x706d6554
   14d58:	72615720 	.word	0x72615720
   14d5c:	676e696e 	.word	0x676e696e
   14d60:	66664f20 	.word	0x66664f20
   14d64:	3a746573 	.word	0x3a746573
   14d68:	00000020 	.word	0x00000020
   14d6c:	202d2034 	.word	0x202d2034
   14d70:	70697254 	.word	0x70697254
   14d74:	6d695420 	.word	0x6d695420
   14d78:	203a2065 	.word	0x203a2065
   14d7c:	00000000 	.word	0x00000000
   14d80:	00536d20 	.word	0x00536d20
   14d84:	746e6f43 	.word	0x746e6f43
   14d88:	6f746361 	.word	0x6f746361
   14d8c:	6e612072 	.word	0x6e612072
   14d90:	61472064 	.word	0x61472064
   14d94:	20656775 	.word	0x20656775
   14d98:	74746553 	.word	0x74746553
   14d9c:	73676e69 	.word	0x73676e69
   14da0:	6e654d20 	.word	0x6e654d20
   14da4:	00000075 	.word	0x00000075
   14da8:	202d2031 	.word	0x202d2031
   14dac:	43657250 	.word	0x43657250
   14db0:	67726168 	.word	0x67726168
   14db4:	69542065 	.word	0x69542065
   14db8:	3a72656d 	.word	0x3a72656d
   14dbc:	00000020 	.word	0x00000020
   14dc0:	202d2032 	.word	0x202d2032
   14dc4:	43657250 	.word	0x43657250
   14dc8:	67726168 	.word	0x67726168
   14dcc:	69462065 	.word	0x69462065
   14dd0:	6873696e 	.word	0x6873696e
   14dd4:	72754320 	.word	0x72754320
   14dd8:	746e6572 	.word	0x746e6572
   14ddc:	0000203a 	.word	0x0000203a
   14de0:	202d2033 	.word	0x202d2033
   14de4:	204d5750 	.word	0x204d5750
   14de8:	746e6f63 	.word	0x746e6f63
   14dec:	6f746361 	.word	0x6f746361
   14df0:	6f482072 	.word	0x6f482072
   14df4:	3020646c 	.word	0x3020646c
   14df8:	3535322d 	.word	0x3535322d
   14dfc:	00003a20 	.word	0x00003a20
   14e00:	202d2034 	.word	0x202d2034
   14e04:	204d5750 	.word	0x204d5750
   14e08:	20726f66 	.word	0x20726f66
   14e0c:	67756147 	.word	0x67756147
   14e10:	6f4c2065 	.word	0x6f4c2065
   14e14:	2d302077 	.word	0x2d302077
   14e18:	20353532 	.word	0x20353532
   14e1c:	0000003a 	.word	0x0000003a
   14e20:	202d2035 	.word	0x202d2035
   14e24:	204d5750 	.word	0x204d5750
   14e28:	20726f66 	.word	0x20726f66
   14e2c:	67756147 	.word	0x67756147
   14e30:	69482065 	.word	0x69482065
   14e34:	30206867 	.word	0x30206867
   14e38:	3535322d 	.word	0x3535322d
   14e3c:	00003a20 	.word	0x00003a20
   14e40:	202d2036 	.word	0x202d2036
   14e44:	20535345 	.word	0x20535345
   14e48:	6e69614d 	.word	0x6e69614d
   14e4c:	6e6f4320 	.word	0x6e6f4320
   14e50:	74636174 	.word	0x74636174
   14e54:	6f20726f 	.word	0x6f20726f
   14e58:	72542072 	.word	0x72542072
   14e5c:	3a207069 	.word	0x3a207069
   14e60:	00000000 	.word	0x00000000
   14e64:	70697254 	.word	0x70697254
   14e68:	75685320 	.word	0x75685320
   14e6c:	0000746e 	.word	0x0000746e
   14e70:	6e69614d 	.word	0x6e69614d
   14e74:	6e6f4320 	.word	0x6e6f4320
   14e78:	74636174 	.word	0x74636174
   14e7c:	6120726f 	.word	0x6120726f
   14e80:	5020646e 	.word	0x5020646e
   14e84:	68636572 	.word	0x68636572
   14e88:	65677261 	.word	0x65677261
   14e8c:	00000000 	.word	0x00000000
   14e90:	202d2037 	.word	0x202d2037
   14e94:	65747845 	.word	0x65747845
   14e98:	6c616e72 	.word	0x6c616e72
   14e9c:	74614220 	.word	0x74614220
   14ea0:	79726574 	.word	0x79726574
   14ea4:	616e4520 	.word	0x616e4520
   14ea8:	3a656c62 	.word	0x3a656c62
   14eac:	00000020 	.word	0x00000020
   14eb0:	616e4520 	.word	0x616e4520
   14eb4:	20656c62 	.word	0x20656c62
   14eb8:	00326e49 	.word	0x00326e49
   14ebc:	6f747541 	.word	0x6f747541
   14ec0:	61745320 	.word	0x61745320
   14ec4:	00007472 	.word	0x00007472
   14ec8:	75626544 	.word	0x75626544
   14ecc:	65532067 	.word	0x65532067
   14ed0:	6e697474 	.word	0x6e697474
   14ed4:	4d207367 	.word	0x4d207367
   14ed8:	00756e65 	.word	0x00756e65
   14edc:	67676f54 	.word	0x67676f54
   14ee0:	6f20656c 	.word	0x6f20656c
   14ee4:	666f2f6e 	.word	0x666f2f6e
   14ee8:	00000066 	.word	0x00000066
   14eec:	202d2031 	.word	0x202d2031
   14ef0:	206e6143 	.word	0x206e6143
   14ef4:	75626544 	.word	0x75626544
   14ef8:	003a2067 	.word	0x003a2067
   14efc:	202d2032 	.word	0x202d2032
   14f00:	72727543 	.word	0x72727543
   14f04:	20746e65 	.word	0x20746e65
   14f08:	75626544 	.word	0x75626544
   14f0c:	003a2067 	.word	0x003a2067
   14f10:	202d2033 	.word	0x202d2033
   14f14:	7074754f 	.word	0x7074754f
   14f18:	43207475 	.word	0x43207475
   14f1c:	6b636568 	.word	0x6b636568
   14f20:	00003a20 	.word	0x00003a20
   14f24:	202d2034 	.word	0x202d2034
   14f28:	75706e49 	.word	0x75706e49
   14f2c:	68432074 	.word	0x68432074
   14f30:	206b6365 	.word	0x206b6365
   14f34:	0000003a 	.word	0x0000003a
   14f38:	202d2035 	.word	0x202d2035
   14f3c:	20535345 	.word	0x20535345
   14f40:	65646f6d 	.word	0x65646f6d
   14f44:	00003a20 	.word	0x00003a20
   14f48:	202d2036 	.word	0x202d2036
   14f4c:	6c6c6543 	.word	0x6c6c6543
   14f50:	72502073 	.word	0x72502073
   14f54:	6e657365 	.word	0x6e657365
   14f58:	65522074 	.word	0x65522074
   14f5c:	20746573 	.word	0x20746573
   14f60:	0000003a 	.word	0x0000003a
   14f64:	202d2037 	.word	0x202d2037
   14f68:	67756147 	.word	0x67756147
   14f6c:	65442065 	.word	0x65442065
   14f70:	20677562 	.word	0x20677562
   14f74:	0000003a 	.word	0x0000003a
   14f78:	202d2038 	.word	0x202d2038
   14f7c:	20565343 	.word	0x20565343
   14f80:	7074754f 	.word	0x7074754f
   14f84:	3a207475 	.word	0x3a207475
   14f88:	00000000 	.word	0x00000000
   14f8c:	202d2039 	.word	0x202d2039
   14f90:	69636544 	.word	0x69636544
   14f94:	206c616d 	.word	0x206c616d
   14f98:	63616c50 	.word	0x63616c50
   14f9c:	74207365 	.word	0x74207365
   14fa0:	6853206f 	.word	0x6853206f
   14fa4:	3a20776f 	.word	0x3a20776f
   14fa8:	00000000 	.word	0x00000000
   14fac:	202d2030 	.word	0x202d2030
   14fb0:	776f6853 	.word	0x776f6853
   14fb4:	6c614220 	.word	0x6c614220
   14fb8:	69636e61 	.word	0x69636e61
   14fbc:	5320676e 	.word	0x5320676e
   14fc0:	75746174 	.word	0x75746174
   14fc4:	003a2073 	.word	0x003a2073
   14fc8:	72727543 	.word	0x72727543
   14fcc:	20746e65 	.word	0x20746e65
   14fd0:	736e6553 	.word	0x736e6553
   14fd4:	4320726f 	.word	0x4320726f
   14fd8:	62696c61 	.word	0x62696c61
   14fdc:	69746172 	.word	0x69746172
   14fe0:	4d206e6f 	.word	0x4d206e6f
   14fe4:	00756e65 	.word	0x00756e65
   14fe8:	202d2063 	.word	0x202d2063
   14fec:	63206f54 	.word	0x63206f54
   14ff0:	62696c61 	.word	0x62696c61
   14ff4:	65746172 	.word	0x65746172
   14ff8:	6e657320 	.word	0x6e657320
   14ffc:	20726f73 	.word	0x20726f73
   15000:	7366666f 	.word	0x7366666f
   15004:	00007465 	.word	0x00007465
   15008:	202d2073 	.word	0x202d2073
   1500c:	72727543 	.word	0x72727543
   15010:	20746e65 	.word	0x20746e65
   15014:	736e6553 	.word	0x736e6553
   15018:	5420726f 	.word	0x5420726f
   1501c:	20657079 	.word	0x20657079
   15020:	0000203a 	.word	0x0000203a
   15024:	616e4120 	.word	0x616e4120
   15028:	75676f6c 	.word	0x75676f6c
   1502c:	75442065 	.word	0x75442065
   15030:	43206c61 	.word	0x43206c61
   15034:	65727275 	.word	0x65727275
   15038:	5320746e 	.word	0x5320746e
   1503c:	6f736e65 	.word	0x6f736e65
   15040:	00002072 	.word	0x00002072
   15044:	616e4120 	.word	0x616e4120
   15048:	75676f6c 	.word	0x75676f6c
   1504c:	69532065 	.word	0x69532065
   15050:	656c676e 	.word	0x656c676e
   15054:	72754320 	.word	0x72754320
   15058:	746e6572 	.word	0x746e6572
   1505c:	6e655320 	.word	0x6e655320
   15060:	20726f73 	.word	0x20726f73
   15064:	00000000 	.word	0x00000000
   15068:	6e614320 	.word	0x6e614320
   1506c:	20737562 	.word	0x20737562
   15070:	72727543 	.word	0x72727543
   15074:	20746e65 	.word	0x20746e65
   15078:	736e6553 	.word	0x736e6553
   1507c:	0020726f 	.word	0x0020726f
   15080:	65646e55 	.word	0x65646e55
   15084:	656e6966 	.word	0x656e6966
   15088:	00000064 	.word	0x00000064
   1508c:	202d2031 	.word	0x202d2031
   15090:	65766e69 	.word	0x65766e69
   15094:	63207472 	.word	0x63207472
   15098:	65727275 	.word	0x65727275
   1509c:	3a20746e 	.word	0x3a20746e
   150a0:	00000000 	.word	0x00000000
   150a4:	202d2032 	.word	0x202d2032
   150a8:	65727550 	.word	0x65727550
   150ac:	6c6f5620 	.word	0x6c6f5620
   150b0:	65676174 	.word	0x65676174
   150b4:	73616220 	.word	0x73616220
   150b8:	53206465 	.word	0x53206465
   150bc:	3a20434f 	.word	0x3a20434f
   150c0:	00000000 	.word	0x00000000
   150c4:	202d2033 	.word	0x202d2033
   150c8:	72727543 	.word	0x72727543
   150cc:	20746e65 	.word	0x20746e65
   150d0:	746c754d 	.word	0x746c754d
   150d4:	696c7069 	.word	0x696c7069
   150d8:	69746163 	.word	0x69746163
   150dc:	3a206e6f 	.word	0x3a206e6f
   150e0:	00000000 	.word	0x00000000
   150e4:	202d2034 	.word	0x202d2034
   150e8:	6c616e41 	.word	0x6c616e41
   150ec:	6575676f 	.word	0x6575676f
   150f0:	776f4c20 	.word	0x776f4c20
   150f4:	6e615220 	.word	0x6e615220
   150f8:	43206567 	.word	0x43206567
   150fc:	3a766e6f 	.word	0x3a766e6f
   15100:	00000000 	.word	0x00000000
   15104:	2f566d20 	.word	0x2f566d20
   15108:	00000041 	.word	0x00000041
   1510c:	202d2035 	.word	0x202d2035
   15110:	6c616e41 	.word	0x6c616e41
   15114:	6575676f 	.word	0x6575676f
   15118:	67694820 	.word	0x67694820
   1511c:	61522068 	.word	0x61522068
   15120:	2065676e 	.word	0x2065676e
   15124:	766e6f43 	.word	0x766e6f43
   15128:	0000003a 	.word	0x0000003a
   1512c:	202d2036 	.word	0x202d2036
   15130:	72727543 	.word	0x72727543
   15134:	20746e65 	.word	0x20746e65
   15138:	736e6553 	.word	0x736e6553
   1513c:	4420726f 	.word	0x4420726f
   15140:	62646165 	.word	0x62646165
   15144:	3a646e61 	.word	0x3a646e61
   15148:	00000000 	.word	0x00000000
   1514c:	00566d20 	.word	0x00566d20
   15150:	202d2038 	.word	0x202d2038
   15154:	72727543 	.word	0x72727543
   15158:	20746e65 	.word	0x20746e65
   1515c:	6e616843 	.word	0x6e616843
   15160:	206c656e 	.word	0x206c656e
   15164:	6e616843 	.word	0x6e616843
   15168:	764f6567 	.word	0x764f6567
   1516c:	003a7265 	.word	0x003a7265
   15170:	432d2037 	.word	0x432d2037
   15174:	43206e61 	.word	0x43206e61
   15178:	65727275 	.word	0x65727275
   1517c:	5320746e 	.word	0x5320746e
   15180:	6f736e65 	.word	0x6f736e65
   15184:	003a2072 	.word	0x003a2072
   15188:	4d454c20 	.word	0x4d454c20
   1518c:	42414320 	.word	0x42414320
   15190:	2f303033 	.word	0x2f303033
   15194:	20303035 	.word	0x20303035
   15198:	69726573 	.word	0x69726573
   1519c:	00207365 	.word	0x00207365
   151a0:	4d454c20 	.word	0x4d454c20
   151a4:	42414320 	.word	0x42414320
   151a8:	20303035 	.word	0x20303035
   151ac:	63657053 	.word	0x63657053
   151b0:	206c6169 	.word	0x206c6169
   151b4:	00000000 	.word	0x00000000
   151b8:	61734920 	.word	0x61734920
   151bc:	6c616353 	.word	0x6c616353
   151c0:	56492065 	.word	0x56492065
   151c4:	20532d54 	.word	0x20532d54
   151c8:	00000000 	.word	0x00000000
   151cc:	74746142 	.word	0x74746142
   151d0:	20797265 	.word	0x20797265
   151d4:	74746553 	.word	0x74746553
   151d8:	73676e69 	.word	0x73676e69
   151dc:	6e654d20 	.word	0x6e654d20
   151e0:	00000075 	.word	0x00000075
   151e4:	202d2072 	.word	0x202d2072
   151e8:	65736552 	.word	0x65736552
   151ec:	48412074 	.word	0x48412074
   151f0:	756f6320 	.word	0x756f6320
   151f4:	7265746e 	.word	0x7265746e
   151f8:	00000000 	.word	0x00000000
   151fc:	202d2066 	.word	0x202d2066
   15200:	65736552 	.word	0x65736552
   15204:	6f742074 	.word	0x6f742074
   15208:	646f4320 	.word	0x646f4320
   1520c:	53206465 	.word	0x53206465
   15210:	69747465 	.word	0x69747465
   15214:	0073676e 	.word	0x0073676e
   15218:	202d2031 	.word	0x202d2031
   1521c:	6c6c6543 	.word	0x6c6c6543
   15220:	65764f20 	.word	0x65764f20
   15224:	6f562072 	.word	0x6f562072
   15228:	6761746c 	.word	0x6761746c
   1522c:	65532065 	.word	0x65532065
   15230:	696f7074 	.word	0x696f7074
   15234:	203a746e 	.word	0x203a746e
   15238:	00000000 	.word	0x00000000
   1523c:	202d2032 	.word	0x202d2032
   15240:	6c6c6543 	.word	0x6c6c6543
   15244:	646e5520 	.word	0x646e5520
   15248:	56207265 	.word	0x56207265
   1524c:	61746c6f 	.word	0x61746c6f
   15250:	53206567 	.word	0x53206567
   15254:	6f707465 	.word	0x6f707465
   15258:	3a746e69 	.word	0x3a746e69
   1525c:	00000020 	.word	0x00000020
   15260:	202d2033 	.word	0x202d2033
   15264:	7265764f 	.word	0x7265764f
   15268:	6d655420 	.word	0x6d655420
   1526c:	61726570 	.word	0x61726570
   15270:	65727574 	.word	0x65727574
   15274:	74655320 	.word	0x74655320
   15278:	6e696f70 	.word	0x6e696f70
   1527c:	00203a74 	.word	0x00203a74
   15280:	202d2034 	.word	0x202d2034
   15284:	65646e55 	.word	0x65646e55
   15288:	65542072 	.word	0x65542072
   1528c:	7265706d 	.word	0x7265706d
   15290:	72757461 	.word	0x72757461
   15294:	65532065 	.word	0x65532065
   15298:	696f7074 	.word	0x696f7074
   1529c:	203a746e 	.word	0x203a746e
   152a0:	00000000 	.word	0x00000000
   152a4:	202d2035 	.word	0x202d2035
   152a8:	6c6c6543 	.word	0x6c6c6543
   152ac:	6c614220 	.word	0x6c614220
   152b0:	65636e61 	.word	0x65636e61
   152b4:	6c6f5620 	.word	0x6c6f5620
   152b8:	65676174 	.word	0x65676174
   152bc:	74655320 	.word	0x74655320
   152c0:	6e696f70 	.word	0x6e696f70
   152c4:	00203a74 	.word	0x00203a74
   152c8:	202d2036 	.word	0x202d2036
   152cc:	616c6142 	.word	0x616c6142
   152d0:	2065636e 	.word	0x2065636e
   152d4:	746c6f56 	.word	0x746c6f56
   152d8:	20656761 	.word	0x20656761
   152dc:	74737948 	.word	0x74737948
   152e0:	69737265 	.word	0x69737265
   152e4:	00203a73 	.word	0x00203a73
   152e8:	202d2037 	.word	0x202d2037
   152ec:	42206841 	.word	0x42206841
   152f0:	65747461 	.word	0x65747461
   152f4:	43207972 	.word	0x43207972
   152f8:	63617061 	.word	0x63617061
   152fc:	3a797469 	.word	0x3a797469
   15300:	00000020 	.word	0x00000020
   15304:	00006841 	.word	0x00006841
   15308:	202d2038 	.word	0x202d2038
   1530c:	6b636150 	.word	0x6b636150
   15310:	78614d20 	.word	0x78614d20
   15314:	73694420 	.word	0x73694420
   15318:	72616863 	.word	0x72616863
   1531c:	203a6567 	.word	0x203a6567
   15320:	00000000 	.word	0x00000000
   15324:	202d2039 	.word	0x202d2039
   15328:	6c6c6543 	.word	0x6c6c6543
   1532c:	73694420 	.word	0x73694420
   15330:	72616863 	.word	0x72616863
   15334:	56206567 	.word	0x56206567
   15338:	61746c6f 	.word	0x61746c6f
   1533c:	4c206567 	.word	0x4c206567
   15340:	74696d69 	.word	0x74696d69
   15344:	74655320 	.word	0x74655320
   15348:	6e696f70 	.word	0x6e696f70
   1534c:	00203a74 	.word	0x00203a74
   15350:	202d2030 	.word	0x202d2030
   15354:	76616c53 	.word	0x76616c53
   15358:	74732065 	.word	0x74732065
   1535c:	676e6972 	.word	0x676e6972
   15360:	6e692073 	.word	0x6e692073
   15364:	72617020 	.word	0x72617020
   15368:	656c6c61 	.word	0x656c6c61
   1536c:	00203a6c 	.word	0x00203a6c
   15370:	202d2061 	.word	0x202d2061
   15374:	6c6c6543 	.word	0x6c6c6543
   15378:	6e692073 	.word	0x6e692073
   1537c:	72655320 	.word	0x72655320
   15380:	20736569 	.word	0x20736569
   15384:	20726570 	.word	0x20726570
   15388:	69727453 	.word	0x69727453
   1538c:	203a676e 	.word	0x203a676e
   15390:	00000000 	.word	0x00000000
   15394:	202d2062 	.word	0x202d2062
   15398:	70746573 	.word	0x70746573
   1539c:	746e696f 	.word	0x746e696f
   153a0:	203a3120 	.word	0x203a3120
   153a4:	00000000 	.word	0x00000000
   153a8:	202d2063 	.word	0x202d2063
   153ac:	20434f53 	.word	0x20434f53
   153b0:	70746573 	.word	0x70746573
   153b4:	746e696f 	.word	0x746e696f
   153b8:	003a3120 	.word	0x003a3120
   153bc:	00000025 	.word	0x00000025
   153c0:	202d2064 	.word	0x202d2064
   153c4:	70746573 	.word	0x70746573
   153c8:	746e696f 	.word	0x746e696f
   153cc:	203a3220 	.word	0x203a3220
   153d0:	00000000 	.word	0x00000000
   153d4:	202d2065 	.word	0x202d2065
   153d8:	20434f53 	.word	0x20434f53
   153dc:	70746573 	.word	0x70746573
   153e0:	746e696f 	.word	0x746e696f
   153e4:	203a3220 	.word	0x203a3220
   153e8:	00000000 	.word	0x00000000
   153ec:	202d2067 	.word	0x202d2067
   153f0:	726f7453 	.word	0x726f7453
   153f4:	20656761 	.word	0x20656761
   153f8:	70746553 	.word	0x70746553
   153fc:	746e696f 	.word	0x746e696f
   15400:	0000203a 	.word	0x0000203a
   15404:	202d2068 	.word	0x202d2068
   15408:	63736944 	.word	0x63736944
   1540c:	67726168 	.word	0x67726168
   15410:	75432065 	.word	0x75432065
   15414:	6e657272 	.word	0x6e657272
   15418:	61542074 	.word	0x61542074
   1541c:	20726570 	.word	0x20726570
   15420:	7366664f 	.word	0x7366664f
   15424:	203a7465 	.word	0x203a7465
   15428:	00000000 	.word	0x00000000
   1542c:	202d206a 	.word	0x202d206a
   15430:	63736944 	.word	0x63736944
   15434:	67726168 	.word	0x67726168
   15438:	75432065 	.word	0x75432065
   1543c:	6e657272 	.word	0x6e657272
   15440:	65542074 	.word	0x65542074
   15444:	7265706d 	.word	0x7265706d
   15448:	72757461 	.word	0x72757461
   1544c:	65442065 	.word	0x65442065
   15450:	65746172 	.word	0x65746172
   15454:	00203a20 	.word	0x00203a20
   15458:	202d206b 	.word	0x202d206b
   1545c:	6c6c6543 	.word	0x6c6c6543
   15460:	73694420 	.word	0x73694420
   15464:	72616863 	.word	0x72616863
   15468:	56206567 	.word	0x56206567
   1546c:	61746c6f 	.word	0x61746c6f
   15470:	48206567 	.word	0x48206567
   15474:	65747379 	.word	0x65747379
   15478:	69736572 	.word	0x69736572
   1547c:	00203a73 	.word	0x00203a73
   15480:	554e454d 	.word	0x554e454d
   15484:	00000000 	.word	0x00000000
   15488:	75626544 	.word	0x75626544
   1548c:	6e696767 	.word	0x6e696767
   15490:	61502067 	.word	0x61502067
   15494:	64657375 	.word	0x64657375
   15498:	00000000 	.word	0x00000000
   1549c:	6d726946 	.word	0x6d726946
   154a0:	65726177 	.word	0x65726177
   154a4:	72655620 	.word	0x72655620
   154a8:	6e6f6973 	.word	0x6e6f6973
   154ac:	00203a20 	.word	0x00203a20
   154b0:	202d2062 	.word	0x202d2062
   154b4:	74746142 	.word	0x74746142
   154b8:	20797265 	.word	0x20797265
   154bc:	74746553 	.word	0x74746553
   154c0:	73676e69 	.word	0x73676e69
   154c4:	00000000 	.word	0x00000000
   154c8:	202d2061 	.word	0x202d2061
   154cc:	72616c41 	.word	0x72616c41
   154d0:	6e61206d 	.word	0x6e61206d
   154d4:	61572064 	.word	0x61572064
   154d8:	6e696e72 	.word	0x6e696e72
   154dc:	65532067 	.word	0x65532067
   154e0:	6e697474 	.word	0x6e697474
   154e4:	00007367 	.word	0x00007367
   154e8:	202d2065 	.word	0x202d2065
   154ec:	72616843 	.word	0x72616843
   154f0:	676e6967 	.word	0x676e6967
   154f4:	74655320 	.word	0x74655320
   154f8:	676e6974 	.word	0x676e6974
   154fc:	00000073 	.word	0x00000073
   15500:	202d2063 	.word	0x202d2063
   15504:	72727543 	.word	0x72727543
   15508:	20746e65 	.word	0x20746e65
   1550c:	736e6553 	.word	0x736e6553
   15510:	4320726f 	.word	0x4320726f
   15514:	62696c61 	.word	0x62696c61
   15518:	69746172 	.word	0x69746172
   1551c:	00006e6f 	.word	0x00006e6f
   15520:	202d206b 	.word	0x202d206b
   15524:	746e6f43 	.word	0x746e6f43
   15528:	6f746361 	.word	0x6f746361
   1552c:	6e612072 	.word	0x6e612072
   15530:	61472064 	.word	0x61472064
   15534:	20656775 	.word	0x20656775
   15538:	74746553 	.word	0x74746553
   1553c:	73676e69 	.word	0x73676e69
   15540:	00000000 	.word	0x00000000
   15544:	202d2069 	.word	0x202d2069
   15548:	6f6e6749 	.word	0x6f6e6749
   1554c:	56206572 	.word	0x56206572
   15550:	65756c61 	.word	0x65756c61
   15554:	74655320 	.word	0x74655320
   15558:	676e6974 	.word	0x676e6974
   1555c:	00000073 	.word	0x00000073
   15560:	202d2064 	.word	0x202d2064
   15564:	75626544 	.word	0x75626544
   15568:	65532067 	.word	0x65532067
   1556c:	6e697474 	.word	0x6e697474
   15570:	00007367 	.word	0x00007367
   15574:	202d2078 	.word	0x202d2078
   15578:	61707845 	.word	0x61707845
   1557c:	6f69736e 	.word	0x6f69736e
   15580:	6553206e 	.word	0x6553206e
   15584:	6e697474 	.word	0x6e697474
   15588:	00007367 	.word	0x00007367
   1558c:	202d2052 	.word	0x202d2052
   15590:	74736552 	.word	0x74736552
   15594:	20747261 	.word	0x20747261
   15598:	00534d42 	.word	0x00534d42
   1559c:	202d2071 	.word	0x202d2071
   155a0:	74697865 	.word	0x74697865
   155a4:	6e656d20 	.word	0x6e656d20
   155a8:	ffff0075 	.word	0xffff0075
   155ac:	0020416d 	.word	0x0020416d
   155b0:	75706e49 	.word	0x75706e49
   155b4:	00203a74 	.word	0x00203a74
   155b8:	4e4f2031 	.word	0x4e4f2031
   155bc:	00002020 	.word	0x00002020
   155c0:	464f2031 	.word	0x464f2031
   155c4:	00002046 	.word	0x00002046
   155c8:	4e4f2032 	.word	0x4e4f2032
   155cc:	00002020 	.word	0x00002020
   155d0:	464f2032 	.word	0x464f2032
   155d4:	00002046 	.word	0x00002046
   155d8:	4e4f2033 	.word	0x4e4f2033
   155dc:	00002020 	.word	0x00002020
   155e0:	464f2033 	.word	0x464f2033
   155e4:	00002046 	.word	0x00002046
   155e8:	4e4f2034 	.word	0x4e4f2034
   155ec:	00002020 	.word	0x00002020
   155f0:	464f2034 	.word	0x464f2034
   155f4:	ff002046 	.word	0xff002046
   155f8:	74617473 	.word	0x74617473
   155fc:	7478742e 	.word	0x7478742e
   15600:	0000003d 	.word	0x0000003d
   15604:	74634120 	.word	0x74634120
   15608:	20657669 	.word	0x20657669
   1560c:	00000000 	.word	0x00000000
   15610:	2e636f73 	.word	0x2e636f73
   15614:	3d6c6176 	.word	0x3d6c6176
   15618:	00000000 	.word	0x00000000
   1561c:	31636f73 	.word	0x31636f73
   15620:	6c61762e 	.word	0x6c61762e
   15624:	0000003d 	.word	0x0000003d
   15628:	72727563 	.word	0x72727563
   1562c:	2e746e65 	.word	0x2e746e65
   15630:	3d6c6176 	.word	0x3d6c6176
   15634:	00000000 	.word	0x00000000
   15638:	706d6574 	.word	0x706d6574
   1563c:	6c61762e 	.word	0x6c61762e
   15640:	0000003d 	.word	0x0000003d
   15644:	706d6574 	.word	0x706d6574
   15648:	2e776f6c 	.word	0x2e776f6c
   1564c:	3d6c6176 	.word	0x3d6c6176
   15650:	00000000 	.word	0x00000000
   15654:	706d6574 	.word	0x706d6574
   15658:	68676968 	.word	0x68676968
   1565c:	6c61762e 	.word	0x6c61762e
   15660:	0000003d 	.word	0x0000003d
   15664:	746c6f76 	.word	0x746c6f76
   15668:	6c61762e 	.word	0x6c61762e
   1566c:	0000003d 	.word	0x0000003d
   15670:	63776f6c 	.word	0x63776f6c
   15674:	2e6c6c65 	.word	0x2e6c6c65
   15678:	3d6c6176 	.word	0x3d6c6176
   1567c:	00000000 	.word	0x00000000
   15680:	68676968 	.word	0x68676968
   15684:	6c6c6563 	.word	0x6c6c6563
   15688:	6c61762e 	.word	0x6c61762e
   1568c:	0000003d 	.word	0x0000003d
   15690:	6d726966 	.word	0x6d726966
   15694:	6c61762e 	.word	0x6c61762e
   15698:	0000003d 	.word	0x0000003d
   1569c:	6c6c6563 	.word	0x6c6c6563
   156a0:	746c6564 	.word	0x746c6564
   156a4:	61762e61 	.word	0x61762e61
   156a8:	ff003d6c 	.word	0xff003d6c
   156ac:	65747845 	.word	0x65747845
   156b0:	6465646e 	.word	0x6465646e
   156b4:	3a444920 	.word	0x3a444920
   156b8:	25783020 	.word	0x25783020
   156bc:	586c382e 	.word	0x586c382e
   156c0:	4c442020 	.word	0x4c442020
   156c4:	25203a43 	.word	0x25203a43
   156c8:	20206431 	.word	0x20206431
   156cc:	61746144 	.word	0x61746144
   156d0:	0000003a 	.word	0x0000003a
   156d4:	2578302c 	.word	0x2578302c
   156d8:	586c332e 	.word	0x586c332e
   156dc:	6c61662c 	.word	0x6c61662c
   156e0:	252c6573 	.word	0x252c6573
   156e4:	00006431 	.word	0x00006431
   156e8:	4d455220 	.word	0x4d455220
   156ec:	2045544f 	.word	0x2045544f
   156f0:	55514552 	.word	0x55514552
   156f4:	20545345 	.word	0x20545345
   156f8:	4d415246 	.word	0x4d415246
   156fc:	00000045 	.word	0x00000045
   15700:	7830202c 	.word	0x7830202c
   15704:	58322e25 	.word	0x58322e25
   15708:	ffffff00 	.word	0xffffff00
   1570c:	63657250 	.word	0x63657250
   15710:	67726168 	.word	0x67726168
   15714:	21212165 	.word	0x21212165
   15718:	00000000 	.word	0x00000000
   1571c:	6e69614d 	.word	0x6e69614d
   15720:	216e4f20 	.word	0x216e4f20
   15724:	00002121 	.word	0x00002121
   15728:	7265764f 	.word	0x7265764f
   1572c:	6c6f5620 	.word	0x6c6f5620
   15730:	65676174 	.word	0x65676174
   15734:	69725420 	.word	0x69725420
   15738:	00000070 	.word	0x00000070
   1573c:	65736552 	.word	0x65736552
   15740:	764f2074 	.word	0x764f2074
   15744:	56207265 	.word	0x56207265
   15748:	61746c6f 	.word	0x61746c6f
   1574c:	54206567 	.word	0x54206567
   15750:	20706972 	.word	0x20706972
   15754:	20746f4e 	.word	0x20746f4e
   15758:	72616843 	.word	0x72616843
   1575c:	00646567 	.word	0x00646567
   15760:	65646e55 	.word	0x65646e55
   15764:	6f562072 	.word	0x6f562072
   15768:	6761746c 	.word	0x6761746c
   1576c:	72542065 	.word	0x72542065
   15770:	00007069 	.word	0x00007069
   15774:	65736552 	.word	0x65736552
   15778:	6e552074 	.word	0x6e552074
   1577c:	20726564 	.word	0x20726564
   15780:	746c6f56 	.word	0x746c6f56
   15784:	20656761 	.word	0x20656761
   15788:	70697254 	.word	0x70697254
   1578c:	00000000 	.word	0x00000000
   15790:	21202020 	.word	0x21202020
   15794:	55202121 	.word	0x55202121
   15798:	7265646e 	.word	0x7265646e
   1579c:	746c6f76 	.word	0x746c6f76
   157a0:	20656761 	.word	0x20656761
   157a4:	6c756146 	.word	0x6c756146
   157a8:	21212074 	.word	0x21212074
   157ac:	00002021 	.word	0x00002021
   157b0:	21202020 	.word	0x21202020
   157b4:	53202121 	.word	0x53202121
   157b8:	65697265 	.word	0x65697265
   157bc:	65432073 	.word	0x65432073
   157c0:	20736c6c 	.word	0x20736c6c
   157c4:	6c756146 	.word	0x6c756146
   157c8:	21212074 	.word	0x21212074
   157cc:	00000021 	.word	0x00000021
   157d0:	21202020 	.word	0x21202020
   157d4:	4d202121 	.word	0x4d202121
   157d8:	4c55444f 	.word	0x4c55444f
   157dc:	494d2045 	.word	0x494d2045
   157e0:	4e495353 	.word	0x4e495353
   157e4:	21212047 	.word	0x21212047
   157e8:	ffff0021 	.word	0xffff0021
   157ec:	72617453 	.word	0x72617453
   157f0:	676e6974 	.word	0x676e6974
   157f4:	21707520 	.word	0x21707520
   157f8:	00000000 	.word	0x00000000
   157fc:	706d6953 	.word	0x706d6953
   15800:	20534d42 	.word	0x20534d42
   15804:	4f203256 	.word	0x4f203256
   15808:	616c7475 	.word	0x616c7475
   1580c:	7265646e 	.word	0x7265646e
   15810:	00000000 	.word	0x00000000
   15814:	73616552 	.word	0x73616552
   15818:	66206e6f 	.word	0x66206e6f
   1581c:	6c20726f 	.word	0x6c20726f
   15820:	20747361 	.word	0x20747361
   15824:	65736552 	.word	0x65736552
   15828:	00203a74 	.word	0x00203a74
   1582c:	706f7453 	.word	0x706f7453
   15830:	646f4d20 	.word	0x646f4d20
   15834:	63412065 	.word	0x63412065
   15838:	776f6e6b 	.word	0x776f6e6b
   1583c:	6764656c 	.word	0x6764656c
   15840:	72452065 	.word	0x72452065
   15844:	20726f72 	.word	0x20726f72
   15848:	65736552 	.word	0x65736552
   1584c:	00000074 	.word	0x00000074
   15850:	2d4d444d 	.word	0x2d4d444d
   15854:	52205041 	.word	0x52205041
   15858:	74657365 	.word	0x74657365
   1585c:	00000000 	.word	0x00000000
   15860:	74666f53 	.word	0x74666f53
   15864:	65726177 	.word	0x65726177
   15868:	73655220 	.word	0x73655220
   1586c:	00007465 	.word	0x00007465
   15870:	65726f43 	.word	0x65726f43
   15874:	636f4c20 	.word	0x636f4c20
   15878:	2070756b 	.word	0x2070756b
   1587c:	6e657645 	.word	0x6e657645
   15880:	65522074 	.word	0x65522074
   15884:	00746573 	.word	0x00746573
   15888:	65776f50 	.word	0x65776f50
   1588c:	6e6f2d72 	.word	0x6e6f2d72
   15890:	73655220 	.word	0x73655220
   15894:	00007465 	.word	0x00007465
   15898:	65747845 	.word	0x65747845
   1589c:	6c616e72 	.word	0x6c616e72
   158a0:	6e695020 	.word	0x6e695020
   158a4:	73655220 	.word	0x73655220
   158a8:	00007465 	.word	0x00007465
   158ac:	63746157 	.word	0x63746157
   158b0:	676f6468 	.word	0x676f6468
   158b4:	504f4328 	.word	0x504f4328
   158b8:	65522029 	.word	0x65522029
   158bc:	00746573 	.word	0x00746573
   158c0:	73736f4c 	.word	0x73736f4c
   158c4:	20666f20 	.word	0x20666f20
   158c8:	65747845 	.word	0x65747845
   158cc:	6c616e72 	.word	0x6c616e72
   158d0:	6f6c4320 	.word	0x6f6c4320
   158d4:	52206b63 	.word	0x52206b63
   158d8:	74657365 	.word	0x74657365
   158dc:	00000000 	.word	0x00000000
   158e0:	73736f4c 	.word	0x73736f4c
   158e4:	20666f20 	.word	0x20666f20
   158e8:	6b636f4c 	.word	0x6b636f4c
   158ec:	206e6920 	.word	0x206e6920
   158f0:	204c4c50 	.word	0x204c4c50
   158f4:	65736552 	.word	0x65736552
   158f8:	00000074 	.word	0x00000074
   158fc:	2d776f4c 	.word	0x2d776f4c
   15900:	746c6f76 	.word	0x746c6f76
   15904:	20656761 	.word	0x20656761
   15908:	65746544 	.word	0x65746544
   1590c:	52207463 	.word	0x52207463
   15910:	74657365 	.word	0x74657365
   15914:	00000000 	.word	0x00000000
   15918:	72617453 	.word	0x72617453
   1591c:	20646574 	.word	0x20646574
   15920:	69726573 	.word	0x69726573
   15924:	69206c61 	.word	0x69206c61
   15928:	7265746e 	.word	0x7265746e
   1592c:	65636166 	.word	0x65636166
   15930:	206f7420 	.word	0x206f7420
   15934:	2e534d42 	.word	0x2e534d42
   15938:	ffffff00 	.word	0xffffff00
   1593c:	726f6241 	.word	0x726f6241
   15940:	6e692074 	.word	0x6e692074
   15944:	4e414320 	.word	0x4e414320
   15948:	67656220 	.word	0x67656220
   1594c:	202e6e69 	.word	0x202e6e69
   15950:	6c756f43 	.word	0x6c756f43
   15954:	74276e64 	.word	0x74276e64
   15958:	6e696620 	.word	0x6e696620
   1595c:	20612064 	.word	0x20612064
   15960:	74697573 	.word	0x74697573
   15964:	656c6261 	.word	0x656c6261
   15968:	75616220 	.word	0x75616220
   1596c:	6f632064 	.word	0x6f632064
   15970:	6769666e 	.word	0x6769666e
   15974:	ffff0021 	.word	0xffff0021

00015978 <ADC::diff_table_ADC0>:
   15978:	03248022                                ".$.

0001597c <ADC::diff_table_ADC1>:
   1597c:	80240322                                ".$.

00015980 <ADC::channel2sc1aADC0>:
   15980:	09080e05 07060c0d 1300040f 0e051f03     ................
   15990:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   159a0:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

000159ac <ADC::channel2sc1aADC1>:
   159ac:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   159bc:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   159cc:	5f431f1f 121a5340 1e1d1b1f              ..C_@S......

000159d8 <SPIClass::spi0_hardware>:
   159d8:	4004803c 00001000 00001a04 00007fff     <..@............
   159e8:	00001011 0000961d 0000080c 00000200     ................
   159f8:	00000200 0000070b 00000240 00000200     ........@.......
   15a08:	00000e0d 00000240 00000200 0609020a     ....@...........
   15a18:	16151714 0000000f 00000200 00000200     ................
   15a28:	00000200 00000200 00000200 00000200     ................
   15a38:	00000200 00000200 00000200 02020101     ................
   15a48:	08080404 00000010                       ........

00015a50 <_serialEvent_default>:
   15a50:	ffffff00                                ....

00015a54 <vtable for HardwareSerial2>:
	...
   15a5c:	000098f5 00009919 000099a9 000099a5     ................
   15a6c:	000099a1 0000999d 00009999 000098bd     ................
   15a7c:	00009979 00009975 0000996d 00009965     y...u...m...e...
   15a8c:	0000995d 0000994d 0000993d 00009939     ]...M...=...9...
   15a9c:	00009931 00009929 000099cd 000099ed     1...)...........
   15aac:	00009a0d 000099ad 00009901 000098e9     ................

00015abc <vtable for HardwareSerial3>:
	...
   15ac4:	00009a65 00009a89 00009b19 00009b15     e...............
   15ad4:	00009b11 00009b0d 00009b09 00009a2d     ............-...
   15ae4:	00009ae9 00009ae5 00009add 00009ad5     ................
   15af4:	00009acd 00009abd 00009aad 00009aa9     ................
   15b04:	00009aa1 00009a99 00009b3d 00009b5d     ........=...]...
   15b14:	00009b7d 00009b1d 00009a71 00009a59     }.......q...Y...
   15b24:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   15b34:	78037003 0f80f013 4770d0fb              .p.x......pG

00015b40 <digital_pin_to_info_PGM>:
   15b40:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   15b50:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   15b60:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   15b70:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   15b80:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   15b90:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   15ba0:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   15bb0:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   15bc0:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   15bd0:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   15be0:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   15bf0:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   15c00:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   15c10:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   15c20:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   15c30:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   15c40:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

00015c50 <vtable for usb_serial_class>:
	...
   15c58:	0000c59d 0000c595 0000c591 0000c58d     ................
   15c68:	0000c589 0000c585 0000c581 0000c57d     ............}...

00015c78 <usb_descriptor_list>:
   15c78:	00000100 1fff8880 00000012 00000200     ................
   15c88:	1fff883c 00000043 00000300 1fff8894     <...C...........
   15c98:	00000000 04090301 1fff8898 00000000     ................
   15ca8:	04090302 1fff88b0 00000000 04090303     ................
   15cb8:	1fff88c8 00000000 00000000 00000000     ................
   15cc8:	00000000                                ....

00015ccc <usb_endpoint_config_table>:
   15ccc:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   15cdc:	bf317180 3717f7d1 b717f7d1              .q1....7....

00015ce8 <_ctype_>:
   15ce8:	20202000 20202020 28282020 20282828     .         ((((( 
   15cf8:	20202020 20202020 20202020 20202020                     
   15d08:	10108820 10101010 10101010 10101010      ...............
   15d18:	04040410 04040404 10040404 10101010     ................
   15d28:	41411010 41414141 01010101 01010101     ..AAAAAA........
   15d38:	01010101 01010101 01010101 10101010     ................
   15d48:	42421010 42424242 02020202 02020202     ..BBBBBB........
   15d58:	02020202 02020202 02020202 10101010     ................
   15d68:	00000020 00000000 00000000 00000000      ...............
	...
   15de8:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   15df8:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   15e08:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   15e18:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   15e28:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   15e38:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   15e48:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   15e58:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   15e68:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   15e78:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   15e88:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   15e98:	2e636572 ffff0063                       rec.c...

00015ea0 <__mprec_bigtens>:
   15ea0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   15eb0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   15ec0:	7f73bf3c 75154fdd                       <.s..O.u

00015ec8 <__mprec_tens>:
   15ec8:	00000000 3ff00000 00000000 40240000     .......?......$@
   15ed8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   15ee8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   15ef8:	00000000 412e8480 00000000 416312d0     .......A......cA
   15f08:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   15f18:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   15f28:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   15f38:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   15f48:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   15f58:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   15f68:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   15f78:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   15f88:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   15f98:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   15fa8:	37363534 62613938 66656463 00000000     456789abcdef....
   15fb8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   15fc8:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   15fd8:	20202020 20202020 20202020 30303030                 0000
   15fe8:	30303030 30303030 30303030 7566202c     000000000000, fu
   15ff8:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   16008:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   16018:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   16028:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   16038:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   16048:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   16058:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   16068:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   16078:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   16088:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   16098:	632e616f ffffff00 20202020 20202020     oa.c....        
   160a8:	20202020 20202020 30303030 30303030             00000000
   160b8:	30303030 30303030                       00000000

000160c0 <_init>:
   160c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160c2:	bf00      	nop
   160c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   160c6:	bc08      	pop	{r3}
   160c8:	469e      	mov	lr, r3
   160ca:	4770      	bx	lr

000160cc <__init_array_start>:
   160cc:	0000e9a5 	.word	0x0000e9a5

000160d0 <__frame_dummy_init_array_entry>:
   160d0:	00000435 00007eed 00008eb5 0000962d     5....~......-...

Disassembly of section .fini:

000160e0 <_fini>:
   160e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160e2:	bf00      	nop
